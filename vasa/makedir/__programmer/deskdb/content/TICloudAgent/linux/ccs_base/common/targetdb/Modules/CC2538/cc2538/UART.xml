<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was autogenerated by Socrates Bitwise, Duolog Technologies Ltd. -->
<module id="UART" HW_revision="" XML_version="1.0" description="Register fields should be considered static unless otherwise noted as dynamic." xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="setup_parser.xsd">
    <register acronym="DR" width="32" description="UART data
Important: This register is read-sensitive. See the register description for details.
This register is the data register (the interface to the FIFOs).
For transmitted data, if the FIFO is enabled, data written to this location is pushed onto the transmit FIFO. If the FIFO is disabled, data is stored in the transmitter holding register (the bottom word of the transmit FIFO). A write to this register initiates a transmission from the UART.
For received data, if the FIFO is enabled, the data byte and the 4-bit status (break, frame, parity, and overrun) is pushed onto the 12-bit wide receive FIFO. If the FIFO is disabled, the data byte and status are stored in the receiving holding register (the bottom word of the receive FIFO). The received data can be retrieved by reading this register." id="DR" offset="0x0" >
        <bitfield range="" begin="31" width="20" end="12" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved20" resetval="" >
        </bitfield>
        <bitfield range="" begin="11" width="1" end="11" rwaccess="RO" description="UART overrun error
1: New data was received when the FIFO was full, resulting in data loss.
0: No data has been lost due to a FIFO overrun." id="OE" resetval="" >
        </bitfield>
        <bitfield range="" begin="10" width="1" end="10" rwaccess="RO" description="UART break error
1: A break condition has been detected, indicating that the receive data input was held low for longer than a full-word transmission time (defined as start, data, parity, and stop bits).
0: No break condition has occurred.
In FIFO mode, this error is associated with the character at the top of the FIFO. When a break occurs, only the one 0 character is loaded into the FIFO. The next character is only enabled after the received data input goes to a 1 (marking state), and the next valid start bit is received." id="BE" resetval="" >
        </bitfield>
        <bitfield range="" begin="9" width="1" end="9" rwaccess="RO" description="UART parity error
1: The parity of the received data character does not match the parity defined by bits 2 and 7 of the UARTLCRH register
0: No parity error has occurred.
In FIFO mode, this error is associated with the character at the top of the FIFO." id="PE" resetval="" >
        </bitfield>
        <bitfield range="" begin="8" width="1" end="8" rwaccess="RO" description="UART framing error
1: The received character does not have a valid stop bit (a valid stop bit is 1).
0: No framing error has occurred." id="FE" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="8" end="0" rwaccess="RW" description="Data transmitted or received
Data that is to be transmitted via the UART is written to this field.
When read, this field contains the data that was received by the UART." id="DATA" resetval="" >
        </bitfield>
    </register>
    <register acronym="RSR" width="32" description="UART receive status and error clear
The RSR/ECR register is the receive status register and error clear register.
In addition to the DR register, receive status can also be read from the RSR register. If the status is read from this register, then the status information corresponds to the entry read from DR before reading RSR. The status information for overrun is set immediately when an overrun condition occurs.
The RSR register cannot be written.
Read-only status register" id="RSR" offset="0x4" >
        <bitfield range="" begin="31" width="28" end="4" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved28" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="1" end="3" rwaccess="RO" description="UART overrun error
1: New data was received when the FIFO was full, resulting in data loss.
0: No data has been lost due to a FIFO overrun.
This bit is cleared by a write to UARTECR.
The FIFO contents remain valid because no further data is written when the FIFO is full, only the contents of the shift register are overwritten. The CPU must read the data in order to empty the FIFO." id="OE" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="1" end="2" rwaccess="RO" description="UART break error
1: A break condition has been detected, indicating that the receive data input was held low for longer than a full-word transmission time (defined as start, data, parity, and stop bits).
0: No break condition has occurred.
This bit is cleared to 0 by a write to UARTECR.
In FIFO mode, this error is associated with the character at the top of the FIFO. When a break occurs, only one 0 character is loaded into the FIFO. The next character is only enabled after the receive data input goes to a 1 (marking state) and the next valid start bit is received." id="BE" resetval="" >
        </bitfield>
        <bitfield range="" begin="1" width="1" end="1" rwaccess="RO" description="UART parity error
1: The parity of the received data character does not match the parity defined by bits 2 and 7 of the UARTLCRH register.
0: No parity error has occurred.
This bit is cleared to 0 by a write to UARTECR." id="PE" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RO" description="UART framing error
1: The received character does not have a valid stop bit (a valid stop bit is 1).
0: No framing error has occurred.
This bit is cleared to 0 by a write to UARTECR.
In FIFO mode, this error is associated with the character at the top of the FIFO." id="FE" resetval="" >
        </bitfield>
    </register>
    <register acronym="ECR" width="32" description="UART receive status and error clear
The RSR/ECR register is the receive status register/error clear register.
A write of any value to the ECR register clears the framing, parity, break, and overrun errors. All the bits are cleared on reset.
Write-only error clear register" id="ECR" offset="0x4" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="WO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved24" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="8" end="0" rwaccess="WO" description="Error clear
A write to this register of any data clears the framing, parity, break, and overrun flags." id="DATA" resetval="" >
        </bitfield>
    </register>
    <register acronym="FR" width="32" description="UART flag
The FR register is the flag register. After reset, the TXFF, RXFF, and BUSY bits are 0, and TXFE and RXFE bits are 1. The CTS bit indicate the modem flow control. Note that the modem bits are only implemented on UART1 and are tied inactive on UART0. Due to this difference, the reset state of the UART0 FR register is 0x90, while UART1 FR register reset state 0x197 ." id="FR" offset="0x18" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved24" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="1" end="7" rwaccess="RO" description="UART transmit FIFO empty
The meaning of this bit depends on the state of the FEN bit in the UARTLCRH register.
1: If the FIFO is disabled (FEN is 0), the transmit holding register is empty. If the FIFO is enabled (FEN is 1), the transmit FIFO is empty.
0: The transmitter has data to transmit." id="TXFE" resetval="" >
        </bitfield>
        <bitfield range="" begin="6" width="1" end="6" rwaccess="RO" description="UART receive FIFO full
The meaning of this bit depends on the state of the FEN bit in the UARTLCRH register.
1: If the FIFO is disabled (FEN is 0), the receive holding register is full. If the FIFO is enabled (FEN is 1), the receive FIFO is full.
0: The receiver can receive data." id="RXFF" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="1" end="5" rwaccess="RO" description="UART transmit FIFO full
The meaning of this bit depends on the state of the FEN bit in the UARTLCRH register.
1: If the FIFO is disabled (FEN is 0), the transmit holding register is full. If the FIFO is enabled (FEN is 1), the transmit FIFO is full.
0: The transmitter is not full." id="TXFF" resetval="" >
        </bitfield>
        <bitfield range="" begin="4" width="1" end="4" rwaccess="RO" description="UART receive FIFO empty
The meaning of this bit depends on the state of the FEN bit in the UARTLCRH register.
1: If the FIFO is disabled (FEN is 0), the receive holding register is empty. If the FIFO is enabled (FEN is 1), the receive FIFO is empty.
0: The receiver is not empty." id="RXFE" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="1" end="3" rwaccess="RO" description="UART busy
1: The UART is busy transmitting data. This bit remains set until the complete byte, including all stop bits, has been sent from the shift register.
0: The UART is not busy.
This bit is set as soon as the transmit FIFO becomes non-empty (regardless of whether UART is enabled)." id="BUSY" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="2" end="1" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved2" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RO" description="Clear to send (UART1 only, reserved for UART0).
1: The U1CTS signal is asserted.
0: The U1CTS signal is not asserted." id="CTS" resetval="" >
        </bitfield>
    </register>
    <register acronym="ILPR" width="32" description="UART IrDA low-power register
The ILPR register stores the 8-bit low-power counter divisor value used to derive the low-power SIR pulse width clock by dividing down the system clock (SysClk). All the bits are cleared when reset.
The internal IrLPBaud16 clock is generated by dividing down SysClk according to the low-power divisor value written to ILPR. The duration of SIR pulses generated when low-power mode is enabled is three times the period of the IrLPBaud16 clock. The low-power divisor value is calculated as follows:
ILPDVSR = SysClk / FIrLPBaud16
where FIrLPBaud16 is nominally 1.8432 MHz
The divisor must be programmed such that FIrLPBaud16 is in the range 1.42 MHz to 2.12 MHz, resulting in a low-power pulse duration of 1.41-2.11 us (three times the period of IrLPBaud16). The minimum
frequency of IrLPBaud16 ensures that pulses less than one period of IrLPBaud16 are rejected, but pulses greater than 1.4 us are accepted as valid pulses.
Note: Zero is an illegal value. Programming a zero value results in no IrLPBaud16 pulses being generated." id="ILPR" offset="0x20" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved24" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="8" end="0" rwaccess="RW" description="IrDA low-power divisor
This field contains the 8-bit low-power divisor value." id="ILPDVSR" resetval="" >
        </bitfield>
    </register>
    <register acronym="IBRD" width="32" description="UART integer baud-rate divisor
The IBRD register is the integer part of the baud-rate divisor value. All the bits are cleared on reset. The minimum possible divide ratio is 1 (when IBRD = 0), in which case the FBRD register is ignored. When changing the IBRD register, the new value does not take effect until transmission or reception of the current character is complete. Any changes to the baud-rate divisor must be followed by a write to the LCRH register. " id="IBRD" offset="0x24" >
        <bitfield range="" begin="31" width="16" end="16" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved16" resetval="" >
        </bitfield>
        <bitfield range="" begin="15" width="16" end="0" rwaccess="RW" description="Integer baud-rate divisor" id="DIVINT" resetval="" >
        </bitfield>
    </register>
    <register acronym="FBRD" width="32" description="UART fractional baud-rate divisor
The FBRD register is the fractional part of the baud-rate divisor value. All the bits are cleared on reset. When changing the FBRD register, the new value does not take effect until transmission or reception of the current character is complete. Any changes to the baud-rate divisor must be followed by a write to the LCRH register. " id="FBRD" offset="0x28" >
        <bitfield range="" begin="31" width="26" end="6" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved26" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="6" end="0" rwaccess="RW" description="Fractional baud-rate divisor" id="DIVFRAC" resetval="" >
        </bitfield>
    </register>
    <register acronym="LCRH" width="32" description="UART line control
The LCRH register is the line control register. Serial parameters such as data length, parity, and stop bit selection are implemented in this register.
When updating the baud-rate divisor (IBRD and/or IFRD), the LCRH register must also be written. The write strobe for the baud-rate divisor registers is tied to the LCRH register." id="LCRH" offset="0x2c" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved24" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="1" end="7" rwaccess="RW" description="UART stick parity select
When bits 1, 2, and 7 of UARTLCRH are set, the parity bit is transmitted and checked as a 0. When bits 1 and 7 are set and 2 is cleared, the parity bit is transmitted and checked as a 1.
When this bit is cleared, stick parity is disabled." id="SPS" resetval="" >
        </bitfield>
        <bitfield range="" begin="6" width="2" end="5" rwaccess="RW" description="UART word length
The bits indicate the number of data bits transmitted or received in a frame as follows:
0x0: 5 bits (default)
0x1: 6 bits
0x2: 7 bits
0x3: 8 bits" id="WLEN" resetval="" >
        </bitfield>
        <bitfield range="" begin="4" width="1" end="4" rwaccess="RW" description="UART enable FIFOs
1: The transmit and receive FIFObuffers are enabled (FIFOmode).
0: The FIFOs are disabled (Character mode). The FIFOs become 1-byte-deep holding registers." id="FEN" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="1" end="3" rwaccess="RW" description="UART two stop bits select
1: Two stop bits are transmitted at the end of a frame. The receive logic does not check for two stop bits being received. 
0: One stop bit is transmitted at the end of a frame." id="STP2" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="1" end="2" rwaccess="RW" description="UART even parity select
1: Even parity generation and checking is performed during transmission and reception, which checks for an even number of 1s in data and parity bits.
0: Odd parity is performed, which checks for an odd number of 1s.
This bit has no effect when parity is disabled by the PEN bit." id="EPS" resetval="" >
        </bitfield>
        <bitfield range="" begin="1" width="1" end="1" rwaccess="RW" description="UART parity enable
1: Parity checking and generation is enabled.
0: Parity is disabled and no parity bit is added to the data frame." id="PEN" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="UART send break
1: A low level is continually output on the UnTx signal, after completing transmission of the current character. For the proper execution of the break command, software must set this bit for at least two frames (character periods).
0: Normal use" id="BRK" resetval="" >
        </bitfield>
    </register>
    <register acronym="CTL" width="32" description="UART control
The CTL register is the control register. All the bits are cleared on reset except for the transmit enable (TXE) and receive enable (RXE) bits, which are set.
To enable the UART module, the UARTEN bit must be set. If software requires a configuration change in the module, the UARTEN bit must be cleared before the configuration changes are written. If the UART is disabled during a transmit or receive operation, the current transaction is completed before the UART stopping.
Note: The UARTCTL register should not be changed while the UART is enabled or else the results are unpredictable. The following sequence is recommended for making changes to the UARTCTL register:
1. Disable the UART.
2. Wait for the end of transmission or reception of the current character.
3. Flush the transmit FIFO by clearing bit 4 (FEN) in the line control register (UARTLCRH).
4. Reprogram the control register.
5. Enable the UART." id="CTL" offset="0x30" >
        <bitfield range="" begin="31" width="16" end="16" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved6" resetval="" >
        </bitfield>
        <bitfield range="" begin="15" width="1" end="15" rwaccess="RW" description="U1CTS Hardware Flow control enable
1: When U1CTS input is asserted, UART1 can transmit data.
0: U1CTS does not control UART1 data transmission.
Note: Only used for UART1. This bit is reserved RO for UART0." id="CTSEN" resetval="" >
        </bitfield>
        <bitfield range="" begin="14" width="1" end="14" rwaccess="RW" description="U1RTS Hardware Flow control enable
1: U1RTS indicates the state of UART1 receive FIFO. U1RTS remains asserted until the preprogrammed watermark level is reached, indicating that the UART1 RXFIFO has no space to store additional characters.
0: U1RTS does not indicate state of UART1 RX FIFO.
Note: Only used for UART1. This bit is reserved RO for UART0." id="RTSEN" resetval="" >
        </bitfield>
        <bitfield range="" begin="13" width="4" end="10" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved4" resetval="" >
        </bitfield>
        <bitfield range="" begin="9" width="1" end="9" rwaccess="RW" description="UART receive enable
1: The receive section of the UART is enabled.
0: The receive section of the UART is disabled.
If the UART is disabled in the middle of a receive, it completes the current character before stopping.
Note: To enable reception, the UARTEN bit must also be set." id="RXE" resetval="" >
        </bitfield>
        <bitfield range="" begin="8" width="1" end="8" rwaccess="RW" description="UART transmit enable
1: The transmit section of the UART is enabled.
0: The transmit section of the UART is disabled.
If the UART is disabled in the middle of a transmission, it completes the current character before stopping.
Note: To enable transmission, the UARTEN bit must also be set." id="TXE" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="1" end="7" rwaccess="RW" description="UART loop back enable
1: The UnTx path is fed through the UnRx path.
0: Normal operation" id="LBE" resetval="" >
        </bitfield>
        <bitfield range="" begin="6" width="1" end="6" rwaccess="RW" description="LIN mode enable
1: The UART operates in LIN mode.
0: Normal operation" id="LIN" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="1" end="5" rwaccess="RW" description="High-speed enable
0: The UART is clocked using the system clock divided by 16.
1: The UART is clocked using the system clock divided by 8.
Note: System clock used is also dependent on the baud-rate divisor configuration (See Universal Asynchronous Receivers/Transmitters - Baud-Rate Generation)." id="HSE" resetval="" >
        </bitfield>
        <bitfield range="" begin="4" width="1" end="4" rwaccess="RW" description="End of transmission
This bit determines the behavior of the TXRIS bit in the UARTRIS register.
1: The TXRIS bit is set only after all transmitted data, including stop bits, have cleared the serializer.
0: The TXRIS bit is set when the transmit FIFO condition specified in UARTIFLS is met." id="EOT" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="1" end="3" rwaccess="RW" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. Note field should always be written as 0 for correct operation." id="Reserved1" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="1" end="2" rwaccess="RW" description="UART SIR low-power mode
This bit selects the IrDA encoding mode.
1: The UART operates in SIR Low-Power mode. Low-level bits are transmitted with a pulse width which is 3 times the period of the IrLPBaud16 input signal, regardless of the selected bit rate.
0: Low-level bits are transmitted as an active high pulse with a width of 3/16th of the bit period.
Setting this bit uses less power, but might reduce transmission distances." id="SIRLP" resetval="" >
        </bitfield>
        <bitfield range="" begin="1" width="1" end="1" rwaccess="RW" description="UART SIR enable
1: The IrDA SIR block is enabled, and the UART transmits and receives data using SIR protocol.
0: Normal operation." id="SIREN" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="UART enable
1: The UART is enabled.
0: The UART is disabled.
If the UART is disabled in the middle of transmission or reception, it completes the current character before stopping." id="UARTEN" resetval="" >
        </bitfield>
    </register>
    <register acronym="IFLS" width="32" description=" UART interrupt FIFO level select
The IFLS register is the interrupt FIFO level select register. This register can be used to define the FIFO level at which the TXRIS and RXRIS bits in the RIS register are triggered.
The interrupts are generated based on a transition through a level rather than being based on the level. That is, the interrupts are generated when the fill level progresses through the trigger level. For example, if the receive trigger level is set to the half-way mark, the interrupt is triggered as the module is receiving the 9th character.
Out of reset, the TXIFLSEL and RXIFLSEL bits are configured so that the FIFOs trigger an interrupt at the half-way mark." id="IFLS" offset="0x34" >
        <bitfield range="" begin="31" width="26" end="6" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved26" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="3" end="3" rwaccess="RW" description="UART receive interrupt FIFO level select
The trigger points for the receive interrupt are as follows:
0x0: RX FIFO &gt;= 1/8 full
0x1: RX FIFO &gt;= 1/4 full
0x2: RX FIFO &gt;= 1/2 full (default)
0x3: RX FIFO &gt;= 3/4 full
0x4: RX FIFO &gt;= 7/8 full
0x5-0x7: Reserved" id="RXIFLSEL" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="3" end="0" rwaccess="RW" description="UART Transmit Interrupt FIFO Level Select
The trigger points for the transmit interrupt are as follows:
0x0: TX FIFO &lt;= 7/8 empty
0x1: TX FIFO &lt;= 3/4 empty
0x2: TX FIFO &lt;= 1/2 empty (default)
0x3: TX FIFO &lt;= 1/4 empty
0x4: TX FIFO &lt;= 1/8 empty
0x5-0x7: Reserved
Note: If the EOT bit in UARTCTL is set, the transmit interrupt is generated once the FIFO is completely empty and all data including stop bits have left the transmit serializer. In this case, the setting of TXIFLSEL is ignored." id="TXIFLSEL" resetval="" >
        </bitfield>
    </register>
    <register acronym="IM" width="32" description="UART interrupt mask
The IM register is the interrupt mask set/clear register.
On a read, this register gives the current value of the mask on the relevant interrupt. Setting a bit allows the corresponding raw interrupt signal to be routed to the interrupt controller. Clearing a bit prevents the raw interrupt signal from being sent to the interrupt controller." id="IM" offset="0x38" >
        <bitfield range="" begin="31" width="16" end="16" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved16" resetval="" >
        </bitfield>
        <bitfield range="" begin="15" width="1" end="15" rwaccess="RW" description="LIN mode edge 5 interrupt mask
1: An interrupt is sent to the interrupt controller when the LME5RIS bit in the UARTRIS register is set.
0: The LME5RIS interrupt is suppressed and not sent to the interrupt controller." id="LME5IM" resetval="" >
        </bitfield>
        <bitfield range="" begin="14" width="1" end="14" rwaccess="RW" description="LIN mode edge 1 interrupt mask
1: An interrupt is sent to the interrupt controller when the LME1RIS bit in the UARTRIS register is set.
0: The LME1RIS interrupt is suppressed and not sent to the interrupt controller." id="LME1IM" resetval="" >
        </bitfield>
        <bitfield range="" begin="13" width="1" end="13" rwaccess="RW" description="LIN mode sync break interrupt mask
1: An interrupt is sent to the interrupt controller when the LMSBRIS bit in the UARTRIS register is set.
0: The LMSBRIS interrupt is suppressed and not sent to the interrupt controller." id="LMSBIM" resetval="" >
        </bitfield>
        <bitfield range="" begin="12" width="1" end="12" rwaccess="RW" description="9-bit mode interrupt mask
1: An interrupt is sent to the interrupt controller when the 9BITRIS bit in the UARTRIS register is set.
0: The 9BITRIS interrupt is suppressed and not sent to the interrupt controller." id="NINEBITIM" resetval="" >
        </bitfield>
        <bitfield range="" begin="11" width="1" end="11" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved1" resetval="" >
        </bitfield>
        <bitfield range="" begin="10" width="1" end="10" rwaccess="RW" description="UART overrun error interrupt mask
1: An interrupt is sent to the interrupt controller when the OERIS bit in the UARTRIS register is set.
0: The OERIS interrupt is suppressed and not sent to the interrupt controller." id="OEIM" resetval="" >
        </bitfield>
        <bitfield range="" begin="9" width="1" end="9" rwaccess="RW" description="UART break error interrupt mask
1: An interrupt is sent to the interrupt controller when the BERIS bit in the UARTRIS register is set.
0: The BERIS interrupt is suppressed and not sent to the interrupt controller." id="BEIM" resetval="" >
        </bitfield>
        <bitfield range="" begin="8" width="1" end="8" rwaccess="RW" description="UART parity error interrupt mask
1: An interrupt is sent to the interrupt controller when the PERIS bit in the UARTRIS register is set.
0: The PERIS interrupt is suppressed and not sent to the interrupt controller." id="PEIM" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="1" end="7" rwaccess="RW" description="UART framing error interrupt mask
1: An interrupt is sent to the interrupt controller when the FERIS bit in the UARTRIS register is set.
0: The FERIS interrupt is suppressed and not sent to the interrupt controller." id="FEIM" resetval="" >
        </bitfield>
        <bitfield range="" begin="6" width="1" end="6" rwaccess="RW" description="UART receive time-out interrupt mask
1: An interrupt is sent to the interrupt controller when the RTRIS bit in the UARTRIS register is set.
0: The RTRIS interrupt is suppressed and not sent to the interrupt controller." id="RTIM" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="1" end="5" rwaccess="RW" description="UART transmit interrupt mask
1: An interrupt is sent to the interrupt controller when the TXRIS bit in the UARTRIS register is set.
0: The TXRIS interrupt is suppressed and not sent to the interrupt controller." id="TXIM" resetval="" >
        </bitfield>
        <bitfield range="" begin="4" width="1" end="4" rwaccess="RW" description="UART receive interrupt mask
1: An interrupt is sent to the interrupt controller when the RXRIS bit in the UARTRIS register is set.
0: The RXRIS interrupt is suppressed and not sent to the interrupt controller." id="RXIM" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="4" end="0" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved4" resetval="" >
        </bitfield>
    </register>
    <register acronym="RIS" width="32" description="UART raw interrupt status
The RIS register is the raw interrupt status register. On a read, this register gives the current raw status value of the corresponding interrupt. A write has no effect. Note that the HW modem flow control bits are only implemented on UART1 and are tied inactive on UART0." id="RIS" offset="0x3c" >
        <bitfield range="" begin="31" width="16" end="16" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved16" resetval="" >
        </bitfield>
        <bitfield range="" begin="15" width="1" end="15" rwaccess="RO" description="LIN mode edge 5 raw interrupt status
1: The timer value at the 5th falling edge of the LIN sync field has been captured.
0: No interrupt
This bit is cleared by writing 1 to the LME5IC bit in the UARTICR register." id="LME5RIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="14" width="1" end="14" rwaccess="RO" description="LIN mode edge 1 raw interrupt status
1: The timer value at the 1st falling edge of the LIN Sync Field has been captured.
0: No interrupt
This bit is cleared by writing 1 to the LME1IC bit in the UARTICR register." id="LME1RIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="13" width="1" end="13" rwaccess="RO" description="LIN mode sync break raw interrupt status
1: A LIN sync break has been detected.
0: No interrupt
This bit is cleared by writing 1 to the LMSBIC bit in the UARTICR register." id="LMSBRIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="12" width="1" end="12" rwaccess="RO" description="9-mit mode raw interrupt status
1: A receive address match has occurred.
0: No interrupt
This bit is cleared by writing 1 to the 9BITIC bit in the UARTICR register." id="NINEBITRIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="11" width="1" end="11" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved1" resetval="" >
        </bitfield>
        <bitfield range="" begin="10" width="1" end="10" rwaccess="RO" description="UART overrun error raw interrupt status
1: An overrun error has occurred.
0: No interrupt
This bit is cleared by writing 1 to the OEIC bit in the UARTICR register." id="OERIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="9" width="1" end="9" rwaccess="RO" description="UART break error raw interrupt status
1: A break error has occurred.
0: No interrupt
This bit is cleared by writing 1 to the BEIC bit in the UARTICR register." id="BERIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="8" width="1" end="8" rwaccess="RO" description="UART parity error raw interrupt status
1: A parity error has occurred.
0: No interrupt
This bit is cleared by writing 1 to the PEIC bit in the UARTICR register." id="PERIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="1" end="7" rwaccess="RO" description="UART framing error raw interrupt status
1: A framing error has occurred.
0: No interrupt
This bit is cleared by writing 1 to the FEIC bit in the UARTICR register." id="FERIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="6" width="1" end="6" rwaccess="RO" description="UART receive time-out raw interrupt status
1: A receive time out has occurred.
0: No interrupt
This bit is cleared by writing 1 to the RTIC bit in the UARTICR register." id="RTRIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="1" end="5" rwaccess="RO" description="UART transmit raw interrupt status
1: If the EOT bit in the UARTCTL register is clear, the transmit FIFO level has passed through the condition defined in the UARTIFLS register. If the EOT bit is set, the last bit of all transmitted data and flags has left the serializer.
0: No interrupt
This bit is cleared by writing 1 to the TXIC bit in the UARTICR register." id="TXRIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="4" width="1" end="4" rwaccess="RO" description="UART receive raw interrupt status
1: The receive FIFO level has passed through the condition defined in the UARTIFLS register.
0: No interrupt
This bit is cleared by writing 1 to the RXIC bit in the UARTICR register." id="RXRIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="4" end="0" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved4" resetval="" >
        </bitfield>
    </register>
    <register acronym="MIS" width="32" description="UART masked interrupt status
The MIS register is the masked interrupt status register. On a read, this register gives the current masked status value of the corresponding interrupt. A write has no effect." id="MIS" offset="0x40" >
        <bitfield range="" begin="31" width="16" end="16" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved16" resetval="" >
        </bitfield>
        <bitfield range="" begin="15" width="1" end="15" rwaccess="RO" description="LIN mode edge 5 masked interrupt status
1: An unmasked interrupt was signaled due to the 5th falling edge of the LIN sync field.
0: An interrupt has not occurred or is masked.
This bit is cleared by writing 1 to the LME5IC bit in the UARTICR register." id="LME5MIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="14" width="1" end="14" rwaccess="RO" description="LIN mode edge 1 masked interrupt status
1: An unmasked interrupt was signaled due to the 1st falling edge of the LIN sync field.
0: An interrupt has not occurred or is masked.
This bit is cleared by writing 1 to the LME1IC bit in the UARTICR register." id="LME1MIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="13" width="1" end="13" rwaccess="RO" description="LIN mode sync break masked interrupt status
1: An unmasked interrupt was signaled due to the receipt of a LIN sync break.
0: An interrupt has not occurred or is masked.
This bit is cleared by writing 1 to the LMSBIC bit in the UARTICR register." id="LMSBMIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="12" width="1" end="12" rwaccess="RO" description="9-bit mode masked interrupt status
1: An unmasked interrupt was signaled due to a receive address match.
0: An interrupt has not occurred or is masked.
This bit is cleared by writing 1 to the 9BITIC bit in the UARTICR register." id="NINEBITMIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="11" width="1" end="11" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved1" resetval="" >
        </bitfield>
        <bitfield range="" begin="10" width="1" end="10" rwaccess="RO" description="UART overrun error masked interrupt status
1: An unmasked interrupt was signaled due to an overrun error.
0: An interrupt has not occurred or is masked.
This bit is cleared by writing 1 to the OEIC bit in the UARTICR register." id="OEMIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="9" width="1" end="9" rwaccess="RO" description="UART break error masked interrupt status
1: An unmasked interrupt was signaled due to a break error.
0: An interrupt has not occurred or is masked.
This bit is cleared by writing 1 to the BEIC bit in the UARTICR register." id="BEMIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="8" width="1" end="8" rwaccess="RO" description="UART parity error masked interrupt status
1: An unmasked interrupt was signaled due to a parity error.
0: An interrupt has not occurred or is masked.
This bit is cleared by writing 1 to the PEIC bit in the UARTICR register." id="PEMIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="1" end="7" rwaccess="RO" description="UART framing error masked interrupt status
1: An unmasked interrupt was signaled due to a framing error.
0: An interrupt has not occurred or is masked.
This bit is cleared by writing 1 to the FEIC bit in the UARTICR register." id="FEMIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="6" width="1" end="6" rwaccess="RO" description="UART receive time-out masked interrupt status
1: An unmasked interrupt was signaled due to a receive time out.
0: An interrupt has not occurred or is masked.
This bit is cleared by writing 1 to the RTIC bit in the UARTICR register." id="RTMIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="1" end="5" rwaccess="RO" description="UART transmit masked interrupt status
1: An unmasked interrupt was signaled due to passing through the specified transmit FIFO level (if the EOT bit is clear) or due to the transmission of the last data bit (if the EOT bit is set).
0: An interrupt has not occurred or is masked.
This bit is cleared by writing 1 to the TXIC bit in the UARTICR register." id="TXMIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="4" width="1" end="4" rwaccess="RO" description="UART receive masked interrupt status
1: An unmasked interrupt was signaled due to passing through the specified receive FIFO level.
0: An interrupt has not occurred or is masked.
This bit is cleared by writing 1 to the RXIC bit in the UARTICR register." id="RXMIS" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="4" end="0" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved4" resetval="" >
        </bitfield>
    </register>
    <register acronym="ICR" width="32" description="UART interrupt clear
The ICR register is the interrupt clear register. On a write of 1, the corresponding interrupt (both raw interrupt and masked interrupt, if enabled) is cleared. A write of 0 has no effect." id="ICR" offset="0x44" >
        <bitfield range="" begin="31" width="16" end="16" rwaccess="WO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved16" resetval="" >
        </bitfield>
        <bitfield range="" begin="15" width="1" end="15" rwaccess="WO" description="LIN mode edge 5 interrupt clear
Writing 1 to this bit clears the LME5RIS bit in the UARTRIS register and the LME5MIS bit in the UARTMIS register." id="LME5IC" resetval="" >
        </bitfield>
        <bitfield range="" begin="14" width="1" end="14" rwaccess="WO" description="LIN mode edge 1 interrupt clear
Writing 1 to this bit clears the LME1RIS bit in the UARTRIS register and the LME1MIS bit in the UARTMIS register." id="LME1IC" resetval="" >
        </bitfield>
        <bitfield range="" begin="13" width="1" end="13" rwaccess="WO" description="LIN mode sync break interrupt clear
Writing 1 to this bit clears the LMSBRIS bit in the UARTRIS register and the LMSBMIS bit in the UARTMIS register." id="LMSBIC" resetval="" >
        </bitfield>
        <bitfield range="" begin="12" width="1" end="12" rwaccess="WO" description="9-bit mode interrupt clear
Writing 1 to this bit clears the 9BITRIS bit in the UARTRIS register and the 9BITMIS bit in the UARTMIS register." id="NINEBITIC" resetval="" >
        </bitfield>
        <bitfield range="" begin="11" width="1" end="11" rwaccess="WO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved1" resetval="" >
        </bitfield>
        <bitfield range="" begin="10" width="1" end="10" rwaccess="WO" description="Overrun error interrupt clear
Writing 1 to this bit clears the OERIS bit in the UARTRIS register and the OEMIS bit in the UARTMIS register." id="OEIC" resetval="" >
        </bitfield>
        <bitfield range="" begin="9" width="1" end="9" rwaccess="WO" description="Break error interrupt clear
Writing 1 to this bit clears the BERIS bit in the UARTRIS register and the BEMIS bit in the UARTMIS register." id="BEIC" resetval="" >
        </bitfield>
        <bitfield range="" begin="8" width="1" end="8" rwaccess="WO" description="Parity error interrupt clear
Writing 1 to this bit clears the PERIS bit in the UARTRIS register and the PEMIS bit in the UARTMIS register." id="PEIC" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="1" end="7" rwaccess="WO" description="Framing error interrupt clear
Writing 1 to this bit clears the FERIS bit in the UARTRIS register and the FEMIS bit in the UARTMIS register." id="FEIC" resetval="" >
        </bitfield>
        <bitfield range="" begin="6" width="1" end="6" rwaccess="WO" description="Receive time-out interrupt clear
Writing 1 to this bit clears the RTRIS bit in the UARTRIS register and the RTMIS bit in the UARTMIS register." id="RTIC" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="1" end="5" rwaccess="WO" description="Transmit interrupt clear
Writing 1 to this bit clears the TXRIS bit in the UARTRIS register and the TXMIS bit in the UARTMIS register." id="TXIC" resetval="" >
        </bitfield>
        <bitfield range="" begin="4" width="1" end="4" rwaccess="WO" description="Receive interrupt clear
Writing 1 to this bit clears the RXRIS bit in the UARTRIS register and the RXMIS bit in the UARTMIS register." id="RXIC" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="4" end="0" rwaccess="WO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved4" resetval="" >
        </bitfield>
    </register>
    <register acronym="DMACTL" width="32" description="UART DMA control
The DMACTL register is the DMA control register." id="DMACTL" offset="0x48" >
        <bitfield range="" begin="31" width="29" end="3" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved29" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="1" end="2" rwaccess="RW" description="DMA on error
1: uDMA receive requests are automatically disabled when a receive error occurs.
0: uDMA receive requests are unaffected when a receive error occurs." id="DMAERR" resetval="" >
        </bitfield>
        <bitfield range="" begin="1" width="1" end="1" rwaccess="RW" description="Transmit DMA enable
1: uDMA for the transmit FIFO is enabled.
0: uDMA for the transmit FIFO is disabled." id="TXDMAE" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="Receive DMA enable
1: uDMA for the receive FIFO is enabled.
0: uDMA for the receive FIFO is disabled." id="RXDMAE" resetval="" >
        </bitfield>
    </register>
    <register acronym="LCTL" width="32" description="UART LIN control
The LCTL register is the configures the operation of the UART when in LIN mode." id="LCTL" offset="0x90" >
        <bitfield range="" begin="31" width="26" end="6" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved26" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="2" end="4" rwaccess="RW" description="Sync break length
0x3: Sync break length is 16T bits
0x2: Sync break length is 15T bits
0x1: Sync break length is 14T bits
0x0: Sync break length is 13T bits (default)" id="BLEN" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="3" end="1" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved3" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="LIN master enable
1: The UART operates as a LIN master.
0: The UART operates as a LIN slave." id="MASTER" resetval="" >
        </bitfield>
    </register>
    <register acronym="LSS" width="32" description="LIN snap shot
The LSS register captures the free-running timer value when either the sync edge 1 or the sync edge 5 is detected in LIN mode." id="LSS" offset="0x94" >
        <bitfield range="" begin="31" width="16" end="16" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved16" resetval="" >
        </bitfield>
        <bitfield range="" begin="15" width="16" end="0" rwaccess="RO" description="Timer snap shot
This field contains the value of the free-running timer when either the sync edge 5 or the sync edge 1 was detected." id="TSS" resetval="" >
        </bitfield>
    </register>
    <register acronym="LTIM" width="32" description="UART LIN timer
The LTIM register contains the current timer value for the free-running timer that is used to calculate the baud rate when in LIN slave mode. The value in this register is used along with the value in the UART LIN snap shot (LSS) register to adjust the baud rate to match that of the master." id="LTIM" offset="0x98" >
        <bitfield range="" begin="31" width="16" end="16" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved16" resetval="" >
        </bitfield>
        <bitfield range="" begin="15" width="16" end="0" rwaccess="RO" description="Timer value
This field contains the value of the free-running timer." id="TIMER" resetval="" >
        </bitfield>
    </register>
    <register acronym="NINEBITADDR" width="32" description="UART 9-bit self address
The NINEBITADDR register is used to write the specific address that should be matched with the receiving byte when the 9-bit address mask (NINEBITAMASK) is set to 0xFF. This register is used in conjunction with NINEBITAMASK to form a match for address-byte received." id="NINEBITADDR" offset="0xa4" >
        <bitfield range="" begin="31" width="16" end="16" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved16" resetval="" >
        </bitfield>
        <bitfield range="" begin="15" width="1" end="15" rwaccess="RW" description="Enable 9-bit mode
1: 9-bit mode is enabled.
0: 9-bit mode is disabled." id="NINEBITEN" resetval="" >
        </bitfield>
        <bitfield range="" begin="14" width="7" end="8" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved7" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="8" end="0" rwaccess="RW" description="Self address for 9-bit mode
This field contains the address that should be matched when UART9BITAMASK is 0xFF." id="ADDR" resetval="" >
        </bitfield>
    </register>
    <register acronym="NINEBITAMASK" width="32" description="UART 9-bit self address mask
The NINEBITAMASK register is used to enable the address mask for 9-bit mode. The lower address bits are masked to create a range of address to be matched with the received address byte." id="NINEBITAMASK" offset="0xa8" >
        <bitfield range="" begin="31" width="16" end="16" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved16" resetval="" >
        </bitfield>
        <bitfield range="" begin="15" width="8" end="8" rwaccess="RO" description="Self address range for 9-bit mode
Writing to the RANGE field does not have any effect; reading it reflects the ANDed output of the ADDR field in the UART9BITADDR register and the MASK field." id="RANGE" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="8" end="0" rwaccess="RW" description="Self Address Mask for 9-Bit Mode
This field contains the address mask that creates a range of addresses that should be matched." id="MASK" resetval="" >
        </bitfield>
    </register>
    <register acronym="PP" width="32" description="UART peripheral properties
The PP register provides information regarding the properties of the UART module." id="PP" offset="0xfc0" >
        <bitfield range="" begin="31" width="30" end="2" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved30" resetval="" >
        </bitfield>
        <bitfield range="" begin="1" width="1" end="1" rwaccess="RO" description="9-bit support
1: The UART module provides support for the transmission of 9-bit data for RS-485 support.
0: The UART module does not provide support for the transmission of 9-bit data for RS-485 support." id="NB" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RO" description="Smart card support
1: The UART module provides smart card support.
0: The UART module does not provide smart card support." id="SC" resetval="" >
        </bitfield>
    </register>
    <register acronym="CC" width="32" description="UART clock configuration
The CC register controls the baud and system clocks sources for the UART module. For more information, see the section called &quot;Baud-Rate Generation&quot;.
Note: If the PIOSC is used for the UART baud clock, the system clock frequency must be at least 9 MHz in run mode." id="CC" offset="0xfc8" >
        <bitfield range="" begin="31" width="29" end="3" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved29" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="3" end="0" rwaccess="RW" description="UART baud and system clock source
The following bits determine the clock source that generates the baud and system clocks for the UART.
bit0 (PIOSC): 
       1: The UART baud clock is determined by the IO DIV setting in the system controller.
       0: The UART baud clock is determined by the SYS DIV setting in the system controller.
bit1: Unused
bit2: (DSEN) Only meaningful when the system is in deep sleep mode. This bit is a don&apos;t care when not in sleep mode. 
       1: The UART system clock is running on the same clock as the baud clock, as per PIOSC setting above.
       0: The UART system clock is determined by the SYS DIV setting in the system controller.
      " id="CS" resetval="" >
        </bitfield>
    </register>
</module>
