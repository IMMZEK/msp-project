<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="" id="TOP_AURORA_TX">
  
  
  <register acronym="PID" description=" PID register " id="PID" offset="0x0" width="32">
    
  <bitfield begin="31" description="" end="16" id="" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="" end="11" id="" rwaccess="R" width="5"></bitfield>
    
  <bitfield begin="10" description="" end="8" id="" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="7" description="" end="6" id="" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="5" description="" end="0" id="" rwaccess="R" width="6"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_CONFIG" description="" id="AURORA_TX_CONFIG" offset="0x14" width="32">
    
  <bitfield begin="18" description="Selects the number of lanes for trasnmission 0 : 1 Lane 1 : 2 Lanes  7 : 8Lanes" end="16" id="NUM_LANES" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="2" description="Enable Aurora  Strict Alingment Rules" end="2" id="STRICT_ALIGN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Selects if the IP is in 8b/10b OR 64b/66b mode. 0 : 8b/10b 1 : 64b/66b" end="1" id="PROTOCOL_SEL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Selects if the IP is in 8b/10b OR 64b/66b mode. 0 : 8b/10b 1 : 64b/66b" end="0" id="ENABLE" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_LANE_MAP" description="" id="AURORA_TX_LANE_MAP" offset="0x18" width="32">
    
  <bitfield begin="31" description="These 3 bits determine the logical lane that is transported over the physical lane 7.  000 : Logical lane 0 is transported over physical lane 7 001 : Logical lane 1 is transported over physical lane 7.       .. 111 : Logical lane 7 is transported over physical lane 7." end="28" id="LANE7_MAP" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="These 3 bits determine the logical lane that is transported over the physical lane 6.  000 : Logical lane 0 is transported over physical lane 6 001 : Logical lane 1 is transported over physical lane 6.       .. 111 : Logical lane 7 is transported over physical lane 6." end="24" id="LANE6_MAP" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="23" description="These 3 bits determine the logical lane that is transported over the physical lane 5.  000 : Logical lane 0 is transported over physical lane 5 001 : Logical lane 1 is transported over physical lane 5.       .. 111 : Logical lane 7 is transported over physical lane 5." end="20" id="LANE5_MAP" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="19" description="These 3 bits determine the logical lane that is transported over the physical lane 4.  000 : Logical lane 0 is transported over physical lane 4. 001 : Logical lane 1 is transported over physical lane 4.       .. 111 : Logical lane 7 is transported over physical lane 4." end="16" id="LANE4_MAP" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="15" description="These 3 bits determine the logical lane that is transported over the physical lane 3.  000 : Logical lane 0 is transported over physical lane 3 001 : Logical lane 1 is transported over physical lane 3.       .. 111 : Logical lane 7 is transported over physical lane 3." end="12" id="LANE3_MAP" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="11" description="These 3 bits determine the logical lane that is transported over the physical lane 2.  000 : Logical lane 0 is transported over physical lane 2 001 : Logical lane 1 is transported over physical lane 2.       .. 111 : Logical lane 7 is transported over physical lane 2." end="8" id="LANE2_MAP" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="7" description="These 3 bits determine the logical lane that is transported over the physical lane 1.  000 : Logical lane 0 is transported over physical lane 1 001 : Logical lane 1 is transported over physical lane 1.       .. 111 : Logical lane 7 is transported over physical lane 1." end="4" id="LANE1_MAP" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="3" description="These 3 bits determine the logical lane that is transported over the physical lane 0.  000 : Logical lane 0 is transported over physical lane 0. 001 : Logical lane 0 is transported over physical lane 1       .. 111 : Logical lane 7 is transported over physical lane 0." end="0" id="LANE0_MAP" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UDP_CONFIG" description="" id="AURORA_TX_UDP_CONFIG" offset="0x1C" width="32">
    
  <bitfield begin="20" description="Header Enable configuration 0x0              :  Disable Header transmission 0x1 - 0x10  :  Number of 32 bit Header to be transmmited" end="16" id="FRAME_HEADER_EN" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="8" description="Writing a value of 1'b1 : Bypass the aurora protocol. - No aurora framing is done 1'b0 : Normal Mode - Framing is done as per aurora protocol" end="8" id="BYPASS_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Writing a value of  1'b1: Enable the test pattern generation when the aurora transmitter is in IDLE state." end="7" id="TEST_PATTERN_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Writing a value of  1'b1 : Enables the compression of incoming synchronisation packets. This allows only a configurable number of TWP synchronization packets define by AURORA_TX_TWP_SYNC_CNT::AURORA_TX_TWP_SYNC_CNT_SYNC_CNT to be send through aurora interface.  1'b0 : Disable the TWP padding packet filter." end="6" id="TWP_SYNC_COMPRESSION_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Writing a value of 1'b1 : Enable the UDP CRC calculation  1'b0 : Disable UDP CRC calculation" end="5" id="CRC_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Writing a value of  1'b1 : Filters out the incoming TWP Padding Packet from being send via  aurora interface. 1'b0 : Disable the TWP padding packet filter." end="4" id="TWP_IDLE_FILTER_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Configure to select AURORATX_UDP_SIZE format 0: Number of TWP Packets 1 : Number of Bytes 3:  SW only" end="0" id="PACK_MODE_SEL" rwaccess="RW" width="2"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UDP_SIZE" description="" id="AURORA_TX_UDP_SIZE" offset="0x20" width="32">
    
  <bitfield begin="31" description="Configure the number of TWP packets or data bytes to be sent as one packet based on AURORATX_CTRL::PACK_MODE.   If PACK_MODE=1 Value configure should be  multiple of 4 Bytes." end="0" id="SIZE" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UDP_FRAME_HEADER0" description="" id="AURORA_TX_UDP_FRAME_HEADER0" offset="0x24" width="32">
    
  <bitfield begin="31" description="32 bit DATA Sent out as Frame Header" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UDP_FRAME_HEADER1" description="" id="AURORA_TX_UDP_FRAME_HEADER1" offset="0x28" width="32">
    
  <bitfield begin="31" description="32 bit DATA Sent out as Frame Header" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UDP_FRAME_HEADER2" description="" id="AURORA_TX_UDP_FRAME_HEADER2" offset="0x2C" width="32">
    
  <bitfield begin="31" description="32 bit DATA Sent out as Frame Header" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UDP_FRAME_HEADER3" description="" id="AURORA_TX_UDP_FRAME_HEADER3" offset="0x30" width="32">
    
  <bitfield begin="31" description="32 bit DATA Sent out as Frame Header" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UDP_FRAME_HEADER4" description="" id="AURORA_TX_UDP_FRAME_HEADER4" offset="0x34" width="32">
    
  <bitfield begin="31" description="32 bit DATA Sent out as Frame Header" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UDP_FRAME_HEADER5" description="" id="AURORA_TX_UDP_FRAME_HEADER5" offset="0x38" width="32">
    
  <bitfield begin="31" description="32 bit DATA Sent out as Frame Header" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UDP_FRAME_HEADER6" description="" id="AURORA_TX_UDP_FRAME_HEADER6" offset="0x3C" width="32">
    
  <bitfield begin="31" description="32 bit DATA Sent out as Frame Header" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UDP_FRAME_HEADER7" description="" id="AURORA_TX_UDP_FRAME_HEADER7" offset="0x40" width="32">
    
  <bitfield begin="31" description="32 bit DATA Sent out as Frame Header" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UDP_FRAME_HEADER8" description="" id="AURORA_TX_UDP_FRAME_HEADER8" offset="0x44" width="32">
    
  <bitfield begin="31" description="32 bit DATA Sent out as Frame Header" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UDP_FRAME_HEADER9" description="" id="AURORA_TX_UDP_FRAME_HEADER9" offset="0x48" width="32">
    
  <bitfield begin="31" description="32 bit DATA Sent out as Frame Header" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UDP_FRAME_HEADER10" description="" id="AURORA_TX_UDP_FRAME_HEADER10" offset="0x4C" width="32">
    
  <bitfield begin="31" description="32 bit DATA Sent out as Frame Header" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UDP_FRAME_HEADER11" description="" id="AURORA_TX_UDP_FRAME_HEADER11" offset="0x50" width="32">
    
  <bitfield begin="31" description="32 bit DATA Sent out as Frame Header" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UDP_FRAME_HEADER12" description="" id="AURORA_TX_UDP_FRAME_HEADER12" offset="0x54" width="32">
    
  <bitfield begin="31" description="32 bit DATA Sent out as Frame Header" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UDP_FRAME_HEADER13" description="" id="AURORA_TX_UDP_FRAME_HEADER13" offset="0x58" width="32">
    
  <bitfield begin="31" description="32 bit DATA Sent out as Frame Header" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UDP_FRAME_HEADER14" description="" id="AURORA_TX_UDP_FRAME_HEADER14" offset="0x5C" width="32">
    
  <bitfield begin="31" description="32 bit DATA Sent out as Frame Header" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UDP_FRAME_HEADER15" description="" id="AURORA_TX_UDP_FRAME_HEADER15" offset="0x60" width="32">
    
  <bitfield begin="31" description="32 bit DATA Sent out as Frame Header" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UFC_MSG_CTRL" description="" id="AURORA_TX_UFC_MSG_CTRL" offset="0x64" width="32">
    
  <bitfield begin="0" description="This bit indicates that the message send triggered by the SEND_MSG bit has been completed.  Read 1 : Either a hardware or software UFC event occurred.  Read 0 : No UFC event occurred.  Write 0 : No effect.  Write 1 : Clears this bit.  This bit is reset when the  SEND_MSG bit is set." end="0" id="UFC_MSG_SENT_STS" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UFC_MESSAGE0" description="" id="AURORA_TX_UFC_MESSAGE0" offset="0x68" width="32">
    
  <bitfield begin="31" description="This register contains the octets 0 through 3 of the UFC message.  All octets have a default value of 0x0A." end="0" id="MESSAGE0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UFC_MESSAGE1" description="" id="AURORA_TX_UFC_MESSAGE1" offset="0x6C" width="32">
    
  <bitfield begin="31" description="This register contains the octets 4 through 7 of the UFC message.  All octets have a default value of 0x0A." end="0" id="MESSAGE1" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_TWP_SYNC_CNT" description="" id="AURORA_TX_TWP_SYNC_CNT" offset="0x70" width="32">
    
  <bitfield begin="9" description="Number of TWP Sync Packet that would be sent if  AURORA_TX_UDP_CONFIG::A_TX_UDP_CONFIG_TWP_SYNC_COMPRESSION_EN is 0x1. (Min Value 2)" end="0" id="SYNC_CNT" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_INITIALIZE_REQ" description="" id="AURORA_TX_INITIALIZE_REQ" offset="0x80" width="32">
    
  <bitfield begin="1" description="The single bit input to trigger the initialization sequence.  Asserting this bit starts Tx process." end="1" id="TX_INIT" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_UFC_MSG_REQ" description="" id="AURORA_TX_UFC_MSG_REQ" offset="0x84" width="32">
    
  <bitfield begin="0" description="The bit that triggers the controller to send the MESSAGE0 and MESSAGE1 register contents as a UFC packet." end="0" id="SEND_MSG" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_FLUSH_REQ" description="" id="AURORA_TX_FLUSH_REQ" offset="0x88" width="32">
    
  <bitfield begin="0" description="Selects the number of lanes for trasnmission 0 : 1 Lane 1 : 2 Lanes  7 : 8Lanes" end="0" id="TRIGGER" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_EOP_REQ" description="" id="AURORA_TX_EOP_REQ" offset="0x8C" width="32">
    
  <bitfield begin="0" description="SW End of Packet trigger to aurora dataframer." end="0" id="TRIGGER" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_DATA_START_REQ" description="" id="AURORA_TX_DATA_START_REQ" offset="0x90" width="32">
    
  <bitfield begin="1" description="The single bit input to trigger the initialization sequence.  Asserting this bit starts Tx process." end="1" id="DATA_START" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_DATA_STOP_REQ" description="" id="AURORA_TX_DATA_STOP_REQ" offset="0x94" width="32">
    
  <bitfield begin="1" description="The single bit input to trigger the Start of Data Transmission" end="1" id="DATA_STOP" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_TESTPATTERN_START_REQ" description="" id="AURORA_TX_TESTPATTERN_START_REQ" offset="0x98" width="32">
    
  <bitfield begin="1" description="The single bit input to trigger the Stop of Data Transmission" end="1" id="TEST_PATTERN_START" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_TESTPATTERN_STOP_REQ" description="" id="AURORA_TX_TESTPATTERN_STOP_REQ" offset="0x9C" width="32">
    
  <bitfield begin="1" description="The single bit input to trigger the Start of TestPattern Transmission" end="1" id="TEST_PATTERN_STOP" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_OVERRIDE" description="" id="AURORA_TX_OVERRIDE" offset="0x100" width="32">
    
  <bitfield begin="22" description="This read write bit indicates whether the CC1_OVR_TYP symbol is a /D/ octet or /K/ octet.  1 : Indicates a /K/ octet. 0 : Indicates a /D/ octet." end="22" id="CC1_OVR_TYP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="21" description="This read write bit indicates whether the CC0_OVR_TYP symbol is a /D/ octet or /K/ octet.  1 : Indicates a /K/ octet. 0 : Indicates a /D/ octet." end="21" id="CC0_OVR_TYP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="20" description="This read write bit indicates whether the INIT_V3_OVR_TYP symbol is a /D/ octet or /K/ octet.  1 : Indicates a /K/ octet. 0 : Indicates a /D/ octet." end="20" id="INIT_V3_OVR_TYP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="This read write bit indicates whether the INIT_V2_OVR_TYP symbol is a /D/ octet or /K/ octet.  1 : Indicates a /K/ octet. 0 : Indicates a /D/ octet." end="19" id="INIT_V2_OVR_TYP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="This read write bit indicates whether the INIT_V1_OVR_TYP symbol is a /D/ octet or /K/ octet.  1 : Indicates a /K/ octet. 0 : Indicates a /D/ octet." end="18" id="INIT_V1_OVR_TYP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="This read write bit indicates whether the INIT_V0_OVR_TYP symbol is a /D/ octet or /K/ octet.  1 : Indicates a /K/ octet. 0 : Indicates a /D/ octet." end="17" id="INIT_V0_OVR_TYP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="This read write bit indicates whether the INIT_SP3_OVR_TYP symbol is a /D/ octet or /K/ octet.  1 : Indicates a /K/ octet. 0 : Indicates a /D/ octet." end="16" id="INIT_SP3_OVR_TYP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="This read write bit indicates whether the INIT_SP2_OVR_TYP symbol is a /D/ octet or /K/ octet.  1 : Indicates a /K/ octet. 0 : Indicates a /D/ octet." end="15" id="INIT_SP2_OVR_TYP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="This read write bit indicates whether the INIT_SP1_OVR_TYP symbol is a /D/ octet or /K/ octet.  1 : Indicates a /K/ octet. 0 : Indicates a /D/ octet." end="14" id="INIT_SP1_OVR_TYP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="This read write bit indicates whether the INIT_SP0_OVR_TYP symbol is a /D/ octet or /K/ octet.  1 : Indicates a /K/ octet. 0 : Indicates a /D/ octet." end="13" id="INIT_SP0_OVR_TYP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="This read write bit indicates whether the UFC_SUF_OVR_TYP symbol is a /D/ octet or /K/ octet.  1 : Indicates a /K/ octet. 0 : Indicates a /D/ octet." end="12" id="UFC_SUF_OVR_TYP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="This read write bit indicates whether the I2_OVR symbol is a /D/ octet or /K/ octet.  1 : Indicates a /K/ octet. 0 : Indicates a /D/ octet." end="11" id="I2_OVR_TYP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="This read write bit indicates whether the I1_OVR symbol is a /D/ octet or /K/ octet.  1 : Indicates a /K/ octet. 0 : Indicates a /D/ octet." end="10" id="I1_OVR_TYP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="This read write bit indicates whether the I0_OVR symbol is a /D/ octet or /K/ octet.  1 : Indicates a /K/ octet. 0 : Indicates a /D/ octet." end="9" id="I0_OVR_TYP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="This read write bit allows the symbols used in the various sequences to be overridden with the values used in the AURORA_TX_SYM register." end="8" id="SYM_OVR_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="These bits take effect to enforce a certain transmission state if the TX_ST_OVR_EN bit is set.  The states are enforced as per the following bit values:  0000 : Reset, no transmission. 0001 : Initialization 0010 : Clock Compensation 0011 : Idle 0100 : UFC 0101 : Run (data) 0110 : Test (data) 0111 : Reserved       . 1111 : Reserved" end="4" id="TX_STATE_OVR_VAL" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="0" description="This read write bit allows the user to force the IP to remain in a given transmission state.  The enforced transmission state is defined by the TX_ST_OVR bits." end="0" id="TX_STATE_OVR_EN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_8B10B_OVERRIDE0" description="" id="AURORA_TX_8B10B_OVERRIDE0" offset="0x104" width="32">
    
  <bitfield begin="31" description="The 8B/10B protocol defines Start of User Flow Control PDU symbol /SUF/.  The value defined in the octet here allows this value to be overridden.     The value defined here will be effective whenever the User Flow Control packet is transmitted.  Default value of this octet is /SUF/ (/SUF/ &lt;=> /K28.4/ &lt;=> 0x9C).    This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set." end="24" id="UFC_SUF" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="The 8B/10B protocol defines three symbols - /K/, /R/ and /A/ that can be used in the Idle (/I/) sequence.   The value defined here will be effective whenever the Idle sequence is used during any transmission state.  Default value of this octet is /R/ (/R/ &lt;=> /K28.0/ &lt;=> 0x1C).  This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set." end="16" id="I2" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="The 8B/10B protocol defines three symbols - /K/, /R/ and /A/ that can be used in the Idle (/I/) sequence.  The value defined in the octet here allows one of the three to be overridden.    The value defined here will be effective whenever the Idle sequence is used during any transmission state.  Default value of this octet is /K/ (/K/ &lt;=> /K28.5/ &lt;=> 0xBC).  This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set." end="8" id="I1" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="The 8B/10B protocol defines three symbols - /K/, /R/ and /A/ that can be used in the Idle (/I/) sequence.  The value defined here will be effective whenever the Idle sequence is used during any transmission state.  Default value of this octet is /A/ (/A/ &lt;=> /K28.3/ &lt;=> 0x7C).  This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set." end="0" id="I0" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_8B10B_OVERRIDE1" description="" id="AURORA_TX_8B10B_OVERRIDE1" offset="0x108" width="32">
    
  <bitfield begin="31" description="The 8B/10B protocol defines the /D10.2/ as the fourth octet to be used in the Sync Polarity (/SP/) sequence during lane initialization.  The value defined in the octet here allows the fourth octet to be overridden.  Default value of this octet is /D10.2/ &lt;=> 0x4A.  This value will be effective whenever the Sync Polarity sequence is used during the INIT transmission state.  This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set." end="24" id="SP3" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="The 8B/10B protocol defines the /D10.2/ as the third octet to be used in the Sync Polarity (/SP/) sequence during lane initialization.  The value defined in the octet here allows the third octet to be overridden.  Default value of this octet is /D10.2/ &lt;=> 0x4A.  This value will be effective whenever the Sync Polarity sequence is used during the INIT transmission state.  This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set." end="16" id="SP2" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="The 8B/10B protocol defines the /D10.2/ as the second octet to be used in the Sync Polarity (/SP/) sequence during lane initialization.  The value defined in the octet here allows the second octet to be overridden.  Default value of this octet is /D10.2/ &lt;=> 0x4A.  This value will be effective whenever the Sync Polarity sequence is used during the INIT transmission state.  This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set." end="8" id="SP1" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="The 8B/10B protocol defines the /K28.5/ as the first octet to be used in the Sync Polarity (/SP/) sequence during lane initialization.  The value defined in the octet here allows the first octet to be overridden.  Default value of this octet is /K28.5/ &lt;=> 0xBC.  This value will be effective whenever the Sync Polarity sequence is used during the INIT transmission state.  This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set." end="0" id="SP0" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_8B10B_OVERRIDE2" description="" id="AURORA_TX_8B10B_OVERRIDE2" offset="0x10C" width="32">
    
  <bitfield begin="31" description="The 8B/10B protocol defines the /D8.7/ as the fourth octet to be used in the Verification sequence during lane initialization.  The value defined in the octet here allows the fourth octet to be overridden.  Default value of this octet is /D8.7/ &lt;=> 0xE8.  This value will be effective whenever the Verification sequence is used during the INIT transmission state.  This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set." end="24" id="V3" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="The 8B/10B protocol defines the /D8.7/ as the third octet to be used in the Verification sequence during lane initialization.  The value defined in the octet here allows the third octet to be overridden.  Default value of this octet is /D8.7/ &lt;=> 0xE8.  This value will be effective whenever the Verification sequence is used during the INIT transmission state.  This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set." end="16" id="V2" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="The 8B/10B protocol defines the /D8.7/ as the second octet to be used in the Verification sequence during lane inititialization.  The value defined in the octet here allows the second octet to be overridden.  Default value of this octet is /D8.7/ &lt;=> 0xE8.  This value will be effective whenever the Verification sequence is used during the INIT transmission state.  This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set." end="8" id="V1" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="The 8B/10B protocol defines the /K28.5/ as the first octet to be used in the Verification sequence during lane inititialization.  The value defined in the octet here allows the first octet to be overridden.  Default value of this octet is /K28.5/ &lt;=> 0xBC.  This value will be effective whenever the Verification sequence is used during the INIT transmission state.  This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set." end="0" id="V0" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_8B10B_OVERRIDE3" description="" id="AURORA_TX_8B10B_OVERRIDE3" offset="0x110" width="32">
    
  <bitfield begin="15" description="The 8B/10B protocol defines the /K23.7/ as the second octet to be used in the Clock Compensation sequence.  The value defined in the octet here allows the second octet to be overridden.  Default value of this octet is /K23.7/ &lt;=> 0xF7.  This value will be effective whenever the Verification sequence is used during the Clock Compensation transmission state.  This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set." end="8" id="CC1" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="The 8B/10B protocol defines the /K23.7/ as the first octet to be used in the Clock Compensation sequence.  The value defined in the octet here allows the first octet to be overridden.  Default value of this octet is /K23.7/ &lt;=> 0xF7.  This value will be effective whenever the Verification sequence is used during the Clock Compensation transmission state.  This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set." end="0" id="CC0" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_64B66B_OVERRIDE1" description="" id="AURORA_TX_64B66B_OVERRIDE1" offset="0x114" width="32">
    
  <bitfield begin="31" description="The 64B/66B protocol defines the CC, CB, NR, SA bits for all the type of Idle Blocks.  This field may be overriden with the values defined here.  These bits are used during Channel Bonding.  Bit 8 overrides the CC bit (bit 10 of 64B/66B block code), Bit 9 overrides the CB bit (bit 11 of 64B/66B block code), Bit 10 overrides the NR bit (bit 12 of 64B/66B block code), Bit 11 overrides the SA bit (bit 13 of 64B/66B block code), Bits 12:15 override the '0000' bits (bits [14:17] of 64B/66B block code). This field is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set. This field is applicable only in the 64B/66B protocol mode." end="24" id="CB_BITS" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="The 64B/66B protocol defines the value of 0x78 as the BTF for all the types of Idle code blocks.  The value given in this field may be used to override the BTF for the Channel Bonding code blocks.  This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set. This field is applicable only in the 64B/66B protocol mode." end="16" id="CB_BTF" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="The 64B/66B protocol defines the CC, CB, NR, SA bits for all the type of Idle Blocks.  This field may be overriden with the values defined here. Bit 8 overrides the CC bit (bit 10 of 64B/66B block code), Bit 9 overrides the CB bit (bit 11 of 64B/66B block code), Bit 10 overrides the NR bit (bit 12 of 64B/66B block code), Bit 11 overrides the SA bit (bit 13 of 64B/66B block code), Bits 12:15 override the '0000' bits (bits [14:17] of 64B/66B block code). This field is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set. This field is applicable only in the 64B/66B protocol mode." end="8" id="IDLE_BITS" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="The 64B/66B protocol defines the value of 0x78 as the BTF for all the types of Idle code blocks.  The value given in this field may be used to override the BTF for the Idle code blocks. This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set. This field is applicable only in the 64B/66B protocol mode." end="0" id="IDLE_BTF" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_64B66B_OVERRIDE2" description="" id="AURORA_TX_64B66B_OVERRIDE2" offset="0x118" width="32">
    
  <bitfield begin="23" description="The 64B/66B protocol defines the CC, CB, NR, SA bits for all the type of Channel Bonding Blocks.  This field may be overriden with the values defined here.  These bits are used during the Clock Compensation block transmission.  Bit 8 overrides the CC bit (bit 10 of 64B/66B block code), Bit 9 overrides the CB bit (bit 11 of 64B/66B block code), Bit 10 overrides the NR bit (bit 12 of 64B/66B block code), Bit 11 overrides the SA bit (bit 13 of 64B/66B block code), Bits 12:15 override the '0000' bits (bits [14:17] of 64B/66B block code). This field is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set. This field is applicable only in the 64B/66B protocol mode." end="16" id="CC_BITS" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="The 64B/66B protocol defines the value of 0x78 as the BTF for all the types of Idle code blocks.  The value given in this field may be used to override the BTF for the Clock Compensation code blocks.  This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set. This field is applicable only in the 64B/66B protocol mode." end="8" id="CC_BTF" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="The 64B/66B protocol defines the value of 0x2D as the BTF for the UFC code block.  The value given in this field may be used to override the BTF for the UFC code block. This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set. This field is applicable only in the 64B/66B protocol mode." end="0" id="UFC_BTF" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_64B66B_OVERRIDE2" description="" id="AURORA_TX_64B66B_OVERRIDE2" offset="0x11C" width="32">
    
  <bitfield begin="15" description="The 64B/66B protocol defines the value of 0xE1 as the BTF for the Separator-7.  The value given in this field may be used to override the BTF for Separator-7. This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set. This field is applicable only in the 64B/66B protocol mode." end="8" id="SEP7_BTF" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="The 64B/66B protocol defines the value of 0x1E as the BTF for the Separator.  The value given in this field may be used to override the BTF for Separator. This value is effective only if the SYM_OVR_EN bit in the AURORA_TX_OVERRIDE register is set. This field is applicable only in the 64B/66B protocol mode." end="0" id="SEP_BTF" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_INIT_CNT_LRC" description="" id="AURORA_TX_INIT_CNT_LRC" offset="0x124" width="32">
    
  <bitfield begin="31" description="The 32-bit count value used to move from the TXRESET1 state to the TXINIT0 state.  This value indicates the number of times the /SP/ sequence is sent in the TXRESET1 state." end="0" id="LRC_N" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_INIT_CNT_ALIGN" description="" id="AURORA_TX_INIT_CNT_ALIGN" offset="0x128" width="32">
    
  <bitfield begin="19" description="Alignment pattern multiplier. Defines the multiplier used in conjunction with ALIGN_LEN when performing link initialization. 0000b: Alignment pattern multiplier is 32. 0001b: Reserved. 0010b: Reserved. 0011b: Reserved. 0100b: Reserved. Otherwise     Alignment pattern multiplier is 2n, where n is the value of this field." end="16" id="ALIGN_MUL" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="12" description="The number of times the Aurora alignment pattern is sent.  Number of patterns = ALIGN_MUL*(ALIGN_LEN + 1)." end="0" id="ALIGN_LEN" rwaccess="RW" width="13"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_INIT_CNT_BONDING" description="" id="AURORA_TX_INIT_CNT_BONDING" offset="0x12C" width="32">
    
  <bitfield begin="27" description="The 64B standard mentions that There must be at least four Idle blocks between each Channel  Bonding block. in Table 4-1 of the 4.2.1 Lane Initialization section.  The user could specify 1 to 16 Idle blocks between the Channel Bonding block.  It is not recommended to use less than 4 Idle Blocks between the Channel Bonding blocks. The default value of this field at reset is 4. Permissible values: 8'h01 : No of Idle Blocks between Channel Bonding blocks = 1 8'h02 : No of Idle Blocks between Channel Bonding blocks = 2 8'hFF : No of Idle Blocks between Channel Bonding blocks = 255  Do not program 8'h00." end="20" id="rw" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="19" description="Bond pattern multiplier. Defines the multiplier used in conjunction with BOND_LEN when performing link initialization. 0000b: Bond pattern multiplier is 4. 0001b: Reserved. Otherwise     Bond pattern multiplier is 2n, where n is the value of this field." end="16" id="BOND_MUL" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="8" description="The number of times the Aurora bonding pattern is sent.  Number of patterns = BOND_MUL*(BOND_LEN + 1)." end="0" id="BOND_LEN" rwaccess="RW" width="9"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_INIT_CNT_VERIFY" description="" id="AURORA_TX_INIT_CNT_VERIFY" offset="0x130" width="32">
    
  <bitfield begin="19" description="Verify pattern multiplier. Defines the multiplier used in conjunction with VERIFY_LEN when performing link initialization. 0000b: Verify pattern multiplier is 4. 0001b: Reserved. Otherwise     Verify pattern multiplier is 2n, where n is the value of this field." end="16" id="VERIFY_MUL" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="8" description="The number of times the Aurora verification pattern is sent.  Number of patterns = VERIFY_MUL*(VERIFY_LEN + 1)." end="0" id="VERIFY_LEN" rwaccess="RW" width="9"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_INIT_CTRL" description="" id="AURORA_TX_INIT_CTRL" offset="0x134" width="32">
    
  <bitfield begin="2" description="The single bit input to trigger the transition from the verification state to the channel ready state." end="2" id="TX_VERIFIED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="The single bit input to trigger the transition from the bonding to the verification state." end="1" id="TX_BONDED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="The single bit input to trigger the Stop of TestPattern Transmission" end="0" id="TX_ALIGNED" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_IDLE_CTRL" description="" id="AURORA_TX_IDLE_CTRL" offset="0x138" width="32">
    
  <bitfield begin="5" description="The 4-bit value used to seed the pseudo random integer used in the idle sequence generator." end="2" id="SEED" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_IDLE_REQ" description="" id="AURORA_TX_IDLE_REQ" offset="0x13C" width="32">
    
  <bitfield begin="0" description="This bit is used to trigger the insertion of the IDLE sequence by the software.  The IDLE FSM will insert the IDLE sequence octets at the earliest possible opportunity." end="0" id="SEND_IDLE" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_CC_REQ" description="" id="AURORA_TX_CC_REQ" offset="0x140" width="32">
    
  <bitfield begin="1" description="The single bit input that can trigger a CC sequence.  The internal FSM will insert a CC sequence at the earliest possible opportunity." end="1" id="SEND_CC" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_CC_CNT" description="" id="AURORA_TX_CC_CNT" offset="0x144" width="32">
    
  <bitfield begin="15" description="The 16-bit count value used to indicate the number of code group octets after which the CC sequence should be transmitted. Default  is 0x26FC (decimal 9980) and increasing the period beyond this value is not advised as corruption of data can occur." end="0" id="SYNC_COUNT" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_CB_STATUS" description="" id="AURORA_TX_CB_STATUS" offset="0x148" width="32">
    
  <bitfield begin="0" description="This bit reflects the state of the Channel Bonding FSM.  Read 0 : CB Block is not complete. Read 1 : CB Block is complete. Write 0 : No effect. Write 1 : Clears the bit.  Setting the SEND_CB bit also clears this bit.  This bit is applicable only in the 64B/66B protocol mode after the Channel Ready state has been reached." end="0" id="CB_COMP" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_CB_REQ" description="" id="AURORA_TX_CB_REQ" offset="0x14C" width="32">
    
  <bitfield begin="1" description="The single bit input that can trigger a Channel Bonding Block.  The internal FSM will insert a Channel Bonding sequence at the earliest possible opportunity. This bit is applicable only in the 64B/66B protocol mode after the Channel Ready state has been reached." end="1" id="SEND_CB" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_CB_CNT" description="" id="AURORA_TX_CB_CNT" offset="0x150" width="32">
    
  <bitfield begin="15" description="The 16-bit count value used to indicate the number of data blocks after which the Channel Bonding sequence should be transmitted. The default value is 0x4E20 (decimal 20000).  A value of zero will ensure that the Channel Bonding sequence is not sent periodically.  In this case, the Channel Bonding sequence can only be sent by setting the SEND_CB bit in the AURORA_TX_CB_REQ register. This bit is applicable only in the 64B/66B protocol mode after the Channel Ready state has been reached." end="0" id="CB_COUNT" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_RESET_REQ" description="" id="AURORA_TX_RESET_REQ" offset="0x154" width="32">
    
  <bitfield begin="0" description="The single bit input to reset the Tx process.  Asserting this bit brings all internal FSMs to their reset state.  (The TX_INIT bit must be asserted for the FSMs to continue to their next states after the reset state.)" end="0" id="TX_RESET" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_SERIALIZER_OVERRIDE0" description="" id="AURORA_TX_SERIALIZER_OVERRIDE0" offset="0x158" width="32">
    
  <bitfield begin="31" description="Serialzer Override Value0 for Debug/Legacy modes. This value is not expected tp be changed" end="0" id="val" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_SERIALIZER_OVERRIDE1" description="" id="AURORA_TX_SERIALIZER_OVERRIDE1" offset="0x15C" width="32">
    
  <bitfield begin="31" description="Serialzer Override Value1 for Debug/Legacy modes. This value is not expected tp be changed" end="0" id="val" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_DATA_BYTE_REVERSE" description="" id="AURORA_TX_DATA_BYTE_REVERSE" offset="0x160" width="32">
    
  <bitfield begin="1" description="Enable Byte reversal on the CRC value." end="1" id="crc_byte_reverse_en" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Enable Byte reversal on the input data. Aplicable only on the data  from TPIU and Testpattern" end="0" id="byte_reverse_en" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_64B66B_SCRAMBLER_INIT0" description="" id="AURORA_TX_64B66B_SCRAMBLER_INIT0" offset="0x164" width="32">
    
  <bitfield begin="31" description="Initial value in the LFSR scrambler bits[31:0]" end="0" id="val" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_64B66B_SCRAMBLER_INIT1" description="" id="AURORA_TX_64B66B_SCRAMBLER_INIT1" offset="0x168" width="32">
    
  <bitfield begin="31" description="Write 0x1 to loaf the scrambler lfsr init value" end="31" id="load" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Initial value in the LFSR scrambler bits[57:32]" end="0" id="val" rwaccess="RW" width="26"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_TESTPATTERN_CTRL" description="" id="AURORA_TX_TESTPATTERN_CTRL" offset="0x16C" width="32">
    
  <bitfield begin="0" description="Enable a ramp patten as the testpattern" end="0" id="ramp_en" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_CC_SEQ_CNT" description="" id="AURORA_TX_CC_SEQ_CNT" offset="0x170" width="32">
    
  <bitfield begin="19" description="Configure the number of 64b66b Clock Compensation block to be sent. The default value is as per the Aurora Spec. This is intented for Debug purposes only." end="16" id="count_64b66b" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="3" description="Configure the number of 8b10b Clock Compensation octets to be sent. The default value is as per the Aurora Spec. This is intented for Debug purposes only." end="0" id="count_8b10b" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_EOP_DELAY" description="" id="AURORA_TX_EOP_DELAY" offset="0x174" width="32">
    
  <bitfield begin="16" description="Write 0x1 to this fiel to enable the delay configured in AURORA_TX_EOP_DEALY::DELAY" end="16" id="enable" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="Internal Delay between the Data Framer and the Controller Block to stall  data to the controller and force IDLES to be inserted by the controller after an ECP of a UDP. This is a feature added for Debug Purposes only and has not been tested" end="0" id="delay" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_FLUSH_DELAY" description="" id="AURORA_TX_FLUSH_DELAY" offset="0x178" width="32">
    
  <bitfield begin="7" description="Write 0x1 to this fiel to enable the delay configured in AURORA_TX_EOP_DEALY::DELAY" end="0" id="delay" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_STATUS" description="" id="AURORA_TX_STATUS" offset="0x200" width="32">
    
  <bitfield begin="31" description="Dataframer Status fields   Bit 16    :  Write on Full FIFO                    Bit 17    :  Read on Empty FIFO   Bits [20:18] :  Run State                                       000 : OFF                                       001 : INIT DONE                                 010 : TEST MODE                                 011 : DATA MODE                                 100 : WAITING FOR GLOBAL FLUSH DONE             101 : FLUSH IN PROGRESS        Bits [26:21] :  Data Available in Internal FIFO" end="16" id="DATAFRAMER" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="3" description="These read only bits indicate the state of the transmitter in 8B/10B and 64B/66B.  0000 : Reset, no transmission. 0001 : Initialization 0010 : Clock Compensation 0011 : Idle 0100 : UFC 0101 : Run (data) 0110 : Test (data) 0111 : Reserved       . 1111 : Reserved  The user must note that these bits reflect the controller state and that the actual octets on the PHY lines may differ due to internal data path latencies." end="0" id="TX_STATE" rwaccess="R" width="4"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_INIT_STATUS" description="" id="AURORA_TX_INIT_STATUS" offset="0x204" width="32">
    
  <bitfield begin="4" description="The status bit that indicates that the channel ready state has been reached.  This bit is reset with the device reset and when the TX_RESET bit is set." end="4" id="TX_CH_RDY" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="The status bit that indicates that the TX_ TXCB0 state has been completed.  This bit is reset with the device reset and when the TX_RESET bit is set." end="3" id="TX_TXCB0" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="The status bit that indicates that the TX_INIT0 state has been completed.  This bit is reset with the device reset and when the TX_RESET bit is set." end="2" id="TX_INIT0" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="1" description="The status bit that indicates that the TX_RESET1 state has been completed.  This bit is reset with the device reset and when the TX_RESET bit is set." end="1" id="TX_RESET1" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="The status bit that indicates that the TX_RESET0 state has been completed.  This bit is reset with the device reset and when the TX_RESET bit is set." end="0" id="TX_RESET0" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_CC_STATUS" description="" id="AURORA_TX_CC_STATUS" offset="0x208" width="32">
    
  <bitfield begin="0" description="This bit reflects the state of the CC FSM.  Read 0 : CC sequence is not complete. Read 1 : CC sequence is complete. Write 0 : No effect. Write 1 : Clears the bit.  Setting the SEND_CC bit also clears this bit." end="0" id="CC_COMP" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_IDLE_STATUS" description="" id="AURORA_TX_IDLE_STATUS" offset="0x20C" width="32">
    
  <bitfield begin="0" description="This bit reflects the state of the IDLE FSM.  Read 0 : IDLE sequence is not complete. Read 1 : IDLE sequence is complete. Write 0 : No effect. Write 1 : Clears the bit.  Setting the SEND_IDLE bit also clears this bit." end="0" id="IDLE_COMP" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_INTAGG_MASK" description="" id="AURORA_TX_INTAGG_MASK" offset="0x210" width="32">
    
  <bitfield begin="15" description="Mask the the corresponding event line from generating an Interrupt. This field masks the interrupt from Event 15" end="15" id="int15" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Mask the the corresponding event line from generating an Interrupt. This field masks the interrupt from Event 14" end="14" id="int14" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Mask the the corresponding event line from generating an Interrupt. This field masks the interrupt from Event 13" end="13" id="int13" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Mask the the corresponding event line from generating an Interrupt. This field masks the interrupt from Event 12" end="12" id="int12" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Mask the the corresponding event line from generating an Interrupt. This field masks the interrupt from Event 11" end="11" id="int11" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Mask the the corresponding event line from generating an Interrupt. This field masks the interrupt from Event 10" end="10" id="int10" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Mask the the corresponding event line from generating an Interrupt. This field masks the interrupt from Event 9" end="9" id="int9" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Mask the the corresponding event line from generating an Interrupt. This field masks the interrupt from Event 8" end="8" id="int8" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Mask Interrupt AURORA_TX_HEADER_DONE 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="7" id="int7" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Mask Interrupt AURORA_TX_EOP_DONE 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="6" id="int6" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Mask Interrupt DATA_STOP_DONE 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="5" id="int5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Mask Interrupt AURORA_TX_CC_DONE 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="4" id="int4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Mask Interrupt AURORA_TX_UFC_SENT 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="3" id="int3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Mask Interrupt AURORA_TX_EXT_FLUSH_DONE 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="2" id="int2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Mask Interrupt AURORA_TX_FLUSH_DONE 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="1" id="int1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Mask Interrupt AURORA_TX_INIT_DONE 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="0" id="int0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_INTAGG_STATUS" description="" id="AURORA_TX_INTAGG_STATUS" offset="0x214" width="32">
    
  <bitfield begin="15" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This field indicates assertion of Event 15" end="15" id="int15" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This field indicates assertion of Event 14" end="14" id="int14" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This field indicates assertion of Event 13" end="13" id="int13" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This field indicates assertion of Event 12" end="12" id="int12" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This field indicates assertion of Event 11" end="11" id="int11" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This field indicates assertion of Event 10" end="10" id="int10" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This field indicates assertion of Event 9" end="9" id="int9" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This field indicates assertion of Event 8" end="8" id="int8" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This field indicates assertion of AURORA_TX_HEADER_DONE." end="7" id="int7" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This field indicates assertion of AURORA_TX_EOP_DONE." end="6" id="int6" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This field indicates assertion of DATA_STOP_DONE." end="5" id="int5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This field indicates assertion of AURORA_TX_CC_DONE" end="4" id="int4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This field indicates assertion of AURORA_TX_UFC_SENT." end="3" id="int3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This field indicates assertion of AURORA_TX_EXT_FLUSH_DONE" end="2" id="int2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This field indicates assertion of AURORA_TX_FLUSH_DONE" end="1" id="int1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This field indicates assertion of  AURORA_TX_INIT_DONE" end="0" id="int0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_INTAGG_STATUS_RAW" description="" id="AURORA_TX_INTAGG_STATUS_RAW" offset="0x218" width="32">
    
  <bitfield begin="15" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This is the raw status that will be asserted even if the event has been masked in AURORA_TX_INTAGG_MASK. This field indicates assertion of Event 15" end="15" id="int15" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This is the raw status that will be asserted even if the event has been masked in AURORA_TX_INTAGG_MASK. This field indicates assertion of Event 14" end="14" id="int14" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This is the raw status that will be asserted even if the event has been masked in AURORA_TX_INTAGG_MASK. This field indicates assertion of Event 13" end="13" id="int13" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This is the raw status that will be asserted even if the event has been masked in AURORA_TX_INTAGG_MASK. This field indicates assertion of Event 12" end="12" id="int12" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This is the raw status that will be asserted even if the event has been masked in AURORA_TX_INTAGG_MASK. This field indicates assertion of Event 11" end="11" id="int11" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This is the raw status that will be asserted even if the event has been masked in AURORA_TX_INTAGG_MASK. This field indicates assertion of Event 10" end="10" id="int10" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This is the raw status that will be asserted even if the event has been masked in AURORA_TX_INTAGG_MASK. This field indicates assertion of Event 9" end="9" id="int9" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This is the raw status that will be asserted even if the event has been masked in AURORA_TX_INTAGG_MASK. This field indicates assertion of Event 8" end="8" id="int8" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This is the raw status that will be asserted even if the event has been masked in AURORA_TX_INTAGG_MASK.  This field indicates assertion of AURORA_TX_HEADER_DONE- Indicates completion of Frame Header transmission." end="7" id="int7" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This is the raw status that will be asserted even if the event has been masked in AURORA_TX_INTAGG_MASK.  This field indicates assertion of AURORA_TX_EOP_DONE-Indicates completion of UDP packets" end="6" id="int6" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This is the raw status that will be asserted even if the event has been masked in AURORA_TX_INTAGG_MASK. This field indicates assertion of DATA_STOP_DONE." end="5" id="int5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This is the raw status that will be asserted even if the event has been masked in AURORA_TX_INTAGG_MASK.  This field indicates assertion of AURORA_TX_CC_DONE-Indicate completion of Clock compensation sequence trasnmission" end="4" id="int4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This is the raw status that will be asserted even if the event has been masked in AURORA_TX_INTAGG_MASK.  This field indicates assertion of AURORA_TX_UFC_SENT-Indicates that a UFC packet has been generated as sent" end="3" id="int3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This is the raw status that will be asserted even if the event has been masked in AURORA_TX_INTAGG_MASK. This field indicates assertion of AURORA_TX_EXT_FLUSH_DONE-Indicates that the MDO infrastructure has completed flushing is components" end="2" id="int2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This is the raw status that will be asserted even if the event has been masked in AURORA_TX_INTAGG_MASK. This field indicates assertion of AURORA_TX_FLUSH_DONE -Indicates that the Aurora IP has completed flush operation on its Data FIFO" end="1" id="int1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Read of 0x1 indicates a rising edge was detected on the corresponding event line . This is the raw status that will be asserted even if the event has been masked in AURORA_TX_INTAGG_MASK. This field indicates assertion of AURORA_TX_INIT_DONE - Indicates completion of Aurora Initilization sequence" end="0" id="int0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_ERRAGG_MASK" description="" id="AURORA_TX_ERRAGG_MASK" offset="0x21C" width="32">
    
  <bitfield begin="15" description="Mask the the corresponding Error event line from generating an Interrupt. This field masks the interrupt from Error event 15" end="15" id="err15" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Mask the the corresponding Error event line from generating an Interrupt. This field masks the interrupt from Error event 14" end="14" id="err14" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Mask the the corresponding Error event line from generating an Interrupt. This field masks the interrupt from Error event 13" end="13" id="err13" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Mask the the corresponding Error event line from generating an Interrupt. This field masks the interrupt from Error event 12" end="12" id="err12" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Mask the the corresponding Error event line from generating an Interrupt. This field masks the interrupt from Error event 11" end="11" id="err11" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Mask the the corresponding Error event line from generating an Interrupt. This field masks the interrupt from Error event 10" end="10" id="err10" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Mask the the corresponding Error event line from generating an Interrupt. This field masks the interrupt from Error event 9" end="9" id="err9" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Mask the the corresponding Error event line from generating an Interrupt. This field masks the interrupt from Error event 8" end="8" id="err8" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Mask the the corresponding Error event line from generating an Interrupt. This field masks the interrupt from Error event 7" end="7" id="err7" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Mask the the corresponding Error event line from generating an Interrupt. This field masks the interrupt from Error event 6" end="6" id="err6" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Mask the the corresponding Error event line from generating an Interrupt. This field masks the interrupt from Error event 5" end="5" id="err5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Mask the the corresponding Error event line from generating an Interrupt. This field masks the interrupt from Error event 4" end="4" id="err4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Mask the the corresponding Error event line from generating an Interrupt. This field masks the interrupt from Error event 3" end="3" id="err3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Mask the the corresponding Error event line from generating an Interrupt. This field masks the interrupt from Error event 2" end="2" id="err2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Mask the the corresponding Error event line from generating an Interrupt. This field masks the interrupt from Error event 1" end="1" id="err1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Mask error AURORA_TX_UFC_ERR 1 : Error is Masked 0 : Error is Unmasked" end="0" id="err0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_ERRAGG_STATUS" description="" id="AURORA_TX_ERRAGG_STATUS" offset="0x220" width="32">
    
  <bitfield begin="15" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This field indicates assertion of Error event 15" end="15" id="err15" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This field indicates assertion of Error event 14" end="14" id="err14" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This field indicates assertion of Error event 13" end="13" id="err13" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This field indicates assertion of Error event 12" end="12" id="err12" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This field indicates assertion of Error event 11" end="11" id="err11" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This field indicates assertion of Error event 10" end="10" id="err10" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This field indicates assertion of Error event 9" end="9" id="err9" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This field indicates assertion of Error event 8" end="8" id="err8" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This field indicates assertion of Error event 7" end="7" id="err7" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This field indicates assertion of Error event 6" end="6" id="err6" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This field indicates assertion of Error event 5" end="5" id="err5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This field indicates assertion of Error event 4" end="4" id="err4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This field indicates assertion of Error event 3" end="3" id="err3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This field indicates assertion of Error event 2" end="2" id="err2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This field indicates assertion of Error event 1" end="1" id="err1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This field indicates assertion of Error AURORA_TX_UFC_ERR" end="0" id="err0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_ERRAGG_STATUS_RAW" description="" id="AURORA_TX_ERRAGG_STATUS_RAW" offset="0x224" width="32">
    
  <bitfield begin="15" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This is the raw status that will be asseter even if the Error event has been masked in AURORA_TX_ERRAGG_MASK. This field indicates assertion of Error event 15" end="15" id="err15" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This is the raw status that will be asseter even if the Error event has been masked in AURORA_TX_ERRAGG_MASK. This field indicates assertion of Error event 14" end="14" id="err14" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This is the raw status that will be asseter even if the Error event has been masked in AURORA_TX_ERRAGG_MASK. This field indicates assertion of Error event 13" end="13" id="err13" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This is the raw status that will be asseter even if the Error event has been masked in AURORA_TX_ERRAGG_MASK. This field indicates assertion of Error event 12" end="12" id="err12" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This is the raw status that will be asseter even if the Error event has been masked in AURORA_TX_ERRAGG_MASK. This field indicates assertion of Error event 11" end="11" id="err11" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This is the raw status that will be asseter even if the Error event has been masked in AURORA_TX_ERRAGG_MASK. This field indicates assertion of Error event 10" end="10" id="err10" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This is the raw status that will be asseter even if the Error event has been masked in AURORA_TX_ERRAGG_MASK. This field indicates assertion of Error event 9" end="9" id="err9" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This is the raw status that will be asseter even if the Error event has been masked in AURORA_TX_ERRAGG_MASK. This field indicates assertion of Error event 8" end="8" id="err8" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This is the raw status that will be asseter even if the Error event has been masked in AURORA_TX_ERRAGG_MASK. This field indicates assertion of Error event 7" end="7" id="err7" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This is the raw status that will be asseter even if the Error event has been masked in AURORA_TX_ERRAGG_MASK. This field indicates assertion of Error event 6" end="6" id="err6" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This is the raw status that will be asseter even if the Error event has been masked in AURORA_TX_ERRAGG_MASK. This field indicates assertion of Error event 5" end="5" id="err5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This is the raw status that will be asseter even if the Error event has been masked in AURORA_TX_ERRAGG_MASK. This field indicates assertion of Error event 4" end="4" id="err4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This is the raw status that will be asseter even if the Error event has been masked in AURORA_TX_ERRAGG_MASK. This field indicates assertion of Error event 3" end="3" id="err3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This is the raw status that will be asseter even if the Error event has been masked in AURORA_TX_ERRAGG_MASK. This field indicates assertion of Error event 2" end="2" id="err2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This is the raw status that will be asseter even if the Error event has been masked in AURORA_TX_ERRAGG_MASK. This field indicates assertion of Error event 1" end="1" id="err1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Read of 0x1 indicates a rising edge was detected on the corresponding Error event line . This is the raw status that will be asseter even if the Error event has been masked in AURORA_TX_ERRAGG_MASK.  This field indicates assertion of Error AURORA_TX_UFC_ERR - Inidcates that another UFC generation request was received with the IP was in the progress of transmitting the previous request." end="0" id="err0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_SERIALIZER_STATUS0" description="" id="AURORA_TX_SERIALIZER_STATUS0" offset="0x228" width="32">
    
  <bitfield begin="31" description="Status of the serializer. For debug purposes only" end="0" id="status" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_SERIALIZER_STATUS1" description="" id="AURORA_TX_SERIALIZER_STATUS1" offset="0x22C" width="32">
    
  <bitfield begin="31" description="Status of the serializer. For debug purposes only" end="0" id="status" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="AURORA_TX_TPIU_DATA_PACKED" description="" id="AURORA_TX_TPIU_DATA_PACKED" offset="0x230" width="32">
    
  <bitfield begin="31" description="Number of input tpiu bytes packed in the current aurora frame" end="0" id="bytes_packed" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RW0" description="" id="HW_SPARE_RW0" offset="0xFD0" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rw0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RW1" description="" id="HW_SPARE_RW1" offset="0xFD4" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rw1" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RW2" description="" id="HW_SPARE_RW2" offset="0xFD8" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rw2" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RW3" description="" id="HW_SPARE_RW3" offset="0xFDC" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rw3" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RO0" description="" id="HW_SPARE_RO0" offset="0xFE0" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_ro0" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RO1" description="" id="HW_SPARE_RO1" offset="0xFE4" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_ro1" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RO2" description="" id="HW_SPARE_RO2" offset="0xFE8" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_ro2" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RO3" description="" id="HW_SPARE_RO3" offset="0xFEC" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_ro3" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_WPH" description="" id="HW_SPARE_WPH" offset="0xFF0" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_wph" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_REC" description="" id="HW_SPARE_REC" offset="0xFF4" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="31" id="hw_spare_rec31" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Reserved for HW R&amp;D" end="30" id="hw_spare_rec30" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="Reserved for HW R&amp;D" end="29" id="hw_spare_rec29" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="28" description="Reserved for HW R&amp;D" end="28" id="hw_spare_rec28" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Reserved for HW R&amp;D" end="27" id="hw_spare_rec27" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="26" description="Reserved for HW R&amp;D" end="26" id="hw_spare_rec26" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Reserved for HW R&amp;D" end="25" id="hw_spare_rec25" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Reserved for HW R&amp;D" end="24" id="hw_spare_rec24" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="Reserved for HW R&amp;D" end="23" id="hw_spare_rec23" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="22" description="Reserved for HW R&amp;D" end="22" id="hw_spare_rec22" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="21" description="Reserved for HW R&amp;D" end="21" id="hw_spare_rec21" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="20" description="Reserved for HW R&amp;D" end="20" id="hw_spare_rec20" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="Reserved for HW R&amp;D" end="19" id="hw_spare_rec19" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="Reserved for HW R&amp;D" end="18" id="hw_spare_rec18" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="Reserved for HW R&amp;D" end="17" id="hw_spare_rec17" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Reserved for HW R&amp;D" end="16" id="hw_spare_rec16" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="Reserved for HW R&amp;D" end="15" id="hw_spare_rec15" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Reserved for HW R&amp;D" end="14" id="hw_spare_rec14" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Reserved for HW R&amp;D" end="13" id="hw_spare_rec13" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Reserved for HW R&amp;D" end="12" id="hw_spare_rec12" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Reserved for HW R&amp;D" end="11" id="hw_spare_rec11" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Reserved for HW R&amp;D" end="10" id="hw_spare_rec10" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Reserved for HW R&amp;D" end="9" id="hw_spare_rec9" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Reserved for HW R&amp;D" end="8" id="hw_spare_rec8" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Reserved for HW R&amp;D" end="7" id="hw_spare_rec7" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Reserved for HW R&amp;D" end="6" id="hw_spare_rec6" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Reserved for HW R&amp;D" end="5" id="hw_spare_rec5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Reserved for HW R&amp;D" end="4" id="hw_spare_rec4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Reserved for HW R&amp;D" end="3" id="hw_spare_rec3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Reserved for HW R&amp;D" end="2" id="hw_spare_rec2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Reserved for HW R&amp;D" end="1" id="hw_spare_rec1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rec0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="LOCK0_KICK0" description="  - KICK0 component " id="LOCK0_KICK0" offset="0x1008" width="32">
    
  <bitfield begin="31" description=" - KICK0 component" end="0" id="" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="LOCK0_KICK1" description="  - KICK1 component " id="LOCK0_KICK1" offset="0x100C" width="32">
    
  <bitfield begin="31" description=" - KICK1 component" end="0" id="" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="intr_raw_status" description=" Interrupt Raw Status/Set Register " id="intr_raw_status" offset="0x1010" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="intr_enabled_status_clear" description=" Interrupt Enabled Status/Clear register " id="intr_enabled_status_clear" offset="0x1014" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="intr_enable" description=" Interrupt Enable register " id="intr_enable" offset="0x1018" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="intr_enable_clear" description=" Interrupt Enable Clear register " id="intr_enable_clear" offset="0x101C" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="eoi" description=" EOI register " id="eoi" offset="0x1020" width="32">
    
  <bitfield begin="7" description="EOI vector value. Write this with interrupt distribution value in the chip." end="0" id="" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="fault_address" description=" Fault Address register " id="fault_address" offset="0x1024" width="32">
    
  <bitfield begin="31" description="Fault Address." end="0" id="" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="fault_type_status" description=" Fault Type Status register " id="fault_type_status" offset="0x1028" width="32">
    
  <bitfield begin="6" description="Non-secure access." end="6" id="" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="5" description="Fault Type   10_0000 = Supervisor read  fault  - priv = 1 dir = 1 dtype != 1    01_0000 = Supervisor write fault  - priv = 1 dir = 0   00_1000 = Supervisor execute fault - priv = 1 dir = 1 dtype = 1   00_0100 = User read  fault - priv = 0 dir = 1 dtype = 1   00_0010 = User write fault - priv = 0 dir = 0   00_0001 = User execute fault - priv = 0 dir = 1 dtype = 1   00_0000 = No fault" end="0" id="" rwaccess="R" width="6"></bitfield>
  </register>
  
  
  <register acronym="fault_attr_status" description=" Fault Attribute Status register " id="fault_attr_status" offset="0x102C" width="32">
    
  <bitfield begin="31" description="XID." end="20" id="" rwaccess="R" width="12"></bitfield>
    
  <bitfield begin="19" description="Route ID." end="8" id="" rwaccess="R" width="12"></bitfield>
    
  <bitfield begin="7" description="Privilege ID." end="0" id="" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="fault_clear" description=" Fault Clear register " id="fault_clear" offset="0x1030" width="32">
    
  <bitfield begin="0" description="Fault clear. Writing a 1 clears the current fault. Writing a 0 has no effect." end="0" id="" rwaccess="W" width="1"></bitfield>
  </register>
</module>
