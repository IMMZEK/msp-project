/**
 * \file  AM263_PLL.gel
 *
 * \brief GEL File to configure the clocking infrastructure on AM263x
 */

/* Copyright (c) 2021, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/* Revision history:
 * 
 */
// Register Definitions and Offsets
#define MSS_TOP_RCM_PID                                                   (0x00000000U)
#define MSS_TOP_RCM_WARM_RESET_CONFIG                                     (0x00000004U)
#define MSS_TOP_RCM_WARM_RESET_REQ                                        (0x00000008U)
#define MSS_TOP_RCM_WARM_RST_CAUSE                                        (0x0000000CU)
#define MSS_TOP_RCM_WARM_RST_CAUSE_CLR                                    (0x00000010U)
#define MSS_TOP_RCM_RCOSC32K_CTRL                                         (0x00000014U)
#define MSS_TOP_RCM_LIMP_MODE_EN                                          (0x00000018U)
#define MSS_TOP_RCM_PLL_REF_CLK_SRC_SEL                                   (0x0000001CU)
#define MSS_TOP_RCM_PAD_XTAL_CTRL                                         (0x00000020U)
#define MSS_TOP_RCM_SOP_MODE_VALUE                                        (0x00000024U)
#define MSS_TOP_RCM_CLK_LOSS_STATUS                                       (0x00000028U)
#define MSS_TOP_RCM_WARM_RSTTIME1                                         (0x00000030U)
#define MSS_TOP_RCM_WARM_RSTTIME2                                         (0x00000034U)
#define MSS_TOP_RCM_WARM_RSTTIME3                                         (0x00000038U)
#define MSS_TOP_RCM_PLL_CORE_PWRCTRL                                      (0x00000400U)
#define MSS_TOP_RCM_PLL_CORE_CLKCTRL                                      (0x00000404U)
#define MSS_TOP_RCM_PLL_CORE_TENABLE                                      (0x00000408U)
#define MSS_TOP_RCM_PLL_CORE_TENABLEDIV                                   (0x0000040CU)
#define MSS_TOP_RCM_PLL_CORE_M2NDIV                                       (0x00000410U)
#define MSS_TOP_RCM_PLL_CORE_MN2DIV                                       (0x00000414U)
#define MSS_TOP_RCM_PLL_CORE_FRACDIV                                      (0x00000418U)
#define MSS_TOP_RCM_PLL_CORE_BWCTRL                                       (0x0000041CU)
#define MSS_TOP_RCM_PLL_CORE_FRACCTRL                                     (0x00000420U)
#define MSS_TOP_RCM_PLL_CORE_STATUS                                       (0x00000424U)
#define MSS_TOP_RCM_PLL_CORE_HSDIVIDER                                    (0x00000428U)
#define MSS_TOP_RCM_PLL_CORE_HSDIVIDER_CLKOUT0                            (0x0000042CU)
#define MSS_TOP_RCM_PLL_CORE_HSDIVIDER_CLKOUT1                            (0x00000430U)
#define MSS_TOP_RCM_PLL_CORE_HSDIVIDER_CLKOUT2                            (0x00000434U)
#define MSS_TOP_RCM_PLL_CORE_RSTCTRL                                      (0x0000043CU)
#define MSS_TOP_RCM_PLL_CORE_HSDIVIDER_RSTCTRL                            (0x00000440U)
#define MSS_TOP_RCM_R5SS_CLK_SRC_SEL                                      (0x00000500U)
#define MSS_TOP_RCM_R5SS_CLK_STATUS                                       (0x00000504U)
#define MSS_TOP_RCM_R5SS0_CLK_DIV_SEL                                     (0x00000510U)
#define MSS_TOP_RCM_R5SS1_CLK_DIV_SEL                                     (0x00000514U)
#define MSS_TOP_RCM_R5SS0_CLK_GATE                                        (0x00000518U)
#define MSS_TOP_RCM_R5SS1_CLK_GATE                                        (0x0000051CU)
#define MSS_TOP_RCM_SYS_CLK_DIV_VAL                                       (0x00000520U)
#define MSS_TOP_RCM_SYS_CLK_GATE                                          (0x00000524U)
#define MSS_TOP_RCM_SYS_CLK_STATUS                                        (0x00000528U)
#define MSS_TOP_RCM_PLL_PER_PWRCTRL                                       (0x00000800U)
#define MSS_TOP_RCM_PLL_PER_CLKCTRL                                       (0x00000804U)
#define MSS_TOP_RCM_PLL_PER_TENABLE                                       (0x00000808U)
#define MSS_TOP_RCM_PLL_PER_TENABLEDIV                                    (0x0000080CU)
#define MSS_TOP_RCM_PLL_PER_M2NDIV                                        (0x00000810U)
#define MSS_TOP_RCM_PLL_PER_MN2DIV                                        (0x00000814U)
#define MSS_TOP_RCM_PLL_PER_FRACDIV                                       (0x00000818U)
#define MSS_TOP_RCM_PLL_PER_BWCTRL                                        (0x0000081CU)
#define MSS_TOP_RCM_PLL_PER_FRACCTRL                                      (0x00000820U)
#define MSS_TOP_RCM_PLL_PER_STATUS                                        (0x00000824U)
#define MSS_TOP_RCM_PLL_PER_HSDIVIDER                                     (0x00000828U)
#define MSS_TOP_RCM_PLL_PER_HSDIVIDER_CLKOUT0                             (0x0000082CU)
#define MSS_TOP_RCM_PLL_PER_HSDIVIDER_CLKOUT1                             (0x00000830U)
#define MSS_TOP_RCM_PLL_PER_RSTCTRL                                       (0x0000083CU)
#define MSS_TOP_RCM_PLL_PER_HSDIVIDER_RSTCTRL                             (0x00000840U)
#define MSS_TOP_RCM_CLKOUT0_CLK_SRC_SEL                                   (0x00000C00U)
#define MSS_TOP_RCM_CLKOUT1_CLK_SRC_SEL                                   (0x00000C04U)
#define MSS_TOP_RCM_CLKOUT0_DIV_VAL                                       (0x00000C08U)
#define MSS_TOP_RCM_CLKOUT1_DIV_VAL                                       (0x00000C0CU)
#define MSS_TOP_RCM_CLKOUT0_CLK_GATE                                      (0x00000C10U)
#define MSS_TOP_RCM_CLKOUT1_CLK_GATE                                      (0x00000C14U)
#define MSS_TOP_RCM_CLKOUT0_CLK_STATUS                                    (0x00000C18U)
#define MSS_TOP_RCM_CLKOUT1_CLK_STATUS                                    (0x00000C1CU)
#define MSS_TOP_RCM_TRCCLKOUT_CLK_SRC_SEL                                 (0x00000C20U)
#define MSS_TOP_RCM_TRCCLKOUT_DIV_VAL                                     (0x00000C24U)
#define MSS_TOP_RCM_TRCCLKOUT_CLK_GATE                                    (0x00000C28U)
#define MSS_TOP_RCM_TRCCLKOUT_CLK_STATUS                                  (0x00000C2CU)
#define MSS_TOP_RCM_DFT_DMLED_EXEC                                        (0x00000D00U)
#define MSS_TOP_RCM_DFT_DMLED_STATUS                                      (0x00000D04U)
#define MSS_TOP_RCM_HW_REG0                                               (0x00000E00U)
#define MSS_TOP_RCM_HW_REG1                                               (0x00000E04U)
#define MSS_TOP_RCM_HW_REG2                                               (0x00000E08U)
#define MSS_TOP_RCM_HW_REG3                                               (0x00000E0CU)
#define MSS_TOP_RCM_HW_SPARE_RW0                                          (0x00000FD0U)
#define MSS_TOP_RCM_HW_SPARE_RW1                                          (0x00000FD4U)
#define MSS_TOP_RCM_HW_SPARE_RW2                                          (0x00000FD8U)
#define MSS_TOP_RCM_HW_SPARE_RW3                                          (0x00000FDCU)
#define MSS_TOP_RCM_HW_SPARE_RO0                                          (0x00000FE0U)
#define MSS_TOP_RCM_HW_SPARE_RO1                                          (0x00000FE4U)
#define MSS_TOP_RCM_HW_SPARE_RO2                                          (0x00000FE8U)
#define MSS_TOP_RCM_HW_SPARE_RO3                                          (0x00000FECU)
#define MSS_TOP_RCM_HW_SPARE_WPH                                          (0x00000FF0U)
#define MSS_TOP_RCM_HW_SPARE_REC                                          (0x00000FF4U)
#define MSS_TOP_RCM_LOCK0_KICK0                                           (0x00001008U)
#define MSS_TOP_RCM_LOCK0_KICK1                                           (0x0000100CU)
#define MSS_TOP_RCM_INTR_RAW_STATUS                                       (0x00001010U)
#define MSS_TOP_RCM_INTR_ENABLED_STATUS_CLEAR                             (0x00001014U)
#define MSS_TOP_RCM_INTR_ENABLE                                           (0x00001018U)
#define MSS_TOP_RCM_INTR_ENABLE_CLEAR                                     (0x0000101CU)
#define MSS_TOP_RCM_EOI                                                   (0x00001020U)
#define MSS_TOP_RCM_FAULT_ADDRESS                                         (0x00001024U)
#define MSS_TOP_RCM_FAULT_TYPE_STATUS                                     (0x00001028U)
#define MSS_TOP_RCM_FAULT_ATTR_STATUS                                     (0x0000102CU)
#define MSS_TOP_RCM_FAULT_CLEAR                                           (0x00001030U)


menuitem "AM263x PLLs Initialization";


hotmenu Program_Core_PLL() 
{
    unsigned int val_pll_core_stat = 0;
    unsigned int val_pll_per_stat = 0;
    unsigned int val_hsdiv_clkout;   

    val_pll_core_stat = Read_MMR(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_STATUS);
    if((val_pll_core_stat & 0x00000400) != 0x00000400)
    {
        // N
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_M2NDIV, 9, 8, 0);
        //M2
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_M2NDIV, 1, 7, 16);
        
        //M
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_MN2DIV, 0x320, 12, 0); 
       
        //N2
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_MN2DIV, 0x0, 4, 16); 

        //SD divider of the PLL with the value of 0x8 to get the optimum jitter performance
        Write_MMR_Field(0x53200418, 8, 8,24);
        
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_CLKCTRL, 0,1, 23);        //Idle

        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_CLKCTRL, 0,1,0);  		//Soft Reset

        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_TENABLE, 1,1,0);          // PLL_CORE_TENABLE = 1;
        
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_CLKCTRL, 1,1,0);          //Soft Reset
        
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_TENABLE, 0,1,0);          // PLL_CORE_TENABLE = 0;
            
        Write_MMR(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_TENABLEDIV, 1);                 // PLL_CORE_TENABLEDIV = 1;
        Write_MMR(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_TENABLEDIV, 0);                 // PLL_CORE_TENABLEDIV = 0;
        
        do
        {     
            val_pll_core_stat = Read_MMR(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_STATUS);
        }while( ((val_pll_core_stat & 0x00000400) != 0x00000400) ) ;
        
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_HSDIVIDER_CLKOUT0, 0x4, 5, 0);//CLKOUT0
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_HSDIVIDER_CLKOUT1, 0x3, 5, 0);//CLKOUT1
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_HSDIVIDER_CLKOUT2, 0x4, 5, 0);//CLKOUT2
        
        
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_HSDIVIDER, 1,1,2);   // PLL_CORE_HSDIV_TENABLEDIV = 1;
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_HSDIVIDER, 0,1,2);   // PLL_CORE_HSDIV_TENABLEDIV = 0;
        
        
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_HSDIVIDER_CLKOUT0, 0x1, 1, 8);//CLKOUT0
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_HSDIVIDER_CLKOUT1, 0x1, 1, 8);//CLKOUT1
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_CORE_HSDIVIDER_CLKOUT2, 0x1, 1, 8);//CLKOUT1
        
        GEL_TextOut("CORE PLL Configuration Complete \n");
    
    }
}
hotmenu Program_Per_PLL() 
{

    unsigned int  val_pll_core_stat = 0;
    unsigned int val_pll_per_stat = 0;
    unsigned int val_hsdiv_clkout;   

    val_pll_per_stat = Read_MMR(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_PER_STATUS);
    if((val_pll_per_stat & 0x00000400) != 0x00000400)
    {
        // N
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_PER_M2NDIV, 9, 8, 0);
        //M2
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_PER_M2NDIV, 1, 7, 16);
       
        //M
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_PER_MN2DIV, 0x300, 12, 0); 
       
        //N2
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_PER_MN2DIV, 0x0,4,16); 
        
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_PER_CLKCTRL, 0,1,23);  //Idle
        
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_PER_TENABLE,1,1,0);    // PLL_CORE_TENABLE = 1;
        
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_PER_CLKCTRL, 1,1,0);   //Soft Reset
        
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_PER_TENABLE,0,1,0);    // PLL_CORE_TENABLE = 0;
            
        Write_MMR(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_PER_TENABLEDIV,1);           // PLL_CORE_TENABLEDIV = 1;
        Write_MMR(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_PER_TENABLEDIV,0);           // PLL_CORE_TENABLEDIV = 0;
        
        do
        {     
            val_pll_per_stat = Read_MMR(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_PER_STATUS);
        }while( ((val_pll_per_stat & 0x00000400) != 0x00000400) ) ;
        
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_PER_HSDIVIDER_CLKOUT0, 0xB, 5, 0);//CLKOUT0
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_PER_HSDIVIDER_CLKOUT1, 0x9, 5, 0);//CLKOUT1
        
      
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_PER_HSDIVIDER, 1,1,2);   // PLL_PER_HSDIV_TENABLEDIV = 1;
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_PER_HSDIVIDER, 0,1,2);   // PLL_PER_HSDIV_TENABLEDIV = 0;
         
        //Ungate
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_PER_HSDIVIDER_CLKOUT0, 0x1, 1, 8);//CLKOUT0
        Write_MMR_Field(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_PLL_PER_HSDIVIDER_CLKOUT1, 0x1, 1, 8);//CLKOUT1

        GEL_TextOut("PER PLL Configuration Complete\n");
    }
}

hotmenu Program_R5FCLK_400M_SYSCLK_200M()
{
    Program_Core_PLL();
    Program_Per_PLL();
	Program_SYS_CLK_DIVBY2();
	// Switch R5SS and SYS_CLK to Core PLL, so that R5 run at 400MHz
	Program_R5F_SYS_CLK_SRC();
	GEL_TextOut("**Clock Programmed**\nR5F=400MHz and SYS_CLK=200MHz\n");
}

hotmenu Program_R5FCLK_200M_SYSCLK_200M()
{
    Program_Core_PLL();
    Program_Per_PLL();
	Program_SYS_CLK_DIVBY2();
	Program_R5FSS0_CLK_DIVBY2();
	Program_R5FSS1_CLK_DIVBY2();
	// Switch R5SS and SYS_CLK to Core PLL, so that R5 run at 200MHz
	Program_R5F_SYS_CLK_SRC();
	GEL_TextOut("**Clock Programmed**\nR5F=200MHz and SYS_CLK=200MHz \n");
}

hotmenu Program_SYS_CLK_DIVBY2()
{
    // Enable DIV BY 2 on SYS_CLK (GCM)
     Write_MMR(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_SYS_CLK_DIV_VAL, 0x111);   // SYS_CLK_DIV_VAL = 0x111;    // DIV val=1 means divide by 2,
	 GEL_TextOut("SYS_CLK DIVBY2 \n");
}


hotmenu Program_R5F_SYS_CLK_SRC()
{
    // Select DPLL_CORE_HSDIV0_CLKOUT0 as source for R5SS clock
    // (and SYS_CLK; due to same selector by architecture)
    unsigned int src_sel_val = 0x222;
    Write_MMR(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_R5SS_CLK_SRC_SEL, src_sel_val);   // MSS_CR5_CLK_SRC_SEL = 0x222;
	
	GEL_TextOut("DPLL_CORE_HSDIV0_CLKOUT0 selected as CLK source for R5FSS & SYS CLKs \n");
    /* TODO: Wait for clock switch to complete
    unsigned int clk_stat = 0xa5a5;
    while( (clk_stat & MSS_TOP_RCM_R5SS_CLK_STATUS_CLKINUSE_MASK) != src_sel_val) {
        clk_stat = HWREG(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_R5SS_CLK_STATUS);
    } */
}

hotmenu Program_R5FSS0_CLK_DIVBY2()
{
    // Enable DIV BY 2 on R5SS0_CLK (GCM)
    Write_MMR(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_R5SS0_CLK_DIV_SEL, 0x111);
	GEL_TextOut("R5FSS0 CLK DIVBY2 \n");
}


hotmenu Program_R5FSS1_CLK_DIVBY2()
{
     // Enable DIV BY 2 on R5SS1_CLK (GCM)
     Write_MMR(MSS_TOP_RCM_U_BASE + MSS_TOP_RCM_R5SS1_CLK_DIV_SEL, 0x111);  
	 GEL_TextOut("R5FSS1 CLK DIVBY2 \n");
}