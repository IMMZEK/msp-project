<module name="PRUSS1_UART" acronym="" XML_version="1.0" HW_revision="n/a" description="">
  <register id="PRUSS_UART_RBR_THR_REGISTERS" acronym="PRUSS_UART_RBR_THR_REGISTERS" offset="0x0" page="2" width="32" description="In the non-FIFO mode, when a character is placed in Receiver buffer register and the receiver data-ready interrupt is enabled (DR = 1 in Interrupt identification register), an interrupt is generated. This interrupt is cleared when the character is read from Receiver buffer register. In the FIFO mode, the interrupt is generated when the FIFO is filled to the trigger level selected in the FIFO control register, and it is cleared when the FIFO contents drop below the trigger level. In the non-FIFO mode, if Transmitter holding register is empty and the THR empty (THRE) interrupt is enabled (ETBEI = 1 in Interrupt enable register), an interrupt is generated. This interrupt is cleared when a character is loaded into Transmitter holding register or the Interrupt identification register is read. In the FIFO mode, the interrupt is generated when the transmitter FIFO is empty, and it is cleared when at least one byte is loaded into the FIFO or Interrupt identification register is read.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="DATA" width="8" begin="7" end="0" resetval="0x0" description="Read: Read Receive Buffer RegisterWrite: Write Transmitter Holding Register ." range="" rwaccess="RW"/>
  </register>
  <register id="PRUSS_UART_INTERRUPT_ENABLE_REGISTER" acronym="PRUSS_UART_INTERRUPT_ENABLE_REGISTER" offset="0x4" page="2" width="32" description="The Interrupt enable register is used to individually enable or disable each type of interrupt request that can be generated by the UART. Each interrupt request that is enabled in Interrupt enable register is forwarded to the CPU.">
    <bitfield id="RESERVED" width="28" begin="31" end="4" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="EDSSI" width="1" begin="3" end="3" resetval="0x0" description="Enable Modem Status Interrupt" range="" rwaccess="RW"/>
    <bitfield id="ELSI" width="1" begin="2" end="2" resetval="0x0" description="Receiver line status interrupt enable." range="" rwaccess="RW">
      <bitenum value="0" id="DIS" token="ELSI_0" description="Receiver line status interrupt is disabled."/>
      <bitenum value="1" id="EN" token="ELSI_1" description="Receiver line status interrupt is enabled."/>
    </bitfield>
    <bitfield id="ETBEI" width="1" begin="1" end="1" resetval="0x0" description="Transmitter holding register empty interrupt enable." range="" rwaccess="RW">
      <bitenum value="0" id="DIS" token="ETBEI_0" description="Transmitter holding register empty interrupt is disabled."/>
      <bitenum value="1" id="EN" token="ETBEI_1" description="Transmitter holding register empty interrupt is enabled."/>
    </bitfield>
    <bitfield id="ERBI" width="1" begin="0" end="0" resetval="0x0" description="Receiver data available interrupt and character timeout indication interrupt enable." range="" rwaccess="RW">
      <bitenum value="0" id="DIS" token="ERBI_0" description="Receiver data available interrupt and character timeout indication interrupt is disabled."/>
      <bitenum value="1" id="EN" token="ERBI_1" description="Receiver data available interrupt and character timeout indication interrupt is enabled."/>
    </bitfield>
  </register>
  <register id="PRUSS_UART_INTERRUPT_IDENTIFICATION_REGISTER_FIFO_CONTROL_REGISTER" acronym="PRUSS_UART_INTERRUPT_IDENTIFICATION_REGISTER_FIFO_CONTROL_REGISTER" offset="0x8" page="2" width="32" description="The Interrupt identification register is a read-only register at the same address as the FIFO control register, which is a write-only register. When an interrupt is generated and enabled in the Interrupt enable register, Interrupt identification register indicates that an interrupt is pending in the IPEND bit and encodes the type of interrupt in the INTID bits. Reading Interrupt identification register clears any THR empty (THRE) interrupts that are pending. The FIFOEN bit in Interrupt identification register can be checked to determine whether the UART is in the FIFO mode or the non-FIFO mode. Use FIFO control register to enable and clear the FIFOs and to select the receiver FIFO trigger level. The FIFOEN bit in FIFO control register must be set to 1 before other FIFO control register bits are written to or the FIFO control register bits are not programmed.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="FIFOEN_RXFIFTL" width="2" begin="7" end="6" resetval="0x0" description="Read: FIFOs enabled.0x1-0x2: Reserved . Write: Receiver FIFO trigger level. RXFIFTL sets the trigger level for the receiver FIFO. When the trigger level is reached, a receiver data-ready interrupt is generated (if the interrupt request is enabled). Once the FIFO drops below the trigger level, the interrupt is cleared. ." range="" rwaccess="RW">
      <bitenum value="0" id="Non-FIFO_mode" token="FIFOEN_RXFIFTL_0" description="Non-FIFO mode"/>
      <bitenum value="3" id="FIFOEN_FIFO_(FCR)_3" token="FIFOEN_RXFIFTL_3" description="FIFOs are enabled. FIFOEN bit in the FIFO control register (FCR) is set to 1."/>
      <bitenum value="0" id="1_byte" token="FIFOEN_RXFIFTL_0" description="1 byte"/>
      <bitenum value="1" id="4_bytes" token="FIFOEN_RXFIFTL_1" description="4 bytes"/>
      <bitenum value="2" id="8_bytes" token="FIFOEN_RXFIFTL_2" description="8 bytes"/>
      <bitenum value="3" id="14_bytes" token="FIFOEN_RXFIFTL_3" description="14 bytes"/>
    </bitfield>
    <bitfield id="RESERVED" width="2" begin="5" end="4" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="INTID" width="3" begin="3" end="1" resetval="0x0" description="Read: Interrupt type. See .0x4-0x5: Reserved . Write: . Bit 3: DMAMODE1: DMA MODE1 enable if FIFOs are enabled. Always write 1 to DMAMODE1. After a hardware reset, change DMAMODE1 from 0 to 1. DMAMODE1 = 1 is a requirement for proper communication between the UART and the EDMA controller. . Bit 2: TXCLR: Transmitter FIFO clear. Write a 1 to TXCLR to clear the bit. . Bit 1: RXCLR: Receiver FIFO clear. Write a 1 to RXCLR to clear the bit. ." range="" rwaccess="RW">
      <bitenum value="0" id="Reserved" token="INTID_0" description="Reserved"/>
      <bitenum value="1" id="1" token="INTID_1" description="Transmitter holding register empty (priority 3)"/>
      <bitenum value="2" id="Receiver_data_available_(priority_2)" token="INTID_2" description="Receiver data available (priority 2)"/>
      <bitenum value="3" id="3" token="INTID_3" description="Receiver line status (priority 1, highest)"/>
      <bitenum value="6" id="6" token="INTID_6" description="Character timeout indication (priority 2)"/>
      <bitenum value="7" id="Reserved" token="INTID_7" description="Reserved"/>
      <bitenum value="0" id="DIS" token="INTID_0" description="DMA MODE1 is disabled."/>
      <bitenum value="1" id="EN" token="INTID_1" description="DMA MODE1 is enabled."/>
      <bitenum value="0" id="No_effect." token="INTID_0" description="No effect."/>
      <bitenum value="1" id="FIFO_FIFO_1" token="INTID_1" description="Clears transmitter FIFO and resets the transmitter FIFO counter. The shift register is not cleared."/>
      <bitenum value="0" id="No_effect." token="INTID_0" description="No effect."/>
      <bitenum value="1" id="FIFO_FIFO_1" token="INTID_1" description="Clears receiver FIFO and resets the receiver FIFO counter. The shift register is not cleared."/>
    </bitfield>
    <bitfield id="IPEND_FIFOEN" width="1" begin="0" end="0" resetval="0x1" description="Read: Interrupt pending. When any UART interrupt is generated and is enabled in IER, IPEND is forced to 0. IPEND remains 0 until all pending interrupts are cleared or until a hardware reset occurs. If no interrupts are enabled, IPEND is never forced to 0.Write: Transmitter and receiver FIFOs mode enable. FIFOEN must be set before other FCR bits are written to or the FCR bits are not programmed. Clearing this bit clears the FIFO counters. ." range="" rwaccess="RW">
      <bitenum value="0" id="Interrupts_pending." token="IPEND_FIFOEN_0" description="Interrupts pending."/>
      <bitenum value="1" id="No_interrupts_pending." token="IPEND_FIFOEN_1" description="No interrupts pending."/>
      <bitenum value="0" id="FIFO_0" token="IPEND_FIFOEN_0" description="Non-FIFO mode. The transmitter and receiver FIFOs are disabled, and the FIFO pointers are cleared."/>
      <bitenum value="1" id="FIFO_1" token="IPEND_FIFOEN_1" description="FIFO mode. The transmitter and receiver FIFOs are enabled."/>
    </bitfield>
  </register>
  <register id="PRUSS_UART_LINE_CONTROL_REGISTER" acronym="PRUSS_UART_LINE_CONTROL_REGISTER" offset="0xC" page="2" width="32" description="The system programmer controls the format of the asynchronous data communication exchange by using Line control register. In addition, the programmer can retrieve, inspect, and modify the content of line control register; this eliminates the need for separate storage of the line characteristics in system memory.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="DLAB" width="1" begin="7" end="7" resetval="0x0" description="Divisor latch access bit. The divisor latch registers (DLL and DLH) can be accessed at dedicated addresses or at addresses shared by RBR, THR, and IER. Using the shared addresses requires toggling DLAB to change which registers are selected. Keep DLAB = 0 when dedicated addresses are used." range="" rwaccess="RW">
      <bitenum value="0" id="(RBR),_(THR),_(IER)_RBR,_THR,_DLL,_CPU_RBR_THR._IER_DLH,_CPU_IER._0" token="DLAB_0" description="Allows access to the receiver buffer register (RBR), the transmitter holding register (THR), and the interrupt enable register (IER) selected. At the address shared by RBR, THR, and DLL, the CPU can read from RBR and write to THR. At the address shared by IER and DLH, the CPU can read from and write to IER."/>
      <bitenum value="1" id="(DLL_DLH)._RBR,_THR,_DLL,_CPU_DLL._IER_DLH,_CPU_DLH._1" token="DLAB_1" description="Allows access to the divisor latches of the baud generator during a read or write operation (DLL and DLH). At the address shared by RBR, THR, and DLL, the CPU can read from and write to DLL. At the address shared by IER and DLH, the CPU can read from and write to DLH."/>
    </bitfield>
    <bitfield id="BC" width="1" begin="6" end="6" resetval="0x0" description="Break control." range="" rwaccess="RW">
      <bitenum value="0" id="DIS" token="BC_0" description="Break condition is disabled."/>
      <bitenum value="1" id="EN" token="BC_1" description="Break condition is transmitted to the receiving UART. A break condition is a condition where the UARTn_TXD signal is forced to the spacing (cleared) state."/>
    </bitfield>
    <bitfield id="SP" width="1" begin="5" end="5" resetval="0x0" description="Stick parity. The SP bit works in conjunction with the EPS and PEN bits. The relationship between the SP, EPS, and PEN bits is summarized in." range="" rwaccess="RW">
      <bitenum value="0" id="DIS" token="SP_0" description="Stick parity is disabled."/>
      <bitenum value="1" id="EN" token="SP_1" description="Stick parity is enabled."/>
    </bitfield>
    <bitfield id="EPS" width="1" begin="4" end="4" resetval="0x0" description="Even parity select. Selects the parity when parity is enabled (PEN = 1). The EPS bit works in conjunction with the SP and PEN bits. The relationship between the SP, EPS, and PEN bits is summarized in." range="" rwaccess="RW">
      <bitenum value="0" id="PARITY_0" token="EPS_0" description="Odd parity is selected (an odd number of logic 1s is transmitted or checked in the data and PARITY bits)."/>
      <bitenum value="1" id="PARITY_1" token="EPS_1" description="Even parity is selected (an even number of logic 1s is transmitted or checked in the data and PARITY bits)."/>
    </bitfield>
    <bitfield id="PEN" width="1" begin="3" end="3" resetval="0x0" description="Parity enable. The PEN bit works in conjunction with the SP and EPS bits. The relationship between the SP, EPS, and PEN bits is summarized in." range="" rwaccess="RW">
      <bitenum value="0" id="PARITY_0" token="PEN_0" description="No PARITY bit is transmitted or checked."/>
      <bitenum value="1" id="STOP_1" token="PEN_1" description="Parity bit is generated in transmitted data and is checked in received data between the last data word bit and the first STOP bit."/>
    </bitfield>
    <bitfield id="STB" width="1" begin="2" end="2" resetval="0x0" description="Number of STOP bits generated. STB specifies 1, 1.5, or 2 STOP bits in each transmitted character. When STB = 1, the WLS bit determines the number of STOP bits. The receiver clocks only the first STOP bit, regardless of the number of STOP bits selected. The number of STOP bits generated is summarized in." range="" rwaccess="RW">
      <bitenum value="0" id="1_STOP_bit_is_generated." token="STB_0" description="1 STOP bit is generated."/>
      <bitenum value="1" id="WLS_STOP_1" token="STB_1" description="WLS bit determines the number of STOP bits:"/>
    </bitfield>
    <bitfield id="WLS" width="2" begin="1" end="0" resetval="0x0" description="Word length select. Number of bits in each transmitted or received serial character. When STB = 1, the WLS bit determines the number of STOP bits." range="" rwaccess="RW">
      <bitenum value="0" id="5_bits" token="WLS_0" description="5 bits"/>
      <bitenum value="1" id="6_bits" token="WLS_1" description="6 bits"/>
      <bitenum value="2" id="7_bits" token="WLS_2" description="7 bits"/>
      <bitenum value="3" id="8_bits" token="WLS_3" description="8 bits"/>
    </bitfield>
  </register>
  <register id="PRUSS_UART_MODEM_CONTROL_REGISTER" acronym="PRUSS_UART_MODEM_CONTROL_REGISTER" offset="0x10" page="2" width="32" description="The Modem control register provides the ability to enable/disable the autoflow functions, and enable/disable the loopback function for diagnostic purposes.">
    <bitfield id="RESERVED" width="26" begin="31" end="6" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="AFE" width="1" begin="5" end="5" resetval="0x0" description="Autoflow control enable. Autoflow control allows the and signals to provide handshaking between UARTs during data transfer. When AFE = 1, the RTS bit determines the autoflow control enabled. Note that all UARTs do not support this feature, see the device-specific data manual for supported features. If this feature is not available, this bit is reserved in this device and should be cleared to 0." range="" rwaccess="RW">
      <bitenum value="0" id="DIS" token="AFE_0" description="Autoflow control is disabled."/>
      <bitenum value="1" id="EN" token="AFE_1" description="Autoflow control is enabled:"/>
    </bitfield>
    <bitfield id="LOOP" width="1" begin="4" end="4" resetval="0x0" description="Loop back mode enable. LOOP is used for the diagnostic testing using the loop back feature." range="" rwaccess="RW">
      <bitenum value="0" id="DIS" token="LOOP_0" description="Loop back mode is disabled."/>
      <bitenum value="1" id="EN" token="LOOP_1" description="Loop back mode is enabled. When LOOP is set, the following occur:"/>
    </bitfield>
    <bitfield id="OUT2" width="1" begin="3" end="3" resetval="0x0" description="OUT2 Control Bit" range="" rwaccess="RW"/>
    <bitfield id="OUT1" width="1" begin="2" end="2" resetval="0x0" description="OUT1 Control Bit" range="" rwaccess="RW"/>
    <bitfield id="RTS" width="1" begin="1" end="1" resetval="0x0" description="RTS control. When AFE = 1, the RTS bit determines the autoflow control enabled. Note that all UARTs do not support this feature, see the device-specific data manual for supported features. If this feature is not available, this bit is reserved in this device and should be cleared to 0." range="" rwaccess="RW">
      <bitenum value="0" id="DIS" token="RTS_0" description="UARTn_RTS is disabled, UARTn_CTS is only enabled."/>
      <bitenum value="1" id="EN" token="RTS_1" description="UARTn_RTS and UARTn_CTS are enabled."/>
    </bitfield>
    <bitfield id="RESERVED" width="1" begin="0" end="0" resetval="0" description="Reserved" range="" rwaccess="R"/>
  </register>
  <register id="PRUSS_UART_LINE_STATUS_REGISTER" acronym="PRUSS_UART_LINE_STATUS_REGISTER" offset="0x14" page="2" width="32" description="The Line status register provides information to the CPU concerning the status of data transfers. Line status register is intended for read operations only; do not write to this register. Bits 1 through 4 record the error conditions that produce a receiver line status interrupt.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="RXFIFOE" width="1" begin="7" end="7" resetval="0x0" description="Receiver FIFO error. In non-FIFO mode:In FIFO mode: ." range="" rwaccess="R">
      <bitenum value="0" id="RXFIFOE_CPU_(RBR)._0" token="RXFIFOE_0" description="There has been no error, or RXFIFOE was cleared because the CPU read the erroneous character from the receiver buffer register (RBR)."/>
      <bitenum value="1" id="(RBR)._1" token="RXFIFOE_1" description="There is a parity error, framing error, or break indicator in the receiver buffer register (RBR)."/>
      <bitenum value="0" id="RXFIFOE_CPU_FIFO_FIFO._0" token="RXFIFOE_0" description="There has been no error, or RXFIFOE was cleared because the CPU read the erroneous character from the receiver FIFO and there are no more errors in the receiver FIFO."/>
      <bitenum value="1" id="FIFO._1" token="RXFIFOE_1" description="At least one parity error, framing error, or break indicator in the receiver FIFO."/>
    </bitfield>
    <bitfield id="TEMT" width="1" begin="6" end="6" resetval="0x1" description="Transmitter empty (TEMT) indicator. In non-FIFO mode:In FIFO mode: ." range="" rwaccess="R">
      <bitenum value="0" id="(THR)_(TSR)_0" token="TEMT_0" description="Either the transmitter holding register (THR) or the transmitter shift register (TSR) contains a data character."/>
      <bitenum value="1" id="(THR)_(TSR)_1" token="TEMT_1" description="Both the transmitter holding register (THR) and the transmitter shift register (TSR) are empty."/>
      <bitenum value="0" id="FIFO_(TSR)_0" token="TEMT_0" description="Either the transmitter FIFO or the transmitter shift register (TSR) contains a data character."/>
      <bitenum value="1" id="FIFO_(TSR)_1" token="TEMT_1" description="Both the transmitter FIFO and the transmitter shift register (TSR) are empty."/>
    </bitfield>
    <bitfield id="THRE" width="1" begin="5" end="5" resetval="0x1" description="Transmitter holding register empty (THRE) indicator. If the THRE bit is set and the corresponding interrupt enable bit is set (ETBEI = 1 in IER), an interrupt request is generated. In non-FIFO mode:In FIFO mode: ." range="" rwaccess="R">
      <bitenum value="0" id="(THR)_THR_CPU._0" token="THRE_0" description="Transmitter holding register (THR) is not empty. THR has been loaded by the CPU."/>
      <bitenum value="1" id="(THR)_THR_(TSR)._1" token="THRE_1" description="Transmitter holding register (THR) is empty (ready to accept a new character). The content of THR has been transferred to the transmitter shift register (TSR)."/>
      <bitenum value="0" id="FIFO_FIFO._FIFO_0" token="THRE_0" description="Transmitter FIFO is not empty. At least one character has been written to the transmitter FIFO. If the trnasmitter FIFO is not full, a write can be done."/>
      <bitenum value="1" id="FIFO_FIFO_(TSR)._1" token="THRE_1" description="Transmitter FIFO is empty. The last character in the FIFO has been transferred to the transmitter shift register (TSR)."/>
    </bitfield>
    <bitfield id="BI" width="1" begin="4" end="4" resetval="0x0" description="Break indicator. The BI bit is set whenever the receive data input (UARTn_RXD) was held low for longer than a full-word transmission time. A full-word transmission time is defined as the total time to transmit the START, data, PARITY, and STOP bits. If the BI bit is set and the corresponding interrupt enable bit is set (ELSI = 1 in IER), an interrupt request is generated. In non-FIFO mode:In FIFO mode: ." range="" rwaccess="R">
      <bitenum value="0" id="BI_CPU_(RBR)._0" token="BI_0" description="No break has been detected, or the BI bit was cleared because the CPU read the erroneous character from the receiver buffer register (RBR)."/>
      <bitenum value="1" id="A_(RBR)._1" token="BI_1" description="A break has been detected with the character in the receiver buffer register (RBR)."/>
      <bitenum value="0" id="BI_CPU_FIFO_FIFO_0" token="BI_0" description="No break has been detected, or the BI bit was cleared because the CPU read the erroneous character from the receiver FIFO and the next character to be read from the FIFO has no break indicator."/>
      <bitenum value="1" id="A_FIFO._1" token="BI_1" description="A break has been detected with the character at the top of the receiver FIFO."/>
    </bitfield>
    <bitfield id="FE" width="1" begin="3" end="3" resetval="0x0" description="Framing error (FE) indicator. A framing error occurs when the received character does not have a valid STOP bit. In response to a framing error, the UART sets the FE bit and waits until the signal on the RX pin goes high. Once the RX signal goes high, the receiver is ready to detect a new START bit and receive new data. If the FE bit is set and the corresponding interrupt enable bit is set (ELSI = 1 in IER), an interrupt request is generated. In non-FIFO mode:In FIFO mode: ." range="" rwaccess="R">
      <bitenum value="0" id="FE_CPU_(RBR)._0" token="FE_0" description="No framing error has been detected, or the FE bit was cleared because the CPU read the erroneous data from the receiver buffer register (RBR)."/>
      <bitenum value="1" id="A_(RBR)._1" token="FE_1" description="A framing error has been detected with the character in the receiver buffer register (RBR)."/>
      <bitenum value="0" id="FE_CPU_FIFO_FIFO_0" token="FE_0" description="No framing error has been detected, or the FE bit was cleared because the CPU read the erroneous data from the receiver FIFO and the next character to be read from the FIFO has no framing error."/>
      <bitenum value="1" id="A_FIFO._1" token="FE_1" description="A framing error has been detected with the character at the top of the receiver FIFO."/>
    </bitfield>
    <bitfield id="PE" width="1" begin="2" end="2" resetval="0x0" description="Parity error (PE) indicator. A parity error occurs when the parity of the received character does not match the parity selected with the EPS bit in the line control register (LCR). If the PE bit is set and the corresponding interrupt enable bit is set (ELSI = 1 in IER), an interrupt request is generated. In non-FIFO mode:In FIFO mode: ." range="" rwaccess="R">
      <bitenum value="0" id="PE_CPU_(RBR)._0" token="PE_0" description="No parity error has been detected, or the PE bit was cleared because the CPU read the erroneous data from the receiver buffer register (RBR)."/>
      <bitenum value="1" id="A_(RBR)._1" token="PE_1" description="A parity error has been detected with the character in the receiver buffer register (RBR)."/>
      <bitenum value="0" id="PE_CPU_FIFO_FIFO_0" token="PE_0" description="No parity error has been detected, or the PE bit was cleared because the CPU read the erroneous data from the receiver FIFO and the next character to be read from the FIFO has no parity error."/>
      <bitenum value="1" id="A_FIFO._1" token="PE_1" description="A parity error has been detected with the character at the top of the receiver FIFO."/>
    </bitfield>
    <bitfield id="OE" width="1" begin="1" end="1" resetval="0x0" description="Overrun error (OE) indicator. An overrun error in the non-FIFO mode is different from an overrun error in the FIFO mode. If the OE bit is set and the corresponding interrupt enable bit is set (ELSI = 1 in IER), an interrupt request is generated. In non-FIFO mode:In FIFO mode: ." range="" rwaccess="R">
      <bitenum value="0" id="OE_CPU_(LSR)._0" token="OE_0" description="No overrun error has been detected, or the OE bit was cleared because the CPU read the content of the line status register (LSR)."/>
      <bitenum value="1" id="(RBR)_RBR._1" token="OE_1" description="Overrun error has been detected. Before the character in the receiver buffer register (RBR) could be read, it was overwritten by the next character arriving in RBR."/>
      <bitenum value="0" id="OE_CPU_(LSR)._0" token="OE_0" description="No overrun error has been detected, or the OE bit was cleared because the CPU read the content of the line status register (LSR)."/>
      <bitenum value="1" id="FIFO_FIFO_CPU_FIFO._1" token="OE_1" description="Overrun error has been detected. If data continues to fill the FIFO beyond the trigger level, an overrun error occurs only after the FIFO is full and the next character has been completely received in the shift register. An overrun error is indicated to the CPU as soon as it happens. The new character overwrites the character in the shift register, but it is not transferred to the FIFO."/>
    </bitfield>
    <bitfield id="DR" width="1" begin="0" end="0" resetval="0x0" description="Data-ready (DR) indicator for the receiver. If the DR bit is set and the corresponding interrupt enable bit is set (ERBI = 1 in IER), an interrupt request is generated. In non-FIFO mode:In FIFO mode: ." range="" rwaccess="R">
      <bitenum value="0" id="DR_(RBR)._0" token="DR_0" description="Data is not ready, or the DR bit was cleared because the character was read from the receiver buffer register (RBR)."/>
      <bitenum value="1" id="A_(RBR)._1" token="DR_1" description="Data is ready. A complete incoming character has been received and transferred into the receiver buffer register (RBR)."/>
      <bitenum value="0" id="DR_FIFO_0" token="DR_0" description="Data is not ready, or the DR bit was cleared because all of the characters in the receiver FIFO have been read."/>
      <bitenum value="1" id="FIFO._FIFO_DR_FIFO._DR_FIFO_1" token="DR_1" description="Data is ready. There is at least one unread character in the receiver FIFO. If the FIFO is empty, the DR bit is set as soon as a complete incoming character has been received and transferred into the FIFO. The DR bit remains set until the FIFO is empty again."/>
    </bitfield>
  </register>
  <register id="PRUSS_UART_MODEM_STATUS_REGISTER" acronym="PRUSS_UART_MODEM_STATUS_REGISTER" offset="0x18" page="2" width="32" description="The Modem status register provides information to the CPU concerning the status of modem control signals. Modem status register is intended for read operations only; do not write to this register.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="CD" width="1" begin="7" end="7" resetval="0x0" description="Complement of the Carrier Detect input. When the UART is in the diagnostic test mode (loopback mode MCR[4] = 1), this bit is equal to the MCR bit 3 (OUT2)." range="" rwaccess="R"/>
    <bitfield id="RI" width="1" begin="6" end="6" resetval="0x0" description="Complement of the Ring Indicator input. When the UART is in the diagnostic test mode (loopback mode MCR[4] = 1), this bit is equal to the MCR bit 2 (OUT1)." range="" rwaccess="R"/>
    <bitfield id="DSR" width="1" begin="5" end="5" resetval="0x0" description="Complement of the Data Set Ready input. When the UART is in the diagnostic test mode (loopback mode MCR[4] = 1), this bit is equal to the MCR bit 0 (DTR)." range="" rwaccess="R"/>
    <bitfield id="CTS" width="1" begin="4" end="4" resetval="0x0" description="Complement of the Clear To Send input. When the UART is in the diagnostic test mode (loopback mode MCR[4] = 1), this bit is equal to the MCR bit 1 (RTS)." range="" rwaccess="R"/>
    <bitfield id="DCD" width="1" begin="3" end="3" resetval="0x0" description="Change in DCD indicator bit. DCD indicates that the DCD input has changed state since the last time it was read by the CPU. When DCD is set and the modem status interrupt is enabled, a modem status interrupt is generated." range="" rwaccess="R"/>
    <bitfield id="TERI" width="1" begin="2" end="2" resetval="0x0" description="Trailing edge of RI (TERI) indicator bit. TERI indicates that the RI input has changed from a low to a high. When TERI is set and the modem status interrupt is enabled, a modem status interrupt is generated." range="" rwaccess="R"/>
    <bitfield id="DDSR" width="1" begin="1" end="1" resetval="0x0" description="Change in DSR indicator bit. DDSR indicates that the DSR input has changed state since the last time it was read by the CPU. When DDSR is set and the modem status interrupt is enabled, a modem status interrupt is generated." range="" rwaccess="R"/>
    <bitfield id="DCTS" width="1" begin="0" end="0" resetval="0x0" description="Change in CTS indicator bit. DCTS indicates that the CTS input has changed state since the last time it was read by the CPU. When DCTS is set (autoflow control is not enabled and the modem status interrupt is enabled), a modem status interrupt is generated. When autoflow control is enabled, no interrupt is generated." range="" rwaccess="R"/>
  </register>
  <register id="PRUSS_UART_SCRATCH_REGISTER" acronym="PRUSS_UART_SCRATCH_REGISTER" offset="0x1C" page="2" width="32" description="The Scratch Pad register is intended for programmer's use as a scratch pad. It temporarily holds the programmer's data without affecting UART operation.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="SCR" width="8" begin="7" end="0" resetval="0x0" description="These bits are intended for the programmer's use as a scratch pad in the sense that it temporarily holds the programmer's data without affecting any other UART operation." range="" rwaccess="R"/>
  </register>
  <register id="PRUSS_UART_DIVISOR_REGISTER_LSB_" acronym="PRUSS_UART_DIVISOR_REGISTER_LSB_" offset="0x20" page="2" width="32" description="Two 8-bit register fields (DLL and DLH), called divisor latches, store the 16-bit divisor for generation of the baud clock in the baud generator. DLH holds the most-significant bits of the divisor, and DLL holds the least-significant bits of the divisor. These divisor latches must be loaded during initialization of the UART in order to ensure desired operation of the baud generator. Writing to the divisor latches results in two wait states being inserted during the write access while the baud generator is loaded with the new value.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="DLL" width="8" begin="7" end="0" resetval="0x0" description="The 8 least-significant bits (LSBs) of the 16-bit divisor for generation of the baud clock in the baud rate generator." range="" rwaccess="RW"/>
  </register>
  <register id="PRUSS_UART_DIVISOR_REGISTER_MSB_" acronym="PRUSS_UART_DIVISOR_REGISTER_MSB_" offset="0x24" page="2" width="32" description="Two 8-bit register fields (DLL and DLH), called divisor latches, store the 16-bit divisor for generation of the baud clock in the baud generator. DLH holds the most-significant bits of the divisor, and DLL holds the least-significant bits of the divisor. These divisor latches must be loaded during initialization of the UART in order to ensure desired operation of the baud generator. Writing to the divisor latches results in two wait states being inserted during the write access while the baud generator is loaded with the new value.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="DLH" width="8" begin="7" end="0" resetval="0x0" description="The 8 most-significant bits (MSBs) of the 16-bit divisor for generation of the baud clock in the baud rate generator." range="" rwaccess="RW"/>
  </register>
  <register id="PRUSS_UART_PERIPHERAL_ID_REGISTER" acronym="PRUSS_UART_PERIPHERAL_ID_REGISTER" offset="0x28" page="2" width="32" description="Peripheral Identification register">
    <bitfield id="PID" width="32" begin="31" end="0" resetval="0x44141102" description="" range="" rwaccess="R"/>
  </register>
  <register id="PRUSS_UART_POWERMANAGEMENT_AND_EMULATION_REGISTER" acronym="PRUSS_UART_POWERMANAGEMENT_AND_EMULATION_REGISTER" offset="0x30" page="2" width="32" description="Power and emulation management register">
    <bitfield id="RESERVED" width="16" begin="31" end="16" resetval="0x0000" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="1" begin="15" end="15" resetval="0x0" description="Reserved. This bit must always be written with a 0." range="" rwaccess="RW"/>
    <bitfield id="UTRST" width="1" begin="14" end="14" resetval="0x0" description="UART transmitter reset. Resets and enables the transmitter." range="" rwaccess="RW">
      <bitenum value="0" id="DIS" token="UTRST_0" description="Transmitter is disabled and in reset state."/>
      <bitenum value="1" id="Transmitter_is_enabled." token="UTRST_1" description="Transmitter is enabled."/>
    </bitfield>
    <bitfield id="URRST" width="1" begin="13" end="13" resetval="0x0" description="UART receiver reset. Resets and enables the receiver." range="" rwaccess="RW">
      <bitenum value="0" id="DIS" token="URRST_0" description="Receiver is disabled and in reset state."/>
      <bitenum value="1" id="EN" token="URRST_1" description="Receiver is enabled."/>
    </bitfield>
    <bitfield id="RESERVED" width="12" begin="12" end="1" resetval="0x000" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="FREE" width="1" begin="0" end="0" resetval="0x0" description="Free-running enable mode bit. This bit determines the emulation mode functionality of the UART. When halted, the UART can handle register read/write requests, but does not generate any transmission/reception, interrupts or events." range="" rwaccess="RW">
      <bitenum value="0" id="UART_UART_0" token="FREE_0" description="If a transmission is not in progress, the UART halts immediately. If a transmission is in progress, the UART halts after completion of the one-word transmission."/>
      <bitenum value="1" id="UART_1" token="FREE_1" description="Free-running mode is enabled; UART continues to run normally."/>
    </bitfield>
  </register>
  <register id="PRUSS_UART_MODE_DEFINITION_REGISTER" acronym="PRUSS_UART_MODE_DEFINITION_REGISTER" offset="0x34" page="2" width="32" description="The Mode definition register determines the over-sampling mode for the UART.">
    <bitfield id="RESERVED" width="31" begin="31" end="1" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="OSM_SEL" width="1" begin="0" end="0" resetval="0x0" description="Over-Sampling Mode Select." range="" rwaccess="RW">
      <bitenum value="0" id="16&#215;_over-sampling." token="OSM_SEL_0" description="16&#215; over-sampling."/>
      <bitenum value="1" id="13&#215;_over-sampling." token="OSM_SEL_1" description="13&#215; over-sampling."/>
    </bitfield>
  </register>
</module>
