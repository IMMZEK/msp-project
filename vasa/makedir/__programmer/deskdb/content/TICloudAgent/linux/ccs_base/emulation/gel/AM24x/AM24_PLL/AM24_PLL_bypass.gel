/**
 * \file  AM24_PLL_bypass.gel
 *
 * \brief GEL File with register definitions for AM24_PLL.GEL
 */

/* Copyright (c) 2021, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

menuitem "PLL Configuration/Bypass";

hotmenu MAIN_PLL0_bypass(){ 
	address_offset = 0x80000000;
	Write_MMR_Field((CSL_PLL0_CFG_BASE + address_offset + (MAIN_PLL_INDEX * 0x1000) + CONTROL), 1, 1, 31);
	GEL_TextOut("Set MAIN_PLL0 to external bypass via Control MMR.\n");
}

hotmenu MAIN_PLL1_bypass(){ 
	address_offset = 0x80000000;
	Write_MMR_Field((CSL_PLL0_CFG_BASE + address_offset + (PER0_PLL_INDEX * 0x1000) + CONTROL), 1, 1, 31);
	GEL_TextOut("Set MAIN_PLL1 to external bypass via Control MMR.\n");
}

hotmenu MAIN_PLL2_bypass(){ 
	address_offset = 0x80000000;
	Write_MMR_Field((CSL_PLL0_CFG_BASE + address_offset + (PER1_PLL_INDEX * 0x1000) + CONTROL), 1, 1, 31);
	GEL_TextOut("Set MAIN_PLL2 to external bypass via Control MMR.\n");
}

hotmenu MAIN_PLL8_bypass(){ 
	address_offset = 0x80000000;
	Write_MMR_Field((CSL_PLL0_CFG_BASE + address_offset + (ARM0_PLL_INDEX * 0x1000) + CONTROL), 1, 1, 31);
	GEL_TextOut("Set MAIN_PLL8 to external bypass via Control MMR.\n");
}

hotmenu MAIN_PLL12_bypass(){ 
	address_offset = 0x80000000;
	Write_MMR_Field((CSL_PLL0_CFG_BASE + address_offset + (DDR_PLL_INDEX * 0x1000) + CONTROL), 1, 1, 31);
	GEL_TextOut("Set MAIN_PLL12 to external bypass via Control MMR.\n");

}

hotmenu MAIN_PLL14_bypass(){ 
	address_offset = 0x80000000;
	Write_MMR_Field((CSL_PLL0_CFG_BASE + address_offset + (MAIN_R5F_PLL_INDEX * 0x1000) + CONTROL), 1, 1, 31);
	GEL_TextOut("Set MAIN_PLL14 to external bypass via Control MMR.\n");
	
}

hotmenu MCU_PLL0_bypass(){ 
	address_offset = 0x80000000;
	Write_MMR_Field((CSL_MCU_PLL0_CFG_BASE + address_offset + (MCU_PLL_INDEX * 0x1000) + CONTROL), 1, 1, 31);
	GEL_TextOut("Set MCU_PLL0 to external bypass via Control MMR.\n");
}