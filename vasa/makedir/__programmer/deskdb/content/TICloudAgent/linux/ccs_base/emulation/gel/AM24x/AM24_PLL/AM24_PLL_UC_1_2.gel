/**
 * \file  AM24_PLL_UC_1_2.gel
 *
 * \brief GEL File to configure the clocking infrastructure on AM24
 */

/* Copyright (c) 2021, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/*****************************************************************************/
/* PLL functions. */
menuitem "PLL Configuration/UC 1.2";

menuitem "PLL Configuration/UC 1.2/Standard Configuration";

/**
 * \brief  Set all PLLs on 
 *
 * \param   none
 *
 * \return  none
 */
hotmenu Set_All_PLL_UC_1_2(){
	int debug_info = DEBUG;
	int gel_trace_on  = GEL_TRACE;
	address_offset = 0x80000000;
	//for debugging only: 
	if(debug_info){
		GEL_TextOut("Debugging enabled\n");
	}
	if(gel_trace_on){
		GEL_Trace(1);
		GEL_TextOut("GEL_trace enabled\n");
	}
	else{
		GEL_Trace(0);
	}

	//Turn on LPSC_WKUPMCU2MAIN.
	//Turn_On_LPSC_WKUPMCU2MAIN();
	//Turn on the PLLs.
	GEL_TextOut("Programming all PLLs.\n");
	//Main PLL
	GEL_TextOut("Programming Main PLL 0 (Main PLL)\n");
	Setup(CSL_PLL0_CFG_BASE, address_offset, MAIN_PLL_INDEX, UC1_2, NONE);
	GEL_TextOut("Main PLL 0 (Main PLL) Set.\n");
	//Per0 PLL
	GEL_TextOut("Programming Main PLL 1 (Peripheral 0 PLL)\n");
	Setup(CSL_PLL0_CFG_BASE, address_offset, PER0_PLL_INDEX, UC1_2, NONE);
	GEL_TextOut("Main PLL 1 (Peripheral 0 PLL) Set.\n");
	//Per1 PLL
	GEL_TextOut("Programming Main PLL 2 (Peripheral 1 PLL)\n");
	Setup(CSL_PLL0_CFG_BASE, address_offset, PER1_PLL_INDEX, UC1_2, NONE);
	GEL_TextOut("Main PLL 2 (Peripheral 1 PLL) Set.\n");
	//ARM0 PLL
	GEL_TextOut("Programming Main PLL 8 (ARM0 PLL)\n");
	Setup(CSL_PLL0_CFG_BASE, address_offset, ARM0_PLL_INDEX, UC1_2, NONE);
	GEL_TextOut("Main PLL 8 (ARM0 PLL) Set.\n");
	//DDR PLL
	GEL_TextOut("Programming Main PLL 12 (DDR PLL)\n");
	//Setup(CSL_PLL0_CFG_BASE, address_offset, DDR_PLL_INDEX, UC1_2, NONE);
	GEL_TextOut("Main PLL 12 (DDR PLL) Set.\n");
	//Main SoC Pulsar PLL
	GEL_TextOut("Programming Main PLL 14 (Main Domain Pulsar) PLL)\n");
	Setup(CSL_PLL0_CFG_BASE, address_offset, MAIN_R5F_PLL_INDEX, UC1_2, NONE);
	GEL_TextOut("Main PLL 14 (Main Domain Pulsar PLL) Set.\n");
	//MCU PLL
	GEL_TextOut("Programming MCU PLL 0 (MCU PLL)\n");                       
	Setup(CSL_MCU_PLL0_CFG_BASE, address_offset, MCU_PLL_INDEX, UC1_2, NONE);
	GEL_TextOut("MCU PLL 0 (MCU PLL) Set.\n");
	GEL_TextOut("All PLLs programmed.\n");
	return 0;
}

menuitem "PLL Configuration/UC 1.2/Individual Standard Configurations"

/**
 * \brief  Set Main 0 PLL on
 *
 * \param   none
 *
 * \return  none
 */
hotmenu Set_Main_PLL_UC_1_2(){
	int debug_info = DEBUG;
	int gel_trace_on  = GEL_TRACE;
    address_offset = 0x80000000;
	//for debugging only: 
	if(debug_info){
		GEL_TextOut("Debugging enabled\n");
	}
	if(gel_trace_on){
		GEL_Trace(1);
		GEL_TextOut("GEL_trace enabled\n");
	}
	else{
		GEL_Trace(0);
	}
	//Main PLL
	GEL_TextOut("Programming Main PLL 0 (Main PLL)\n");
	Setup(CSL_PLL0_CFG_BASE, address_offset, MAIN_PLL_INDEX, UC1_2, NONE);
	GEL_TextOut("Main PLL 0 (Main PLL) Set.\n");
}

/**
 * \brief  Set Peripheral 0 PLL on
 *
 * \param   none
 *
 * \return  none
 */
hotmenu Set_Peripheral_0_PLL_UC_1_2(){
	int debug_info = DEBUG;
	int gel_trace_on  = GEL_TRACE;
    address_offset = 0x80000000;
	//for debugging only: 
	if(debug_info){
		GEL_TextOut("Debugging enabled\n");
	}
	if(gel_trace_on){
		GEL_Trace(1);
		GEL_TextOut("GEL_trace enabled\n");
	}
	else{
		GEL_Trace(0);
	}
	//Per0 PLL
	GEL_TextOut("Programming Main PLL 1 (Peripheral 0 PLL)\n");
	Setup(CSL_PLL0_CFG_BASE, address_offset, PER0_PLL_INDEX, UC1_2, NONE);
	GEL_TextOut("Main PLL 1 (Peripheral 0 PLL) Set.\n");
}

/**
 * \brief  Set Peripheral 1 PLL on
 *
 * \param   none
 *
 * \return  none
 */
hotmenu Set_Peripheral_1_PLL_UC_1_2(){
	int debug_info = DEBUG;
	int gel_trace_on  = GEL_TRACE;
    address_offset = 0x80000000;
	//for debugging only: 
	if(debug_info){
		GEL_TextOut("Debugging enabled\n");
	}
	if(gel_trace_on){
		GEL_Trace(1);
		GEL_TextOut("GEL_trace enabled\n");
	}
	else{
		GEL_Trace(0);
	}
    	//Per1 PLL
	GEL_TextOut("Programming Main PLL 2 (Peripheral 1 PLL)\n");
	Setup(CSL_PLL0_CFG_BASE, address_offset, PER1_PLL_INDEX, UC1_2, NONE);
	GEL_TextOut("Main PLL 2 (Peripheral 1 PLL) Set.\n");
}

/**
 * \brief  Set ARM 0 PLL on
 *
 * \param   none
 *
 * \return  none
 */
hotmenu Set_ARM0_PLL_UC_1_2(){
	int debug_info = DEBUG;
	int gel_trace_on  = GEL_TRACE;
    address_offset = 0x80000000;
	//for debugging only: 
	if(debug_info){
		GEL_TextOut("Debugging enabled\n");
	}
	if(gel_trace_on){
		GEL_Trace(1);
		GEL_TextOut("GEL_trace enabled\n");
	}
	else{
		GEL_Trace(0);
	}
    //ARM0 PLL
	GEL_TextOut("Programming Main PLL 8 (ARM0 PLL)\n");
	Setup(CSL_PLL0_CFG_BASE, address_offset, ARM0_PLL_INDEX, UC1_2, NONE);
	GEL_TextOut("Main PLL 8 (ARM0 PLL) Set.\n");
}

/**
 * \brief  Set DDR PLL on
 *
 * \param   none
 *
 * \return  none
 */
hotmenu Set_DDR_PLL_UC_1_2(){
	int debug_info = DEBUG;
	int gel_trace_on  = GEL_TRACE;
    address_offset = 0x80000000;
	//for debugging only: 
	if(debug_info){
		GEL_TextOut("Debugging enabled\n");
	}
	if(gel_trace_on){
		GEL_Trace(1);
		GEL_TextOut("GEL_trace enabled\n");
	}
	else{
		GEL_Trace(0);
	}
    //DDR PLL
	GEL_TextOut("Programming Main PLL 12 (DDR PLL)\n");
	Setup(CSL_PLL0_CFG_BASE, address_offset, DDR_PLL_INDEX, UC1_2, NONE);
	GEL_TextOut("Main PLL 12 (DDR PLL) Set.\n");
}

/**
 * \brief  Set Main R5F PLL on
 *
 * \param   none
 *
 * \return  none
 */
hotmenu Set_Main_Pulsar_PLL_UC_1_2(){
	int debug_info = DEBUG;
	int gel_trace_on  = GEL_TRACE;
    address_offset = 0x80000000;
	//for debugging only: 
	if(debug_info){
		GEL_TextOut("Debugging enabled\n");
	}
	if(gel_trace_on){
		GEL_Trace(1);
		GEL_TextOut("GEL_trace enabled\n");
	}
	else{
		GEL_Trace(0);
	}
	//Main SoC Pulsar PLL
	GEL_TextOut("Programming Main PLL 14 (Main Domain Pulsar) PLL)\n");
	Setup(CSL_PLL0_CFG_BASE, address_offset, MAIN_R5F_PLL_INDEX, UC1_2, NONE);
	GEL_TextOut("Main PLL 14 (Main Domain Pulsar PLL) Set.\n");
}

/**
 * \brief  Set MCU PLL on
 *
 * \param   none
 *
 * \return  none
 */
hotmenu Set_MCU_PLL_UC_1_2(){
	int debug_info = DEBUG;
	int gel_trace_on  = GEL_TRACE;
    address_offset = 0x80000000;
	//for debugging only: 
	if(debug_info){
		GEL_TextOut("Debugging enabled\n");
	}
	if(gel_trace_on){
		GEL_Trace(1);
		GEL_TextOut("GEL_trace enabled\n");
	}
	else{
		GEL_Trace(0);
	}
	//MCU PLL
    GEL_TextOut("Programming MCU PLL 0 (MCU PLL)\n");
    Setup(CSL_MCU_PLL0_CFG_BASE, address_offset, MCU_PLL_INDEX, UC1_2, NONE);
    GEL_TextOut("MCU PLL 0 (MCU PLL) Set.\n");
}
