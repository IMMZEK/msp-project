<?xml version="1.0" encoding="UTF-8"?>
<PropertyList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- Nodes -->
	<node id="FlashProgrammerNode">
		<name>Flash Settings</name>
		<children>
			<child>CommunicationSettingBasic</child>
			<child>CommunicationSetting</child>
			<child>EraseSetting</child>
			<child>VerifySetting</child>
			<child>JTAGSetting</child>
			<child>ReadSetting</child>
			<child>ResetSetting</child>
		</children>
	</node>

	<!-- Group -->
	<group id="CommunicationSettingBasic">
		<name>Communication Settings</name>
		<children> 
		    <child>ComPortInfoText</child>
			<child>ComPortTextField</child>
			<child>ToolInfoText</child>
			<child>Tool</child>
		</children>
	</group>

	<group id="CommunicationSetting">
		<name>Communication Settings</name>
		<children>
			<child>ProtocolInfoText</child>
			<child>ProtocolSelection</child>
			<child>UARTSpeedSelection</child>
			<child>UARTParitySelection</child>
			<child>I2CSpeedSelection</child>
			<child>I2CBootloaderAddress</child>
		</children>
	</group>

	<group id="EraseSetting">
		<name>Erase Settings</name>
		<children> 
			<child>EraseSettingSelection</child>
		</children>
	</group>

	<group id="VerifySetting">
		<name>Verify Settings</name>
		<children> 
			<child>VerifySettingSelection</child>
			<child>CustomCrcStartAddrTextField</child>
			<child>CustomCrcLengthTextField</child>
			<child>CustomCrcCrcReferenceTextField</child>
		</children>
	</group>

	<group id="JTAGSetting">
		<name>JTAG Settings</name>
		<children> 
			<child>JTAGInfoText</child>
			<child>JTAGSettingSelection</child>
		</children>
	</group>

	<group id="ReadSetting">
		<name>Read Settings</name>
		<children> 
			<child>PasswordInfoText</child>
			<child>PasswordExampleInfoText</child>
			<child>PasswordTextField</child>
			<child>ReadImageFileInfoText</child>
			<child>ReadImageFileTextField</child>
			<child>ReadStartAddressTextField</child>
			<child>ReadLengthTextField</child>
			<child>ReadButton</child>
		</children>
	</group>

	<group id="ResetSetting">
		<name>Reset Settings</name>
		<children> 
			<child>ResetCheckbox</child>
			<child>ResetAddress</child>
		</children>
	</group>

	<!-- Categories-->
	<categories>
		<category>Setup</category>
		<category>Advanced</category>
		<category>Erase</category>
		<category>Verify</category>
		<category>Jtag</category>
		<category>Read</category>
		<category>Reset</category>
	</categories>

	<!-- Property Definitions : CommunicationSetting-->
	<property id="ComPortInfoText">
		<target>generic</target>
		<name>Example - COM1 (Windows), /dev/ttyACM0 (Linux), /dev/tty.usbmodem1411 (OS X) </name>
		<valueType>Text</valueType>
		<categories>
			<category>Setup</category>
		</categories>
		<quickSetting />
	</property>

	<property id="ComPortTextField">
		<target>generic</target>
		<name>COM Port</name>
		<valueType>String</valueType>
		<defaultValue>/dev/ttyACM0</defaultValue>
		<description>Enter the serial port for bootloader communication
		</description>
		<categories>
            <category>Setup</category>
        </categories>
		<quickSetting />
	</property>

	<property id="ToolInfoText">
		<target>generic</target>
		<name>Using MSP-BSL "Rocket" and MSP-FET, the invoke sequence is generated using TST and RST pins</name>
		<valueType>Text</valueType>
		<categories>
			<category>Setup</category>
		</categories>
		<quickSetting />
	</property>

	<property id="Tool">
		<target>generic</target>
		<name>Communication Bridge</name>
		<valueType>ChoiceList</valueType>
		<values>
			<value>MSP-BSL "Rocket"</value>
			<value>MSP-FET</value>
		</values>
		<defaultValue>MSP-BSL "Rocket"</defaultValue>
		<description>Communication bridge to translate USB to serial communication protocol
		</description>
		<categories>
		<category>Setup</category>
		</categories>
		<quickSetting />
	</property>

	<property id="ProtocolInfoText">
		<target>generic</target>
		<name>Please refer to the device datasheet for supported protocols in the chosen device</name>
		<valueType>Text</valueType>
		<categories>
			<category>Advanced</category>
		</categories>
	</property>

	<property id="ProtocolSelection">
		<target>generic</target>
		<name>Protocol</name>
		<valueType>ChoiceList</valueType>
		<values>
			<value>UART</value>
			<value>I2C</value>
		</values>
		<defaultValue>UART</defaultValue>
		<description>Serial communication protocol option
		</description>
		<categories>
		<category>Advanced</category>
		</categories>
	</property>

	<property id="UARTSpeedSelection">
		<target>generic</target>
		<name>UART Speed</name>
		<valueType>ChoiceList</valueType>	
		<values>
			<value>9600</value>
			<value>19200</value>
			<value>38400</value>
			<value>57600</value>
			<value>115200</value>
		</values>
		<defaultValue>9600</defaultValue>
		<enableIf>
			<property id="ProtocolSelection">UART</property>
		</enableIf>
		<description>UART speed options supported
		</description>
		<categories>
		<category>Advanced</category>
		</categories>
		<quickSetting />
	</property>

	<property id="UARTParitySelection">
		<target>generic</target>
		<name>UART Parity Bit</name>
		<valueType>ChoiceList</valueType>
		<values>
			<value>Even</value>
			<value>Odd</value>
			<value>No parity</value>
		</values>
		<defaultValue>Even</defaultValue>
		<enableIf>
			<property id="ProtocolSelection">UART</property>
		</enableIf>
		<description>UART parity options supported
		</description>
		<categories>
		<category>Advanced</category>
		</categories>
	</property>

	<property id="I2CSpeedSelection">
		<target>generic</target>
		<name>I2C Speed</name>
		<valueType>ChoiceList</valueType>	
		<values>
			<value>100000</value>
			<value>400000</value>
		</values>
		<defaultValue>100000</defaultValue>
		<enableIf>
			<property id="ProtocolSelection">I2C</property>
		</enableIf>
		<description>I2C speed option supported
		</description>
		<categories>
		<category>Advanced</category>
		</categories>
	</property>

	<property id="I2CBootloaderAddress">
		<target>generic</target>
		<name>I2C Bootloader Address</name>
		<valueType>String</valueType>
		<defaultValue>0x48</defaultValue>
		<enableIf>
			<property id="ProtocolSelection">I2C</property>
		</enableIf>
		<description>I2C Bootloader address as slave in the system
		</description>
		<categories>
			<category>Advanced</category>
		</categories>
	</property>

	<!-- Property Definitions : EraseSetting-->
	<property id="EraseSettingSelection">
		<target>generic</target>
		<name>Erase Setting</name>
		<valueType>ChoiceList</valueType>
		<values>
			<value>Erase necessary segments only</value>
			<value>Erase main memory only</value>
			<value>Erase information memory</value>
			<value>Erase main and information memory</value>
		</values>
		<defaultValue>Erase necessary segments only</defaultValue>
		<description>Erase options execution before programming
		</description>
		<categories>
		<category>Erase</category>
		</categories>
	</property>

	<!-- Property Definitions : VerifySetting-->
	<property id="VerifySettingSelection">
		<target>generic</target>
		<name>Verify Settings</name>
		<valueType>ChoiceList</valueType>
		<values>
			<value>Automatic verification based on the given firmware image</value>
			<value>Custom CRC check</value>
		</values>
		<defaultValue>Automatic verification based on the given firmware image</defaultValue>
		<description>Memory verification options after programming
		</description>
		<categories>
		<category>Verify</category>
		</categories>
	</property>

	<property id="CustomCrcStartAddrTextField">
		<target>generic</target>
		<name>Start Address</name>
		<valueType>String</valueType>
		<defaultValue></defaultValue>
		<disableIf>
			<property id="VerifySettingSelection">Automatic verification based on the given firmware image</property>
		</disableIf>
		<description>Start address to execute memory verification
		</description>
		<categories>
			<category>Verify</category>
		</categories>
	</property>

	<property id="CustomCrcLengthTextField">
		<target>generic</target>
		<name>Length</name>
		<valueType>String</valueType>
		<defaultValue></defaultValue>
		<disableIf>
			<property id="VerifySettingSelection">Automatic verification based on the given firmware image</property>
		</disableIf>
		<description>Number of bytes to be verified
		</description>
		<categories>
			<category>Verify</category>
		</categories>
	</property>

	<property id="CustomCrcCrcReferenceTextField">
		<target>generic</target>
		<name>CRC reference value (optional)</name>
		<valueType>String</valueType>
		<defaultValue></defaultValue>
		<disableIf>
			<property id="VerifySettingSelection">Automatic verification based on the given firmware image</property>
		</disableIf>
		<description>Expected CRC value
		</description>
		<categories>
			<category>Verify</category>
		</categories>
	</property>

	<!-- Property Definitions : JTAGSetting-->
	<property id="JTAGInfoText">
		<target>generic</target>
		<name>Locking JTAG is implemented by writing 0x5555:5555 and unlocking JTAG is implemented by writing 0x0000:0000 to the JTAG signature area. Please note that once the JTAG is unlocked by 0x0000:0000, locking JTAG is not possible.</name>
		<valueType>Text</valueType>
		<categories>
			<category>Jtag</category>
		</categories>
	</property>

	<property id="JTAGSettingSelection">
		<target>generic</target>
		<name>JTAG Settings</name>
		<valueType>ChoiceList</valueType>
		<values>
			<value>No JTAG configuration</value>
			<value>Locking JTAG</value>
			<value>Unlocking JTAG</value>
		</values>
		<defaultValue>No JTAG configuration</defaultValue>
		<description>JTAG configuration options after programming
		</description>
		<categories>
		<category>Jtag</category>
		</categories>
	</property>

	<!-- Property Definitions : ReadSetting-->
	<property id="PasswordInfoText">
		<target>generic</target>
		<name>To be able to read the memory, the bootloader has to be unlocked by using a password. The password is a 32 byte long block of data which starts at offset 0xFFE0. Write the password in word-wise hexadecimal format starting with "0x" and with comma "," for separation.</name>
		<valueType>Text</valueType>
		<categories>
			<category>Read</category>
		</categories>
	</property>

	<property id="PasswordExampleInfoText">
		<target>generic</target>
		<name>Example: if the 32 bytes data at 0xFFE0 are 00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff 01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10, the password shall be written as: 0x00112233, 0x44556677, 0x8899aabb, 0xccddeeff, 0x01234567, 0x89abcdef, 0xfedcba98, 0x76543210. </name>
		<valueType>Text</valueType>
		<categories>
			<category>Read</category>
		</categories>
	</property>

	<property id="PasswordTextField">
		<target>generic</target>
		<name>Password</name>
		<valueType>String</valueType>
		<defaultValue></defaultValue>
		<description>Password to unlock the bootloader
		</description>
		<categories>
			<category>Read</category>
		</categories>
	</property>

	<property id="ReadImageFileInfoText">
		<target>generic</target>
		<name>Supported format files are: .txt , .hex, and .bin. Start address is read as hexadecimal format. Length of bytes is read as hexadecimal when started with "0x" and as the decimal without "0x".</name>
		<valueType>Text</valueType>
		<categories>
			<category>Read</category>
		</categories>
	</property>

	<property id="ReadImageFileTextField">
		<target>generic</target>
		<name>Read Image File</name>
		<valueType>String</valueType>
		<defaultValue></defaultValue>
		<description>File name storing the read content
		</description>
		<categories>
			<category>Read</category>
		</categories>
	</property>

	<property id="ReadStartAddressTextField">
		<target>generic</target>
		<name>Start Address</name>
		<valueType>String</valueType>
		<defaultValue></defaultValue>
		<description>Start address in memory to read
		</description>
		<categories>
			<category>Read</category>
		</categories>
	</property>

	<property id="ReadLengthTextField">
		<target>generic</target>
		<name>Length</name>
		<valueType>String</valueType>
		<defaultValue></defaultValue>
		<description>Number of bytes to read
		</description>
		<categories>
			<category>Read</category>
		</categories>
	</property>

	<property id="ReadButton">
		<target>generic</target>
		<name>Read</name>
		<valueType>Button</valueType>
		<action>DPActiveDebugSession.flash.performOperation("Read")</action>
		<description>Click this button to read the memory and store in a file
		</description>
		<categories>
			<category>Read</category>
		</categories>
	</property>

	<!-- Property Definitions : ResetSetting-->
	<property id="ResetCheckbox">
		<target>generic</target>
		<name>Set PC to given address</name>
		<valueType>Boolean</valueType>
		<defaultValue>0</defaultValue>
		<description>PC is set with given address after programming
		</description>
		<categories>
			<category>Reset</category>
		</categories>
	</property>

	<property id="ResetAddress">
		<target>generic</target>
		<name>Address</name>
		<valueType>String</valueType>
		<defaultValue></defaultValue>
		<enableIf>
			<property id="ResetCheckbox">1</property>
		</enableIf>
		<description>Set PC register is set with given address
		</description>
		<categories>
			<category>Reset</category>
		</categories>
	</property>
	<!-- Finish -->
</PropertyList>
