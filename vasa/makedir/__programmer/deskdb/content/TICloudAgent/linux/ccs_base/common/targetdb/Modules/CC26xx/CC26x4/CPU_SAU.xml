<?xml version="1.0" encoding="UTF-8"?>
<module id="CPU_SAU" HW_revision="" XML_version="1.0" description="Cortex-M&#39;s Security Attribution Unit (SAU)" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="setup_parser.xsd">
   <register acronym="CTRL" width="32" description="Allows enabling of the Security Attribution Unit" id="CTRL" offset="0x0">
      <bitfield range="" begin="31" width="30" end="2" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED2" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="1" width="1" end="1" rwaccess="RW" description="When SAU_CTRL.ENABLE is 0 this bit controls if the memory is marked as Non-secure or Secure" id="ALLNS" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="Enables the SAU" id="ENABLE" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="TYPE" width="32" description="Indicates the number of regions implemented by the Security Attribution Unit" id="TYPE" offset="0x4">
      <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED8" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="7" width="8" end="0" rwaccess="RO" description="The number of implemented SAU regions" id="SREGION" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="RNR" width="32" description="Selects the region currently accessed by SAU_RBAR and SAU_RLAR" id="RNR" offset="0x8">
      <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED8" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="7" width="8" end="0" rwaccess="RW" description="Indicates the SAU region accessed by SAU_RBAR and SAU_RLAR" id="REGION" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="RBAR" width="32" description="Provides indirect read and write access to the base address of the currently selected SAU region" id="RBAR" offset="0xc">
      <bitfield range="" begin="31" width="27" end="5" rwaccess="RW" description="Holds bits [31:5] of the base address for the selected SAU region" id="BADDR" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="4" width="5" end="0" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED0" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="RLAR" width="32" description="Provides indirect read and write access to the limit address of the currently selected SAU region" id="RLAR" offset="0x10">
      <bitfield range="" begin="31" width="27" end="5" rwaccess="RW" description="Holds bits [31:5] of the limit address for the selected SAU region" id="LADDR" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="4" width="3" end="2" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED2" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="1" width="1" end="1" rwaccess="RW" description="Controls whether Non-secure state is permitted to execute an SG instruction from this region" id="NSC" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="SAU region enable" id="ENABLE" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="SFSR" width="32" description="Provides information about any security related faults" id="SFSR" offset="0x14">
      <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED8" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="7" width="1" end="7" rwaccess="RW" description="Sticky flag indicating that an error occurred during lazy state activation or deactivation" id="LSERR" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="6" width="1" end="6" rwaccess="RW" description="This bit is set when the SFAR register contains a valid value. As with similar fields, such as BFSR.BFARVALID and MMFSR.MMARVALID, this bit can be cleared by other exceptions, such as BusFault" id="SFARVALID" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="5" width="1" end="5" rwaccess="RW" description="Stick flag indicating that an SAU or IDAU violation occurred during the lazy preservation of floating-point state" id="LSPERR" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="4" width="1" end="4" rwaccess="RW" description="Sticky flag indicating that an exception was raised due to a branch that was not flagged as being domain crossing causing a transition from Secure to Non-secure memory" id="INVTRAN" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="3" width="1" end="3" rwaccess="RW" description="Sticky flag indicating that an attempt was made to access parts of the address space that are marked as Secure with NS-Req for the transaction set to Non-secure. This bit is not set if the violation occurred during lazy state preservation. See LSPERR" id="AUVIOL" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="2" width="1" end="2" rwaccess="RW" description="This can be caused by EXC_RETURN.DCRS being set to 0 when returning from an exception in the Non-secure state, or by EXC_RETURN.ES being set to 1 when returning from an exception in the Non-secure state" id="INVER" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="1" width="1" end="1" rwaccess="RW" description="This bit is set if the integrity signature in an exception stack frame is found to be invalid during the unstacking operation" id="INVIS" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="This bit is set if a function call from the Non-secure state or exception targets a non-SG instruction in the Secure state. This bit is also set if the target address is a SG instruction, but there is no matching SAU/IDAU region with the NSC flag set" id="INVEP" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="SFAR" width="32" description="Shows the address of the memory location that caused a Security violation" id="SFAR" offset="0x18">
      <bitfield range="" begin="31" width="32" end="0" rwaccess="RW" description="The address of an access that caused a attribution unit violation. This field is only valid when SFSR.SFARVALID is set. This allows the actual flip flops associated with this register to be shared with other fault address registers. If an implementation chooses to share the storage in this way, care must be taken to not leak Secure address information to the Non-secure state. One way of achieving this is to share the SFAR register with the MMFAR_S register, which is not accessible to the Non-secure state" id="ADDRESS" resetval="0x0">
      </bitfield>
   </register>
</module>
