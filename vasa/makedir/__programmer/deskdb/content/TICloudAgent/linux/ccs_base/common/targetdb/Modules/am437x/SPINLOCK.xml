<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="SPINLOCK" id="SPINLOCK">
  
  
  <register acronym="SPINLOCK_REV" description="Read-only IP revision identifier (X.Y.R) used by software to determine features, bugs and compatibility of an instance of this the Spin Lock module." id="SPINLOCK_REV" offset="0x0" width="32">
    
  <bitfield begin="31" description=" IP Revision Code." end="0" id="REV" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_SYSCONFIG" description="This register controls the various parameters of the OCP interface. Note that several fields are present by read-only." id="SPINLOCK_SYSCONFIG" offset="0x10" width="32">
    
  <bitfield begin="31" description=" " end="9" id="RESERVED_1" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description=" Indicates whether the module requires the OCP when in IDLE mode." end="8" id="CLOCKACTIVITY" rwaccess="R" width="1">
    <bitenum description="OCP clock is required by the module, even during idle mode." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="OCP clock is not required by the module during IDLE mode and may be switched off." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="7" description=" " end="5" id="RESERVED_2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="4" description=" Control of the slave interface power management IDLE request acknowledgement." end="3" id="SIDLEMODE" rwaccess="R" width="2">
    <bitenum description="Reserved. Do not use." id="en_4_0x3" token="en_4_0x3" value="0x3"></bitenum>
    <bitenum description="IDLE request acknowledgement is based on the internal module activity." id="en_3_0x2" token="en_3_0x2" value="0x2"></bitenum>
    <bitenum description="IDLE request is never acknowledged." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="IDLE request is acknowledged unconditionally and immediately." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="2" description=" Asynchronous wakeup gereration." end="2" id="ENWAKEUP" rwaccess="R" width="1">
    <bitenum description="Enable wakeup generation." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Wakeup generation is disabled." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="1" description=" Module software reset." end="1" id="SOFTRESET" rwaccess="W" width="1">
    <bitenum description="Start a soft reset sequence of the Spin Lock module." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="No Description" id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="0" description=" Internal OCP clock gating strategy." end="0" id="AUTOGATING" rwaccess="R" width="1">
    <bitenum description="Automatic internal OCP clock gating strategy is applied, based on the OCP interface activity." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="OCP clock is not gated when OCP interface is idle." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_SYSTS" description="This register provides status information about this instance of the Spin Lock module." id="SPINLOCK_SYSTS" offset="0x14" width="32">
    
  <bitfield begin="31" description=" " end="24" id="NUMLOCKS" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="23" description=" " end="16" id="RESERVED_1" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="15" description=" " end="15" id="IU7" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="14" description=" " end="14" id="IU6" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="13" description=" " end="13" id="IU5" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="12" description=" " end="12" id="IU4" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="11" description=" " end="11" id="IU3" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="10" description=" " end="10" id="IU2" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="9" description=" In-Use flag 1, covering lock registers [[br]]32 - 63. [[br]]Reads as one only if one or more lock registers in this range are TAKEN. [[br]]If no lock registers are implemented in this range, then this flag always reads as 0." end="9" id="IU1" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="8" description=" In-Use flag 0, covering lock registers [[br]]0 - 31. [[br]]Reads as one only if one or more lock registers in this range are TAKEN." end="8" id="IU0" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="7" description=" reserved" end="1" id="RESERVED_2" rwaccess="R" width="7"></bitfield>
    
  <bitfield begin="0" description=" [[br]]0: Reset in progress. [[br]]1: Reset is completed." end="0" id="RESETDONE" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_0" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_0" offset="0x800" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_1" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_1" offset="0x804" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_2" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_2" offset="0x808" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_3" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_3" offset="0x80C" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_4" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_4" offset="0x810" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_5" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_5" offset="0x814" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_6" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_6" offset="0x818" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_7" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_7" offset="0x81C" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_8" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_8" offset="0x820" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_9" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_9" offset="0x824" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_10" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_10" offset="0x828" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_11" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_11" offset="0x82C" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_12" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_12" offset="0x830" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_13" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_13" offset="0x834" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_14" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_14" offset="0x838" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_15" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_15" offset="0x83C" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_16" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_16" offset="0x840" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_17" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_17" offset="0x844" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_18" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_18" offset="0x848" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_19" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_19" offset="0x84C" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_20" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_20" offset="0x850" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_21" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_21" offset="0x854" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_22" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_22" offset="0x858" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_23" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_23" offset="0x85C" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_24" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_24" offset="0x860" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_25" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_25" offset="0x864" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_26" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_26" offset="0x868" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_27" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_27" offset="0x86C" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_28" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_28" offset="0x870" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_29" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_29" offset="0x874" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_30" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_30" offset="0x878" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPINLOCK_REG_31" description="This register is read when attempting to acquire a lock. The lock is automatically taken if it was not taken and the value returned by the read is zero. If the lock was already taken, then the read returns one. Writing a zero to this register frees the lock." id="SPINLOCK_REG_31" offset="0x87C" width="32">
    
  <bitfield begin="31" description=" " end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" " end="0" id="TAKEN" rwaccess="RW" width="1"></bitfield>
  </register>
</module>
