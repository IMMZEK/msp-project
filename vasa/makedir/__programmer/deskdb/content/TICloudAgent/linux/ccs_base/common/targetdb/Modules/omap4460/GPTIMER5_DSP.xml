<module name="GPTIMER5_DSP" acronym="" XML_version="1.0" HW_revision="n/a" description="">
  <register id="GPT_TIDR" acronym="GPT_TIDR" offset="0x0" width="32" description="This read-only register contains the revision number of the module. A write to this register has no effect. This register is used by software to track features, bugs, and compatibility.">
    <bitfield id="REVISION" width="32" begin="31" end="0" resetval="0x&#8211;" description="IP Revision" range="" rwaccess="R"/>
  </register>
  <register id="GPT_TIOCP_CFG" acronym="GPT_TIOCP_CFG" offset="0x10" width="32" description="This register controls the various parameters of the L4 interface.">
    <bitfield id="RESERVED" width="28" begin="31" end="4" resetval="0x0000000" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="IDLEMODE" width="2" begin="3" end="2" resetval="0x0" description="Power management, req/ack control" range="" rwaccess="RW">
      <bitenum value="0" id="0" token="IDLEMODE_0" description="Force-idle mode: local target idle state follows (acknowledges) the system idle requests unconditionally, that is, regardless of the IP module internal requirements. Back-up mode, for debug only."/>
      <bitenum value="1" id="1" token="IDLEMODE_1" description="No-idle mode: local target never enters idle state. Back-up mode, for debug only."/>
      <bitenum value="2" id="2" token="IDLEMODE_2" description="Smart-idle mode: local target idle state eventually follows (acknowledges) the system idle requests, depending on the IP module internal requirements. IP module should not generate (IRQ- or DMA-request-related) wake-up events."/>
      <bitenum value="3" id="3" token="IDLEMODE_3" description="Smart-idle wake-up-capable mode: local target idle state eventually follows (acknowledges) the system idle requests, depending on the IP module internal requirements. IP module may generate (IRQ- or DMA-request-related) wake-up events when in idle state. Mode is only relevant if the appropriate IP moduleswake-up output(s) is (are) implemented."/>
    </bitfield>
    <bitfield id="EMUFREE" width="1" begin="1" end="1" resetval="0" description="Emulation mode" range="" rwaccess="RW">
      <bitenum value="0" id="0" token="EMUFREE_0" description="The timer is frozen in emulation mode (PINSUSPENDN signal active)."/>
      <bitenum value="1" id="1" token="EMUFREE_1" description="The timer runs free, regardless of PINSUSPENDN value."/>
    </bitfield>
    <bitfield id="SOFTRESET" width="1" begin="0" end="0" resetval="0" description="Software reset" range="" rwaccess="RW">
      <bitenum value="0" id="0" token="SOFTRESET_0" description="Read 0: reset done, no pending action Write 0: No action"/>
      <bitenum value="1" id="1" token="SOFTRESET_1" description="Read 1: initiate software reset Write 1: Reset ongoing"/>
    </bitfield>
  </register>
  <register id="GPT_IRQSTATUS_RAW" acronym="GPT_IRQSTATUS_RAW" offset="0x24" width="32" description="Component interrupt-request status. Check the corresponding secondary status register. Raw status is set even if event is not enabled. Write 1 to set the (raw) status, mostly for debug.">
    <bitfield id="RESERVED" width="29" begin="31" end="3" resetval="0x0000 0000" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="TCAR_IT_FLAG" width="1" begin="2" end="2" resetval="0" description="IRQ status for CaptureRead 0: No event pending Write 0: No action Read 1: IRQ event pending Write 1: Trigger IRQ event by software." range="" rwaccess="RW"/>
    <bitfield id="OVF_IT_FLAG" width="1" begin="1" end="1" resetval="0" description="IRQ status for OverflowRead 0: No event pending Write 0: No action Read 1: IRQ event pending Write 1: Trigger IRQ event by software." range="" rwaccess="RW"/>
    <bitfield id="MAT_IT_FLAG" width="1" begin="0" end="0" resetval="0" description="IRQ status for MatchRead 0: No event pending Write 0: No action Read 1: IRQ event pending Write 1: Trigger IRQ event by software" range="" rwaccess="RW"/>
  </register>
  <register id="GPT_IRQSTATUS" acronym="GPT_IRQSTATUS" offset="0x28" width="32" description="Component interrupt-request status. Check the corresponding secondary status register. Enabled status is not set unless event is enabled. Write 1 to clear the status after interrupt has been serviced (raw status gets cleared, that is, even if not enabled).">
    <bitfield id="RESERVED" width="29" begin="31" end="3" resetval="0x0000 0000" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="TCAR_IT_FLAG" width="1" begin="2" end="2" resetval="0" description="IRQ status for captureRead 0: No event pending Write 0: No action Read 1: IRQ event pending Write 1: Clear any pending event." range="" rwaccess="RW"/>
    <bitfield id="OVF_IT_FLAG" width="1" begin="1" end="1" resetval="0" description="IRQ status for OverflowRead 0: No event pending Write 0: No action Read 1: IRQ event pending Write 1: Clear any pending event." range="" rwaccess="RW"/>
    <bitfield id="MAT_IT_FLAG" width="1" begin="0" end="0" resetval="0" description="IRQ status for MatchRead 0: No event pending Write 0: No action Read 1: IRQ event pending Write 1: Clear any pending event." range="" rwaccess="RW"/>
  </register>
  <register id="GPT_IRQENABLE_SET" acronym="GPT_IRQENABLE_SET" offset="0x2C" width="32" description="Component interrupt-request enable. Write 1 to set (enable interrupt). Readout equal to corresponding _CLR register.">
    <bitfield id="RESERVED" width="29" begin="31" end="3" resetval="0x0000 0000" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="TCAR_EN_FLAG" width="1" begin="2" end="2" resetval="0" description="IRQ enable for CompareRead 0: IRQ event is disabled.Write 0: No action Read 1: IRQ event is enabled Write 1: Set IRQ enable." range="" rwaccess="RW"/>
    <bitfield id="OVF_EN_FLAG" width="1" begin="1" end="1" resetval="0" description="IRQ enable for OverflowRead 0: IRQ event is disabled.Write 0: No action Read 1: IRQ event is enabled.Write 1: Set IRQ enable." range="" rwaccess="RW"/>
    <bitfield id="MAT_EN_FLAG" width="1" begin="0" end="0" resetval="0" description="IRQ enable for MatchRead 0: IRQ event is disabled.Write 0: No action Read 1: IRQ event is enabled.Write 1: Set IRQ enable." range="" rwaccess="RW"/>
  </register>
  <register id="GPT_IRQENABLE_CLR" acronym="GPT_IRQENABLE_CLR" offset="0x30" width="32" description="Component interrupt-request enable. Write 1 to clear (disable interrupt). Readout equal to corresponding _SET register.">
    <bitfield id="RESERVED" width="29" begin="31" end="3" resetval="0x0000 0000" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="TCAR_EN_FLAG" width="1" begin="2" end="2" resetval="0" description="IRQ enable for CompareRead 0: IRQ event is disabled.Write 0: No action Read 1: IRQ event is enabled.Write 1: Clear IRQ enable." range="" rwaccess="RW"/>
    <bitfield id="OVF_EN_FLAG" width="1" begin="1" end="1" resetval="0" description="IRQ enable for OverflowRead 0: IRQ event is disabled.Write 0: No action Read 1: IRQ event is enabled.Write 1: Clear IRQ enable." range="" rwaccess="RW"/>
    <bitfield id="MAT_EN_FLAG" width="1" begin="0" end="0" resetval="0" description="IRQ enable for MatchRead 0: IRQ event is disabled.Write 0: No action Read 1: IRQ event is enabled.Write 1: Clear IRQ enable." range="" rwaccess="RW"/>
  </register>
  <register id="GPT_IRQWAKEEN" acronym="GPT_IRQWAKEEN" offset="0x34" width="32" description="Wake-up-enabled events taking place when module is idle should generate an asynchronous wake-up.">
    <bitfield id="RESERVED" width="29" begin="31" end="3" resetval="0x0000 0000" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="TCAR_WUP_ENA" width="1" begin="2" end="2" resetval="0" description="Wake-up generation for Compare" range="" rwaccess="RW">
      <bitenum value="0" id="0" token="TCAR_WUP_ENA_0" description="Wake-up disabled"/>
      <bitenum value="1" id="1" token="TCAR_WUP_ENA_1" description="Wake-up enabled"/>
    </bitfield>
    <bitfield id="OVF_WUP_ENA" width="1" begin="1" end="1" resetval="0" description="Wake-up generation for Overflow" range="" rwaccess="RW">
      <bitenum value="0" id="0" token="OVF_WUP_ENA_0" description="Wake-up disabled"/>
      <bitenum value="1" id="1" token="OVF_WUP_ENA_1" description="Wake-up enabled"/>
    </bitfield>
    <bitfield id="MAT_WUP_ENA" width="1" begin="0" end="0" resetval="0" description="Wake-up generation for Match" range="" rwaccess="RW">
      <bitenum value="0" id="0" token="MAT_WUP_ENA_0" description="Wake-up disabled"/>
      <bitenum value="1" id="1" token="MAT_WUP_ENA_1" description="Wake-up enabled"/>
    </bitfield>
  </register>
  <register id="GPT_TCLR" acronym="GPT_TCLR" offset="0x38" width="32" description="This register controls optional features specific to the timer functionality.">
    <bitfield id="RESERVED" width="17" begin="31" end="15" resetval="0x00000" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="GPO_CFG" width="1" begin="14" end="14" resetval="0" description="General-purpose output - this register directly drives the GPTi_PORGPOCFG output pin. For specific use of the GPO_CFG bit, see, ." range="" rwaccess="RW">
      <bitenum value="0" id="0" token="GPO_CFG_0" description="GPTi_PORGPOCFG drives 0."/>
      <bitenum value="1" id="1" token="GPO_CFG_1" description="GPTi_PORGPOCFG drives 1."/>
    </bitfield>
    <bitfield id="CAPT_MODE" width="1" begin="13" end="13" resetval="0" description="Capture mode select bit (first/second)" range="" rwaccess="RW">
      <bitenum value="0" id="0" token="CAPT_MODE_0" description="Single capture: Capture the first enabled capture event in TCAR1."/>
      <bitenum value="1" id="1" token="CAPT_MODE_1" description="Capture on second event: Capture the second enabled capture event in TCAR2."/>
    </bitfield>
    <bitfield id="PT" width="1" begin="12" end="12" resetval="0" description="Pulse or toggle mode on GPTi_PWM_out output pin" range="" rwaccess="RW">
      <bitenum value="0" id="0" token="PT_0" description="Pulse modulation"/>
      <bitenum value="1" id="1" token="PT_1" description="Toggle modulation"/>
    </bitfield>
    <bitfield id="TRG" width="2" begin="11" end="10" resetval="0x0" description="Trigger output mode on GPTi_PWM_out output pin" range="" rwaccess="RW">
      <bitenum value="0" id="0" token="TRG_0" description="No trigger"/>
      <bitenum value="1" id="1" token="TRG_1" description="Trigger on overflow."/>
      <bitenum value="2" id="2" token="TRG_2" description="Trigger on overflow and match."/>
      <bitenum value="3" id="3" token="TRG_3" description="Reserved"/>
    </bitfield>
    <bitfield id="TCM" width="2" begin="9" end="8" resetval="0x0" description="Transition capture mode on GPTi_EVENT_CAPTURE input pin (When the TCM field passed from (00) to any other combination, the TCAR_IT_FLAG and the edge detection logic are cleared.)" range="" rwaccess="RW">
      <bitenum value="0" id="0" token="TCM_0" description="No capture"/>
      <bitenum value="1" id="1" token="TCM_1" description="Capture on rising edges of GPTi_EVENT_CAPTURE pin"/>
      <bitenum value="2" id="2" token="TCM_2" description="Capture on falling edges of GPTi_EVENT_CAPTURE pin"/>
      <bitenum value="3" id="3" token="TCM_3" description="Capture on both edges of GPTi_EVENT_CAPTURE pin"/>
    </bitfield>
    <bitfield id="SCPWM" width="1" begin="7" end="7" resetval="0" description="Pulse width modulation output pin default settingThis bit must be set or clear while the timer is stopped or the trigger is off." range="" rwaccess="RW">
      <bitenum value="0" id="0" token="SCPWM_0" description="Clear the GPTi_PWM_out output pin and select positive pulse for pulse mode."/>
      <bitenum value="1" id="1" token="SCPWM_1" description="Set the GPTi_PWM_out output pin and select negative pulse for pulse mode."/>
    </bitfield>
    <bitfield id="CE" width="1" begin="6" end="6" resetval="0" description="Compare enable" range="" rwaccess="RW">
      <bitenum value="0" id="0" token="CE_0" description="Compare mode is disable."/>
      <bitenum value="1" id="1" token="CE_1" description="Compare mode is enable."/>
    </bitfield>
    <bitfield id="PRE" width="1" begin="5" end="5" resetval="0" description="Prescaler enable" range="" rwaccess="RW">
      <bitenum value="0" id="0" token="PRE_0" description="The TIMER clock input pin clocks the counter."/>
      <bitenum value="1" id="1" token="PRE_1" description="The divided input pin clocks the counter."/>
    </bitfield>
    <bitfield id="PTV" width="3" begin="4" end="2" resetval="0x0" description="Prescale clock timer valueThe timer counter is prescaled with the value 2. Example: PTV = 3, counter increases value (if started) after 16 functional clock periods." range="" rwaccess="RW"/>
    <bitfield id="AR" width="1" begin="1" end="1" resetval="0" description="Autoreload mode" range="" rwaccess="RW">
      <bitenum value="0" id="0" token="AR_0" description="One shot timer"/>
      <bitenum value="1" id="1" token="AR_1" description="Autoreload timer"/>
    </bitfield>
    <bitfield id="ST" width="1" begin="0" end="0" resetval="0" description="Start/stop timer control" range="" rwaccess="RW">
      <bitenum value="0" id="0" token="ST_0" description="Stop timer: Only the counter is frozen. If one-shot mode selected (AR =0), this bit is automatically reset by internal logic when the counter is overflowed."/>
      <bitenum value="1" id="1" token="ST_1" description="Start timer"/>
    </bitfield>
  </register>
  <register id="GPT_TCRR" acronym="GPT_TCRR" offset="0x3C" width="32" description="This register holds the value of the internal counter.">
    <bitfield id="TIMER_COUNTER" width="32" begin="31" end="0" resetval="0x0000 0000" description="Value of TIMER counter" range="" rwaccess="RW"/>
  </register>
  <register id="GPT_TLDR" acronym="GPT_TLDR" offset="0x40" width="32" description="This register holds the timer load value.">
    <bitfield id="LOAD_VALUE" width="32" begin="31" end="0" resetval="0x0000 0000" description="Timer counter value loaded on overflow in autoreload mode or onGPT_TTGR write access. LOAD_VALUE must be different than the timer overflow value (0xFFFF FFFF)." range="" rwaccess="RW"/>
  </register>
  <register id="GPT_TTGR" acronym="GPT_TTGR" offset="0x44" width="32" description="The read value of this register is always 0xFFFF FFFF.">
    <bitfield id="TTGR_VALUE" width="32" begin="31" end="0" resetval="0xFFFF FFFF" description="Writing to the TTGR register causes theGPT_TCRR to be loaded from GPT_TLDR and the prescaler counter to be cleared. Reload is done regardless of the AR field value of the GPT_TCLR register." range="" rwaccess="RW Rreturns1s"/>
  </register>
  <register id="GPT_TWPS" acronym="GPT_TWPS" offset="0x48" width="32" description="This register contains the write posting bits for all writable functional registers.">
    <bitfield id="RESERVED" width="27" begin="31" end="5" resetval="0x0000000" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="W_PEND_TMAR" width="1" begin="4" end="4" resetval="0" description="When equal to 1, a write is pending to theGPT_TMAR register." range="" rwaccess="R"/>
    <bitfield id="W_PEND_TTGR" width="1" begin="3" end="3" resetval="0" description="When equal to 1, a write is pending to theGPT_TTGR register." range="" rwaccess="R"/>
    <bitfield id="W_PEND_TLDR" width="1" begin="2" end="2" resetval="0" description="When equal to 1, a write is pending to theGPT_TLDR register." range="" rwaccess="R"/>
    <bitfield id="W_PEND_TCRR" width="1" begin="1" end="1" resetval="0" description="When equal to 1, a write is pending to theGPT_TCRR register." range="" rwaccess="R"/>
    <bitfield id="W_PEND_TCLR" width="1" begin="0" end="0" resetval="0" description="When equal to 1, a write is pending to theGPT_TCLR register." range="" rwaccess="R"/>
  </register>
  <register id="GPT_TMAR" acronym="GPT_TMAR" offset="0x4C" width="32" description="The compare logic consists of a 32-bit-wide, read/write data TMAR register and logic to compare counter.">
    <bitfield id="COMPARE_VALUE" width="32" begin="31" end="0" resetval="0x0000 0000" description="Value to be compared to the timer counter" range="" rwaccess="RW"/>
  </register>
  <register id="GPT_TCAR1" acronym="GPT_TCAR1" offset="0x50" width="32" description="This register holds the first captured value of the counter register.">
    <bitfield id="CAPTURE_VALUE1" width="32" begin="31" end="0" resetval="0x0000 0000" description="First timer counter value captured on an external event trigger" range="" rwaccess="R"/>
  </register>
  <register id="GPT_TSICR" acronym="GPT_TSICR" offset="0x54" width="32" description="Timer synchronous interface control register">
    <bitfield id="RESERVED" width="29" begin="31" end="3" resetval="0x0000 0000" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="POSTED" width="1" begin="2" end="2" resetval="-" description="Posted mode selection" range="" rwaccess="RW">
      <bitenum value="0" id="0" token="POSTED_0" description="Posted mode inactive: Delay the command accept output signal."/>
      <bitenum value="1" id="1" token="POSTED_1" description="Posted mode active"/>
    </bitfield>
    <bitfield id="SFT" width="1" begin="1" end="1" resetval="0" description="This bit resets all the functional part of the module." range="" rwaccess="RW">
      <bitenum value="0" id="0" token="SFT_0" description="Software reset is disabled."/>
      <bitenum value="1" id="1" token="SFT_1" description="Software reset is enabled."/>
    </bitfield>
    <bitfield id="RESERVED" width="1" begin="0" end="0" resetval="0" description="Reserved" range="" rwaccess="R"/>
  </register>
  <register id="GPT_TCAR2" acronym="GPT_TCAR2" offset="0x58" width="32" description="This register holds the second captured value of the counter register.">
    <bitfield id="CAPTURE_VALUE2" width="32" begin="31" end="0" resetval="0x0000 0000" description="Second timer counter value captured on an external event trigger" range="" rwaccess="R"/>
  </register>
</module>
