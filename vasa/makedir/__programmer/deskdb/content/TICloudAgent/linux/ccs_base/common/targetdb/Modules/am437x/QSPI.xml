<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="QSPI" id="QSPI">
  
  
  <register acronym="QSPI_PID" description="" id="QSPI_PID" offset="0x0" width="32">
    
  <bitfield begin="31" description=" The scheme of the register used. [[br]]This indicates the PDR3.5 Method" end="30" id="SCHEME" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description=" " end="28" id="RSVD" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="27" description=" The function of the module being used" end="16" id="FUNC" rwaccess="R" width="12"></bitfield>
    
  <bitfield begin="15" description=" RTL version number " end="11" id="RTL_VERSION" rwaccess="R" width="5"></bitfield>
    
  <bitfield begin="10" description=" Major revision number" end="8" id="MAJOR" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="7" description=" " end="6" id="CUSTOM" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="5" description=" Minor Revision Number" end="0" id="MINOR" rwaccess="R" width="6"></bitfield>
  </register>
  
  
  <register acronym="QSPI_SYSCONFIG" description="" id="QSPI_SYSCONFIG" offset="0x10" width="32">
    
  <bitfield begin="31" description=" " end="6" id="RSVD_2" rwaccess="R" width="26"></bitfield>
    
  <bitfield begin="5" description=" " end="4" id="RESERVED_1" rwaccess="W" width="2"></bitfield>
    
  <bitfield begin="3" description=" Configuration of the local target state management mode. [[br]]By definition, target can handle read/write transaction as long as it is out of IDLE state " end="2" id="IDLE_MODE" rwaccess="RW" width="2">
    <bitenum description="Smart-idle wakeup-capable mode: local target's idle state eventually follows (acknowledges) the system's idle requests, depending on the IP module's internal requirements. IP module may generate (IRQ- or DMA-request-related) wakeup events when in idle state. Mode is only relevant if the appropriate IP module &quot;swakeup&quot; output(s) is (are) implemented" id="en_4_0x3" token="en_4_0x3" value="0x3"></bitenum>
    <bitenum description="Smart-idle mode: local target's idle state eventually follows (acknowledges) the system's idle requests, depending on the IP module's internal requirements. IP module shall not generate (IRQ- or DMA-request-related) wakeup events" id="en_3_0x2" token="en_3_0x2" value="0x2"></bitenum>
    <bitenum description="No-idle mode: local target never enters idle state." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Local target's idle state follows (acknowledges) the system's idle requests unconditionally, i.e. regardless of the IP module's internal requirements." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="1" description=" " end="0" id="RSVD_1" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="QSPI_INTR_STS_RAW_SET" description="This register contains the raw interrupt status." id="QSPI_INTR_STS_RAW_SET" offset="0x20" width="32">
    
  <bitfield begin="31" description=" " end="2" id="RSVD" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description=" Word Interrupt Status. [[br]]Read indicates raw status. [[br]]Writing 1 will set status. [[br]]Writing 0 has no effect. [[br]] " end="1" id="WIRQ_RAW" rwaccess="RW" width="1">
    <bitenum description="Active." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Inactive." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="0" description=" Frame Interrupt Status. [[br]]Read indicates raw status. [[br]]Writing 1 will set status. [[br]]Writing 0 has no effect. [[br]] " end="0" id="FIRQ_RAW" rwaccess="RW" width="1">
    <bitenum description="Active." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Inactive." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="QSPI_INTR_STS_EN_CLR" description="Interrupt Status Enabled/Clear Register." id="QSPI_INTR_STS_EN_CLR" offset="0x24" width="32">
    
  <bitfield begin="31" description=" " end="2" id="RSVD" rwaccess="R" width="30"></bitfield>
    
  <bitfield begin="1" description=" Word Interrupt Enabled Status. [[br]]Read indicates enabled status. [[br]]Writing 1 will clear interrupt. [[br]]Writing 0 has no effect. [[br]] " end="1" id="WIRQ_ENA" rwaccess="RW" width="1">
    <bitenum description="Active." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Inactive." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="0" description=" Frame Interrupt Enabled Status. [[br]]Read indicates enabled status. [[br]]Writing 1 will clear interrupt. [[br]]Writing 0 has no effect. [[br]] " end="0" id="FIRQ_ENA" rwaccess="RW" width="1">
    <bitenum description="Active." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Inactive." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="QSPI_INTR_EN_SET_REG" description="Interrupt Enable/Set Register." id="QSPI_INTR_EN_SET_REG" offset="0x28" width="32">
    
  <bitfield begin="31" description=" " end="2" id="RSVD" rwaccess="R" width="30"></bitfield>
    
  <bitfield begin="1" description=" Word Interrupt Enable/Set. [[br]]Read indicates interrupt enable. [[br]]Writing 1 will set interrupt enabled. [[br]]Writing 0 has no effect. [[br]] " end="1" id="WIRQ_ENA_SET" rwaccess="RW" width="1">
    <bitenum description="Active." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Inactive." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="0" description=" Frame Interrupt Enable/Set. [[br]]Read indicates interrupt enable. [[br]]Writing 1 will set interrupt enabled. [[br]]Writing 0 has no effect. [[br]] " end="0" id="FIRQ_ENA_SET" rwaccess="RW" width="1">
    <bitenum description="Active." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Inactive." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="QSPI_INTR_EN_CLR_REG" description="Interrupt Enable/Clear Register." id="QSPI_INTR_EN_CLR_REG" offset="0x2C" width="32">
    
  <bitfield begin="31" description=" " end="2" id="RSVD" rwaccess="R" width="30"></bitfield>
    
  <bitfield begin="1" description=" Word Interrupt Enable/Clear. [[br]]Read indicates interrupt enable. [[br]]Writing 1 will clear interrupt enabled. [[br]]Writing 0 has no effect. [[br]] " end="1" id="WIRQ_ENA_CLR" rwaccess="RW" width="1">
    <bitenum description="Active." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Inactive." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="0" description=" Frame Interrupt Enable/Clear. [[br]]Read indicates interrupt enable. [[br]]Writing 1 will clear interrupt enabled. [[br]]Writing 0 has no effect. [[br]] " end="0" id="FIRQ_ENA_CLR" rwaccess="RW" width="1">
    <bitenum description="Active." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Inactive." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="QSPI_CLOCK_CNTRL_REG" description="SPI Clock Control (SPICC) Register. SPICC controls the SPI clock generation. The SPICC controls the SPI clock generation. The input for clock division is the input SPI_CLK signal. The output clock will be divided by DCLK_DIV+1 to provide the output SPI interface clock as well as controlling the main portion of the design. Note that loading a value or 0 input DCLK_DIV will force the input SPI_CLK to be used directly for the SPI interface clock. The value in DCLK_DIV is only loaded when CLKEN transitions from a 0 to 1 state. This register can only be written to when the SPI is not busy, as defined by SPISR[0]. " id="QSPI_CLOCK_CNTRL_REG" offset="0x40" width="32">
    
  <bitfield begin="31" description=" Clock Enable." end="31" id="CLKEN" rwaccess="RW" width="1">
    <bitenum description="Data clock is enabled." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Data clock is turned off." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="30" description=" " end="16" id="RESERVED_1" rwaccess="R" width="15"></bitfield>
    
  <bitfield begin="15" description=" Serial data clock divide by ratio" end="0" id="DCLK_DIV" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="QSPI_DC_REG" description="SPI Device Control (SPIDC) Register. The SPIDC controls the different modes for each output chip select. The SPIDC controls the different modes for each output chip select. NOTE: The combination of [CKPn, CKPHn] creates the SPI mode . Most serial Flash devices only support SPI modes 0 and 3. SPI devices transmit and receive data on opposite edge s of the SPI clock. Note that changing the clock polarity also swaps the transmit/receive clock edge relationship. If a slave device states that it receives data on the rising edge and transmits on the falling edge of the clock, then it can only support mode 0 or 3 (CKPn = 0, CKPHn = 0 OR CKPn = 1, CKPHn = 1). This register can only be written to when the SPI is not busy, as defined by SPISR[0]." id="QSPI_DC_REG" offset="0x44" width="32">
    
  <bitfield begin="31" description=" " end="29" id="RSVD_3" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description=" Data delay for chip select 3. [[br]] " end="27" id="DD3" rwaccess="" width="2">
    <bitenum description="Data is output 3 DCLK cycles after the CS_N goes active." id="en_4_0x3" token="en_4_0x3" value="0x3"></bitenum>
    <bitenum description="Data is output 2 DCLK cycles after the CS_N goes active." id="en_3_0x2" token="en_3_0x2" value="0x2"></bitenum>
    <bitenum description="Data is output 1 DCLK cycle after the CS_N goes active." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Data is output on the same cycle as the CS_N goes active." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="26" description=" Clock phase for chip select 3. [[br]]See register description note. [[br]] " end="26" id="CKPH3" rwaccess="" width="1">
    <bitenum description="If CKP3 = 0, data shifted out on rising edge and input on falling edge. If CKP3 = 1, data shifted out on falling edge and input on rising edge." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="If CKP3 = 0, data shifted out on falling edge and input on rising edge. If CKP3 = 1, data shifted out on rising edge and input on falling edge." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="25" description=" Chip select polarity for chip select 3. [[br]] " end="25" id="CSP3" rwaccess="" width="1">
    <bitenum description="Active high." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Active low." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="24" description=" Clock polarity for chip select 3. [[br]] " end="24" id="CKP3" rwaccess="" width="1">
    <bitenum description="When data is being transferred, SCK = 1" id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="When data is not being transferred, SCK = 0" id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="23" description=" " end="21" id="RSVD_2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="20" description=" Data delay for chip select 2. [[br]] " end="19" id="DD2" rwaccess="" width="2">
    <bitenum description="Data is output 3 DCLK cycles after the CS_N goes active." id="en_4_0x3" token="en_4_0x3" value="0x3"></bitenum>
    <bitenum description="Data is output 2 DCLK cycles after the CS_N goes active." id="en_3_0x2" token="en_3_0x2" value="0x2"></bitenum>
    <bitenum description="Data is output 1 DCLK cycle after the CS_N goes active." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Data is output on the same cycle as the CS_N goes active." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="18" description=" Clock phase for chip select 2. [[br]]See register description note. [[br]] " end="18" id="CKPH2" rwaccess="" width="1">
    <bitenum description="If CKP2 = 0, data shifted out on rising edge and input on falling edge. If CKP2 = 1, data shifted out on falling edge and input on rising edge." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="If CKP2 = 0, data shifted out on falling edge and input on rising edge. If CKP2 = 1, data shifted out on rising edge and input on falling edge." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="17" description=" Chip select polarity for chip select 2. [[br]] " end="17" id="CSP2" rwaccess="" width="1">
    <bitenum description="Active high." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Active low." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="16" description=" Clock polarity for chip select 2. [[br]] " end="16" id="CKP2" rwaccess="" width="1">
    <bitenum description="When data is being transferred, SCK = 1" id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="When data is not being transferred, SCK = 0" id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="15" description=" " end="13" id="RSVD_1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="12" description=" Data delay for chip select 1. [[br]] " end="11" id="DD1" rwaccess="" width="2">
    <bitenum description="Data is output 3 DCLK cycles after the CS_N goes active." id="en_4_0x3" token="en_4_0x3" value="0x3"></bitenum>
    <bitenum description="Data is output 2 DCLK cycles after the CS_N goes active." id="en_3_0x2" token="en_3_0x2" value="0x2"></bitenum>
    <bitenum description="Data is output 1 DCLK cycle after the CS_N goes active." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Data is output on the same cycle as the CS_N goes active." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="10" description=" Clock phase for chip select 1. [[br]]See register description note. [[br]] " end="10" id="CKPH1" rwaccess="" width="1">
    <bitenum description="If CKP1 = 0, data shifted out on rising edge and input on falling edge. If CKP1 = 1, data shifted out on falling edge and input on rising edge." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="If CKP1 = 0, data shifted out on falling edge and input on rising edge. If CKP1 = 1, data shifted out on rising edge and input on falling edge." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="9" description=" Chip select polarity for chip select 1. [[br]] " end="9" id="CSP1" rwaccess="" width="1">
    <bitenum description="Active high." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Active low." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="8" description=" Clock polarity for chip select 1. [[br]] " end="8" id="CKP1" rwaccess="" width="1">
    <bitenum description="When data is being transferred, SCK = 1" id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="When data is not being transferred, SCK = 0" id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="7" description=" " end="5" id="RSVD_0" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="4" description=" Data delay for chip select 0. [[br]] " end="3" id="DD0" rwaccess="" width="2">
    <bitenum description="Data is output 3 DCLK cycles after the CS_N goes active." id="en_4_0x3" token="en_4_0x3" value="0x3"></bitenum>
    <bitenum description="Data is output 2 DCLK cycles after the CS_N goes active." id="en_3_0x2" token="en_3_0x2" value="0x2"></bitenum>
    <bitenum description="Data is output 1 DCLK cycle after the CS_N goes active." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Data is output on the same cycle as the CS_N goes active." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="2" description=" Clock phase for chip select 0. [[br]]See register description note. [[br]] " end="2" id="CKPH0" rwaccess="" width="1">
    <bitenum description="If CKP0 = 0, data shifted out on rising edge and input on falling edge. If CKP0 = 1, data shifted out on falling edge and input on rising edge." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="If CKP0 = 0, data shifted out on falling edge and input on rising edge. If CKP0 = 1, data shifted out on rising edge and input on falling edge." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="1" description=" Chip select polarity for chip select. [[br]] " end="1" id="CSP0" rwaccess="" width="1">
    <bitenum description="Active high." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Active low." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="0" description=" Clock polarity for chip select. [[br]] " end="0" id="CKP0" rwaccess="" width="1">
    <bitenum description="When data is being transferred, SCK = 1" id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="When data is not being transferred, SCK = 0" id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="QSPI_CMD_REG" description="SPI Command Register (SPICR). Sets up the SPI command. Since the SPI convention is to always shift in new data (LSB position) while shifting out data from the MSB position the 'read', 'write' and 'read dual' commands actually just initiate a transfer. Write commands will assert the spi_dout_oe_n signal to enable the tristate buffer for spi_dout_o. Read commands will deassert the spi_dout_oe_n signal to disable the tristate buffer for spi_dout_o. Executing any of these commands will initiate the next word transfer (except for the case of &quot;read dual&quot;). The 'read dual' command will also initiate a transfer like read or write. However, this command is used to communicate with serial Flash devices which support dual read output. Dual read output mode uses the spi_dout signal as an input along with the spi_din input (spi_dout is therefore a bidirectional signal). WLEN transfers must be even. The spi_din input will contain the odd number bytes and the spi_dout bidirectional/input will contain the even number bytes. This read mode effectively doubles the read bandwidth of the design. This command can only be used on those devices which support a dual read command. The 'read quad' command is similar to the read dual command, except it uses a 6 pin interface. The In particular, transfers are started by writing to byte 2 of this register (only byte 2 will start a transfer). Writing a &quot;reserved&quot; value to the CMD register will terminate the frame transfer. This can be used to abort a frame if desired. Reserved commands are CMD = 00 and CMD_MODE=1 AND CMD=11. This register can only be written to when the SPI is not busy, as defined by SPISR[0]. If the SPI clock has not been enabled (SPICC[31] = 0), then writing to this register will NOT start the SPI transfer. The transfer will not be queued to start upon the activation of the clock. The transfer will ONLY start if SPICC[31] = 1 when this register is written. " id="QSPI_CMD_REG" offset="0x48" width="32">
    
  <bitfield begin="31" description=" Reserved." end="30" id="RSVD_3" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description=" Device select. [[br]]Sets the active chip select for the transfer. [[br]] " end="28" id="CSNUM" rwaccess="RW" width="2">
    <bitenum description="Reserved." id="en_4_0x3" token="en_4_0x3" value="0x3"></bitenum>
    <bitenum description="Reserved." id="en_3_0x2" token="en_3_0x2" value="0x2"></bitenum>
    <bitenum description="Reserved." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Chip select 0 active." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="27" description=" Reserved." end="24" id="RSVD_2" rwaccess="R" width="4"></bitfield>
    
  <bitfield begin="23" description=" Word length. [[br]]Sets the size of the individual transfers from 1 to 32 bits. " end="19" id="WLEN" rwaccess="RW" width="5">
    <bitenum description="32 bits." id="en_3_0x1F" token="en_3_0x1F" value="0x1F"></bitenum>
    <bitenum description="2 bits." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="1 bit." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="18" description=" Transfer command. [[br]] " end="16" id="CMD" rwaccess="RW" width="3">
    <bitenum description="6 pin Read Quad" id="en_6_0x7" token="en_6_0x7" value="0x7"></bitenum>
    <bitenum description="3 pin Write Single" id="en_5_0x6" token="en_5_0x6" value="0x6"></bitenum>
    <bitenum description="3 pin Read Single" id="en_4_0x5" token="en_4_0x5" value="0x5"></bitenum>
    <bitenum description="4 pin Read Dual" id="en_3_0x3" token="en_3_0x3" value="0x3"></bitenum>
    <bitenum description="4 pin Write Single" id="en_2_0x2" token="en_2_0x2" value="0x2"></bitenum>
    <bitenum description="4 pin Read Single" id="en_1_0x1" token="en_1_0x1" value="0x1"></bitenum>
  </bitfield>
    
  <bitfield begin="15" description=" Frame count interrupt enable." end="15" id="FIRQ" rwaccess="RW" width="1">
    <bitenum description="Enable." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Disable." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="14" description=" Word count interrupt enable." end="14" id="WIRQ" rwaccess="RW" width="1">
    <bitenum description="Enable." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Disable." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="13" description=" Reserved" end="12" id="RSVD" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="11" description=" Frame Length." end="0" id="FLEN" rwaccess="RW" width="12">
    <bitenum description="4096 words." id="en_3_0xFFF" token="en_3_0xFFF" value="0xFFF"></bitenum>
    <bitenum description="2 words." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="1 word." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="QSPI_STS_REG" description="SPI Status Register (SPISR). The SPI Status Register contains indicators to allow the user to monitor the progression of a frame transfer. The SPI Status Register contains indicators to allow the user to monitor the progression of a frame transfer. The word complete (WC) and frame complete (FC) bits are used as stimulus for generating interrupts. Setting the corresponding interrupt enable bit in the SPI Command Register will allow these events to generate an interrupt. The WDCNT field will reset itself when transitioning from the LOAD state to the SHIFT state. THE WC and FC fields will be reset every time the user writes to the SPI Command Register or the SPI Status Register is read. The BUSY bit of this register (SPISR[0]) is used to block write access to the SPICC, SPIDC, SPICR and SPIDR registers. This is done to keep control parameters from changing the interface protocol signals while a transfer is in progress. If a write is made while BUSY is active, the write will simply not occur. BUSY is set immediately when SPICR[18:16] are written and BUSY will be cleared when the current word has completed transfer (on SPISR[1]). However, if the SPI clock enable is not set (SPICC[31] = 0) and a command is executed (SPICR[18:16] is written to start a command), BUSY will NOT be set and the command will not be executed. BUSY will ONLY go high if SPICC[31] = 1 and SPICR[18:16] is written. " id="QSPI_STS_REG" offset="0x4C" width="32">
    
  <bitfield begin="31" description=" " end="28" id="RSVD_2" rwaccess="R" width="4"></bitfield>
    
  <bitfield begin="27" description=" Word count. [[br]]This field will reflect the 1 to 4096 words transferred" end="16" id="WDCNT" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="15" description=" " end="3" id="RSVD" rwaccess="R" width="13"></bitfield>
    
  <bitfield begin="2" description=" Frame complete. [[br]]This bit is set after all of the requested words have been transmitted. " end="2" id="FC" rwaccess="RW" width="1">
    <bitenum description="Transfer is complete. This bit is reset when the SPI Status Register is read." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Transfer is not complete." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="1" description=" Word complete. [[br]]This bit is set after each word transfer is completed. " end="1" id="WC" rwaccess="RW" width="1">
    <bitenum description="Word transfer is complete. This bit is reset when the SPI Status Register is read." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Word transfer is not complete." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="0" description=" Busy bit. [[br]]Active transfer in progress. [[br]]This bit is only set during an active word transfer. [[br]]Between words, the bit will clear to signal that it is ok to read/write the data registers. " end="0" id="BUSY" rwaccess="RW" width="1">
    <bitenum description="Busy." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Idle." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="QSPI_DATA_REG" description="SPI Data Register (SPIDR). Data received in the data register is shifted into the LSB position and the contents of the register are shifted to the left. The register is cleared between reads or writes. Data received in the data register is shifted into the LSB position and the contents of the register are shifted to the left. The register is cleared between reads or writes. When writing data to the register it should be right justified so pre-shifting is not required. The word length field will determine the location of the most significant bit and the bit position that will be shifted out first during a write. In order to shift out byte data the word length should be set to 7 and the data byte should be written to the lower byte of the data register. By setting the word length to 7 the data register will look like a pseudo 8-bit shift register. The word length setting does not affect the VBUSP read or write operations. This register can only be written to when the SPI is not busy, as defined by SPISR[0]. " id="QSPI_DATA_REG" offset="0x50" width="32">
    
  <bitfield begin="31" description=" Data register for read and write operations" end="0" id="DATA" rwaccess="" width="32"></bitfield>
  </register>
  
  
  <register acronym="QSPI_SETUP_REG_0" description="Memory Mapped SPI Setup Register n. The Memory Mapped SPI Setup Register contains the read/write command setup for the Memory Mapped Protocol Translator (effecting Chip Select n output). The Memory Mapped SPI Setup Register contains the read/write command setup for the Memory Mapped Protocol Translator, request n input (effecting Chip Select n output). This corresponds to MAddrSpace = 001 (n = 0), MAddrSpace = 010 (n = 1), MAddrSpace = 011 (n = 2), and MAddrSpace = 100, 101, 110, and 111 (n = 3) . Note that by default (reset), the device uses a write command of 2, read command of 3 and number of address bytes of 3. This default covers most serial Flash devices, but can be changed. " id="QSPI_SETUP_REG_0" offset="0x54" width="32">
    
  <bitfield begin="31" description=" " end="29" id="RSVD_2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description=" Number of dummy bits to use if NUM_D_BYTES = 0." end="24" id="NUM_D_BITS" rwaccess="" width="5"></bitfield>
    
  <bitfield begin="23" description=" Write command." end="16" id="WCMD" rwaccess="" width="8"></bitfield>
    
  <bitfield begin="15" description=" " end="14" id="RSVD_1" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="13" description=" Determines if the read command is a single, dual or quad read mode command." end="12" id="READ_TYPE" rwaccess="" width="2">
    <bitenum description="Quad read (uses spi_qdin0/1)" id="en_4_0x3" token="en_4_0x3" value="0x3"></bitenum>
    <bitenum description="Normal read (all data input on spi_din)" id="en_3_0x2" token="en_3_0x2" value="0x2"></bitenum>
    <bitenum description="Dual read (odd bytes input on spi_din; even on spi_dout)" id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Normal read (all data input on spi_din)" id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="11" description=" Number of dummy bytes to be used for fast read." end="10" id="NUM_D_BYTES" rwaccess="" width="2">
    <bitenum description="3" id="en_4_0x3" token="en_4_0x3" value="0x3"></bitenum>
    <bitenum description="2" id="en_3_0x2" token="en_3_0x2" value="0x2"></bitenum>
    <bitenum description="1" id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="No dummy bytes required." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="9" description=" Number of address bytes to be sent." end="8" id="NUM_A_BYTES" rwaccess="" width="2">
    <bitenum description="4 bytes." id="en_4_0x3" token="en_4_0x3" value="0x3"></bitenum>
    <bitenum description="3 bytes." id="en_3_0x2" token="en_3_0x2" value="0x2"></bitenum>
    <bitenum description="2 bytes." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="1 byte." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="7" description=" Read Command." end="0" id="RCMD" rwaccess="" width="8"></bitfield>
  </register>
  
  
  <register acronym="QSPI_SETUP_REG_1" description="Memory Mapped SPI Setup Register n. The Memory Mapped SPI Setup Register contains the read/write command setup for the Memory Mapped Protocol Translator (effecting Chip Select n output). The Memory Mapped SPI Setup Register contains the read/write command setup for the Memory Mapped Protocol Translator, request n input (effecting Chip Select n output). This corresponds to MAddrSpace = 001 (n = 0), MAddrSpace = 010 (n = 1), MAddrSpace = 011 (n = 2), and MAddrSpace = 100, 101, 110, and 111 (n = 3) . Note that by default (reset), the device uses a write command of 2, read command of 3 and number of address bytes of 3. This default covers most serial Flash devices, but can be changed. " id="QSPI_SETUP_REG_1" offset="0x58" width="32">
    
  <bitfield begin="31" description=" " end="29" id="RSVD_2" rwaccess="R" width="3"/>
    
  <bitfield begin="28" description=" Number of dummy bits to use if NUM_D_BYTES = 0." end="24" id="NUM_D_BITS" rwaccess="" width="5"/>
    
  <bitfield begin="23" description=" Write command." end="16" id="WCMD" rwaccess="" width="8"/>
    
  <bitfield begin="15" description=" " end="14" id="RSVD_1" rwaccess="R" width="2"/>
    
  <bitfield begin="13" description=" Determines if the read command is a single, dual or quad read mode command." end="12" id="READ_TYPE" rwaccess="" width="2">
    <bitenum description="Quad read (uses spi_qdin0/1)" id="en_4_0x3" token="en_4_0x3" value="0x3"/>
    <bitenum description="Normal read (all data input on spi_din)" id="en_3_0x2" token="en_3_0x2" value="0x2"/>
    <bitenum description="Dual read (odd bytes input on spi_din; even on spi_dout)" id="en_2_0x1" token="en_2_0x1" value="0x1"/>
    <bitenum description="Normal read (all data input on spi_din)" id="en_1_0x0" token="en_1_0x0" value="0x0"/>
  </bitfield>
    
  <bitfield begin="11" description=" Number of dummy bytes to be used for fast read." end="10" id="NUM_D_BYTES" rwaccess="" width="2">
    <bitenum description="3" id="en_4_0x3" token="en_4_0x3" value="0x3"/>
    <bitenum description="2" id="en_3_0x2" token="en_3_0x2" value="0x2"/>
    <bitenum description="1" id="en_2_0x1" token="en_2_0x1" value="0x1"/>
    <bitenum description="No dummy bytes required." id="en_1_0x0" token="en_1_0x0" value="0x0"/>
  </bitfield>
    
  <bitfield begin="9" description=" Number of address bytes to be sent." end="8" id="NUM_A_BYTES" rwaccess="" width="2">
    <bitenum description="4 bytes." id="en_4_0x3" token="en_4_0x3" value="0x3"/>
    <bitenum description="3 bytes." id="en_3_0x2" token="en_3_0x2" value="0x2"/>
    <bitenum description="2 bytes." id="en_2_0x1" token="en_2_0x1" value="0x1"/>
    <bitenum description="1 byte." id="en_1_0x0" token="en_1_0x0" value="0x0"/>
  </bitfield>
    
  <bitfield begin="7" description=" Read Command." end="0" id="RCMD" rwaccess="" width="8"/>
  </register>
  
  
  <register acronym="QSPI_SETUP_REG_2" description="Memory Mapped SPI Setup Register n. The Memory Mapped SPI Setup Register contains the read/write command setup for the Memory Mapped Protocol Translator (effecting Chip Select n output). The Memory Mapped SPI Setup Register contains the read/write command setup for the Memory Mapped Protocol Translator, request n input (effecting Chip Select n output). This corresponds to MAddrSpace = 001 (n = 0), MAddrSpace = 010 (n = 1), MAddrSpace = 011 (n = 2), and MAddrSpace = 100, 101, 110, and 111 (n = 3) . Note that by default (reset), the device uses a write command of 2, read command of 3 and number of address bytes of 3. This default covers most serial Flash devices, but can be changed. " id="QSPI_SETUP_REG_2" offset="0x5C" width="32">
    
  <bitfield begin="31" description=" " end="29" id="RSVD_2" rwaccess="R" width="3"/>
    
  <bitfield begin="28" description=" Number of dummy bits to use if NUM_D_BYTES = 0." end="24" id="NUM_D_BITS" rwaccess="" width="5"/>
    
  <bitfield begin="23" description=" Write command." end="16" id="WCMD" rwaccess="" width="8"/>
    
  <bitfield begin="15" description=" " end="14" id="RSVD_1" rwaccess="R" width="2"/>
    
  <bitfield begin="13" description=" Determines if the read command is a single, dual or quad read mode command." end="12" id="READ_TYPE" rwaccess="" width="2">
    <bitenum description="Quad read (uses spi_qdin0/1)" id="en_4_0x3" token="en_4_0x3" value="0x3"/>
    <bitenum description="Normal read (all data input on spi_din)" id="en_3_0x2" token="en_3_0x2" value="0x2"/>
    <bitenum description="Dual read (odd bytes input on spi_din; even on spi_dout)" id="en_2_0x1" token="en_2_0x1" value="0x1"/>
    <bitenum description="Normal read (all data input on spi_din)" id="en_1_0x0" token="en_1_0x0" value="0x0"/>
  </bitfield>
    
  <bitfield begin="11" description=" Number of dummy bytes to be used for fast read." end="10" id="NUM_D_BYTES" rwaccess="" width="2">
    <bitenum description="3" id="en_4_0x3" token="en_4_0x3" value="0x3"/>
    <bitenum description="2" id="en_3_0x2" token="en_3_0x2" value="0x2"/>
    <bitenum description="1" id="en_2_0x1" token="en_2_0x1" value="0x1"/>
    <bitenum description="No dummy bytes required." id="en_1_0x0" token="en_1_0x0" value="0x0"/>
  </bitfield>
    
  <bitfield begin="9" description=" Number of address bytes to be sent." end="8" id="NUM_A_BYTES" rwaccess="" width="2">
    <bitenum description="4 bytes." id="en_4_0x3" token="en_4_0x3" value="0x3"/>
    <bitenum description="3 bytes." id="en_3_0x2" token="en_3_0x2" value="0x2"/>
    <bitenum description="2 bytes." id="en_2_0x1" token="en_2_0x1" value="0x1"/>
    <bitenum description="1 byte." id="en_1_0x0" token="en_1_0x0" value="0x0"/>
  </bitfield>
    
  <bitfield begin="7" description=" Read Command." end="0" id="RCMD" rwaccess="" width="8"/>
  </register>
  
  
  <register acronym="QSPI_SETUP_REG_3" description="Memory Mapped SPI Setup Register n. The Memory Mapped SPI Setup Register contains the read/write command setup for the Memory Mapped Protocol Translator (effecting Chip Select n output). The Memory Mapped SPI Setup Register contains the read/write command setup for the Memory Mapped Protocol Translator, request n input (effecting Chip Select n output). This corresponds to MAddrSpace = 001 (n = 0), MAddrSpace = 010 (n = 1), MAddrSpace = 011 (n = 2), and MAddrSpace = 100, 101, 110, and 111 (n = 3) . Note that by default (reset), the device uses a write command of 2, read command of 3 and number of address bytes of 3. This default covers most serial Flash devices, but can be changed. " id="QSPI_SETUP_REG_3" offset="0x60" width="32">
    
  <bitfield begin="31" description=" " end="29" id="RSVD_2" rwaccess="R" width="3"/>
    
  <bitfield begin="28" description=" Number of dummy bits to use if NUM_D_BYTES = 0." end="24" id="NUM_D_BITS" rwaccess="" width="5"/>
    
  <bitfield begin="23" description=" Write command." end="16" id="WCMD" rwaccess="" width="8"/>
    
  <bitfield begin="15" description=" " end="14" id="RSVD_1" rwaccess="R" width="2"/>
    
  <bitfield begin="13" description=" Determines if the read command is a single, dual or quad read mode command." end="12" id="READ_TYPE" rwaccess="" width="2">
    <bitenum description="Quad read (uses spi_qdin0/1)" id="en_4_0x3" token="en_4_0x3" value="0x3"/>
    <bitenum description="Normal read (all data input on spi_din)" id="en_3_0x2" token="en_3_0x2" value="0x2"/>
    <bitenum description="Dual read (odd bytes input on spi_din; even on spi_dout)" id="en_2_0x1" token="en_2_0x1" value="0x1"/>
    <bitenum description="Normal read (all data input on spi_din)" id="en_1_0x0" token="en_1_0x0" value="0x0"/>
  </bitfield>
    
  <bitfield begin="11" description=" Number of dummy bytes to be used for fast read." end="10" id="NUM_D_BYTES" rwaccess="" width="2">
    <bitenum description="3" id="en_4_0x3" token="en_4_0x3" value="0x3"/>
    <bitenum description="2" id="en_3_0x2" token="en_3_0x2" value="0x2"/>
    <bitenum description="1" id="en_2_0x1" token="en_2_0x1" value="0x1"/>
    <bitenum description="No dummy bytes required." id="en_1_0x0" token="en_1_0x0" value="0x0"/>
  </bitfield>
    
  <bitfield begin="9" description=" Number of address bytes to be sent." end="8" id="NUM_A_BYTES" rwaccess="" width="2">
    <bitenum description="4 bytes." id="en_4_0x3" token="en_4_0x3" value="0x3"/>
    <bitenum description="3 bytes." id="en_3_0x2" token="en_3_0x2" value="0x2"/>
    <bitenum description="2 bytes." id="en_2_0x1" token="en_2_0x1" value="0x1"/>
    <bitenum description="1 byte." id="en_1_0x0" token="en_1_0x0" value="0x0"/>
  </bitfield>
    
  <bitfield begin="7" description=" Read Command." end="0" id="RCMD" rwaccess="" width="8"/>
  </register>
  
  
  <register acronym="QSPI_SWITCH_REG" description="Memory Mapped SPI Switch Register. The Memory Mapped SPI Switch Register allows the CPU to switch control of the core SPI module's configuration port between the configuration VBUSP port and the Memory Mapped Protocol Translator. The Memory Mapped SPI Switch Register allows the CPU to switch control of the core SPI module s configuration port between the configuration VBUSP port and the Memory Mapped Protocol Translator. In addition, an interrupt enable field is defined which is used to enable or disable word count interrupt generation in memory mapped mode. " id="QSPI_SWITCH_REG" offset="0x64" width="32">
    
  <bitfield begin="31" description=" " end="2" id="RSVD" rwaccess="R" width="30"></bitfield>
    
  <bitfield begin="1" description=" Memory Mapped mode interrupt enable. [[br]] " end="1" id="MM_INT_EN" rwaccess="RW" width="1">
    <bitenum description="Word count interrupts are enabled for memory mapped operations." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Interrupts are disabled during memory mapped operations." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="0" description=" MMPT select." end="0" id="MMPT_S" rwaccess="RW" width="1">
    <bitenum description="Memory mapped protocol translator is selected to control configuration port of core SPI module." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Configuration port is selected to control configuration of core SPI module." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="QSPI_DATA_REG_1" description="SPI Data1 Register (SPIDR1). Data received in the data register is shifted into the LSB position and the contents of the register are shifted to the left. The register is cleared between reads or writes. This acts as the 2nd 32 bit register of the 128 bit shift register in/out Data received in the data register is shifted into the LSB position and the contents of the register are shifted to the left. The register is cleared between reads or writes. When writing data to the register it should be right justified so pre-shifting is not required. The word length field will determine the location of the most significant bit and the bit position that will be shifted out first during a write. In order to shift out byte data the word length should be set to '7' and the data byte should be written to the lower byte of the data register. By setting the word length to '7' the data register will look like a pseudo 8-bit shift register. The word length setting does not affect the VBUSP read or write operations." id="QSPI_DATA_REG_1" offset="0x68" width="32">
    
  <bitfield begin="31" description=" Data register for read and write operations" end="0" id="DATA" rwaccess="" width="32"></bitfield>
  </register>
  
  
  <register acronym="QSPI_DATA_REG_2" description="SPI Data2 Register (SPIDR2). Data received in the data register is shifted into the LSB position and the contents of the register are shifted to the left. The register is cleared between reads or writes. This acts as the 2nd 32 bit register of the 128 bit shift register in/out Data received in the data register is shifted into the LSB position and the contents of the register are shifted to the left. The register is cleared between reads or writes. When writing data to the register it should be right justified so pre-shifting is not required. The word length field will determine the location of the most significant bit and the bit position that will be shifted out first during a write. In order to shift out byte data the word length should be set to '7' and the data byte should be written to the lower byte of the data register. By setting the word length to '7' the data register will look like a pseudo 8-bit shift register. The word length setting does not affect the VBUSP read or write operations. " id="QSPI_DATA_REG_2" offset="0x6C" width="32">
    
  <bitfield begin="31" description=" Data register for read and write operations" end="0" id="DATA" rwaccess="" width="32"></bitfield>
  </register>
  
  
  <register acronym="QSPI_DATA_REG_3" description="SPI Data3 Register (SPIDR3). Data received in the data register is shifted into the LSB position and the contents of the register are shifted to the left. The register is cleared between reads or writes. This acts as the 2nd 32 bit register of the 128 bit shift register in/out Data received in the data register is shifted into the LSB position and the contents of the register are shifted to the left. The register is cleared between reads or writes. When writing data to the register it should be right justified so pre-shifting is not required. The word length field will determine the location of the most significant bit and the bit position that will be shifted out first during a write. In order to shift out byte data the word length should be set to '7' and the data byte should be written to the lower byte of the data register. By setting the word length to '7' the data register will look like a pseudo 8-bit shift register. The word length setting does not affect the VBUSP read or write operations." id="QSPI_DATA_REG_3" offset="0x70" width="32">
    
  <bitfield begin="31" description=" Data register for read and write operations" end="0" id="DATA" rwaccess="" width="32"></bitfield>
  </register>
</module>
