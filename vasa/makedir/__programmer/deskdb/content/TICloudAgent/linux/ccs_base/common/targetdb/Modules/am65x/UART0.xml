<module name="UART0" acronym="" XML_version="1.0" HW_revision="n/a" description="">
  <register id="UART_DLL" acronym="UART_DLL" offset="0x0" width="32" description="This register, with , stores the 14-bit divisor for generation of the baud clock in the baud rate generator. stores the most-significant part of the divisor. stores the least-significant part of the divisor.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="CLOCK_LSB" width="8" begin="7" end="0" resetval="0x0" description="Stores the 8-bit LSB divisor value" range="" rwaccess="RW"/>
  </register>
  <register id="UART_RHR" acronym="UART_RHR" offset="0x0" width="32" description="The receiver section consists of the receiver holding register () and the receiver shift register. The is a 64-byte FIFO. The receiver shift register receives serial data from RX input. The data is converted to parallel data and moved to the . If the FIFO is disabled, location 0 of the FIFO stores the single data character. Note: If an overflow occurs, the data in the is not overwritten.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RHR" width="8" begin="7" end="0" resetval="0x0" description="Receive holding register" range="" rwaccess="R"/>
  </register>
  <register id="UART_THR" acronym="UART_THR" offset="0x0" width="32" description="The transmitter section consists of the transmit holding register () and the transmit shift register. The is a 64-byte FIFO. The local host (LH) writes data to the . The data is placed in the transmit shift register where it is shifted out serially on the TX output. If the FIFO is disabled, location 0 of the FIFO stores the data.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="THR" width="8" begin="7" end="0" resetval="0x0" description="Transmit holding register" range="" rwaccess="W"/>
  </register>
  <register id="UART_DLH" acronym="UART_DLH" offset="0x4" width="32" description="This register, with , stores the 14-bit divisor for generating the baud clock in the baud rate generator. DLH stores the most-significant part of the divisor. DLL stores the least-significant part of the divisor.">
    <bitfield id="RESERVED" width="26" begin="31" end="6" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="CLOCK_MSB" width="6" begin="5" end="0" resetval="0x0" description="Stores the 6-bit MSB divisor value" range="" rwaccess="RW"/>
  </register>
  <register id="UART_IER_CIR" acronym="UART_IER_CIR" offset="0x4" width="32" description="There are 6 types of interrupt in these modes, TX status, status FIFO interrupt, RX overrun, last byte in RX FIFO, THR interrupt and RHR interrupt and they can be enabled/disabled individually. Notes: The RX_STOP_IT interrupt is generated based on the value set in the BOF Length register (). In IR-CIR mode, contrary to the IR-IRDA mode, the TX_STATUS_IT has only one meaning corresponding to the case [0] = 0.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="NOT_USED" width="2" begin="7" end="6" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="TX_STATUS_IT" width="1" begin="5" end="5" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="RESERVED" width="1" begin="4" end="4" resetval="0xX" description="" range="" rwaccess="RW"/>
    <bitfield id="RX_OVERRUN_IT" width="1" begin="3" end="3" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="RX_STOP_IT" width="1" begin="2" end="2" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="THR_IT" width="1" begin="1" end="1" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="RHR_IT" width="1" begin="0" end="0" resetval="0x0" description="" range="" rwaccess="RW"/>
  </register>
  <register id="UART_IER_IRDA" acronym="UART_IER_IRDA" offset="0x4" width="32" description="There are 8 types of interrupt in these modes, received EOF, LSR interrupt, TX status, status FIFO interrupt, RX overrun, last byte in RX FIFO, THR interrupt and RHR interrupt and they can be enabled/disabled individually. Note: The TX_STATUS_IT interrupt reflects two possible conditions. The [0] should be read to determine the status in the event of this interrupt.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="EOF_IT" width="1" begin="7" end="7" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="LINE_STS_IT" width="1" begin="6" end="6" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="TX_STATUS_IT" width="1" begin="5" end="5" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="STS_FIFO_TRIG_IT" width="1" begin="4" end="4" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="RX_OVERRUN_IT" width="1" begin="3" end="3" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="LAST_RX_BYTE_IT" width="1" begin="2" end="2" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="THR_IT" width="1" begin="1" end="1" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="RHR_IT" width="1" begin="0" end="0" resetval="0x0" description="" range="" rwaccess="RW"/>
  </register>
  <register id="UART_IER_UART" acronym="UART_IER_UART" offset="0x4" width="32" description="Interrupt enable register The interrupt enable register () can be programmed to enable/disable any interrupt. There are seven types of interrupt in this mode: receiver error, interrupt, interrupt, XOFF received and CTS*/RTS* change of state from low to high. Each interrupt can be enabled/disabled individually. There is also a sleep mode enable bit.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="CTS_IT" width="1" begin="7" end="7" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="RTS_IT" width="1" begin="6" end="6" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="XOFF_IT" width="1" begin="5" end="5" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="SLEEP_MODE" width="1" begin="4" end="4" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="MODEM_STS_IT" width="1" begin="3" end="3" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="LINE_STS_IT" width="1" begin="2" end="2" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="THR_IT" width="1" begin="1" end="1" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="RHR_IT" width="1" begin="0" end="0" resetval="0x0" description="" range="" rwaccess="RW"/>
  </register>
  <register id="UART_EFR" acronym="UART_EFR" offset="0x8" width="32" description="Enhanced feature register This register enables or disables enhanced features. Most of the enhanced functions apply only to UART modes, but [4] enables write accesses to [5:4], the TX trigger level, which is also used in IrDA modes.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="AUTO_CTS_EN" width="1" begin="7" end="7" resetval="0x0" description="Auto-CTS enable bit" range="" rwaccess="RW"/>
    <bitfield id="AUTO_RTS_EN" width="1" begin="6" end="6" resetval="0x0" description="Auto-RTS enable bit" range="" rwaccess="RW"/>
    <bitfield id="SPECIAL_CHAR_DETECT" width="1" begin="5" end="5" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="ENHANCED_EN" width="1" begin="4" end="4" resetval="0x0" description="Enhanced functions write enable bit" range="" rwaccess="RW"/>
    <bitfield id="SW_FLOW_CONTROL" width="4" begin="3" end="0" resetval="0x0" description="Combinations of software flow control can be selected by programming bit 3 - bit 0. See" range="" rwaccess="RW"/>
  </register>
  <register id="UART_FCR" acronym="UART_FCR" offset="0x8" width="32" description="FIFO control register Notes: Bits 4 and 5 can only be written to when [4] = 1. Bits 0 and 3 can be changed only when the baud clock is not running (DLL and DLH set to 0). See for [5:4] setting restriction when [6] = 1. See for [7:6] setting restriction when [7] = 1.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RX_FIFO_TRIG" width="2" begin="7" end="6" resetval="0x0" description="Sets the trigger level for the RX FIFO: If" range="" rwaccess="W"/>
    <bitfield id="TX_FIFO_TRIG" width="2" begin="5" end="4" resetval="0x0" description="Sets the trigger level for the TX FIFO: If" range="" rwaccess="W"/>
    <bitfield id="DMA_MODE" width="1" begin="3" end="3" resetval="0x0" description="This register is considered if" range="" rwaccess="W"/>
    <bitfield id="TX_FIFO_CLEAR" width="1" begin="2" end="2" resetval="0x0" description="" range="" rwaccess="W"/>
    <bitfield id="RX_FIFO_CLEAR" width="1" begin="1" end="1" resetval="0x0" description="" range="" rwaccess="W"/>
    <bitfield id="FIFO_EN" width="1" begin="0" end="0" resetval="0x0" description="" range="" rwaccess="W"/>
  </register>
  <register id="UART_IIR_CIR" acronym="UART_IIR_CIR" offset="0x8" width="32" description="The interrupt line is activated whenever one of the 6 interrupts is active.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="2" begin="7" end="6" resetval="0xX" description="" range="" rwaccess="R"/>
    <bitfield id="TX_STATUS_IT" width="1" begin="5" end="5" resetval="0x0" description="Read 0h = TX status interrupt inactive" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="1" begin="4" end="4" resetval="0xX" description="" range="" rwaccess="R"/>
    <bitfield id="RX_OE_IT" width="1" begin="3" end="3" resetval="0x0" description="Read 0h = RX overrun interrupt inactive" range="" rwaccess="R"/>
    <bitfield id="RX_STOP_IT" width="1" begin="2" end="2" resetval="0x0" description="Read 0h = Receive stop interrupt inactive" range="" rwaccess="R"/>
    <bitfield id="THR_IT" width="1" begin="1" end="1" resetval="0x0" description="Read 0h = THR interrupt inactive" range="" rwaccess="R"/>
    <bitfield id="RHR_IT" width="1" begin="0" end="0" resetval="0x0" description="Read 0h = RHR interrupt inactive" range="" rwaccess="R"/>
  </register>
  <register id="UART_IIR_IRDA" acronym="UART_IIR_IRDA" offset="0x8" width="32" description="The interrupt line is activated whenever one of the 8 interrupts is active.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="EOF_IT" width="1" begin="7" end="7" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="LINE_STS_IT" width="1" begin="6" end="6" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="TX_STATUS_IT" width="1" begin="5" end="5" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="STS_FIFO_IT" width="1" begin="4" end="4" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RX_OE_IT" width="1" begin="3" end="3" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RX_FIFO_LAST_BYTE_IT" width="1" begin="2" end="2" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="THR_IT" width="1" begin="1" end="1" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RHR_IT" width="1" begin="0" end="0" resetval="0x0" description="" range="" rwaccess="R"/>
  </register>
  <register id="UART_IIR_UART" acronym="UART_IIR_UART" offset="0x8" width="32" description="Interrupt identification register. The is a read-only register that provides the source of the interrupt in a prioritized manner.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="FCR_MIRROR" width="2" begin="7" end="6" resetval="0x0" description="Mirror the contents of" range="" rwaccess="R"/>
    <bitfield id="IT_TYPE" width="5" begin="5" end="1" resetval="0x0" description="Read 0h = Modem interrupt. Priority = 4" range="" rwaccess="R"/>
    <bitfield id="IT_PENDING" width="1" begin="0" end="0" resetval="0x1" description="Read 0h = An interrupt is pending." range="" rwaccess="R"/>
  </register>
  <register id="UART_LCR" acronym="UART_LCR" offset="0xC" width="32" description="Line control register [6:0] define transmission and reception parameters. Note: When [6] is set to 1, the TX line is forced to 0 and remains in this state as long as [6] = 1.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="DIV_EN" width="1" begin="7" end="7" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="BREAK_EN" width="1" begin="6" end="6" resetval="0x0" description="Break control bit" range="" rwaccess="RW"/>
    <bitfield id="PARITY_TYPE2" width="1" begin="5" end="5" resetval="0x0" description="Selects the forced parity format (if" range="" rwaccess="RW"/>
    <bitfield id="PARITY_TYPE1" width="1" begin="4" end="4" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="PARITY_EN" width="1" begin="3" end="3" resetval="0x0" description="0h = No parity" range="" rwaccess="RW"/>
    <bitfield id="NB_STOP" width="1" begin="2" end="2" resetval="0x0" description="Specifies the number of stop-bits" range="" rwaccess="RW"/>
    <bitfield id="CHAR_LENGTH" width="2" begin="1" end="0" resetval="0x0" description="Specifies the word length to be transmitted or received" range="" rwaccess="RW"/>
  </register>
  <register id="UART_MCR" acronym="UART_MCR" offset="0x10" width="32" description="Modem control register [3:0] controls the interface with the modem, data set, or peripheral device that emulates the modem.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="1" begin="7" end="7" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="TCR_TLR" width="1" begin="6" end="6" resetval="0x0" description="0h = No action" range="" rwaccess="RW"/>
    <bitfield id="XON_EN" width="1" begin="5" end="5" resetval="0x0" description="0h = Disable XON any function." range="" rwaccess="RW"/>
    <bitfield id="LOOPBACK_EN" width="1" begin="4" end="4" resetval="0x0" description="0h = Normal operating mode" range="" rwaccess="RW"/>
    <bitfield id="CD_STS_CH" width="1" begin="3" end="3" resetval="0x0" description="0h = In loopback, forces DCD* input high and IRQ outputs to inactive state" range="" rwaccess="RW"/>
    <bitfield id="RI_STS_CH" width="1" begin="2" end="2" resetval="0x0" description="0h = In loopback, forces RI* input high" range="" rwaccess="RW"/>
    <bitfield id="RTS" width="1" begin="1" end="1" resetval="0x0" description="In loopback, controls the" range="" rwaccess="RW"/>
    <bitfield id="DTR" width="1" begin="0" end="0" resetval="0x0" description="0h = Force DTR* output to inactive (high)." range="" rwaccess="RW"/>
  </register>
  <register id="UART_XON1_ADDR1" acronym="UART_XON1_ADDR1" offset="0x10" width="32" description="UART mode: XON1 character, IrDA mode: ADDR1 address">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="XON_WORD1" width="8" begin="7" end="0" resetval="0x0" description="Stores the 8-bit XON1 character in UART modes and ADDR1 address 1 for IrDA modes" range="" rwaccess="RW"/>
  </register>
  <register id="UART_LSR_CIR" acronym="UART_LSR_CIR" offset="0x14" width="32" description="Line status register in CIR mode">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="THR_EMPTY" width="1" begin="7" end="7" resetval="0x1" description="Read 0h = Transmit holding register (TX FIFO) is not empty." range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="1" begin="6" end="6" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RX_STOP" width="1" begin="5" end="5" resetval="0x0" description="The RX_STOP is generated based on the value set in the BOF Length register (" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="4" begin="4" end="1" resetval="0xX" description="" range="" rwaccess="R"/>
    <bitfield id="RX_FIFO_E" width="1" begin="0" end="0" resetval="0x1" description="Read 0h = At least one data character in the RX FIFO" range="" rwaccess="R"/>
  </register>
  <register id="UART_LSR_IRDA" acronym="UART_LSR_IRDA" offset="0x14" width="32" description="When the LSR is read, LSR[4:2] reflect the error bits [FL, CRC, ABORT] of the frame at the top of the STATUS FIFO (next frame status to be read).">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="THR_EMPTY" width="1" begin="7" end="7" resetval="0x1" description="Read 0h = Transmit holding register (TX FIFO) is not empty." range="" rwaccess="R"/>
    <bitfield id="STS_FIFO_FULL" width="1" begin="6" end="6" resetval="0x0" description="Read 0h = Status FIFO not full" range="" rwaccess="R"/>
    <bitfield id="RX_LAST_BYTE" width="1" begin="5" end="5" resetval="0x0" description="Read 0h = The RX FIFO (RHR) does not contain the last byte of the frame to be read." range="" rwaccess="R"/>
    <bitfield id="FRAME_TOO_LONG" width="1" begin="4" end="4" resetval="0x0" description="Read 0h = No frame-too-long error in frame" range="" rwaccess="R"/>
    <bitfield id="ABORT" width="1" begin="3" end="3" resetval="0x0" description="Read 0h = No abort pattern error in frame" range="" rwaccess="R"/>
    <bitfield id="CRC" width="1" begin="2" end="2" resetval="0x0" description="Read 0h = No CRC error in frame" range="" rwaccess="R"/>
    <bitfield id="STS_FIFO_E" width="1" begin="1" end="1" resetval="0x1" description="Read 0h = Status FIFO not empty" range="" rwaccess="R"/>
    <bitfield id="RX_FIFO_E" width="1" begin="0" end="0" resetval="0x1" description="Read 0h = No data in the RX FIFO" range="" rwaccess="R"/>
  </register>
  <register id="UART_LSR_UART" acronym="UART_LSR_UART" offset="0x14" width="32" description="Line status register">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RX_FIFO_STS" width="1" begin="7" end="7" resetval="0x0" description="Read 0h = Normal operation" range="" rwaccess="R"/>
    <bitfield id="TX_SR_E" width="1" begin="6" end="6" resetval="0x1" description="Read 0h = Transmitter hold (TX FIFO) and shift registers are not empty." range="" rwaccess="R"/>
    <bitfield id="TX_FIFO_E" width="1" begin="5" end="5" resetval="0x1" description="Read 0h = Transmit hold register (TX FIFO) is not empty." range="" rwaccess="R"/>
    <bitfield id="RX_BI" width="1" begin="4" end="4" resetval="0x0" description="Read 0h = No break condition" range="" rwaccess="R"/>
    <bitfield id="RX_FE" width="1" begin="3" end="3" resetval="0x0" description="Read 0h = No framing error in data RX FIFO" range="" rwaccess="R"/>
    <bitfield id="RX_PE" width="1" begin="2" end="2" resetval="0x0" description="Read 0h = No parity error in data from RX FIFO" range="" rwaccess="R"/>
    <bitfield id="RX_OE" width="1" begin="1" end="1" resetval="0x0" description="Read 0h = No overrun error" range="" rwaccess="R"/>
    <bitfield id="RX_FIFO_E" width="1" begin="0" end="0" resetval="0x0" description="Read 0h = No data in the RX FIFO" range="" rwaccess="R"/>
  </register>
  <register id="UART_XON2_ADDR2" acronym="UART_XON2_ADDR2" offset="0x14" width="32" description="Stores the 8-bit XON2 character in UART moldes and ADDR2 address 2 for IrDA modes">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="XON_WORD2" width="8" begin="7" end="0" resetval="0x0" description="Stores the 8-bit XON2 character in UART modes and ADDR2 address 2 for IrDA modes" range="" rwaccess="RW"/>
  </register>
  <register id="UART_MSR" acronym="UART_MSR" offset="0x18" width="32" description="Modem status register. UART mode only. This register provides information about the current state of the control lines from the modem, data set, or peripheral device to the LH. It also indicates when a control input from the modem changes state.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="NCD_STS" width="1" begin="7" end="7" resetval="0x0" description="This bit is the complement of the DCD* input. In loopback mode, it is equivalent to" range="" rwaccess="R"/>
    <bitfield id="NRI_STS" width="1" begin="6" end="6" resetval="0x0" description="This bit is the complement of the RI* input. In loopback mode, it is equivalent to" range="" rwaccess="R"/>
    <bitfield id="NDSR_STS" width="1" begin="5" end="5" resetval="0x0" description="This bit is the complement of the DSR* input. In loopback mode, it is equivalent to" range="" rwaccess="R"/>
    <bitfield id="NCTS_STS" width="1" begin="4" end="4" resetval="0x0" description="This bit is the complement of the CTS* input. In loopback mode, it is equivalent to" range="" rwaccess="R"/>
    <bitfield id="DCD_STS" width="1" begin="3" end="3" resetval="0x0" description="Indicates that DCD* input (or" range="" rwaccess="R"/>
    <bitfield id="RI_STS" width="1" begin="2" end="2" resetval="0x0" description="Indicates that RI* input (or" range="" rwaccess="R"/>
    <bitfield id="DSR_STS" width="1" begin="1" end="1" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="CTS_STS" width="1" begin="0" end="0" resetval="0x0" description="" range="" rwaccess="R"/>
  </register>
  <register id="UART_TCR" acronym="UART_TCR" offset="0x18" width="32" description="Transmission control register This register stores the RX FIFO threshold levels to start/stop transmission during hardware/software flow control. Notes: Trigger levels from 0 to 60 bytes are available with a granularity of 4. (Trigger level = 4 x [4-bit register value]) The programmer must ensure that [3:0] &amp;gt; [7:4] when auto-RTS or software flow control is enabled to avoid a mis-operation of the device. In FIFO interrupt mode with flow control, the programmer must ensure that the trigger level to halt transmission is greater than or equal to the RX FIFO trigger level ([7:4] or [7:6]); otherwise, FIFO operation stalls. In FIFO DMA mode with flow control, this concept does not exist because a DMA request is sent each time a byte is received.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RX_FIFO_TRIG_START" width="4" begin="7" end="4" resetval="0x0" description="RX FIFO trigger level to RESTORE transmission (0 - 60)" range="" rwaccess="RW"/>
    <bitfield id="RX_FIFO_TRIG_HALT" width="4" begin="3" end="0" resetval="0xF" description="RX FIFO trigger level to HALT transmission (0 - 60)" range="" rwaccess="RW"/>
  </register>
  <register id="UART_XOFF1" acronym="UART_XOFF1" offset="0x18" width="32" description="UART mode XOFF1 character">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="XOFF_WORD1" width="8" begin="7" end="0" resetval="0x0" description="Stores the 8-bit XOFF1 character used in UART modes" range="" rwaccess="RW"/>
  </register>
  <register id="UART_SPR" acronym="UART_SPR" offset="0x1C" width="32" description="Scratchpad register This read/write register does not control the module. It is a scratchpad register to be used by the programmer to hold temporary data.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="SPR_WORD" width="8" begin="7" end="0" resetval="0x0" description="Scratchpad register" range="" rwaccess="RW"/>
  </register>
  <register id="UART_TLR" acronym="UART_TLR" offset="0x1C" width="32" description="Trigger level register This register stores the programmable transmit and RX FIFO trigger levels for DMA and IRQ generation.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RX_FIFO_TRIG_DMA" width="4" begin="7" end="4" resetval="0x0" description="Receive FIFO trigger level" range="" rwaccess="RW"/>
    <bitfield id="TX_FIFO_TRIG_DMA" width="4" begin="3" end="0" resetval="0x0" description="Transmit FIFO trigger level" range="" rwaccess="RW"/>
  </register>
  <register id="UART_XOFF2" acronym="UART_XOFF2" offset="0x1C" width="32" description="UART mode XOFF2 character">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="XOFF_WORD2" width="8" begin="7" end="0" resetval="0x0" description="Stores the 8-bit XOFF2 character used in UART modes." range="" rwaccess="RW"/>
  </register>
  <register id="UART_MDR1" acronym="UART_MDR1" offset="0x20" width="32" description="Mode definition register 1 The mode of operation can be programmed by writing to MDR1[2:0] and therefore the must be programmed on startup after configuration of the configuration registers (, , and ). The value of MDR1[2:0] must not be changed again during normal operation. Note: If the module is disabled by setting the MODE_SELECT field to 111, interrupt requests can still be generated unless disabled through the interrupt enable register (UART_IER). In this case, UART mode interrupts are visible. Reading the interrupt identification register (UART_IIR) shows UART mode interrupt flags.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="FRAME_END_MODE" width="1" begin="7" end="7" resetval="0x0" description="IrDA mode only" range="" rwaccess="RW"/>
    <bitfield id="SIP_MODE" width="1" begin="6" end="6" resetval="0x0" description="MIR/FIR modes only" range="" rwaccess="RW"/>
    <bitfield id="SCT" width="1" begin="5" end="5" resetval="0x0" description="Store and control the transmission." range="" rwaccess="RW"/>
    <bitfield id="SET_TXIR" width="1" begin="4" end="4" resetval="0x0" description="Used to configure the infrared transceiver" range="" rwaccess="RW"/>
    <bitfield id="IR_SLEEP" width="1" begin="3" end="3" resetval="0x0" description="0h = IrDA/CIR sleep mode disabled" range="" rwaccess="RW"/>
    <bitfield id="MODE_SELECT" width="3" begin="2" end="0" resetval="0x7" description="0h = UART 16x mode" range="" rwaccess="RW"/>
  </register>
  <register id="UART_MDR2" acronym="UART_MDR2" offset="0x24" width="32" description="Mode definition register 2 IR-IrDA and IR-CIR modes only. [0] describes the status of the interrupt in UART_IIR[5]. The IRTX_UNDERRUN bit should be read after an UART_IIR[5] TX_STATUS_IT interrupt. The bits [2:1] of this register set the trigger level for the frame status FIFO (8 entries) and must be programmed before the mode is programmed in [2:0]. Note: The [6] gives the flexibility to invert the RX pin in the UART to ensure that the protocol at the input of the transceiver module has the same polarity at module level. By default, the RX pin is inverted because most transceivers invert the IR receive pin.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="SET_TXIR_ALT" width="1" begin="7" end="7" resetval="0x0" description="Provide alternate function for" range="" rwaccess="RW"/>
    <bitfield id="IRRXINVERT" width="1" begin="6" end="6" resetval="0x0" description="IR mode only (IrDA and CIR). Invert RX pin in the module before the voting or sampling system logic of the infrared block. This does not affect the RX path in UART modem modes." range="" rwaccess="RW"/>
    <bitfield id="CIR_PULSE_MODE" width="2" begin="5" end="4" resetval="0x0" description="CIR pulse modulation definition. Defines high level of the pulse width associated with a digit:" range="" rwaccess="RW"/>
    <bitfield id="UART_PULSE" width="1" begin="3" end="3" resetval="0x0" description="UART mode only. Allows pulse shaping in UART mode." range="" rwaccess="RW"/>
    <bitfield id="STS_FIFO_TRIG" width="2" begin="2" end="1" resetval="0x0" description="IR-IrDA mode only. Frame status FIFO threshold select:" range="" rwaccess="RW"/>
    <bitfield id="IRTX_UNDERRUN" width="1" begin="0" end="0" resetval="0x0" description="IrDA transmission status interrupt. When the UART_IIR[5] interrupt occurs, the meaning of the interrupt is:" range="" rwaccess="R"/>
  </register>
  <register id="UART_SFLSR" acronym="UART_SFLSR" offset="0x28" width="32" description="Status FIFO line status register IrDA modes only. Reading this register effectively reads frame status information from the status FIFO (this register does not physically exist). Reading this register increments the status FIFO read pointer ( and must be read first).">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="3" begin="7" end="5" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="OE_ERROR" width="1" begin="4" end="4" resetval="0x0" description="Read 1h = Overrun error in RX FIFO when frame at top of RX FIFO was received" range="" rwaccess="R"/>
    <bitfield id="FRAME_TOO_LONG_ERROR" width="1" begin="3" end="3" resetval="0x0" description="Read 1h = Frame-length too long error in frame at top of RX FIFO" range="" rwaccess="R"/>
    <bitfield id="ABORT_DETECT" width="1" begin="2" end="2" resetval="0x0" description="Read 1h = Abort pattern detected in frame at top of RX FIFO" range="" rwaccess="R"/>
    <bitfield id="CRC_ERROR" width="1" begin="1" end="1" resetval="0x0" description="Read 1h = CRC error in frame at top of RX FIFO" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="1" begin="0" end="0" resetval="0x0" description="" range="" rwaccess="R"/>
  </register>
  <register id="UART_TXFLL" acronym="UART_TXFLL" offset="0x28" width="32" description="Transmit frame length register low IrDA modes only. The and registers hold the 13-bit transmit frame length (expressed in bytes). holds the LSBs and holds the MSBs. The frame length value is used if the frame length method of frame closing is used.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="TXFLL" width="8" begin="7" end="0" resetval="0x0" description="LSB register used to specify the frame length" range="" rwaccess="W"/>
  </register>
  <register id="UART_RESUME" acronym="UART_RESUME" offset="0x2C" width="32" description="IR-IrDA and IR-CIR modes only. This register is used to clear internal flags, which halt transmission/reception when an underrun/overrun error occurs. Reading this register resumes the halted operation. This register does not physically exist and reads always as 0x00.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RESUME" width="8" begin="7" end="0" resetval="0x0" description="Dummy read to restart the TX or RX" range="" rwaccess="R"/>
  </register>
  <register id="UART_TXFLH" acronym="UART_TXFLH" offset="0x2C" width="32" description="Transmit frame length register high IrDA modes only. The and registers hold the 13-bit transmit frame length (expressed in bytes). holds the LSBs and holds the MSBs. The frame length value is used if the frame length method of frame closing is used.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="3" begin="7" end="5" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="TXFLH" width="5" begin="4" end="0" resetval="0x0" description="MSB register used to specify the frame length" range="" rwaccess="W"/>
  </register>
  <register id="UART_RXFLL" acronym="UART_RXFLL" offset="0x30" width="32" description="Received frame length register low IrDA modes only. The and registers hold the 12-bit receive maximum frame length. holds the LSBs and holds the MSBs. If the intended maximum receive frame length is n bytes, program the and registers to be n + 3 in SIR or MIR modes and n + 6 in FIR mode (+3 and +6 are the result of frame format with CRC and stop flag; 2 bytes are associated with the FIR stop flag).">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RXFLL" width="8" begin="7" end="0" resetval="0x0" description="LSB register used to specify the frame length in reception" range="" rwaccess="W"/>
  </register>
  <register id="UART_SFREGL" acronym="UART_SFREGL" offset="0x30" width="32" description="Status FIFO register low IrDA modes only. The frame lengths of received frames are written into the status FIFO. This information can be read by reading the and registers (these registers do not physically exist). The LSBs are read from and the MSBs are read from . Reading these registers does not alter the status FIFO read pointer. These registers should be read before the pointer is incremented by reading the register.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="SFREGL" width="8" begin="7" end="0" resetval="0x0" description="LSB part of the frame length" range="" rwaccess="R"/>
  </register>
  <register id="UART_RXFLH" acronym="UART_RXFLH" offset="0x34" width="32" description="Received frame length register high IrDA modes only. The and registers hold the 12-bit receive maximum frame length. holds the LSBs and holds the MSBs. If the intended maximum receive frame length is n bytes, program the and to be n + 3 in SIR or MIR modes and n + 6 in FIR mode (+3 and +6 are the result of frame format with CRC and stop flag; 2 bytes are associated with the FIR stop flag).">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="4" begin="7" end="4" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RXFLH" width="4" begin="3" end="0" resetval="0x0" description="MSB register used to specify the frame length in reception" range="" rwaccess="W"/>
  </register>
  <register id="UART_SFREGH" acronym="UART_SFREGH" offset="0x34" width="32" description="Status FIFO register high IrDA modes only. The frame lengths of received frames are written into the status FIFO. This information can be read by reading the and registers (these registers do not physically exist). The LSBs are read from and the MSBs are read from . Reading these registers does not alter the status FIFO read pointer. These registers should be read before the pointer is incremented by reading the register.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="4" begin="7" end="4" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="SFREGH" width="4" begin="3" end="0" resetval="0x0" description="MSB part of the frame length" range="" rwaccess="R"/>
  </register>
  <register id="UART_BLR" acronym="UART_BLR" offset="0x38" width="32" description="BOF control register IrDA modes only. The [6] bit selects whether 0xC0 or 0xFF start patterns are to be used, when multiple start flags are required in SIR mode. If only one start flag is required, this is always 0xC0. If n start flags are required, (-1) 0xC0 or (-1) 0xFF flags are sent, followed by a single 0xC0 flag (immediately preceding the first data byte).">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="STS_FIFO_RESET" width="1" begin="7" end="7" resetval="0x0" description="Status FIFO reset. This bit is self-clearing." range="" rwaccess="RW1S"/>
    <bitfield id="XBOF_TYPE" width="1" begin="6" end="6" resetval="0x1" description="SIR xBOF select" range="" rwaccess="RW"/>
    <bitfield id="RESERVED" width="6" begin="5" end="0" resetval="0x0" description="" range="" rwaccess="R"/>
  </register>
  <register id="UART_UASR" acronym="UART_UASR" offset="0x38" width="32" description="UART autobauding status register UART autobauding mode only. This status register returns the speed, the number of bits by characters, and the type of the parity in UART autobauding mode. In autobauding mode, the input frequency of the UART modem must be fixed to 48 MHz. Any other module clock frequency results in incorrect baud rate recognition. Note: When the UART is in autobauding mode, this register, instead of the , , and registers, is used to set up transmission according to the characteristics of the previous reception. To reset the autobauding hardware (to start a new AT detection), set [2:0] to 111 (reset value), then set [2:1] to 010 (UART in autobaud mode). To set the UART to standard mode (no autobaud), set [2:1] to 000.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="PARITY_TYPE" width="2" begin="7" end="6" resetval="0x0" description="Read 0h = No parity identified" range="" rwaccess="R"/>
    <bitfield id="BIT_BY_CHAR" width="1" begin="5" end="5" resetval="0x0" description="Read 0h = 7-bit character identified" range="" rwaccess="R"/>
    <bitfield id="SPEED" width="5" begin="4" end="0" resetval="0x0" description="Used to report the speed identified" range="" rwaccess="R"/>
  </register>
  <register id="UART_ACREG" acronym="UART_ACREG" offset="0x3C" width="32" description="Auxiliary control register. IR-IrDA and IR-CIR modes only.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="PULSE_TYPE" width="1" begin="7" end="7" resetval="0x0" description="SIR pulse width select" range="" rwaccess="RW"/>
    <bitfield id="SD_MOD" width="1" begin="6" end="6" resetval="0x0" description="Primary output used to configure transceivers. Connected to the SD/MODE input pin of IrDA transceivers." range="" rwaccess="RW"/>
    <bitfield id="DIS_IR_RX" width="1" begin="5" end="5" resetval="0x0" description="0h = Normal operation (RX input automatically disabled during transmit but enabled outside of transmit operation)" range="" rwaccess="RW"/>
    <bitfield id="DIS_TX_UNDERRUN" width="1" begin="4" end="4" resetval="0x0" description="It is recommended to disable TX FIFO underrun capability by masking corresponding underrun interrupt. When disabling underrun by setting" range="" rwaccess="RW"/>
    <bitfield id="SEND_SIP" width="1" begin="3" end="3" resetval="0x0" description="MIR/FIR modes only. Send serial infrared interaction pulse (SIP). If this bit is set during an MIR/FIR transmission, the SIP is sent at the end of it. This bit is cleared automatically at the end of the SIP transmission." range="" rwaccess="RW1S"/>
    <bitfield id="SCTX_EN" width="1" begin="2" end="2" resetval="0x0" description="Store and controlled TX start. When" range="" rwaccess="RW1S"/>
    <bitfield id="ABORT_EN" width="1" begin="1" end="1" resetval="0x0" description="Frame abort. The LH can intentionally abort transmission of a frame by writing 1 to this bit. Neither the end flag nor the CRC bits are appended to the frame. If TX FIFO is not empty and" range="" rwaccess="RW"/>
    <bitfield id="EOT_EN" width="1" begin="0" end="0" resetval="0x0" description="EOT (end of transmission) bit. The LH writes 1 to this bit just before it writes the last byte to the TX FIFO in set-EOT bit frame closing method. This bit is cleared automatically when the LH writes to the THR (TX FIFO)." range="" rwaccess="RW1S"/>
  </register>
  <register id="UART_SCR" acronym="UART_SCR" offset="0x40" width="32" description="Supplementary control register Note: Bit 4 enables the wake-up interrupt, but this interrupt is not mapped into the UART_IIR register. Therefore, when an interrupt occurs and there is no interrupt pending in the UART_IIR register, the [1] bit must be checked. To clear the wake-up interrupt, bit [4] must be reset to 0.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RX_TRIG_GRANU1" width="1" begin="7" end="7" resetval="0x0" description="0h = Disables the granularity of 1 for trigger RX level" range="" rwaccess="RW"/>
    <bitfield id="TX_TRIG_GRANU1" width="1" begin="6" end="6" resetval="0x0" description="0h = Disables the granularity of 1 for trigger TX level" range="" rwaccess="RW"/>
    <bitfield id="DSR_IT" width="1" begin="5" end="5" resetval="0x0" description="0h = Disables DSR* interrupt" range="" rwaccess="RW"/>
    <bitfield id="RX_CTS_DSR_WAKE_UP_ENABLE" width="1" begin="4" end="4" resetval="0x0" description="0h = Disables the wake-up interrupt and clears SSR[1]" range="" rwaccess="RW"/>
    <bitfield id="TX_EMPTY_CTL_IT" width="1" begin="3" end="3" resetval="0x0" description="0h = Normal mode for THR interrupt" range="" rwaccess="RW"/>
    <bitfield id="DMA_MODE_2" width="2" begin="2" end="1" resetval="0x0" description="Used to specify the DMA mode valid if the" range="" rwaccess="RW"/>
    <bitfield id="DMA_MODE_CTL" width="1" begin="0" end="0" resetval="0x0" description="0h = The DMA_MODE is set with" range="" rwaccess="RW"/>
  </register>
  <register id="UART_SSR" acronym="UART_SSR" offset="0x44" width="32" description="Supplementary status register Note: Bit 1 is reset only when [4] is reset to 0.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="5" begin="7" end="3" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="DMA_COUNTER_RST" width="1" begin="2" end="2" resetval="0x1" description="0h = The DMA counter will not be reset if the corresponding FIFO is reset (through" range="" rwaccess="RW"/>
    <bitfield id="RX_CTS_DSR_WAKE_UP_STS" width="1" begin="1" end="1" resetval="0x0" description="Read 0h = No falling edge event on RX, CTS*, and DSR*" range="" rwaccess="R"/>
    <bitfield id="TX_FIFO_FULL" width="1" begin="0" end="0" resetval="0x0" description="Read 0h = TX FIFO is not full." range="" rwaccess="R"/>
  </register>
  <register id="UART_EBLR" acronym="UART_EBLR" offset="0x48" width="32" description="BOF length register IR-IrDA and IR-CIR modes only. In IR-IrDA SIR operation, this register specifies the number of BOF + xBOFs to transmit. Value set into this register must account for the BOF character; therefore, to send only one BOF with no XBOF, this register must be set to 1. To send one BOF with N XBOF, this register must be set to N + 1. The value 0 sends 1 BOF plus 255 XBOF. In IR-IrDA MIR mode, this register specifies the number of additional start flags (MIR protocol mandates a minimum of 2 start flags). In IR-CIR mode, this register specifies the number of consecutive 0s to be received before generating the RX_STOP interrupt (UART_IIR[2]). All received 0s are stored in the RX FIFO. When the register is set to 0, this feature is deactivated and always in reception state, which can be disabled by setting the [5] to 1. Note: If the RX_STOP interrupt occurs before a byte boundary, the remaining bits of the last byte are filled with 0s and passed into the RX FIFO.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="EBLR" width="8" begin="7" end="0" resetval="0x0" description="IR-IrDA mode: This register allows definition of up to 176 xBOFs, the maximum required by IrDA specification." range="" rwaccess="RW"/>
  </register>
  <register id="UART_MVR" acronym="UART_MVR" offset="0x50" width="32" description="Module version register The reset value is fixed by hardware and corresponds to the RTL revision of this module. A reset has no effect on the value returned.">
    <bitfield id="SCHEME" width="2" begin="31" end="30" resetval="0x1" description="Scheme revision number of module" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="2" begin="29" end="28" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="FUNC" width="12" begin="27" end="16" resetval="0x742" description="Function revision number of module" range="" rwaccess="R"/>
    <bitfield id="RTL" width="5" begin="15" end="11" resetval="0x7" description="Rtl revision number of module" range="" rwaccess="R"/>
    <bitfield id="MAJOR" width="3" begin="10" end="8" resetval="0x6" description="Major revision number of the module" range="" rwaccess="R"/>
    <bitfield id="CUSTOM" width="2" begin="7" end="6" resetval="0x0" description="Custom revision number of the module" range="" rwaccess="R"/>
    <bitfield id="MINOR" width="6" begin="5" end="0" resetval="0x3" description="Minor revision number of the module" range="" rwaccess="R"/>
  </register>
  <register id="UART_SYSC" acronym="UART_SYSC" offset="0x54" width="32" description="System configuration register The AUTOIDLE bit controls a power-saving technique to reduce the logic power consumption of the open-core protocol (OCP) interface. When the feature is enabled, the clock is gated off until an OCP command for this device is detected. When the software reset bit is set high, it causes a full device reset.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="3" begin="7" end="5" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="IDLEMODE" width="2" begin="4" end="3" resetval="0x0" description="Power management req/ack control ref: OCP Design Guidelines Version 1.1" range="" rwaccess="RW"/>
    <bitfield id="ENAWAKEUP" width="1" begin="2" end="2" resetval="0x0" description="Wake-up feature control" range="" rwaccess="RW"/>
    <bitfield id="SOFTRESET" width="1" begin="1" end="1" resetval="0x0" description="Software reset. Set this bit to 1 to trigger a module reset. This bit is automatically reset by the hardware. Read returns 0." range="" rwaccess="W"/>
    <bitfield id="AUTOIDLE" width="1" begin="0" end="0" resetval="0x0" description="Internal OCP clock gating strategy" range="" rwaccess="RW"/>
  </register>
  <register id="UART_SYSS" acronym="UART_SYSS" offset="0x58" width="32" description="System status register">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="7" begin="7" end="1" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RESETDONE" width="1" begin="0" end="0" resetval="0x0" description="Internal reset monitoring" range="" rwaccess="R"/>
  </register>
  <register id="UART_WER" acronym="UART_WER" offset="0x5C" width="32" description="Wake-up enable register The UART wake-up enable register is used to mask and unmask a UART event that would subsequently notify the system. An event is any activity in the logic that could cause an interrupt and/or an activity that would require the system to wake up. Even if the wakeup is disabled for certain events, if these events are also an interrupt to the UART, the UART registers the interrupt.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="EVENT_7_TX_WAKEUP_EN" width="1" begin="7" end="7" resetval="0x1" description="0h = Event is not allowed to wake up the system." range="" rwaccess="RW"/>
    <bitfield id="EVENT_6_RECEIVER_LINE_STATUS_INTERRUPT" width="1" begin="6" end="6" resetval="0x1" description="0h = Event is not allowed to wake up the system." range="" rwaccess="RW"/>
    <bitfield id="EVENT_5_RHR_INTERRUPT" width="1" begin="5" end="5" resetval="0x1" description="0h = Event is not allowed to wake up the system." range="" rwaccess="RW"/>
    <bitfield id="EVENT_4_RX_ACTIVITY" width="1" begin="4" end="4" resetval="0x1" description="0h = Event is not allowed to wake up the system." range="" rwaccess="RW"/>
    <bitfield id="EVENT_3_DCD_CD_ACTIVITY" width="1" begin="3" end="3" resetval="0x1" description="0h = Event is not allowed to wake up the system" range="" rwaccess="RW"/>
    <bitfield id="EVENT_2_RI_ACTIVITY" width="1" begin="2" end="2" resetval="0x1" description="0h = Event is not allowed to wake up the system." range="" rwaccess="RW"/>
    <bitfield id="EVENT_1_DSR_ACTIVITY" width="1" begin="1" end="1" resetval="0x1" description="0h = Event is not allowed to wake up the system." range="" rwaccess="RW"/>
    <bitfield id="EVENT_0_CTS_ACTIVITY" width="1" begin="0" end="0" resetval="0x1" description="0h = Event is not allowed to wake up the system." range="" rwaccess="RW"/>
  </register>
  <register id="UART_CFPS" acronym="UART_CFPS" offset="0x60" width="32" description="Carrier frequency prescaler Because the consumer IR works at modulation rates of 30 to 56.8 kHz, the 48-MHz clock must be prescaled before the clock can drive the IR logic. This register sets the divisor rate to give a range to accommodate the remote-control requirements in baud multiples of 12x. The value of the CFPS at reset is 0105 decimal, which equals 38.1 kHz output from starting conditions. The 48-MHz carrier is prescaled by the CFPS, which is then divided by the 12x baud multiple.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="CFPS" width="8" begin="7" end="0" resetval="0x69" description="System clock frequency prescaler at (12x multiple). Examples for CFPS values:" range="" rwaccess="RW"/>
  </register>
  <register id="UART_RXFIFO_LVL" acronym="UART_RXFIFO_LVL" offset="0x64" width="32" description="Level of the RX FIFO">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RXFIFO_LVL" width="8" begin="7" end="0" resetval="0x0" description="Shows the number of received bytes in the RX FIFO" range="" rwaccess="R"/>
  </register>
  <register id="UART_TXFIFO_LVL" acronym="UART_TXFIFO_LVL" offset="0x68" width="32" description="Level of the TX FIFO">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="TXFIFO_LVL" width="8" begin="7" end="0" resetval="0x0" description="Shows the number of written bytes in the TX FIFO" range="" rwaccess="R"/>
  </register>
  <register id="UART_IER2" acronym="UART_IER2" offset="0x6C" width="32" description="Enables RX/TX FIFOs empty corresponding interrupts">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="6" begin="7" end="2" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="EN_TXFIFO_EMPTY" width="1" begin="1" end="1" resetval="0x0" description="Enables TX FIFO empty corresponding interrupt" range="" rwaccess="RW"/>
    <bitfield id="EN_RXFIFO_EMPTY" width="1" begin="0" end="0" resetval="0x0" description="Enables RX FIFO empty corresponding interrupt" range="" rwaccess="RW"/>
  </register>
  <register id="UART_ISR2" acronym="UART_ISR2" offset="0x70" width="32" description="Status of RX/TX FIFOs empty corresponding interrupts">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="6" begin="7" end="2" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="TXFIFO_EMPTY_STS" width="1" begin="1" end="1" resetval="0x1" description="Used to generate interrupt if the TX_FIFO is empty (software flow control)" range="" rwaccess="RW1C"/>
    <bitfield id="RXFIFO_EMPTY_STS" width="1" begin="0" end="0" resetval="0x1" description="Used to generate interrupt if the RX_FIFO is empty (software flow control)" range="" rwaccess="RW1C"/>
  </register>
  <register id="UART_FREQ_SEL" acronym="UART_FREQ_SEL" offset="0x74" width="32" description="Sample per bit selector">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="RESERVED" range="" rwaccess="R"/>
    <bitfield id="FREQ_SEL" width="8" begin="7" end="0" resetval="0x1A" description="Sets the sample per bit if nondefault frequency is used." range="" rwaccess="RW"/>
  </register>
  <register id="UART_ABAUD_1ST_CHAR" acronym="UART_ABAUD_1ST_CHAR" offset="0x78" width="32" description="Unused">
    <bitfield id="RESERVED" width="32" begin="31" end="0" resetval="0x0" description="" range="" rwaccess="R"/>
  </register>
  <register id="UART_BAUD_2ND_CHAR" acronym="UART_BAUD_2ND_CHAR" offset="0x7C" width="32" description="Unused">
    <bitfield id="RESERVED" width="32" begin="31" end="0" resetval="0x0" description="" range="" rwaccess="R"/>
  </register>
  <register id="UART_MDR3" acronym="UART_MDR3" offset="0x80" width="32" description="Mode definition register 3">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="3" begin="7" end="5" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="DIR_EN" width="1" begin="4" end="4" resetval="0x0" description="RS-485 External Transceiver Direction Enable" range="" rwaccess="RW"/>
    <bitfield id="DIR_POL" width="1" begin="3" end="3" resetval="0x0" description="RS-485 External Transceiver Direction Polarity. 0h = TX: RTS=0, RX: RTS=1. 1h = TX: RTS=1, RX: RTS=0" range="" rwaccess="RW"/>
    <bitfield id="SET_DMA_TX_THRESHOLD" width="1" begin="2" end="2" resetval="0x0" description="Enable to set different TXDMA threshold in" range="" rwaccess="RW"/>
    <bitfield id="NONDEFAULT_FREQ" width="1" begin="1" end="1" resetval="0x0" description="Used to enable the NONDEFAULT fclk frequencies." range="" rwaccess="RW"/>
    <bitfield id="DISABLE_CIR_RX_DEMOD" width="1" begin="0" end="0" resetval="0x0" description="Used to enable CIR RX demodulation." range="" rwaccess="RW"/>
  </register>
  <register id="UART_TX_DMA_THRESHOLD" acronym="UART_TX_DMA_THRESHOLD" offset="0x84" width="32" description="Use to manually set the TX DMA threshold level. [2] SET_TX_DMA_THRESHOLD must be 1 and must be value + tx_trigger_level = 64 (TX FIFO size). If not, 64-tx_trigger_level will be used without modifying the value of this register.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="2" begin="7" end="6" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="TX_DMA_THRESHOLD" width="6" begin="5" end="0" resetval="0x0" description="Used to manually set the TX DMA threshold level" range="" rwaccess="RW"/>
  </register>
  <register id="UART_MDR4" acronym="UART_MDR4" offset="0x88" width="32" description="Mode definition register 4">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="1" begin="7" end="7" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="MODE9" width="1" begin="6" end="6" resetval="0x0" description="9-bit character length When '1', overrides character length setting in UART_LCR" range="" rwaccess="RW"/>
    <bitfield id="FREQ_SEL_H" width="3" begin="5" end="3" resetval="0x0" description="Upper 3 bits of" range="" rwaccess="RW"/>
    <bitfield id="MODE" width="3" begin="2" end="0" resetval="0x0" description="New modes [when set, overrides" range="" rwaccess="RW"/>
  </register>
  <register id="UART_EFR2" acronym="UART_EFR2" offset="0x8C" width="32" description="Enhanced Features Register 2">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="BROADCAST" width="1" begin="7" end="7" resetval="0x0" description="Enables broadcast address matching in multi-drop address match mode" range="" rwaccess="RW"/>
    <bitfield id="TIMEOUT_BEHAVE" width="1" begin="6" end="6" resetval="0x0" description="Specifies how timeout is measured" range="" rwaccess="RW"/>
    <bitfield id="C8" width="1" begin="5" end="5" resetval="0x0" description="Value for ISO 7816 C8 pin for software control" range="" rwaccess="RW"/>
    <bitfield id="C4" width="1" begin="4" end="4" resetval="0x0" description="Value for ISO 7816 C4 pin for software control" range="" rwaccess="RW"/>
    <bitfield id="C2" width="1" begin="3" end="3" resetval="0x0" description="Value for ISO 7816 reset pin [software controllable]" range="" rwaccess="RW"/>
    <bitfield id="MULTIDROP" width="1" begin="2" end="2" resetval="0x0" description="Enables parity Multi-drop mode [overrides" range="" rwaccess="RW"/>
    <bitfield id="RHR_OVERRUN" width="1" begin="1" end="1" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="ENDIAN" width="1" begin="0" end="0" resetval="0x0" description="Endianness" range="" rwaccess="RW"/>
  </register>
  <register id="UART_ECR" acronym="UART_ECR" offset="0x90" width="32" description="Enhanced Control register">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="2" begin="7" end="6" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="CLEAR_TX_PE" width="1" begin="5" end="5" resetval="0x0" description="Write 1h = to clear parity error from the Transmitter to allow it to continue to try sending data [ISO7816 transmit only]" range="" rwaccess="W"/>
    <bitfield id="TX_EN" width="1" begin="4" end="4" resetval="0x1" description="Enables/Disables the transmitter" range="" rwaccess="RW"/>
    <bitfield id="RX_EN" width="1" begin="3" end="3" resetval="0x1" description="Enables/Disables the receiver" range="" rwaccess="RW"/>
    <bitfield id="TX_RST" width="1" begin="2" end="2" resetval="0x0" description="Writing 1h = resets the transmitter" range="" rwaccess="W"/>
    <bitfield id="RX_RST" width="1" begin="1" end="1" resetval="0x0" description="Writing 1h = resets the receiver" range="" rwaccess="W"/>
    <bitfield id="A_MULTIDROP" width="1" begin="0" end="0" resetval="0x0" description="In multi-drop mode, when written with the value '1' causes the next byte written into" range="" rwaccess="W"/>
  </register>
  <register id="UART_TIMEGUARD" acronym="UART_TIMEGUARD" offset="0x94" width="32" description="Timeguard">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="TIMEGUARD" width="8" begin="7" end="0" resetval="0x0" description="Specifies the amount of idle baud clocks [transmitter bit period] to insert between transmitted bytes, useful when comunicating with slower devices" range="" rwaccess="RW"/>
  </register>
  <register id="UART_TIMEOUTL" acronym="UART_TIMEOUTL" offset="0x98" width="32" description="Timeout lower byte">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="TIMEOUT_L" width="8" begin="7" end="0" resetval="0x0" description="Custom timeout period in baud clocks, to override the internal value, when different from 0 [Lower byte of the 16 bit value]" range="" rwaccess="RW"/>
  </register>
  <register id="UART_TIMEOUTH" acronym="UART_TIMEOUTH" offset="0x9C" width="32" description="Timeout higher byte">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="TIMEOUT_H" width="8" begin="7" end="0" resetval="0x0" description="Custom timeout period in baud clocks, to override the internal value, when different from 0 [Higher byte of the 16 bit value]" range="" rwaccess="RW"/>
  </register>
  <register id="UART_SCCR" acronym="UART_SCCR" offset="0xA0" width="32" description="Smartcard (ISO7816) mode Control Register">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="DSNACK" width="1" begin="7" end="7" resetval="0x0" description="Applies Max_Iteration to receiver aswell - when maximum number of NACKs have been returned, the receiver will accept the data regardless of error The data will be loaded into the receiver FIFO and PE will be set when reading it" range="" rwaccess="RW"/>
    <bitfield id="INACK" width="1" begin="6" end="6" resetval="0x0" description="Inhibit NACK when receiving, even if an error is received The data will be loaded into the receiver FIFO and PE will be set when reading it" range="" rwaccess="RW"/>
    <bitfield id="RESERVED" width="3" begin="5" end="3" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="MAX_ITERATION" width="3" begin="2" end="0" resetval="0x7" description="Number of times to repeat transmitted character, if the receiver did not acknowledge If not acknowledged after the max value is reached, the UART transmitter will set parity error, stop and not continue until it is cleared" range="" rwaccess="RW"/>
  </register>
  <register id="UART_ERHR" acronym="UART_ERHR" offset="0xA4" width="32" description="Extended Receive Holding Register">
    <bitfield id="RESERVED" width="23" begin="31" end="9" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="ERHR" width="9" begin="8" end="0" resetval="0x0" description="Extended Receive Holding Register - allows accessing the full 9bit" range="" rwaccess="R"/>
  </register>
  <register id="UART_ETHR" acronym="UART_ETHR" offset="0xA4" width="32" description="Extended Transmit Holding Register">
    <bitfield id="RESERVED" width="23" begin="31" end="9" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="ETHR" width="9" begin="8" end="0" resetval="0x0" description="Extended Transmit Holding Register - allows writing the full 9bit" range="" rwaccess="W"/>
  </register>
  <register id="UART_MAR" acronym="UART_MAR" offset="0xA8" width="32" description="Multidrop Address Register">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="ADDRESS" width="8" begin="7" end="0" resetval="0x0" description="Multidrop match address value" range="" rwaccess="RW"/>
  </register>
  <register id="UART_MMR" acronym="UART_MMR" offset="0xAC" width="32" description="Multidrop Mask Register">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="MASK" width="8" begin="7" end="0" resetval="0x0" description="Address match masking value ? writing a 0 to a bit means that the corresponding address bit will be ignored in matching" range="" rwaccess="RW"/>
  </register>
  <register id="UART_MBR" acronym="UART_MBR" offset="0xB0" width="32" description="Multidrop Broadcast Address Register">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="BROADCAST_ADDRESS" width="8" begin="7" end="0" resetval="0x0" description="Broadcast address for address matching" range="" rwaccess="RW"/>
  </register>
</module>
