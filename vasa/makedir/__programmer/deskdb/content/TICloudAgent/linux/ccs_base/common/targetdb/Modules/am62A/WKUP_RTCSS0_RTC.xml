<module name="WKUP_rtcss0_RTC" acronym="" XML_version="1.0" HW_revision="n/a" description="">
	<register id="RTC_REGS_MOD_VER" acronym="RTC_REGS_MOD_VER" offset="0x0" width="32" description="The Module and Version Register identifies the module identifier and revision of the RTC module.">
		<bitfield id="MODULE_ID" width="16" begin="31" end="16" resetval="0x26816" description="RTC module ID." range="31 - 16" rwaccess="R"/> 
		<bitfield id="RTL_VERSION" width="5" begin="15" end="11" resetval="0x0" description="RTL Version." range="15 - 11" rwaccess="R"/> 
		<bitfield id="MAJOR_REVISION" width="3" begin="10" end="8" resetval="0x1" description="Major Revision." range="10 - 8" rwaccess="R"/> 
		<bitfield id="CUSTOM_REVISION" width="2" begin="7" end="6" resetval="0x0" description="Custom Revision." range="7 - 6" rwaccess="R"/> 
		<bitfield id="MINOR_REVISION" width="6" begin="5" end="0" resetval="0x0" description="Minor Revision." range="5 - 0" rwaccess="R"/>
	</register>
	<register id="RTC_REGS_SUB_S_CNT" acronym="RTC_REGS_SUB_S_CNT" offset="0x4" width="32" description="This register counts the 32768 Hz clock events">
		<bitfield id="SUB_S_CNT" width="15" begin="14" end="0" resetval="0x0" description="This counts the 32768 Hz clock events to achive 1 sec event for the sec counter, rollvers after 0x7fff or 1 Sec running on 32768Hz" range="14 - 0" rwaccess="R/W"/>
	</register>
	<register id="RTC_REGS_S_CNT_LSW" acronym="RTC_REGS_S_CNT_LSW" offset="0x8" width="32" description="The lower word of the seconds counter">
		<bitfield id="S_CNT_LSW" width="32" begin="31" end="0" resetval="0x0" description="This counts the 1 sec events, it is the lower 32 bits of the 48 bit counter, 1 = 1 Seconds, 2 = 2 Seconds, N = N Seconds " range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="RTC_REGS_S_CNT_MSW" acronym="RTC_REGS_S_CNT_MSW" offset="0xC" width="32" description="The upper word of the seconds counter">
		<bitfield id="S_CNT_MSW" width="16" begin="15" end="0" resetval="0x0" description="This counts the 1 sec events, it is the upper 16 bits of the 48 bit counter" range="15 - 0" rwaccess="R/W"/>
	</register>
	<register id="RTC_REGS_COMP" acronym="RTC_REGS_COMP" offset="0x10" width="32" description="This register used to program the value of the 32768 periods to be added to the 32768 counter every 4096 Secs. This is used to compensate the oscillator drift.">
		<bitfield id="MSB_COMP" width="8" begin="15" end="8" resetval="0x0" description="Indicates number of 32-kHz periods to be added into the 32-kHz counter every 4096 Secs, twos complement That means that to add one 32-kHz oscillator period every hour, the SW must write FFFF into COMP_MSB and COMP_LSB. To remove one 32-kHz oscillator period every hour, the SW must write 0001 into RTC_COMP_MSB and RTC_COMP_LSB.  The 7FFF value is forbidden." range="15 - 8" rwaccess="R/W"/> 
		<bitfield id="LSB_COMP" width="8" begin="7" end="0" resetval="0x0" description="Indicates number of 32-kHz periods to be added into the 32-kHz counter every 4096 Secs, twos complement That means that to add one 32-kHz oscillator period every hour, the SW must write FFFF into COMP_MSB and COMP_LSB. To remove one 32-kHz oscillator period every hour, the SW must write 0001 into RTC_COMP_MSB and RTC_COMP_LSB.  The 7FFF value is forbidden." range="7 - 0" rwaccess="R/W"/>
	</register>
	<register id="RTC_REGS_OFF_ON_S_CNT_LSW" acronym="RTC_REGS_OFF_ON_S_CNT_LSW" offset="0x18" width="32" description="This register defines the OFF to ON time event">
		<bitfield id="OFF_ON_S_CNT_LSW" width="32" begin="31" end="0" resetval="0x0" description="The lower word of the OFF to ON time" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="RTC_REGS_OFF_ON_S_CNT_MSW" acronym="RTC_REGS_OFF_ON_S_CNT_MSW" offset="0x1C" width="32" description="This register defines the OFF to ON time event">
		<bitfield id="OFF_ON_S_CNT_MSW" width="16" begin="15" end="0" resetval="0x0" description="The" range="15 - 0" rwaccess="R/W"/>
	</register>
	<register id="RTC_REGS_ON_OFF_S_CNT_LSW" acronym="RTC_REGS_ON_OFF_S_CNT_LSW" offset="0x20" width="32" description="This register defines the ON to OFF time event">
		<bitfield id="ON_OFF_S_CNT_LSW" width="32" begin="31" end="0" resetval="0x0" description="The" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="RTC_REGS_ON_OFF_S_CNT_MSW" acronym="RTC_REGS_ON_OFF_S_CNT_MSW" offset="0x24" width="32" description="This register defines the ON to OFF time event">
		<bitfield id="ON_OFF_S_CNT_MSW" width="16" begin="15" end="0" resetval="0x0" description="The" range="15 - 0" rwaccess="R/W"/>
	</register>
	<register id="RTC_REGS_DEBOUNCE" acronym="RTC_REGS_DEBOUNCE" offset="0x28" width="32" description="The Debounce register defines the debounce timer useing the 32768 Hz clock. It allows choosing the timing or the accuracy of ">
		<bitfield id="DEBOUNCE" width="8" begin="7" end="0" resetval="0x0" description="Debounce time  0 debounce time is 30.52 uS  N debounce time is 30.52us*(N+1)" range="7 - 0" rwaccess="R/W"/>
	</register>
	<register id="RTC_REGS_ANALOG" acronym="RTC_REGS_ANALOG" offset="0x2C" width="32" description="This register goes to the Analog Block">
		<bitfield id="ANALOG" width="32" begin="31" end="0" resetval="0x0" description="Analog Configuration MMR" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="RTC_REGS_SCRATCH0" acronym="RTC_REGS_SCRATCH0" offset="0x30" width="32" description="The Scratch Storage Registers can be used to hold information in the battery backuped domain while the device is powered down.">
		<bitfield id="SCRATCH0" width="32" begin="31" end="0" resetval="0x0" description="The scratch0 holds data in the battery backed domain for use by the device when powered on. This would typically be used to store signatures other information of similar ilk." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="RTC_REGS_GENRAL_CTL" acronym="RTC_REGS_GENRAL_CTL" offset="0x50" width="32" description="This is the main RTC control register ">
		<bitfield id="CNT_FMODE" width="2" begin="25" end="24" resetval="0x0" description="This defines which read freeze mode is enabled,   10 = S_CNT_LSW When SW reads S_CNT_LSW it will snap S_CNT_MSW   01 = SUB_S_CNT When SW reads SUB_S_CNT it will snap S_CNT_MSW and S_CNT_LSW   00 = Disable" range="25 - 24" rwaccess="R/W"/> 
		<bitfield id="UNLOCK" width="1" begin="23" end="23" resetval="0x0" description="The status of the UNLOCKED state,   1 = UnLocked 0 = Locked" range="23" rwaccess="R"/> 
		<bitfield id="O32K_OSC_DEP_EN" width="1" begin="21" end="21" resetval="0x0" description="This controls if a high to low transition dependence is required before the CORE domain can read or write the ON domain,   1 = Enable 0 = Disable" range="21" rwaccess="R/W"/> 
		<bitfield id="SW_OFF" width="1" begin="17" end="17" resetval="0x0" description="The SW can issue a ON_OFF event, Wrt 1 for OFF event Wrt 0 has no effect, The OFF event will occur within 31uS and relock the core" range="17" rwaccess="W"/> 
		<bitfield id="PWR_OFF_EN" width="1" begin="16" end="16" resetval="0x0" description="This allows the PMIC_ENABLE to go from a ON to OFF state by SW or ON_OFF event" range="16" rwaccess="R/W"/> 
		<bitfield id="WKUP_DB_EN" width="4" begin="11" end="8" resetval="0x0" description="External Wakeup Debounce Enable   1 = Enable 0 = Disable" range="11 - 8" rwaccess="R/W"/> 
		<bitfield id="WKUP_POL" width="4" begin="7" end="4" resetval="0x0" description="External Wakeup Polarity   1 = Active High = Active Low" range="7 - 4" rwaccess="R/W"/> 
		<bitfield id="WKUP_EN" width="4" begin="3" end="0" resetval="0x0" description="External Wakeup Enable   1 = Enable 0 = Disable" range="3 - 0" rwaccess="R/W"/>
	</register>
	<register id="RTC_REGS_IRQSTATUS_RAW_SYS" acronym="RTC_REGS_IRQSTATUS_RAW_SYS" offset="0x54" width="32" description="">
		<bitfield id="EVENT_OFF_ON" width="1" begin="1" end="1" resetval="0x0" description="Raw status of OFF_ON interrupt for event_off_on. Write 1 to set the (raw) status, mostly for debug. Writing a 0 has no effect." range="1" rwaccess="R/W1TS"/> 
		<bitfield id="EVENT_ON_OFF" width="1" begin="0" end="0" resetval="0x0" description="Raw status of ON_OFF interrupt for event_on_off. Write 1 to set the (raw) status, mostly for debug. Writing a 0 has no effect." range="0" rwaccess="R/W1TS"/>
	</register>
	<register id="RTC_REGS_IRQSTATUS_SYS" acronym="RTC_REGS_IRQSTATUS_SYS" offset="0x58" width="32" description="">
		<bitfield id="EVENT_OFF_ON" width="1" begin="1" end="1" resetval="0x0" description="Enabled status of OFF_ON interrupt for event_off_on. Write 1 to clear the status after interrupt has been serviced (raw status gets cleared, i.e. even if not enabled). Writing a 0 has no effect." range="1" rwaccess="R/W1TC"/> 
		<bitfield id="EVENT_ON_OFF" width="1" begin="0" end="0" resetval="0x0" description="Enabled status of ON_OFF interrupt for event_on_off. Write 1 to clear the status after interrupt has been serviced (raw status gets cleared, i.e. even if not enabled). Writing a 0 has no effect." range="0" rwaccess="R/W1TC"/>
	</register>
	<register id="RTC_REGS_IRQENABLE_SET_SYS" acronym="RTC_REGS_IRQENABLE_SET_SYS" offset="0x5C" width="32" description="">
		<bitfield id="EN_EVENT_OFF_ON" width="1" begin="1" end="1" resetval="0x0" description="Enable set for OFF_ON interrupt for event_off_on. Writing a 1 will enable the interrupt, and set this bit as well as the corresponding Interrupt Enable Clear Register. Writing a 0 has no effect." range="1" rwaccess="R/W1TS"/> 
		<bitfield id="EN_EVENT_ON_OFF" width="1" begin="0" end="0" resetval="0x0" description="Enable set for ON_OFF interrupt for event_on_off. Writing a 1 will enable the interrupt, and set this bit as well as the corresponding Interrupt Enable Clear Register. Writing a 0 has no effect." range="0" rwaccess="R/W1TS"/>
	</register>
	<register id="RTC_REGS_IRQENABLE_CLR_SYS" acronym="RTC_REGS_IRQENABLE_CLR_SYS" offset="0x60" width="32" description="">
		<bitfield id="EN_EVENT_OFF_ON" width="1" begin="1" end="1" resetval="0x0" description="Enable clear for OFF_ON interrupt for event_off_on. Writing a 1 will disable the interrupt, and clear this bit as well as the corresponding Interrupt Enable Set Register. Writing a 0 has no effect." range="1" rwaccess="R/W1TC"/> 
		<bitfield id="EN_EVENT_ON_OFF" width="1" begin="0" end="0" resetval="0x0" description="Enable clear for ON_OFF interrupt for event_on_off. Writing a 1 will disable the interrupt, and clear this bit as well as the corresponding Interrupt Enable Set Register. Writing a 0 has no effect." range="0" rwaccess="R/W1TC"/>
	</register>
	<register id="RTC_REGS_SYNCPEND" acronym="RTC_REGS_SYNCPEND" offset="0x68" width="32" description="The SW can determine status of wrt and rd access along with other status from the ON domain ">
		<bitfield id="RELOAD_FROM_BBD" width="1" begin="31" end="31" resetval="0x0" description="The reload_from_bbd allows the registers to be reloaded from the battery backed domain. This is only allowed when the battery backed domain interface state machine is idle." range="31" rwaccess="R/W"/> 
		<bitfield id="PWR_ENABLE_ST" width="1" begin="8" end="8" resetval="0x0" description="The SW can read the state of PIMIC_ENABLE pin, this is raw state" range="8" rwaccess="R"/> 
		<bitfield id="WKUP_DB_ST" width="4" begin="7" end="4" resetval="0x0" description="The SW can read the state of EXT_WAKEUP pins, this is raw state" range="7 - 4" rwaccess="R"/> 
		<bitfield id="WRT_ERR" width="1" begin="3" end="3" resetval="0x0" description="Write Error Condition   1 = Occured   0 = Not Coocured   Wrt 1 to Clr   Set when SW tries to Wrt when RTL is LOCKED or Wrt when RD_PEND is set" range="3" rwaccess="R/W1TC"/> 
		<bitfield id="O32K_CLK_OBS" width="1" begin="2" end="2" resetval="0x0" description="The SW can read the state of the main 32k clock" range="2" rwaccess="R"/> 
		<bitfield id="RD_PEND" width="1" begin="1" end="1" resetval="0x0" description="Synchronization from ON Domain Status after a CORE Reset Event   = 1 Pending or Active   = 0 Completed " range="1" rwaccess="R/W"/> 
		<bitfield id="WR_PEND" width="1" begin="0" end="0" resetval="0x0" description="Synchronization to   ON Domain Status after a CORE write update   = 1 Pending or Active   = 0 Completed " range="0" rwaccess="R/W"/>
	</register>
	<register id="RTC_REGS_KICK0" acronym="RTC_REGS_KICK0" offset="0x70" width="32" description="The written data must be 0x83e70b13 to unlock this register. It must be written before the Kick1 register. ">
		<bitfield id="KICK0" width="32" begin="31" end="0" resetval="0x0" description="Kick0 MMR, must write 0x83e70b13 to unlock this register" range="31 - 0" rwaccess="W"/>
	</register>
	<register id="RTC_REGS_KICK1" acronym="RTC_REGS_KICK1" offset="0x74" width="32" description="The Kick1 register allows writing to unlock the kick1 data and the kicker mechanism to write to other MMRs. The written data must be 0x95a4f1e0 to unlock this register. If this is unlocked after the kick0 register is unlocked then the kicker mechanism is unlocked">
		<bitfield id="KICK1" width="32" begin="31" end="0" resetval="0x0" description="Kick1 MMR, must write 0x95a4f1e0 to unlock this register and the other MMRs" range="31 - 0" rwaccess="W"/>
	</register>
</module>