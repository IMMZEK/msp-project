/* Copyright (c) 2021, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
 
menuitem "Power Sleep Controller/Use Case Configurations";

hotmenu UC_1_2_PD_LPSC_CFG()
{
    int status = 1;    GEL_TextOut( "Powering up/enabling UC 1.2 PD/LPSCs\n");
    //GP_CORE_CTL
    GEL_TextOut( "Powering up LPSC_DMSC\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_DMSC, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_DEBUGSS\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_DEBUGSS, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_EMIF_CFG\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMIF_CFG, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_EMIF_DATA\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMIF_DATA, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_SERDES_0\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_SERDES_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_PCIE_0\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_PCIE_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up GP_CORE_CTL done. \n");

    //PD_A53_cluster_0
    GEL_TextOut( "Powering up LPSC_A53_CLUSTER_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0, PSC_PD_ON, PSC_ENABLE);

    //PD_A53_0
    GEL_TextOut( "Powering up LPSC_A53_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_0, LPSC_A53_0, PSC_PD_ON, PSC_ENABLE);

    //PD_A53_1
    GEL_TextOut( "Powering up LPSC_A53_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_1, LPSC_A53_1, PSC_PD_ON, PSC_ENABLE);

    //PD_Pulsar_0
    GEL_TextOut( "Powering up LPSC_PULSAR_0_R5_0\n");
    status &= Set_MAIN_PSC_State( PD_PULSAR_0,LPSC_PULSAR_0_R5_0, PSC_PD_ON, PSC_ENABLE);

    //PD_ICSSG_0
    GEL_TextOut( "Powering up LPSC_ICSSG_0\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG_0, LPSC_ICSSG_0, PSC_PD_ON, PSC_ENABLE);

    //PD_ICSSG_1
    GEL_TextOut( "Powering up LPSC_ICSSG_1\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG_1, LPSC_ICSSG_1, PSC_PD_ON, PSC_ENABLE);

    GEL_TextOut( "Powering down/disabling non-UC 1.2 PD/LPSCs\n");

    //GP_CORE_CTL
    GEL_TextOut( "Clock Gating LPSC_MAIN_TEST\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_TEST, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MAIN_PBIST\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_PBIST, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_EMMC_4B\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMMC_4B, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_EMMC_8B\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMMC_8B, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_USB\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_USB, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_ADC\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_ADC, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_GPMC\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_GPMC, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MCAN_0\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MCAN_0, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MCAN_1\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MCAN_1, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_SA2UL\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_SA2UL, PSC_PD_ON, PSC_DISABLE);

    //PD_A53_cluster_0
    GEL_TextOut( "Clock Gating LPSC_A53_CLUSTER_0_PBIST\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST, PSC_PD_ON, PSC_DISABLE);

    //PD_Pulsar_0
    GEL_TextOut( "Clock Gating LPSC_PULSAR_PBIST_0\n");
    status &= Set_MAIN_PSC_State( PD_PULSAR_0, LPSC_PULSAR_PBIST_0, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Powering Down LPSC_PULSAR_0_R5_1\n");
    status &= Set_MAIN_PSC_State( PD_PULSAR_0,LPSC_PULSAR_0_R5_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);

    //PD_Pulsar_1
    GEL_TextOut( "Powering Down LPSC_PULSAR_PBIST_1\n");
    status &= Set_MAIN_PSC_State( PD_PULSAR_1, LPSC_PULSAR_PBIST_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_PULSAR_1_R5_1\n");
    status &= Set_MAIN_PSC_State( PD_PULSAR_1, LPSC_PULSAR_1_R5_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_PULSAR_1_R5_0\n");
    status &= Set_MAIN_PSC_State( PD_PULSAR_1, LPSC_PULSAR_1_R5_0, PSC_PD_OFF, PSC_SYNCRESETDISABLE);

    //PD_CPSW
    GEL_TextOut( "Clock Gating LPSC_CPSW3G\n");
    status &= Set_MAIN_PSC_State( PD_CPSW, LPSC_CPSW3G, PSC_PD_ON, PSC_DISABLE);

    //GP_CORE_CTL_MCU
    GEL_TextOut( "Clock Gating LPSC_TEST\n");
    status &= Set_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_TEST, PSC_PD_ON, PSC_DISABLE);
    // GEL_TextOut( "Clock Gating LPSC_MAIN2MCU\n");
    // status &= Set_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MAIN2MCU, PSC_PD_ON, PSC_DISABLE);
    // GEL_TextOut( "Clock Gating LPSC_MCU2MAIN\n");
    // status &= Set_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MCU2MAIN, PSC_PD_ON, PSC_DISABLE);

    //PD_M4F
    GEL_TextOut( "Powering Down LPSC_M4F\n");
    status &= Set_MCU_PSC_State( PD_M4F, LPSC_M4F, PSC_PD_OFF, PSC_SYNCRESETDISABLE);


    return status;
}