/**********************************************************************/ 
/*                                                                    */
/* Created by Marcin Nowak (TI)                                       */
/*                                                                    */
/**********************************************************************/


menuitem "PRCM_CLOCK_CONFIGS"



/*------------------------------------------------------------------------*/
#define CORE_DPLL                0
#define MPU_DPLL                 1
#define IVA2_DPLL                2
#define PER_DPLL                 3

#define CORE_CFG1                0  /*BOOT*/
#define CORE_CFG2A               1  /*L3=166MHz, OPP1*/
#define CORE_CFG2B               2  /*L3=133MHz*/
#define CORE_CFG2C               3  /*L3=100MHz*/
#define CORE_CFG3                4  /*L3=83MHz, OPP2*/

#define MPU_OPP1                 0  /*MPU_CLK=476.25MHz*/
#define MPU_OPP2                 1  /*MPU_CLK=381MHz*/
#define MPU_HSB                  2  /*MPU in High Speed Bypass*/

#define IVA2_OPP1                0  /*IVA2_CLK=312.5MHz*/
#define IVA2_OPP2                1  /*IVA2_CLK=250MHz*/
#define IVA2_HSB                 2  /*IVA2 in High Speed Bypass*/

#define DPLL_FREQ_SEL_MASK       0xF
#define DPLL_ENABLE_MASK         0x7
#define DPLL_ENABLE_LOCK         0x7
#define DPLL_ENABLE_BYPASS       0x5

/*------------------------------------------------------------------------*/
#define CM_IVA2_BASE                0x48004000
#define CM_MPU_BASE                 0x48004900
#define CM_CORE_BASE                0x48004A00
#define Clock_Control_CM_BASE       0x48004D00
#define Clock_Control_PRM_BASE      0x48306D00

/*MPU_CM registers*/
   unsigned int*              CM_CLKEN_PLL_MPU_REG = (CM_MPU_BASE + 0x04);
   unsigned int*              CM_IDLEST_PLL_MPU_REG = (CM_MPU_BASE + 0x24);
   unsigned int*              CM_CLKSEL1_PLL_MPU_REG = (CM_MPU_BASE + 0x40);
   unsigned int*              CM_CLKSEL2_PLL_MPU_REG = (CM_MPU_BASE + 0x44);
   
/*IVA2_CM registers*/
   unsigned int*              CM_CLKEN_PLL_IVA2_REG = (CM_IVA2_BASE + 0x04);
   unsigned int*              CM_IDLEST_PLL_IVA2_REG = (CM_IVA2_BASE + 0x24);
   unsigned int*              CM_CLKSEL1_PLL_IVA2_REG = (CM_IVA2_BASE + 0x40);
   unsigned int*              CM_CLKSEL2_PLL_IVA2_REG = (CM_IVA2_BASE + 0x44);

/*CORE_CM registers*/
   unsigned int*              CM_CLKSEL_CORE_REG = (CM_CORE_BASE + 0x40);
   
/*Clock Control CM registers*/
   unsigned int*              CM_CLKEN_PLL_REG = (Clock_Control_CM_BASE+0x00);
   unsigned int*              CM_IDLEST_CKGEN_REG = (Clock_Control_CM_BASE+0x20);
   unsigned int*              CM_CLKSEL1_PLL_REG = (Clock_Control_CM_BASE+0x40);
   
/*Clock Control PRM registers*/
   unsigned int*              PRM_CLKSEL_REG = (Clock_Control_PRM_BASE+0x40);


/*------------------------------------------------------------------------*/
/*Global variables*/
	unsigned int DPLL_MULT_VALUE;
	unsigned int DPLL_DIV_VALUE;
	unsigned int DPLL_FREQ_SEL_VALUE;

   
/*------------------------------------------------------------------------*/
/* For correct clock configuration the SysClock needs to be defined before*/
/* clock configuration routine is called.                                 */ 
/* If not initialized 12MHz will be used as connected SysClock            */ 
/*------------------------------------------------------------------------*/
hotmenu SelectSysClock_12MHz()
{
   *PRM_CLKSEL_REG = 0;
}


hotmenu SelectSysClock_13MHz()
{
   *PRM_CLKSEL_REG = 1;
}


hotmenu SelectSysClock_19_2MHz()
{
   *PRM_CLKSEL_REG = 2;
}


hotmenu SelectSysClock_26MHz()
{
   *PRM_CLKSEL_REG = 3;
}


hotmenu SelectSysClock_38_4MHz()
{
   *PRM_CLKSEL_REG = 4;
}


/*------------------------------------------------------------------------*/
hotmenu Setup_ClockConfig_IIA()
{
   unsigned int nL3Div, nM2Div;

   GEL_TextOut(" Putting DPLL into bypass before proceeding \n");
   
   /* Put DPLL into bypass */
   putCoreDpllInBypass();
   
   /* Configure clock ratios for all L3, L4 targets*/
   nL3Div = 2;
   /* .................    L3             L4         FSHOSTUSB    GPT10    GPT11      SSI    */     
   *CM_CLKSEL_CORE_REG = ((nL3Div << 0) | (2 << 2) | (2 << 4) | (0 << 6) | (0 << 7) | (3 << 8));

   /*Configure M, N and FreqSel values*/
   setDpllConfigValues(CORE_DPLL, CORE_CFG2A, *PRM_CLKSEL_REG);
   
   /* Program DPLL */
   nM2Div = 1;
   lockCoreDpll(nM2Div /*in_M2Div*/);
   
   GEL_TextOut(" PRCM clock configuration IIA setup has been completed \n");
   
   printCoreDpllConfDetails(nL3Div, nM2Div);

   return;
}


hotmenu Setup_ClockConfig_IIB()
{
   unsigned int nL3Div, nM2Div;

   GEL_TextOut(" Putting DPLL into bypass before proceeding \n");
   
   /* Put DPLL into bypass */
   putCoreDpllInBypass();
   
   /* Configure clock ratios for all L3, L4 targets*/
   nL3Div = 2;
   /* .................    L3             L4         FSHOSTUSB    GPT10    GPT11      SSI    */     
   *CM_CLKSEL_CORE_REG = ((nL3Div << 0) | (2 << 2) | (2 << 4) | (0 << 6) | (0 << 7) | (3 << 8));

   /*Configure M, N and FreqSel values*/
   setDpllConfigValues(CORE_DPLL, CORE_CFG2B, *PRM_CLKSEL_REG);
   
   /* Program DPLL */
   nM2Div = 1;
   lockCoreDpll(nM2Div /*in_M2Div*/);
   
   GEL_TextOut(" PRCM clock configuration IIB setup has been completed \n");

   printCoreDpllConfDetails(nL3Div, nM2Div);
   
   return;
}


hotmenu Setup_ClockConfig_IIC()
{
   unsigned int nL3Div, nM2Div;

   GEL_TextOut(" Putting DPLL into bypass before proceeding \n");
   
   /* Put DPLL into bypass */
   putCoreDpllInBypass();
   
   /* Configure clock ratios for all L3, L4 targets*/
   nL3Div = 2;
   /* .................    L3             L4         FSHOSTUSB    GPT10    GPT11      SSI    */     
   *CM_CLKSEL_CORE_REG = ((nL3Div << 0) | (2 << 2) | (2 << 4) | (0 << 6) | (0 << 7) | (3 << 8));

   /*Configure M, N and FreqSel values*/
   setDpllConfigValues(CORE_DPLL, CORE_CFG2C, *PRM_CLKSEL_REG);
   
   /* Program DPLL */
   nM2Div = 1;
   lockCoreDpll(nM2Div /*in_M2Div*/);
   
   GEL_TextOut(" PRCM clock configuration IIC setup has been completed \n");
   
   printCoreDpllConfDetails(nL3Div, nM2Div);
   
   return;
}


hotmenu Setup_ClockConfig_III()
{
   unsigned int nL3Div, nM2Div;
   
   GEL_TextOut(" Putting DPLL into bypass before proceeding \n");
   
   /* Put DPLL into bypass */
   putCoreDpllInBypass();
   
   /* Configure clock ratios for all L3, L4 targets*/
   nL3Div = 2;
   /* .................    L3             L4         FSHOSTUSB    GPT10    GPT11      SSI    */     
   *CM_CLKSEL_CORE_REG = ((nL3Div << 0) | (2 << 2) | (2 << 4) | (0 << 6) | (0 << 7) | (3 << 8));

   /*Configure M, N and FreqSel values*/
   setDpllConfigValues(CORE_DPLL, CORE_CFG3, *PRM_CLKSEL_REG);
   
   /* Program DPLL */
   nM2Div = 2;
   lockCoreDpll(nM2Div /*in_M2Div*/);
   
   GEL_TextOut(" PRCM clock configuration III setup has been completed \n");

   printCoreDpllConfDetails(nL3Div, nM2Div);
   
   return;
}


hotmenu Setup_MPUConfig_OPP1()
{
   unsigned int nM2Div;

   GEL_TextOut(" Putting DPLL into bypass before proceeding \n");
   
   /* Put DPLL into bypass */
   putMpuDpllInBypass();
   
   /*Configure M, N and FreqSel values*/
   setDpllConfigValues(MPU_DPLL, MPU_OPP1, *PRM_CLKSEL_REG);
   
   /* Program DPLL */
   nM2Div = 1;
   lockMpuDpll(nM2Div /*in_M2Div*/);
   
   GEL_TextOut(" PRCM MPU OPP1 clock setup has been completed \n");
   
   printMpuDpllConfDetails(nM2Div);

   return;
}


/*------------------------------------------------------------------------*/
hotmenu Setup_MPUConfig_OPP2()
{
   unsigned int nM2Div;

   GEL_TextOut(" Putting DPLL into bypass before proceeding \n");
   
   /* Put DPLL into bypass */
   putMpuDpllInBypass();
   
   /*Configure M, N and FreqSel values*/
   setDpllConfigValues(MPU_DPLL, MPU_OPP2, *PRM_CLKSEL_REG);
   
   /* Program DPLL */
   nM2Div = 1;
   lockMpuDpll(nM2Div /*in_M2Div*/);
   
   GEL_TextOut(" PRCM MPU OPP2 clock setup has been completed \n");
   
   printMpuDpllConfDetails(nM2Div);
   
   return;
}


hotmenu Setup_MPUConfig_OPP3()
{
   unsigned int nM2Div;

   GEL_TextOut(" Putting DPLL into bypass before proceeding \n");
   
   /* Put DPLL into bypass */
   putMpuDpllInBypass();
   
   /*Configure M, N and FreqSel values*/
   setDpllConfigValues(MPU_DPLL, MPU_OPP1, *PRM_CLKSEL_REG);
   
   /* Program DPLL */
   nM2Div = 2;
   lockMpuDpll(nM2Div /*in_M2Div*/);
   
   GEL_TextOut(" PRCM MPU OPP3 clock setup has been completed \n");
   
   printMpuDpllConfDetails(nM2Div);
      
   return;
}


hotmenu Setup_MPUConfig_OPP4()
{
   unsigned int nM2Div;

   GEL_TextOut(" Putting DPLL into bypass before proceeding \n");
   
   /* Put DPLL into bypass */
   putMpuDpllInBypass();
   
   /*Configure M, N and FreqSel values*/
   setDpllConfigValues(MPU_DPLL, MPU_OPP1, *PRM_CLKSEL_REG);
   
   /* Program DPLL */
   nM2Div = 4;
   lockMpuDpll(nM2Div /*in_M2Div*/);
   
   GEL_TextOut(" PRCM MPU OPP4 clock setup has been completed \n");
   
   printMpuDpllConfDetails(nM2Div);
      
   return;
}


/*------------------------------------------------------------------------*/
hotmenu Setup_IVA2Config_OPP1()
{
   unsigned int nM2Div;

   GEL_TextOut(" Putting DPLL into bypass before proceeding \n");
   
   /* Put DPLL into bypass */
   putIva2DpllInBypass();
   
   /*Configure M, N and FreqSel values*/
   setDpllConfigValues(IVA2_DPLL, IVA2_OPP1, *PRM_CLKSEL_REG);
   
   /* Program DPLL */
   nM2Div = 1;
   lockIva2Dpll(nM2Div /*in_M2Div*/);
   
   GEL_TextOut(" PRCM IVA2 OPP1 clock setup has been completed \n");
   
   printIva2DpllConfDetails(nM2Div);
   
   return;
}


hotmenu Setup_IVA2Config_OPP2()
{
   unsigned int nM2Div;

   GEL_TextOut(" Putting DPLL into bypass before proceeding \n");
   
   /* Put DPLL into bypass */
   putIva2DpllInBypass();
   
   /*Configure M, N and FreqSel values*/
   setDpllConfigValues(IVA2_DPLL, IVA2_OPP2, *PRM_CLKSEL_REG);
   
   /* Program DPLL */
   nM2Div = 1;
   lockIva2Dpll(nM2Div /*in_M2Div*/);
   
   GEL_TextOut(" PRCM IVA2 OPP2 clock setup has been completed \n");

   printIva2DpllConfDetails(nM2Div);
      
   return;
}


hotmenu Setup_IVA2Config_OPP3()
{
   unsigned int nM2Div;

   GEL_TextOut(" Putting DPLL into bypass before proceeding \n");
   
   /* Put DPLL into bypass */
   putIva2DpllInBypass();
   
   /*Configure M, N and FreqSel values*/
   setDpllConfigValues(IVA2_DPLL, IVA2_OPP1, *PRM_CLKSEL_REG);
   
   /* Program DPLL */
   nM2Div = 2;
   lockIva2Dpll(nM2Div /*in_M2Div*/);
   
   GEL_TextOut(" PRCM IVA2 OPP3 clock setup has been completed \n");
   
   printIva2DpllConfDetails(nM2Div);
      
   return;
}


hotmenu Setup_IVA2Config_OPP4()
{
   unsigned int nM2Div;

   GEL_TextOut(" Putting DPLL into bypass before proceeding \n");
   
   /* Put DPLL into bypass */
   putIva2DpllInBypass();
   
   /*Configure M, N and FreqSel values*/
   setDpllConfigValues(IVA2_DPLL, IVA2_OPP1, *PRM_CLKSEL_REG);
   
   /* Program DPLL */
   nM2Div = 4;
   lockIva2Dpll(nM2Div /*in_M2Div*/);
   
   GEL_TextOut(" PRCM IVA2 OPP4 clock setup has been completed \n");
   
   printIva2DpllConfDetails(nM2Div);
   
   return;
}

/******************************************************************************/
/*             Local functions                                                */
/******************************************************************************/
getSysClkValue()
{
   unsigned int nSysClkValue;
   
   /*Read PRM register to get SysClk value*/
   nSysClkValue = *PRM_CLKSEL_REG;
   if (nSysClkValue == 0)
   {
      nSysClkValue = 12000000;
   }
   else if (nSysClkValue == 1)
   {
      nSysClkValue = 13000000;
   }
   else if (nSysClkValue == 2)
   {
      nSysClkValue = 19200000;
   }
   else if (nSysClkValue == 3)
   {
      nSysClkValue = 26000000;
   }
   else if (nSysClkValue == 4)
   {
      nSysClkValue = 38400000;
   }
   
   GEL_TextOut(" SystemClock = %f MHz \n",,,,,(float)nSysClkValue/1000000);
   
   return nSysClkValue;
}


/*------------------------------------------------------------------------*/
printCoreDpllConfDetails(in_nL3Div, in_nM2Div)
{
   float clkenDpllValue;
   
   clkenDpllValue = (getSysClkValue()/1000*2*DPLL_MULT_VALUE)/(DPLL_DIV_VALUE+1);
   clkenDpllValue = clkenDpllValue/1000;
   
   GEL_TextOut(" DPLL_MULT_VALUE = %d \n",,,,,DPLL_MULT_VALUE);
   GEL_TextOut(" DPLL_DIV_VALUE = %d \n",,,,,DPLL_DIV_VALUE);
   GEL_TextOut(" CORE_DPLL_CLK = %f MHz \n",,,,,clkenDpllValue);
   GEL_TextOut(" CORE_CLK = %f MHz \n",,,,,clkenDpllValue/(2*in_nM2Div));
   GEL_TextOut(" L3_CLK = %f MHz \n",,,,,clkenDpllValue/(2*in_nM2Div*in_nL3Div));
   
   return;
}


printMpuDpllConfDetails(in_nM2Div)
{
   float clkenDpllValue;
   
   clkenDpllValue = (getSysClkValue()/1000*2*DPLL_MULT_VALUE)/(DPLL_DIV_VALUE+1);
   clkenDpllValue = clkenDpllValue/1000;
   
   GEL_TextOut(" DPLL_MULT_VALUE = %d \n",,,,,DPLL_MULT_VALUE);
   GEL_TextOut(" DPLL_DIV_VALUE = %d \n",,,,,DPLL_DIV_VALUE);
   GEL_TextOut(" MPU_DPLL_CLK = %f MHz \n",,,,,clkenDpllValue);
   GEL_TextOut(" MPU_CLK = %f MHz \n",,,,,clkenDpllValue/(in_nM2Div));
   
   return;
}


printIva2DpllConfDetails(in_nM2Div)
{
   float clkenDpllValue;
   
   clkenDpllValue = (getSysClkValue()/1000*2*DPLL_MULT_VALUE)/(DPLL_DIV_VALUE+1);
   clkenDpllValue = clkenDpllValue/1000;
   
   GEL_TextOut(" DPLL_MULT_VALUE = %d \n",,,,,DPLL_MULT_VALUE);
   GEL_TextOut(" DPLL_DIV_VALUE = %d \n",,,,,DPLL_DIV_VALUE);
   GEL_TextOut(" IVA2_DPLL_CLK = %f MHz \n",,,,,clkenDpllValue);
   GEL_TextOut(" IVA2_CLK = %f MHz \n",,,,,clkenDpllValue/(in_nM2Div));
   
   return;
}

/*------------------------------------------------------------------------*/


lockCoreDpll(unsigned int in_M2Div)
{
   int clken_pll_value;

   GEL_TextOut(" Locking CORE DPLL \n");
   
   /* Program DPLL */
   /* 54MHz and 48MHz clocks are derived from APLL */
   *CM_CLKSEL1_PLL_REG = ((in_M2Div << 27) | (DPLL_MULT_VALUE << 16) | (DPLL_DIV_VALUE << 8) | (0 << 5) | (0 << 3));     

   /* Put DPLL into lock mode */
   clken_pll_value = *CM_CLKEN_PLL_REG;
   clken_pll_value &= ~((DPLL_FREQ_SEL_MASK << 4) | (DPLL_ENABLE_MASK << 0));
   clken_pll_value |= ((DPLL_FREQ_SEL_VALUE << 4) | (DPLL_ENABLE_LOCK << 0));
   *CM_CLKEN_PLL_REG = clken_pll_value;

   /* Wait for DPLL to be in lock mode */
   while ( (*CM_IDLEST_CKGEN_REG & 0x1) != 0x1 );  
}


/*------------------------------------------------------------------------*/
putMpuDpllInBypass()
{
   int clken_pll_value;

   GEL_TextOut(" Putting MPU DPLL into bypass before proceeding \n");
   
   /* Put DPLL into bypass */
   clken_pll_value = *CM_CLKEN_PLL_MPU_REG;
   clken_pll_value &= ~(DPLL_ENABLE_MASK << 0);
   clken_pll_value |= (DPLL_ENABLE_BYPASS << 0); 
   *CM_CLKEN_PLL_MPU_REG = clken_pll_value;
   while ( (*CM_IDLEST_PLL_MPU_REG & 0x01) == 0x1 );  
}


lockMpuDpll(unsigned int in_M2Div)
{
   int clken_pll_value;

   GEL_TextOut(" Locking MPU DPLL \n");

   /* Program DPLL_CLKOUT divider (M2) */
   *CM_CLKSEL2_PLL_MPU_REG = in_M2Div;

   /* Program DPLL */
   *CM_CLKSEL1_PLL_MPU_REG = ((2 << 19) | (DPLL_MULT_VALUE << 8) | (DPLL_DIV_VALUE << 0));     

   /* Put DPLL into lock mode */
   clken_pll_value = *CM_CLKEN_PLL_MPU_REG;
   clken_pll_value &= ~((DPLL_FREQ_SEL_MASK << 4) | (DPLL_ENABLE_MASK << 0));
   clken_pll_value |= ((DPLL_FREQ_SEL_VALUE << 4) | (DPLL_ENABLE_LOCK << 0));
   *CM_CLKEN_PLL_MPU_REG = clken_pll_value;

   /* Wait for DPLL to be in lock mode */
   while ( (*CM_IDLEST_PLL_MPU_REG & 0x1) != 0x1 );  
}

/*------------------------------------------------------------------------*/
putIva2DpllInBypass()
{
   int clken_pll_value;

   GEL_TextOut(" Putting IVA2 DPLL into bypass before proceeding \n");
   
   /* Put DPLL into bypass */
   clken_pll_value = *CM_CLKEN_PLL_IVA2_REG;
   clken_pll_value &= ~(DPLL_ENABLE_MASK << 0);
   clken_pll_value |= (DPLL_ENABLE_BYPASS << 0); 
   *CM_CLKEN_PLL_IVA2_REG = clken_pll_value;
   while ( (*CM_IDLEST_PLL_IVA2_REG & 0x01) == 0x1 );  
}


lockIva2Dpll(unsigned int in_M2Div)
{
   int clken_pll_value;

   GEL_TextOut(" Locking IVA2 DPLL \n");

   /* Program DPLL_CLKOUT divider (M2) */
   *CM_CLKSEL2_PLL_IVA2_REG = in_M2Div;

   /* Program DPLL */
   *CM_CLKSEL1_PLL_IVA2_REG = ((2 << 19) | (DPLL_MULT_VALUE << 8) | (DPLL_DIV_VALUE << 0));     

   /* Put DPLL into lock mode */
   clken_pll_value = *CM_CLKEN_PLL_IVA2_REG;
   clken_pll_value &= ~((DPLL_FREQ_SEL_MASK << 4) | (DPLL_ENABLE_MASK << 0));
   clken_pll_value |= ((DPLL_FREQ_SEL_VALUE << 4) | (DPLL_ENABLE_LOCK << 0));
   *CM_CLKEN_PLL_IVA2_REG = clken_pll_value;

   /* Wait for DPLL to be in lock mode */
   while ( (*CM_IDLEST_PLL_IVA2_REG & 0x1) != 0x1 );  
}


/*------------------------------------------------------------------------*/
setDpllConfigValues(unsigned int in_nDpll, unsigned int in_nConf, unsigned int in_nSysClk)
{
   if (in_nDpll == CORE_DPLL)
   {
      if ( (in_nConf == CORE_CFG2A) || (in_nConf == CORE_CFG3) )
      {
         if (in_nSysClk == 0)
         {  /*12MHz*/
          	DPLL_MULT_VALUE = 332;
            DPLL_DIV_VALUE = 11;
  	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 1)
         {  /*13MHz*/
           	DPLL_MULT_VALUE = 332;
            DPLL_DIV_VALUE = 12;
            DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 2)
         {  /*19.2MHz*/
           	DPLL_MULT_VALUE = 242;
            DPLL_DIV_VALUE = 13;
            DPLL_FREQ_SEL_VALUE = 0x5;
         }
         else if (in_nSysClk == 3)
         {  /*26MHz*/
           	DPLL_MULT_VALUE = 332;
            DPLL_DIV_VALUE = 25;
            DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 4)
         {  /*38.4MHz*/
           	DPLL_MULT_VALUE = 268;
            DPLL_DIV_VALUE = 30;
            DPLL_FREQ_SEL_VALUE = 0x4;
         }
      }
      if (in_nConf == CORE_CFG2B)
      {
         if (in_nSysClk == 0)
         {  /*12MHz*/
         	DPLL_MULT_VALUE = 266;
	         DPLL_DIV_VALUE = 11;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 1)
         {  /*13MHz*/
         	DPLL_MULT_VALUE = 266;
	         DPLL_DIV_VALUE = 12;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 2)
         {  /*19.2MHz*/
         	DPLL_MULT_VALUE = 277;
	         DPLL_DIV_VALUE = 19;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 3)
         {  /*26MHz*/
         	DPLL_MULT_VALUE = 266;
	         DPLL_DIV_VALUE = 25;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 4)
         {  /*38.4MHz*/
         	DPLL_MULT_VALUE = 284;
	         DPLL_DIV_VALUE = 40;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
      }
      if (in_nConf == CORE_CFG2C)
      {
         if (in_nSysClk == 0)
         {  /*12MHz*/
         	DPLL_MULT_VALUE = 200;
	         DPLL_DIV_VALUE = 11;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 1)
         {  /*13MHz*/
         	DPLL_MULT_VALUE = 200;
	         DPLL_DIV_VALUE = 12;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 2)
         {  /*19.2MHz*/
         	DPLL_MULT_VALUE = 177;
	         DPLL_DIV_VALUE = 16;
	         DPLL_FREQ_SEL_VALUE = 0x4;
         }
         else if (in_nSysClk == 3)
         {  /*26MHz*/
         	DPLL_MULT_VALUE = 200;
	         DPLL_DIV_VALUE = 25;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 4)
         {  /*38.4MHz*/
         	DPLL_MULT_VALUE = 151;
	         DPLL_DIV_VALUE = 28;
	         DPLL_FREQ_SEL_VALUE = 0x5;
         }
      }            
   } /*endif CORE_DPLL*/
   
   if (in_nDpll == MPU_DPLL)
   {
      if (in_nConf == MPU_OPP1)
      {
         if (in_nSysClk == 0)
         {  /*12MHz*/
         	DPLL_MULT_VALUE = 258;
	         DPLL_DIV_VALUE = 12;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 1)
         {  /*13MHz*/
         	DPLL_MULT_VALUE = 293;
	         DPLL_DIV_VALUE = 15;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 2)
         {  /*19.2MHz*/
         	DPLL_MULT_VALUE = 124;
	         DPLL_DIV_VALUE = 9;
	         DPLL_FREQ_SEL_VALUE = 0x7;
         }
         else if (in_nSysClk == 3)
         {  /*26MHz*/
         	DPLL_MULT_VALUE = 174;
	         DPLL_DIV_VALUE = 18;
	         DPLL_FREQ_SEL_VALUE = 0x5;
         }
         else if (in_nSysClk == 4)
         {  /*38.4MHz*/
         	DPLL_MULT_VALUE = 124;
	         DPLL_DIV_VALUE = 19;
	         DPLL_FREQ_SEL_VALUE = 0x7;
         }
      }
      else if (in_nConf == MPU_OPP2)
      {
         if (in_nSysClk == 0)
         {  /*12MHz*/
         	DPLL_MULT_VALUE = 238;
	         DPLL_DIV_VALUE = 14;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 1)
         {  /*13MHz*/
         	DPLL_MULT_VALUE = 249;
	         DPLL_DIV_VALUE = 16;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 2)
         {  /*19.2MHz*/
         	DPLL_MULT_VALUE = 248;
	         DPLL_DIV_VALUE = 24;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 3)
         {  /*26MHz*/
         	DPLL_MULT_VALUE = 249;
	         DPLL_DIV_VALUE = 33;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 4)
         {  /*38.4MHz*/
         	DPLL_MULT_VALUE = 253;
	         DPLL_DIV_VALUE = 50;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
      }
   }
   
   if (in_nDpll == IVA2_DPLL)
   {
      if (in_nConf == IVA2_OPP1)
      {
         if (in_nSysClk == 0)
         {  /*12MHz*/
         	DPLL_MULT_VALUE =195;
	         DPLL_DIV_VALUE = 14;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 1)
         {  /*13MHz*/
         	DPLL_MULT_VALUE = 156;
	         DPLL_DIV_VALUE = 12;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 2)
         {  /*19.2MHz*/
         	DPLL_MULT_VALUE = 179;
	         DPLL_DIV_VALUE = 21;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 3)
         {  /*26MHz*/
         	DPLL_MULT_VALUE = 156;
	         DPLL_DIV_VALUE = 25;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 4)
         {  /*38.4MHz*/
         	DPLL_MULT_VALUE = 118;
	         DPLL_DIV_VALUE = 28;
	         DPLL_FREQ_SEL_VALUE = 0x5;
         }
      }
      
      else if (in_nConf == IVA2_OPP2)
      {
         if (in_nSysClk == 0)
         {  /*12MHz*/
         	DPLL_MULT_VALUE =125;
	         DPLL_DIV_VALUE = 11;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 1)
         {  /*13MHz*/
         	DPLL_MULT_VALUE = 125;
	         DPLL_DIV_VALUE = 12;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 2)
         {  /*19.2MHz*/
         	DPLL_MULT_VALUE = 13;
	         DPLL_DIV_VALUE = 1;
	         DPLL_FREQ_SEL_VALUE = 0xB;
         }
         else if (in_nSysClk == 3)
         {  /*26MHz*/
         	DPLL_MULT_VALUE = 125;
	         DPLL_DIV_VALUE = 25;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
         else if (in_nSysClk == 4)
         {  /*38.4MHz*/
         	DPLL_MULT_VALUE = 153;
	         DPLL_DIV_VALUE = 46;
	         DPLL_FREQ_SEL_VALUE = 0x3;
         }
      }
   }

   return;
}

menuitem "BYPASS_CORE_DPLL"

putCoreDpllInBypass()
{
   int clken_pll_value;

   GEL_TextOut(" Putting CORE DPLL into bypass before proceeding \n");
   
   /* Put DPLL into bypass */
   clken_pll_value = *CM_CLKEN_PLL_REG;
   clken_pll_value &= ~(DPLL_ENABLE_MASK << 0);
   clken_pll_value |= (DPLL_ENABLE_BYPASS << 0); 
   *CM_CLKEN_PLL_REG = clken_pll_value;
   while ( (*CM_IDLEST_CKGEN_REG & 0x01) == 0x1 );  
}


/* EOF */








