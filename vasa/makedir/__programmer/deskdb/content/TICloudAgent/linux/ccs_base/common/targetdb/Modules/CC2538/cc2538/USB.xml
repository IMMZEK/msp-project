<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was autogenerated by Socrates Bitwise, Duolog Technologies Ltd. -->
<module id="USB" HW_revision="" XML_version="1.0" description="Register fields should be considered static unless otherwise noted as dynamic." xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="setup_parser.xsd">
    <register acronym="ADDR" width="32" description="Function address" id="ADDR" offset="0x0" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="1" end="7" rwaccess="RO" description="This bit is set by hardware when writing to this register, and is cleared by hardware when the new address becomes effective." id="UPDATE" resetval="" >
        </bitfield>
        <bitfield range="" begin="6" width="7" end="0" rwaccess="RW" description="Device address. 
The address shall be updated upon successful completion of the status stage of the SET_ADDRESS request." id="USBADDR" resetval="" >
        </bitfield>
    </register>
    <register acronym="POW" width="32" description="Power management and control register" id="POW" offset="0x4" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="1" end="7" rwaccess="RW" description="For isochronous mode IN endpoints:
When set,  the USB controller will wait for an SOF token from the time USB_CSIL.INPKTRDY is set before sending the packet. If an IN token is received before an SOF token, then a zero length data
packet will be sent." id="ISOWAITSOF" resetval="" >
        </bitfield>
        <bitfield range="" begin="6" width="3" end="4" rwaccess="RO" description="Reserved" id="Reserved7" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="1" end="3" rwaccess="RO" description="Indicates that reset signaling is present on the bus" id="RST" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="1" end="2" rwaccess="RW" description="Drives resume signaling for remote wakeup
According to the USB Specification, the resume signal must be held active for at least 1 ms and no more than 15 ms. It is recommended to keep this bit set for approximately 10 ms." id="RESUME" resetval="" >
        </bitfield>
        <bitfield range="" begin="1" width="1" end="1" rwaccess="RO" description="Indicates entry into suspend mode
Suspend mode must be enabled by setting USB_POW.SUSPENDEN
Software clears this bit by reading the USB_CIF register or by asserting USB_POW.RESUME" id="SUSPEND" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="Enables detection of and entry into suspend mode." id="SUSPENDEN" resetval="" >
        </bitfield>
    </register>
    <register acronym="IIF" width="32" description="Interrupt flags for endpoint 0 and IN endpoints 1-5" id="IIF" offset="0x8" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="2" end="6" rwaccess="RO" description="Reserved" id="Reserved8" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="1" end="5" rwaccess="RO" description="Interrupt flag for IN endpoint 5
Cleared by hardware when read" id="INEP5IF" resetval="" >
        </bitfield>
        <bitfield range="" begin="4" width="1" end="4" rwaccess="RO" description="Interrupt flag for IN endpoint 4
Cleared by hardware when read" id="INEP4IF" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="1" end="3" rwaccess="RO" description="Interrupt flag for IN endpoint 3
Cleared by hardware when read" id="INEP3IF" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="1" end="2" rwaccess="RO" description="Interrupt flag for IN endpoint 2
Cleared by hardware when read" id="INEP2IF" resetval="" >
        </bitfield>
        <bitfield range="" begin="1" width="1" end="1" rwaccess="RO" description="Interrupt flag for IN endpoint 1
Cleared by hardware when read" id="INEP1IF" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RO" description="Interrupt flag for endpoint 0
Cleared by hardware when read" id="EP0IF" resetval="" >
        </bitfield>
    </register>
    <register acronym="OIF" width="32" description="Interrupt flags for OUT endpoints 1-5" id="OIF" offset="0x10" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="2" end="6" rwaccess="RO" description="Reserved" id="Reserved8" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="1" end="5" rwaccess="RO" description="Interrupt flag for OUT endpoint 5
Cleared by hardware when read" id="OUTEP5IF" resetval="" >
        </bitfield>
        <bitfield range="" begin="4" width="1" end="4" rwaccess="RO" description="Interrupt flag for OUT endpoint 4
Cleared by hardware when read" id="OUTEP4IF" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="1" end="3" rwaccess="RO" description="Interrupt flag for OUT endpoint 3
Cleared by hardware when read" id="OUTEP3IF" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="1" end="2" rwaccess="RO" description="Interrupt flag for OUT endpoint 2
Cleared by hardware when read" id="OUTEP2IF" resetval="" >
        </bitfield>
        <bitfield range="" begin="1" width="1" end="1" rwaccess="RO" description="Interrupt flag for OUT endpoint 1
Cleared by hardware when read" id="OUTEP1IF" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RO" description="Reserved" id="Reserved1" resetval="" >
        </bitfield>
    </register>
    <register acronym="CIF" width="32" description="Common USB interrupt flags" id="CIF" offset="0x18" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="4" end="4" rwaccess="RO" description="Reserved" id="Reserved8" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="1" end="3" rwaccess="RO" description="Start-of-frame interrupt flag
Cleared by hardware when read" id="SOFIF" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="1" end="2" rwaccess="RO" description="Reset interrupt flag
Cleared by hardware when read" id="RSTIF" resetval="" >
        </bitfield>
        <bitfield range="" begin="1" width="1" end="1" rwaccess="RO" description="Resume interrupt flag
Cleared by hardware when read" id="RESUMEIF" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RO" description="Suspend interrupt flag
Cleared by hardware when read" id="SUSPENDIF" resetval="" >
        </bitfield>
    </register>
    <register acronym="IIE" width="32" description="Interrupt enable mask for IN endpoints 1-5 and endpoint 0" id="IIE" offset="0x1c" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="2" end="6" rwaccess="RO" description="Reserved" id="Reserved8" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="1" end="5" rwaccess="RW" description="Interrupt enable for IN endpoint 5
0: Interrupt disabled
1: Interrupt enabled" id="INEP5IE" resetval="" >
        </bitfield>
        <bitfield range="" begin="4" width="1" end="4" rwaccess="RW" description="Interrupt enable for IN endpoint 4
0: Interrupt disabled
1: Interrupt enabled" id="INEP4IE" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="1" end="3" rwaccess="RW" description="Interrupt enable for IN endpoint 3
0: Interrupt disabled
1: Interrupt enabled" id="INEP3IE" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="1" end="2" rwaccess="RW" description="Interrupt enable for IN endpoint 2
0: Interrupt disabled
1: Interrupt enabled" id="INEP2IE" resetval="" >
        </bitfield>
        <bitfield range="" begin="1" width="1" end="1" rwaccess="RW" description="Interrupt enable for IN endpoint 1
0: Interrupt disabled
1: Interrupt enabled" id="INEP1IE" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="Interrupt enable for endpoint 0
0: Interrupt disabled
1: Interrupt enabled" id="EP0IE" resetval="" >
        </bitfield>
    </register>
    <register acronym="OIE" width="32" description="Interrupt enable mask for OUT endpoints 1-5" id="OIE" offset="0x24" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="2" end="6" rwaccess="RO" description="Reserved" id="reserved8" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="1" end="5" rwaccess="RW" description="Interrupt enable for OUT endpoint 5
0: Interrupt disabled
1: Interrupt enabled" id="OUTEP5IE" resetval="" >
        </bitfield>
        <bitfield range="" begin="4" width="1" end="4" rwaccess="RW" description="Interrupt enable for OUT endpoint 4
0: Interrupt disabled
1: Interrupt enabled" id="OUTEP4IE" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="1" end="3" rwaccess="RW" description="Interrupt enable for OUT endpoint 3
0: Interrupt disabled
1: Interrupt enabled" id="OUTEP3IE" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="1" end="2" rwaccess="RW" description="Interrupt enable for OUT endpoint 2
0: Interrupt disabled
1: Interrupt enabled" id="OUTEP2IE" resetval="" >
        </bitfield>
        <bitfield range="" begin="1" width="1" end="1" rwaccess="RW" description="Interrupt enable for OUT endpoint 1
0: Interrupt disabled
1: Interrupt enabled" id="OUTEP1IE" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RO" description="Reserved" id="Reserved1" resetval="" >
        </bitfield>
    </register>
    <register acronym="CIE" width="32" description="Common USB interrupt enable mask" id="CIE" offset="0x2c" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="4" end="4" rwaccess="RO" description="Reserved" id="Reserved8" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="1" end="3" rwaccess="RW" description="Start-of-frame interrupt enable
0: Interrupt disabled
1: Interrupt enabled" id="SOFIE" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="1" end="2" rwaccess="RW" description="Reset interrupt enable
0: Interrupt disabled
1: Interrupt enabled" id="RSTIE" resetval="" >
        </bitfield>
        <bitfield range="" begin="1" width="1" end="1" rwaccess="RW" description="Resume interrupt enable
0: Interrupt disabled
1: Interrupt enabled" id="RESUMEIE" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="Suspend interrupt enable
0: Interrupt disabled
1: Interrupt enabled" id="SUSPENDIE" resetval="" >
        </bitfield>
    </register>
    <register acronym="FRML" width="32" description="Frame number (low byte)" id="FRML" offset="0x30" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="8" end="0" rwaccess="RO" description="Bits 7:0 of the 11-bit frame number
The frame number is only updated upon successful reception of SOF tokens" id="FRAMEL" resetval="" >
        </bitfield>
    </register>
    <register acronym="FRMH" width="32" description="Frame number (high byte)" id="FRMH" offset="0x34" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="5" end="3" rwaccess="RO" description="Reserved" id="Reserved8" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="3" end="0" rwaccess="RO" description="Bits 10:8 of the 11-bit frame number
The frame number is only updated upon successful reception of SOF tokens" id="FRAMEH" resetval="" >
        </bitfield>
    </register>
    <register acronym="INDEX" width="32" description="Index register for selecting the endpoint status and control registers" id="INDEX" offset="0x38" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="4" end="4" rwaccess="RO" description="Reserved" id="Reserved8" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="4" end="0" rwaccess="RW" description="Index of the currently selected endpoint
The index is set to 0 to enable access to endpoint 0 control and status registers
The index is set to 1, 2, 3, 4 or 5 to enable access to IN/OUT endpoint 1, 2, 3, 4 or 5 control and status registers, respectively " id="USBINDEX" resetval="" >
        </bitfield>
    </register>
    <register acronym="CTRL" width="32" description="USB peripheral control register" id="CTRL" offset="0x3c" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="1" end="7" rwaccess="RO" description="PLL lock status. The PLL is locked when USB_CTRL.PLLLOCKED is 1." id="PLLLOCKED" resetval="" >
        </bitfield>
        <bitfield range="" begin="6" width="4" end="3" rwaccess="RO" description="Reserved" id="Reserved7" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="1" end="2" rwaccess="RO" description="Reserved." id="Reserved3" resetval="" >
        </bitfield>
        <bitfield range="" begin="1" width="1" end="1" rwaccess="RW" description="48 MHz USB PLL enable
When this bit is set, the 48 MHz PLL is started. Software must avoid access to other USB registers before the PLL has locked; that is, USB_CTRL.PLLLOCKED is 1. This bit can be set only when USB_CTRL.USBEN is 1.
The PLL must be disabled before entering PM1 when suspended, and must be re-enabled when resuming operation." id="PLLEN" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="USB enable
The USB controller is reset when this bit is cleared" id="USBEN" resetval="" >
        </bitfield>
    </register>
    <register acronym="MAXI" width="32" description="Indexed register:
For USB_INDEX = 1-5: Maximum packet size for IN endpoint {1-5}" id="MAXI" offset="0x40" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="8" end="0" rwaccess="RW" description="Maximum packet size, in units of 8 bytes, for the selected IN endpoint
The value of this register should match the wMaxPacketSize field in the standard endpoint descriptor for the endpoint. The value must not exceed the available memory." id="USBMAXI" resetval="" >
        </bitfield>
    </register>
    <register acronym="CS0_CSIL" width="32" description="Indexed register:
For USB_INDEX = 0: Endpoint 0 control and status
For USB_INDEX = 1-5: IN endpoint {1-5} control and status (low byte)                                         " id="CS0_CSIL" offset="0x44" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="1" end="7" rwaccess="RW" description="USB_CS0.CLRSETUPEND [RW]:
Software sets this bit to clear the USB_CS0.SETUPEND bit. It is cleared automatically.

USB_CSIL.Reserved [RO]:
Reserved" id="CLRSETUPEND_or_Reserved8" resetval="" >
        </bitfield>
        <bitfield range="" begin="6" width="1" end="6" rwaccess="RW" description="USB_CS0.CLROUTPKTRDY [RW]:
Software sets this bit to clear the USB_CS0.OUTPKTRDY bit. It is cleared automatically.

USB_CSIL.CLRDATATOG [RW]:
Software sets this bit to reset the IN endpoint data toggle to 0." id="CLROUTPKTRDY_or_CLRDATATOG" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="1" end="5" rwaccess="RW" description="USB_CS0.SENDSTALL [RW]:
Software sets this bit to terminate the current transaction with a STALL handshake. The bit is cleared automatically when the STALL handshake has been transmitted.

USB_CSIL.SENTSTALL [RW]:
For bulk/interrupt mode IN endpoints:
This bit is set when a STALL handshake is transmitted. The FIFO is flushed and the USB_CSIL.INPKTRDY bit cleared. Software should clear this bit." id="SENDSTALL_or_SENTSTALL" resetval="" >
        </bitfield>
        <bitfield range="" begin="4" width="1" end="4" rwaccess="RO" description="USB_CS0.SETUPEND [RO]:
This bit is set when a control transaction ends before the USB_CS0.DATAEND bit has been set. An interrupt is generated and the FIFO flushed at this time. Software clears this bit by setting USB_CS0.CLRSETUPEND.

CSIL.SENDSTALL [RW]:
For bulk/interrupt mode IN endpoints: 
Software sets this bit to issue a STALL handshake. 
Software clears this bit to terminate the stall condition." id="SETUPEND_or_SENDSTALL" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="1" end="3" rwaccess="RW" description="USB_CS0.DATAEND [RW]:
This bit is used to signal the end of the data stage, and must be set:
1. When the last data packet is loaded and USB_CS0.INPKTRDY is set.
2. When the last data packet is unloaded and USB_CS0.CLROUTPKTRDY is set.
3. When USB_CS0.INPKTRDY is set to send a zero-length packet.
The USB controller clears this bit automatically.

USB_CSIL.FLUSHPACKET [RW]:
Software sets this bit to flush the next packet to be transmitted from the IN endpoint FIFO. The FIFO pointer is reset and the USB_CSIL.INPKTRDY bit is cleared. 
Note: If the FIFO contains two packets, USB_CSIL.FLUSHPACKET will need to be set twice to completely clear the FIFO." id="DATAEND_or_FLUSHPACKET" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="1" end="2" rwaccess="RW" description="USB_CS0.SENTSTALL [RW]: 
This bit is set when a STALL handshake is sent. An interrupt is generated is generated when this bit is set. Software must clear this bit.

USB_CSIL.UNDERRUN [RW]: 
In isochronous mode, this bit is set when a zero length data packet is sent after receiving an IN token with USB_CSIL.INPKTRDY not set. 
In bulk/interrupt mode, this bit is set when a NAK is returned in
response to an IN token. Software should clear this bit." id="SENTSTALL_or_UNDERRUN" resetval="" >
        </bitfield>
        <bitfield range="" begin="1" width="1" end="1" rwaccess="RW" description="USB_CS0. INPKTRDY [RW]: 
Software sets this bit after loading a data packet into the endpoint 0 FIFO. It is cleared automatically when the data packet has been transmitted. An interrupt is generated when the bit is cleared.

USB_CSIL.PKTPRESENT [RO]:
This bit is set when there is at least one packet in the IN endpoint FIFO." id="INPKTRDY_or_PKTPRESENT" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RO" description="USB_CS0.OUTPKTRDY [RO]:
Endpoint 0 data packet received
An interrupt request (EP0) is generated if the interrupt is enabled. Software must read the endpoint 0 FIFO empty, and clear this bit by setting USB_CS0.CLROUTPKTRDY

USB_CSIL.INPKTRDY [RW]:
IN endpoint {1-5} packet transfer pending
Software sets this bit after loading a data packet into the FIFO. It is cleared automatically when a data packet has been transmitted. An interrupt is generated (if enabled) when the bit is cleared.
When using double-buffering, the bit is cleared immediately if the other FIFO is empty." id="OUTPKTRDY_or_INPKTRDY" resetval="" >
        </bitfield>
    </register>
    <register acronym="CSIH" width="32" description="Indexed register:
For USB_INDEX = 1-5: IN endpoint {1-5} control and status (high byte)                                         " id="CSIH" offset="0x48" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="1" end="7" rwaccess="RW" description="If set by software, the USB_CSIL.INPKTRDY bit is automatically set when a data packet of maximum size (specified by USBMAXI) is loaded into the IN endpoint FIFO. If a packet of less than the maximum packet size is loaded, then USB_CSIL.INPKTRDY will have to be set manually." id="AUTISET" resetval="" >
        </bitfield>
        <bitfield range="" begin="6" width="1" end="6" rwaccess="RW" description="Selects IN endpoint type:
0: Bulk/interrupt
1: Isochronous" id="ISO" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="1" end="5" rwaccess="RW" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved5" resetval="" >
        </bitfield>
        <bitfield range="" begin="4" width="1" end="4" rwaccess="RW" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved4" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="1" end="3" rwaccess="RW" description="Software sets this bit to force the IN endpoint&apos;s data toggle to switch after each data packet is sent regardless of whether an ACK was received. This can be used by interrupt IN endpoints which are
used to communicate rate feedback for isochronous endpoints." id="FORCEDATATOG" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="2" end="1" rwaccess="RO" description="Reserved" id="Reserved2" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="IN endpoint FIFO double-buffering enable:
0: Double buffering disabled
1: Double buffering enabled" id="INDBLBUF" resetval="" >
        </bitfield>
    </register>
    <register acronym="MAXO" width="32" description="Indexed register:
For USB_INDEX = 1-5: Maximum packet size for OUT endpoint {1-5}" id="MAXO" offset="0x4c" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="8" end="0" rwaccess="RW" description="Maximum packet size, in units of 8 bytes, for the selected OUT endpoint
The value of this register should match the wMaxPacketSize field in the standard endpoint descriptor for the endpoint. The value must not exceed the available memory." id="USBMAXO" resetval="" >
        </bitfield>
    </register>
    <register acronym="CSOL" width="32" description="Indexed register:
For USB_INDEX = 1-5: OUT endpoint {1-5} control and status (low byte)" id="CSOL" offset="0x50" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="1" end="7" rwaccess="RW" description="Software sets this bit to reset the endpoint data toggle to 0." id="CLRDATATOG" resetval="" >
        </bitfield>
        <bitfield range="" begin="6" width="1" end="6" rwaccess="RW" description="This bit is set when a STALL handshake is transmitted. An interrupt is generated when this bit is set. Software should clear this bit. " id="SENTSTALL" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="1" end="5" rwaccess="RW" description="For bulk/interrupt mode OUT endpoints:
Software sets this bit to issue a STALL handshake. 
Software clears this bit to terminate the stall condition." id="SENDSTALL" resetval="" >
        </bitfield>
        <bitfield range="" begin="4" width="1" end="4" rwaccess="RW" description="Software sets this bit to flush the next packet to be read from the endpoint OUT FIFO.
Note: If the FIFO contains two packets, USB_CSOL.FLUSHPACKET will need to be set twice to completely clear the FIFO." id="FLUSHPACKET" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="1" end="3" rwaccess="RO" description="For isochronous mode OUT endpoints:
This bit is set when USB_CSOL.OUTPKTRDY is set if the data packet has a CRC or bit-stuff error. It is cleared automatically when USB_CSOL.OUTPKTRDY is cleared." id="DATAERROR" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="1" end="2" rwaccess="RW" description="For isochronous mode OUT endpoints:
This bit is set when an OUT packet cannot be loaded into the OUT endpoint FIFO. Firmware should clear this bit." id="OVERRUN" resetval="" >
        </bitfield>
        <bitfield range="" begin="1" width="1" end="1" rwaccess="RO" description="This bit is set when no more packets can be loaded into the OUT endpoint FIFO." id="FIFOFULL" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="This bit is set when a data packet has been received. Software should clear this bit when the packet has been unloaded from the OUT endpoint FIFO. An interrupt is generated when the bit is set." id="OUTPKTRDY" resetval="" >
        </bitfield>
    </register>
    <register acronym="CSOH" width="32" description="Indexed register:
For USB_INDEX = 1-5: OUT endpoint {1-5} control and status (high byte)" id="CSOH" offset="0x54" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="1" end="7" rwaccess="RW" description="If software sets this bit, the USB_CSOL.OUTPKTRDY bit will be automatically cleared when a packet of maximum size (specified by USB_MAXO) has been unloaded from the OUT FIFO. When packets of less than the maximum packet size are unloaded, USB_CSOL.OUTPKTRDY will have to be cleared manually." id="AUTOCLEAR" resetval="" >
        </bitfield>
        <bitfield range="" begin="6" width="1" end="6" rwaccess="RW" description="Selects OUT endpoint type:
0: Bulk/interrupt
1: Isochronous" id="ISO" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="1" end="5" rwaccess="RW" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved5" resetval="" >
        </bitfield>
        <bitfield range="" begin="4" width="1" end="4" rwaccess="RW" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved4" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="3" end="1" rwaccess="RO" description="Reserved" id="Reserved1" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="OUT endpoint FIFO double-buffering enable:
0: Double buffering disabled
1: Double buffering enabled" id="OUTDBLBUF" resetval="" >
        </bitfield>
    </register>
    <register acronym="CNT0_CNTL" width="32" description="Indexed register:
For USB_INDEX = 0: Number of received bytes in the endpoint 0 FIFO 
For USB_INDEX = 1-5: Number of received bytes in the OUT endpoint {1-5} FIFO (low byte)" id="CNT0_CNTL" offset="0x58" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="8" end="0" rwaccess="RO" description="USB_CS0.FIFOCNT (USBINDEX = 0) [RO]:
Number of bytes received in the packet in the endpoint 0 FIFO
Valid only when USB_CS0.OUTPKTRDY is set

USB_CSIL.FIFOCNTL (USBINDEX = 1 to 5) [RW]:
Bits 7:0 of the of the number of bytes received in the packet in the OUT endpoint {1-5} FIFO
Valid only when USB_CSOL.OUTPKTRDY is set" id="FIFOCNT_or_FIFOCNTL" resetval="" >
        </bitfield>
    </register>
    <register acronym="CNTH" width="32" description="Indexed register:
For USB_INDEX = 1-5: Number of received in the OUT endpoint {1-5} FIFO (high byte)" id="CNTH" offset="0x5c" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="5" end="3" rwaccess="RO" description="Reserved" id="Reserved8" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="3" end="0" rwaccess="RO" description="Bits 10:8 of the of the number of bytes received in the packet in the OUT endpoint {1-5} FIFO
Valid only when USB_CSOL.OUTPKTRDY is set" id="FIFOCNTH" resetval="" >
        </bitfield>
    </register>
    <register acronym="F0" width="32" description="Endpoint 0 FIFO" id="F0" offset="0x80" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="8" end="0" rwaccess="RW" description="Endpoint 0 FIFO
Reading this register unloads one byte from the endpoint 0 FIFO.
Writing to this register loads one byte into the endpoint 0 FIFO.
The FIFO memory for EP0 is used for incoming and outgoing data packets." id="USBF0" resetval="" >
        </bitfield>
    </register>
    <register acronym="F1" width="32" description="IN/OUT endpoint 1 FIFO" id="F1" offset="0x88" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="8" end="0" rwaccess="RW" description="Endpoint 1 FIFO register
Reading this register unloads one byte from the EP1 OUT FIFO. Writing to this register loads one byte into the EP1 IN FIFO." id="USBF1" resetval="" >
        </bitfield>
    </register>
    <register acronym="F2" width="32" description="IN/OUT endpoint 2 FIFO" id="F2" offset="0x90" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="8" end="0" rwaccess="RW" description="Endpoint 2 FIFO register
Reading this register unloads one byte from the EP2 OUT FIFO. Writing to this register loads one byte into the EP2 IN FIFO." id="USBF2" resetval="" >
        </bitfield>
    </register>
    <register acronym="F3" width="32" description="IN/OUT endpoint 3 FIFO" id="F3" offset="0x98" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="8" end="0" rwaccess="RW" description="Endpoint 3 FIFO register
Reading this register unloads one byte from the EP3 OUT FIFO. Writing to this register loads one byte into the EP3 IN FIFO." id="USBF3" resetval="" >
        </bitfield>
    </register>
    <register acronym="F4" width="32" description="IN/OUT endpoint 4 FIFO" id="F4" offset="0xa0" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="8" end="0" rwaccess="RW" description="Endpoint 4 FIFO register
Reading this register unloads one byte from the EP4 OUT FIFO. Writing to this register loads one byte into the EP4 IN FIFO." id="USBF4" resetval="" >
        </bitfield>
    </register>
    <register acronym="F5" width="32" description="IN/OUT endpoint 5 FIFO" id="F5" offset="0xa8" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Reserved" id="Reserved32" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="8" end="0" rwaccess="RW" description="Endpoint 5 FIFO register
Reading this register unloads one byte from the EP5 OUT FIFO. Writing to this register loads one byte into the EP5 IN FIFO." id="USBF5" resetval="" >
        </bitfield>
    </register>
</module>
