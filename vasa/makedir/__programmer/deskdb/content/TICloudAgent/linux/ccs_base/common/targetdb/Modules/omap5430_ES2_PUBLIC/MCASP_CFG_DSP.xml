<module name="MCASP_CFG_DSP" acronym="" XML_version="1.0" HW_revision="n/a" description="">
  <register id="MCASP_PID" acronym="MCASP_PID" offset="0x0" width="32" description="Peripheral identification register">
    <bitfield id="REVISION" width="32" begin="31" end="0" resetval="TI internal data" description="IP revision" range="" rwaccess="R"/>
  </register>
  <register id="MCASP_SYSCONFIG" acronym="MCASP_SYSCONFIG" offset="0x4" width="32" description="Power idle module configuration register.">
    <bitfield id="RESERVED" width="30" begin="31" end="2" resetval="0x0000000" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="IDLE_MODE" width="2" begin="1" end="0" resetval="0x2" description="0x0: Force-idle mode 0x1: No-idle mode 0x2: Smart-idle mode - default state 0x3: Reserved" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_PFUNC" acronym="MCASP_PFUNC" offset="0x10" width="32" description="Specifies the function of the pins as either a MCASP pin or a GPIO pin">
    <bitfield id="AFSR" width="1" begin="31" end="31" resetval="0" description="Determines if AFSR pin (device level abemcasp_afsr signal) functions as MCASP or GPIO." range="" rwaccess="RW">
      <bitenum value="0" id="Pin_functions_as_MCASP_pin" token="AFSR_0" description="Pin functions as MCASP pin"/>
      <bitenum value="1" id="Pin_functions_as_GIO_pin" token="AFSR_1" description="Pin functions as GIO pin"/>
    </bitfield>
    <bitfield id="AHCLKR" width="1" begin="30" end="30" resetval="0" description="Determines if AHCLKR pin (device level abemcasp_ahclkr signal) functions as MCASP or GPIO." range="" rwaccess="RW">
      <bitenum value="0" id="Pin_functions_as_MCASP_pin" token="AHCLKR_0" description="Pin functions as MCASP pin"/>
      <bitenum value="1" id="Pin_functions_as_GIO_pin" token="AHCLKR_1" description="Pin functions as GIO pin"/>
    </bitfield>
    <bitfield id="ACLKR" width="1" begin="29" end="29" resetval="0" description="Determines if ACLKR pin (device level abemcasp_aclkr signal) functions as MCASP or GPIO." range="" rwaccess="RW">
      <bitenum value="0" id="Pin_functions_as_MCASP_pin" token="ACLKR_0" description="Pin functions as MCASP pin"/>
      <bitenum value="1" id="Pin_functions_as_GIO_pin" token="ACLKR_1" description="Pin functions as GIO pin"/>
    </bitfield>
    <bitfield id="AFSX" width="1" begin="28" end="28" resetval="0" description="Determines if AFSX pin (device level abemcasp_afsx signal) functions as MCASP or GPIO." range="" rwaccess="RW">
      <bitenum value="0" id="GPIO" token="AFSX_0" description="Pin functions as MCASP pin"/>
      <bitenum value="1" id="Pin_functions_as_GIO_pin" token="AFSX_1" description="Pin functions as GIO pin"/>
    </bitfield>
    <bitfield id="AHCLKX" width="1" begin="27" end="27" resetval="0" description="Determines if AHCLKX pin (device level abemcasp_ahclkx signal) functions as MCASP or GPIO." range="" rwaccess="RW">
      <bitenum value="0" id="GPIO" token="AHCLKX_0" description="Pin functions as MCASP pin"/>
      <bitenum value="1" id="Pin_functions_as_GIO_pin" token="AHCLKX_1" description="Pin functions as GIO pin"/>
    </bitfield>
    <bitfield id="ACLKX" width="1" begin="26" end="26" resetval="0" description="Determines if ACLKX pin (device level abemcasp_aclkx signal) functions as MCASP or GPIO." range="" rwaccess="RW">
      <bitenum value="0" id="GPIO" token="ACLKX_0" description="Pin functions as MCASP pin"/>
      <bitenum value="1" id="Pin_functions_as_GIO_pin" token="ACLKX_1" description="Pin functions as GIO pin"/>
    </bitfield>
    <bitfield id="AMUTE" width="1" begin="25" end="25" resetval="0" description="Determines if AMUTE pin (device level abemcasp_amuteout signal) functions as MCASP or GPIO." range="" rwaccess="RW">
      <bitenum value="0" id="GPIO" token="AMUTE_0" description="Pin functions as MCASP pin"/>
      <bitenum value="1" id="Pin_functions_as_GIO_pin" token="AMUTE_1" description="Pin functions as GIO pin"/>
    </bitfield>
    <bitfield id="RESERVED" width="21" begin="24" end="4" resetval="0x000" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="AXR3" width="1" begin="3" end="3" resetval="0" description="Determines if AXR3 pin (device level abemcasp_axr3 signal) functions as MCASP or GPIO." range="" rwaccess="RW">
      <bitenum value="0" id="Pin_functions_as_MCASP_pin" token="AXR3_0" description="Pin functions as MCASP pin"/>
      <bitenum value="1" id="Pin_functions_as_GIO_pin" token="AXR3_1" description="Pin functions as GIO pin"/>
    </bitfield>
    <bitfield id="AXR2" width="1" begin="2" end="2" resetval="0" description="Determines if AXR2 pin (device level abemcasp_axr2 signal) functions as MCASP or GPIO." range="" rwaccess="RW">
      <bitenum value="0" id="Pin_functions_as_MCASP_pin" token="AXR2_0" description="Pin functions as MCASP pin"/>
      <bitenum value="1" id="Pin_functions_as_GIO_pin" token="AXR2_1" description="Pin functions as GIO pin"/>
    </bitfield>
    <bitfield id="AXR1" width="1" begin="1" end="1" resetval="0" description="Determines if AXR1 pin (device level abemcasp_axr1 signal) functions as MCASP or GPIO." range="" rwaccess="RW">
      <bitenum value="0" id="Pin_functions_as_MCASP_pin" token="AXR1_0" description="Pin functions as MCASP pin"/>
      <bitenum value="1" id="Pin_functions_as_GIO_pin" token="AXR1_1" description="Pin functions as GIO pin"/>
    </bitfield>
    <bitfield id="AXR0" width="1" begin="0" end="0" resetval="0" description="Determines if AXR0 pin (device level abemcasp_axr signal) functions as MCASP or GPIO." range="" rwaccess="RW">
      <bitenum value="0" id="GPIO" token="AXR0_0" description="Pin functions as MCASP pin"/>
      <bitenum value="1" id="Pin_functions_as_GIO_pin" token="AXR0_1" description="Pin functions as GIO pin"/>
    </bitfield>
  </register>
  <register id="MCASP_PDIR" acronym="MCASP_PDIR" offset="0x14" width="32" description="Pin direction register - specifies the direction of the MCASP pins as either an input or an output pin.">
    <bitfield id="AFSR" width="1" begin="31" end="31" resetval="0" description="Determines if AFSR pin (device level abemcasp_afsr signal) functions as an input or output." range="" rwaccess="RW">
      <bitenum value="0" id="Input" token="AFSR_0" description="Input"/>
      <bitenum value="1" id="Output" token="AFSR_1" description="Output"/>
    </bitfield>
    <bitfield id="AHCLKR" width="1" begin="30" end="30" resetval="0" description="Determines if AHCLKR pin (device level abemcasp_ahclkr signal) functions as an input or output." range="" rwaccess="RW">
      <bitenum value="0" id="Input" token="AHCLKR_0" description="Input"/>
      <bitenum value="1" id="Output" token="AHCLKR_1" description="Output"/>
    </bitfield>
    <bitfield id="ACLKR" width="1" begin="29" end="29" resetval="0" description="Determines if ACLKR pin (device level abemcasp_aclkr signal) functions as an input or output." range="" rwaccess="RW">
      <bitenum value="0" id="Input" token="ACLKR_0" description="Input"/>
      <bitenum value="1" id="Output" token="ACLKR_1" description="Output"/>
    </bitfield>
    <bitfield id="AFSX" width="1" begin="28" end="28" resetval="0" description="Determines if AFSX pin (device level abemcasp_afsx signal) functions as an input or output." range="" rwaccess="RW">
      <bitenum value="0" id="OUTPUT" token="AFSX_0" description="Input"/>
      <bitenum value="1" id="Output" token="AFSX_1" description="Output"/>
    </bitfield>
    <bitfield id="AHCLKX" width="1" begin="27" end="27" resetval="0" description="Determines if AHCLKX pin (device level abemcasp_ahclkx signal) functions as an input or output." range="" rwaccess="RW">
      <bitenum value="0" id="OUTPUT" token="AHCLKX_0" description="Input"/>
      <bitenum value="1" id="Output" token="AHCLKX_1" description="Output"/>
    </bitfield>
    <bitfield id="ACLKX" width="1" begin="26" end="26" resetval="0" description="Determines if ACLKX pin (device level abemcasp_aclkx signal) functions as an input or output." range="" rwaccess="RW">
      <bitenum value="0" id="OUTPUT" token="ACLKX_0" description="Input"/>
      <bitenum value="1" id="Output" token="ACLKX_1" description="Output"/>
    </bitfield>
    <bitfield id="AMUTE" width="1" begin="25" end="25" resetval="0" description="Determines if AMUTE pin (device level abemcasp_amuteout signal) functions as an input or output." range="" rwaccess="RW">
      <bitenum value="0" id="OUTPUT" token="AMUTE_0" description="Input"/>
      <bitenum value="1" id="Output" token="AMUTE_1" description="Output"/>
    </bitfield>
    <bitfield id="RESERVED" width="21" begin="24" end="4" resetval="0x000" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="AXR3" width="1" begin="3" end="3" resetval="0" description="Determines if AXR3 pin (device level abemcasp_axr3 signal) functions as an input or output." range="" rwaccess="RW">
      <bitenum value="0" id="Input" token="AXR3_0" description="Input"/>
      <bitenum value="1" id="Output" token="AXR3_1" description="Output"/>
    </bitfield>
    <bitfield id="AXR2" width="1" begin="2" end="2" resetval="0" description="Determines if AXR2 pin (device level abemcasp_axr2 signal) functions as an input or output." range="" rwaccess="RW">
      <bitenum value="0" id="Input" token="AXR2_0" description="Input"/>
      <bitenum value="1" id="Output" token="AXR2_1" description="Output"/>
    </bitfield>
    <bitfield id="AXR1" width="1" begin="1" end="1" resetval="0" description="Determines if AXR1 pin (device level abemcasp_axr1 signal) functions as an input or output." range="" rwaccess="RW">
      <bitenum value="0" id="Input" token="AXR1_0" description="Input"/>
      <bitenum value="1" id="Output" token="AXR1_1" description="Output"/>
    </bitfield>
    <bitfield id="AXR0" width="1" begin="0" end="0" resetval="0" description="Determines if AXR0 pin (device level abemcasp_axr signal) functions as an input or output." range="" rwaccess="RW">
      <bitenum value="0" id="OUTPUT" token="AXR0_0" description="Input"/>
      <bitenum value="1" id="Output" token="AXR0_1" description="Output"/>
    </bitfield>
  </register>
  <register id="MCASP_PDOUT" acronym="MCASP_PDOUT" offset="0x18" width="32" description="Pin data output register - holds a value for data out at all times, and may be read back at all times. The value held by is not affected by writing to and . However, the data value in is driven out onto the MCASP pin only if the corresponding bit in is set to 1 (GPIO function) and the corresponding bit in is set to 1 (output).">
    <bitfield id="AFSR" width="1" begin="31" end="31" resetval="0" description="Determines drive on AFSR output pin when the correspondingMCASP_PFUNC[31] and MCASP_PDIR[31] bits are set to 1." range="" rwaccess="RW">
      <bitenum value="0" id="The_pin_drives_low." token="AFSR_0" description="The pin drives low."/>
      <bitenum value="1" id="The_pin_drives_high." token="AFSR_1" description="The pin drives high."/>
    </bitfield>
    <bitfield id="AHCLKR" width="1" begin="30" end="30" resetval="0" description="Determines drive on AHCLKR output pin when the correspondingMCASP_PFUNC[30] and MCASP_PDIR[30] bits are set to 1." range="" rwaccess="RW">
      <bitenum value="0" id="The_pin_drives_low." token="AHCLKR_0" description="The pin drives low."/>
      <bitenum value="1" id="The_pin_drives_high." token="AHCLKR_1" description="The pin drives high."/>
    </bitfield>
    <bitfield id="ACLKR" width="1" begin="29" end="29" resetval="0" description="Determines drive on ACLKR output pin when the correspondingMCASP_PFUNC[29] and MCASP_PDIR[29] bits are set to 1" range="" rwaccess="RW">
      <bitenum value="0" id="The_pin_drives_low." token="ACLKR_0" description="The pin drives low."/>
      <bitenum value="1" id="The_pin_drives_high." token="ACLKR_1" description="The pin drives high."/>
    </bitfield>
    <bitfield id="AFSX" width="1" begin="28" end="28" resetval="0" description="Determines drive on AFSX output pin when the correspondingMCASP_PFUNC[28] and MCASP_PDIR[28] bits are set to 1." range="" rwaccess="RW">
      <bitenum value="0" id="DRV1" token="AFSX_0" description="The pin drives low."/>
      <bitenum value="1" id="The_pin_drives_high." token="AFSX_1" description="The pin drives high."/>
    </bitfield>
    <bitfield id="AHCLKX" width="1" begin="27" end="27" resetval="0" description="Determines drive on AHCLKX output pin when the correspondingMCASP_PFUNC[27] and MCASP_PDIR[27] bits are set to 1." range="" rwaccess="RW">
      <bitenum value="0" id="DRV1" token="AHCLKX_0" description="The pin drives low."/>
      <bitenum value="1" id="The_pin_drives_high." token="AHCLKX_1" description="The pin drives high."/>
    </bitfield>
    <bitfield id="ACLKX" width="1" begin="26" end="26" resetval="0" description="Determines drive on ACLKX output pin when the correspondingMCASP_PFUNC[26] and MCASP_PDIR[26] bits are set to 1" range="" rwaccess="RW">
      <bitenum value="0" id="DRV1" token="ACLKX_0" description="The pin drives low."/>
      <bitenum value="1" id="The_pin_drives_high." token="ACLKX_1" description="The pin drives high."/>
    </bitfield>
    <bitfield id="AMUTE" width="1" begin="25" end="25" resetval="0" description="Determines drive on AMUTE output pin when the correspondingMCASP_PFUNC[25] and MCASP_PDIR[25] bits are set to 1." range="" rwaccess="RW">
      <bitenum value="0" id="DRV1" token="AMUTE_0" description="The pin drives low."/>
      <bitenum value="1" id="The_pin_drives_high." token="AMUTE_1" description="The pin drives high."/>
    </bitfield>
    <bitfield id="RESERVED" width="21" begin="24" end="4" resetval="0x000" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="AXR3" width="1" begin="3" end="3" resetval="0" description="Determines drive on AXR3 output pin when the correspondingMCASP_PFUNC[3] and MCASP_PDIR[3] bits are set to 1." range="" rwaccess="RW">
      <bitenum value="0" id="The_pin_drives_low." token="AXR3_0" description="The pin drives low."/>
      <bitenum value="1" id="The_pin_drives_high." token="AXR3_1" description="The pin drives high."/>
    </bitfield>
    <bitfield id="AXR2" width="1" begin="2" end="2" resetval="0" description="Determines drive on AXR2 output pin when the correspondingMCASP_PFUNC[2] and MCASP_PDIR[2] bits are set to 1." range="" rwaccess="RW">
      <bitenum value="0" id="The_pin_drives_low." token="AXR2_0" description="The pin drives low."/>
      <bitenum value="1" id="The_pin_drives_high." token="AXR2_1" description="The pin drives high."/>
    </bitfield>
    <bitfield id="AXR1" width="1" begin="1" end="1" resetval="0" description="Determines drive on AXR1 output pin when the correspondingMCASP_PFUNC[1] and MCASP_PDIR[1] bits are set to 1." range="" rwaccess="RW">
      <bitenum value="0" id="The_pin_drives_low." token="AXR1_0" description="The pin drives low."/>
      <bitenum value="1" id="The_pin_drives_high." token="AXR1_1" description="The pin drives high."/>
    </bitfield>
    <bitfield id="AXR0" width="1" begin="0" end="0" resetval="0" description="Determines drive on AXR0 output pin when the correspondingMCASP_PFUNC[0] and MCASP_PDIR[0] bits are set to 1." range="" rwaccess="RW">
      <bitenum value="0" id="DRV1" token="AXR0_0" description="The pin drives low."/>
      <bitenum value="1" id="The_pin_drives_high." token="AXR0_1" description="The pin drives high."/>
    </bitfield>
  </register>
  <register id="MCASP_PDIN" acronym="MCASP_PDIN" offset="0x1C" width="32" description="Pin data input register - holds the state of all the MCASP pins. allows reading the actual value of the pin, regardless of the state of and .">
    <bitfield id="AFSR" width="1" begin="31" end="31" resetval="0" description="Logic level on AFSR pin (device level abemcasp_afsr signal)." range="" rwaccess="R">
      <bitenum value="0" id="Pin_is_logic_low." token="AFSR_0" description="Pin is logic low."/>
      <bitenum value="1" id="Pin_is_logic_high." token="AFSR_1" description="Pin is logic high."/>
    </bitfield>
    <bitfield id="AHCLKR" width="1" begin="30" end="30" resetval="0" description="Logic level on AHCLKR pin (device level abemcasp_ahclkr signal)." range="" rwaccess="R">
      <bitenum value="0" id="Pin_is_logic_low." token="AHCLKR_0" description="Pin is logic low."/>
      <bitenum value="1" id="Pin_is_logic_high." token="AHCLKR_1" description="Pin is logic high."/>
    </bitfield>
    <bitfield id="ACLKR" width="1" begin="29" end="29" resetval="0" description="Logic level on ACLKR pin (device level abemcasp_aclkr signal)." range="" rwaccess="R">
      <bitenum value="0" id="Pin_is_logic_low." token="ACLKR_0" description="Pin is logic low."/>
      <bitenum value="1" id="Pin_is_logic_high." token="ACLKR_1" description="Pin is logic high."/>
    </bitfield>
    <bitfield id="AFSX" width="1" begin="28" end="28" resetval="0" description="Logic level on AFSX pin (device level abemcasp_afsx signal)." range="" rwaccess="R">
      <bitenum value="0" id="LOW" token="AFSX_0" description="Pin is logic low."/>
      <bitenum value="1" id="Pin_is_logic_high." token="AFSX_1" description="Pin is logic high."/>
    </bitfield>
    <bitfield id="AHCLKX" width="1" begin="27" end="27" resetval="0" description="Logic level on AHCLKX pin (device level abemcasp_ahclkx signal)." range="" rwaccess="R">
      <bitenum value="0" id="LOW" token="AHCLKX_0" description="Pin is logic low."/>
      <bitenum value="1" id="Pin_is_logic_high." token="AHCLKX_1" description="Pin is logic high."/>
    </bitfield>
    <bitfield id="ACLKX" width="1" begin="26" end="26" resetval="0" description="Logic level on ACLKX pin (device level abemcasp_aclkx signal)." range="" rwaccess="R">
      <bitenum value="0" id="LOW" token="ACLKX_0" description="Pin is logic low."/>
      <bitenum value="1" id="Pin_is_logic_high." token="ACLKX_1" description="Pin is logic high."/>
    </bitfield>
    <bitfield id="AMUTE" width="1" begin="25" end="25" resetval="0" description="Logic level on AMUTE pin (device level abemcasp_amuteout signal)." range="" rwaccess="R">
      <bitenum value="0" id="LOW" token="AMUTE_0" description="Pin is logic low."/>
      <bitenum value="1" id="Pin_is_logic_high." token="AMUTE_1" description="Pin is logic high."/>
    </bitfield>
    <bitfield id="RESERVED" width="21" begin="24" end="4" resetval="0x000" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="AXR3" width="1" begin="3" end="3" resetval="0" description="Logic level on AXR3 pin (device level abemcasp_axr3 signal)." range="" rwaccess="R">
      <bitenum value="0" id="Pin_is_logic_low." token="AXR3_0" description="Pin is logic low."/>
      <bitenum value="1" id="Pin_is_logic_high." token="AXR3_1" description="Pin is logic high."/>
    </bitfield>
    <bitfield id="AXR2" width="1" begin="2" end="2" resetval="0" description="Logic level on AXR2 pin (device level abemcasp_axr2 signal)." range="" rwaccess="R">
      <bitenum value="0" id="Pin_is_logic_low." token="AXR2_0" description="Pin is logic low."/>
      <bitenum value="1" id="Pin_is_logic_high." token="AXR2_1" description="Pin is logic high."/>
    </bitfield>
    <bitfield id="AXR1" width="1" begin="1" end="1" resetval="0" description="Logic level on AXR1 pin (device level abemcasp_axr1 signal)." range="" rwaccess="R">
      <bitenum value="0" id="Pin_is_logic_low." token="AXR1_0" description="Pin is logic low."/>
      <bitenum value="1" id="Pin_is_logic_high." token="AXR1_1" description="Pin is logic high."/>
    </bitfield>
    <bitfield id="AXR0" width="1" begin="0" end="0" resetval="0" description="Logic level on AXR0 pin (device level abemcasp_axr signal)." range="" rwaccess="R">
      <bitenum value="0" id="LOW" token="AXR0_0" description="Pin is logic low."/>
      <bitenum value="1" id="Pin_is_logic_high." token="AXR0_1" description="Pin is logic high."/>
    </bitfield>
  </register>
  <register id="MCASP_PDSET" acronym="MCASP_PDSET" offset="0x1C" width="32" description="The pin data set register is an alias of the pin data output register () for writes only. Writing a 1 to the bit sets the corresponding bit in and, if = 1 (GPIO function) and = 1 (output), drives a logic high on the pin.">
    <bitfield id="AFSR" width="1" begin="31" end="31" resetval="0" description="Allows the corresponding AFSR bit inMCASP_PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." range="" rwaccess="W">
      <bitenum value="0" id="No_effect" token="AFSR_0" description="No effect"/>
      <bitenum value="1" id="[31]_bit_is_set_to_1." token="AFSR_1" description="[31] bit is set to 1."/>
    </bitfield>
    <bitfield id="AHCLKR" width="1" begin="30" end="30" resetval="0" description="Allows the corresponding AHCLKR bit inMCASP_PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." range="" rwaccess="W">
      <bitenum value="0" id="No_effect" token="AHCLKR_0" description="No effect"/>
      <bitenum value="1" id="[30]_bit_is_set_to_1." token="AHCLKR_1" description="[30] bit is set to 1."/>
    </bitfield>
    <bitfield id="ACLKR" width="1" begin="29" end="29" resetval="0" description="Allows the corresponding ACLKR bit inMCASP_PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." range="" rwaccess="W">
      <bitenum value="0" id="No_effect" token="ACLKR_0" description="No effect"/>
      <bitenum value="1" id="[29]_bit_is_set_to_1." token="ACLKR_1" description="[29] bit is set to 1."/>
    </bitfield>
    <bitfield id="AFSX" width="1" begin="28" end="28" resetval="0" description="Allows the corresponding AFSX bit inMCASP_PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." range="" rwaccess="W">
      <bitenum value="0" id="SET" token="AFSX_0" description="No effect"/>
      <bitenum value="1" id="[28]_bit_is_set_to_1." token="AFSX_1" description="[28] bit is set to 1."/>
    </bitfield>
    <bitfield id="AHCLKX" width="1" begin="27" end="27" resetval="0" description="Allows the corresponding AHCLKX bit inMCASP_PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." range="" rwaccess="W">
      <bitenum value="0" id="SET" token="AHCLKX_0" description="No effect"/>
      <bitenum value="1" id="[27]_bit_is_set_to_1." token="AHCLKX_1" description="[27] bit is set to 1."/>
    </bitfield>
    <bitfield id="ACLKX" width="1" begin="26" end="26" resetval="0" description="Allows the corresponding ACLKX bit inMCASP_PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." range="" rwaccess="W">
      <bitenum value="0" id="SET" token="ACLKX_0" description="No effect"/>
      <bitenum value="1" id="[26]_bit_is_set_to_1." token="ACLKX_1" description="[26] bit is set to 1."/>
    </bitfield>
    <bitfield id="AMUTE" width="1" begin="25" end="25" resetval="0" description="Allows the corresponding AMUTE bit inMCASP_PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." range="" rwaccess="W">
      <bitenum value="0" id="SET" token="AMUTE_0" description="No effect"/>
      <bitenum value="1" id="[25]_bit_is_set_to_1." token="AMUTE_1" description="[25] bit is set to 1."/>
    </bitfield>
    <bitfield id="RESERVED" width="21" begin="24" end="4" resetval="0x000" description="Reserved" range="" rwaccess="W"/>
    <bitfield id="AXR3" width="1" begin="3" end="3" resetval="0" description="Allows the AXR3 bit inMCASP_PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." range="" rwaccess="W">
      <bitenum value="0" id="No_effect" token="AXR3_0" description="No effect"/>
      <bitenum value="1" id="[3]_bit_is_set_to_1." token="AXR3_1" description="[3] bit is set to 1."/>
    </bitfield>
    <bitfield id="AXR2" width="1" begin="2" end="2" resetval="0" description="Allows the AXR2 bit inMCASP_PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." range="" rwaccess="W">
      <bitenum value="0" id="No_effect" token="AXR2_0" description="No effect"/>
      <bitenum value="1" id="[2]_bit_is_set_to_1." token="AXR2_1" description="[2] bit is set to 1."/>
    </bitfield>
    <bitfield id="AXR1" width="1" begin="1" end="1" resetval="0" description="Allows the AXR1 bit inMCASP_PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." range="" rwaccess="W">
      <bitenum value="0" id="No_effect" token="AXR1_0" description="No effect"/>
      <bitenum value="1" id="[1]_bit_is_set_to_1." token="AXR1_1" description="[1] bit is set to 1."/>
    </bitfield>
    <bitfield id="AXR0" width="1" begin="0" end="0" resetval="0" description="Allows the AXR0 bit inMCASP_PDOUT to be set to a logic high without affecting other I/O pins controlled by the same port." range="" rwaccess="W">
      <bitenum value="0" id="SET" token="AXR0_0" description="No effect"/>
      <bitenum value="1" id="[0]_bit_is_set_to_1." token="AXR0_1" description="[0] bit is set to 1."/>
    </bitfield>
  </register>
  <register id="MCASP_PDCLR" acronym="MCASP_PDCLR" offset="0x20" width="32" description="The pin data clear register is an alias of the pin data output register () for writes only. Writing a 1 to the bit clears the corresponding bit in and, if = 1 (GPIO function) and = 1 (output), drives a logic low on the pin.">
    <bitfield id="AFSR" width="1" begin="31" end="31" resetval="0" description="Allows the corresponding AFSR bit inMCASP_PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." range="" rwaccess="RW">
      <bitenum value="0" id="No_effect" token="AFSR_0" description="No effect"/>
      <bitenum value="1" id="[31]_bit_is_cleared_to_0." token="AFSR_1" description="[31] bit is cleared to 0."/>
    </bitfield>
    <bitfield id="AHCLKR" width="1" begin="30" end="30" resetval="0" description="Allows the corresponding AHCLKR bit inMCASP_PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." range="" rwaccess="RW">
      <bitenum value="0" id="No_effect" token="AHCLKR_0" description="No effect"/>
      <bitenum value="1" id="[30]_bit_is_cleared_to_0." token="AHCLKR_1" description="[30] bit is cleared to 0."/>
    </bitfield>
    <bitfield id="ACLKR" width="1" begin="29" end="29" resetval="0" description="Allows the corresponding ACLKR bit inMCASP_PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." range="" rwaccess="RW">
      <bitenum value="0" id="No_effect" token="ACLKR_0" description="No effect"/>
      <bitenum value="1" id="[29]_bit_is_cleared_to_0." token="ACLKR_1" description="[29] bit is cleared to 0."/>
    </bitfield>
    <bitfield id="AFSX" width="1" begin="28" end="28" resetval="0" description="Allows the corresponding AFSX bit inMCASP_PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." range="" rwaccess="RW">
      <bitenum value="0" id="CLEAR" token="AFSX_0" description="No effect"/>
      <bitenum value="1" id="[28]_bit_is_cleared_to_0." token="AFSX_1" description="[28] bit is cleared to 0."/>
    </bitfield>
    <bitfield id="AHCLKX" width="1" begin="27" end="27" resetval="0" description="Allows the corresponding AHCLKX bit inMCASP_PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." range="" rwaccess="RW">
      <bitenum value="0" id="CLEAR" token="AHCLKX_0" description="No effect"/>
      <bitenum value="1" id="[27]_bit_is_cleared_to_0." token="AHCLKX_1" description="[27] bit is cleared to 0."/>
    </bitfield>
    <bitfield id="ACLKX" width="1" begin="26" end="26" resetval="0" description="Allows the corresponding ACLKX bit inMCASP_PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." range="" rwaccess="RW">
      <bitenum value="0" id="CLEAR" token="ACLKX_0" description="No effect"/>
      <bitenum value="1" id="[26]_bit_is_cleared_to_0." token="ACLKX_1" description="[26] bit is cleared to 0."/>
    </bitfield>
    <bitfield id="AMUTE" width="1" begin="25" end="25" resetval="0" description="Allows the corresponding AMUTE bit inMCASP_PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." range="" rwaccess="RW">
      <bitenum value="0" id="CLEAR" token="AMUTE_0" description="No effect"/>
      <bitenum value="1" id="[25]_bit_is_cleared_to_0." token="AMUTE_1" description="[25] bit is cleared to 0."/>
    </bitfield>
    <bitfield id="RESERVED" width="21" begin="24" end="4" resetval="0x000" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="AXR3" width="1" begin="3" end="3" resetval="0" description="Allows the AXR3 bit inMCASP_PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." range="" rwaccess="RW">
      <bitenum value="0" id="No_effect" token="AXR3_0" description="No effect"/>
      <bitenum value="1" id="[3]_bit_is_cleared_to_0." token="AXR3_1" description="[3] bit is cleared to 0."/>
    </bitfield>
    <bitfield id="AXR2" width="1" begin="2" end="2" resetval="0" description="Allows the AXR2 bit inMCASP_PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." range="" rwaccess="RW">
      <bitenum value="0" id="No_effect" token="AXR2_0" description="No effect"/>
      <bitenum value="1" id="[2]_bit_is_cleared_to_0." token="AXR2_1" description="[2] bit is cleared to 0."/>
    </bitfield>
    <bitfield id="AXR1" width="1" begin="1" end="1" resetval="0" description="Allows the AXR1 bit inMCASP_PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." range="" rwaccess="RW">
      <bitenum value="0" id="No_effect" token="AXR1_0" description="No effect"/>
      <bitenum value="1" id="[1]_bit_is_cleared_to_0." token="AXR1_1" description="[1] bit is cleared to 0."/>
    </bitfield>
    <bitfield id="AXR0" width="1" begin="0" end="0" resetval="0" description="Allows the AXR0 bit inMCASP_PDOUT to be cleared to a logic low without affecting other I/O pins controlled by the same port." range="" rwaccess="RW">
      <bitenum value="0" id="CLEAR" token="AXR0_0" description="No effect"/>
      <bitenum value="1" id="[0]_bit_is_cleared_to_0." token="AXR0_1" description="[0] bit is cleared to 0."/>
    </bitfield>
  </register>
  <register id="MCASP_GBLCTL" acronym="MCASP_GBLCTL" offset="0x44" width="32" description="Global transmit control register - provides initialization of the transmit and receive sections. The bit fields in are synchronized and latched by the transmitter and receiver corresponding clocks - abemcasp_aclkx clock ( bits [12:8] ) and abemcasp_aclkr ( bits [4:0] ), respectively. Before programming , ensure that the serial clocks are running. If the corresponding external serial clocks - abemcasp_clkx and abemcasp_aclkr, are not yet running, select the internal serial clock source in AHCLKXCTL, AHCLKRCTL, ACLKXCTL and ACLKRCTL before programming the . Also, after programming any bits in , do not proceed until reading back from and verifying that the bits in are latched.">
    <bitfield id="RESERVED" width="19" begin="31" end="13" resetval="0x00000" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="XFRST" width="1" begin="12" end="12" resetval="0" description="Transmit frame-sync generator reset enable bit" range="" rwaccess="RW">
      <bitenum value="0" id="RESET" token="XFRST_0" description="The transmit frame-sync generator is reset."/>
      <bitenum value="1" id="ACTIVE" token="XFRST_1" description="The transmit frame-sync generator is active. When released from reset, the transmit frame-sync generator begins counting serial clocks and generating frame sync as programmed."/>
    </bitfield>
    <bitfield id="XSMRST" width="1" begin="11" end="11" resetval="0" description="Transmit state-machine reset enable bitAXR[n] pin state : If[n] = 0 and [n] = 1, the corresponding serializer [n] drives the AXR[n] pin to the state specified for inactive time slot. ." range="" rwaccess="RW">
      <bitenum value="0" id="RESET" token="XSMRST_0" description="The transmit state-machine is held in reset."/>
      <bitenum value="1" id="ACTIVE" token="XSMRST_1" description="The transmit state-machine is released from reset. When released from reset, the transmit state-machine immediately transfers data from XBUF[n] to XRSR[n]. The transmit state-machine sets the underrun flag (XUNDRN) in MCASP_XSTAT, if XBUF[n] have not been preloaded with data before reset is released. The transmit state-machine also immediately begins detecting frame sync and is ready to transmit. Transmission of TDM time slot begins at slot 0 after reset is released."/>
    </bitfield>
    <bitfield id="XSRCLR" width="1" begin="10" end="10" resetval="0" description="Transmit serializer clear enable bit. By clearing and then setting this bit, the transmit buffer is flushed to an empty state (XDATA = 1). If XSMRST = 1, XSRCLR = 1, XDATA = 1, and XBUF is not loaded with new data before the start of the next active time slot, an underrun occurs." range="" rwaccess="RW">
      <bitenum value="0" id="CLEAR" token="XSRCLR_0" description="The transmit serializer is cleared."/>
      <bitenum value="1" id="ACTIVE" token="XSRCLR_1" description="The transmit serializer is active. When the transmit serializer is first taken out of reset (XSRCLR changes from 0 to 1), the transmit data ready bit (XDATA) in MCASP_XSTAT is set to indicate XBUF is ready to be written."/>
    </bitfield>
    <bitfield id="XHCLKRST" width="1" begin="9" end="9" resetval="0" description="Transmit high-frequency clock divider reset enable bit" range="" rwaccess="RW">
      <bitenum value="0" id="RESET" token="XHCLKRST_0" description="The transmitter high-frequency clock divider is held in reset."/>
      <bitenum value="1" id="ACTIVE" token="XHCLKRST_1" description="The transmitter high-frequency clock divider is running."/>
    </bitfield>
    <bitfield id="XCLKRST" width="1" begin="8" end="8" resetval="0" description="Transmit clock divider reset enable bit" range="" rwaccess="RW">
      <bitenum value="0" id="RESET" token="XCLKRST_0" description="The transmit clock divider is held in reset. When the clock divider is in reset, it passes through a divide-by-1 of its input."/>
      <bitenum value="1" id="ACTIVE" token="XCLKRST_1" description="The transmit clock divider is running."/>
    </bitfield>
    <bitfield id="RESERVED" width="3" begin="7" end="5" resetval="0x0" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="RFRST" width="1" begin="4" end="4" resetval="0" description="Receive frame sync generator reset enable bit." range="" rwaccess="RW">
      <bitenum value="0" id="RESET" token="RFRST_0" description="Receive frame sync generator is reset."/>
      <bitenum value="1" id="ACTIVE" token="RFRST_1" description="Receive frame sync generator is active. When released from reset, the receive frame sync generator begins counting serial clocks and generating frame sync as programmed."/>
    </bitfield>
    <bitfield id="RSMRST" width="1" begin="3" end="3" resetval="0" description="Receive state machine reset enable bit." range="" rwaccess="RW">
      <bitenum value="0" id="RESET" token="RSMRST_0" description="Receive state machine is held in reset."/>
      <bitenum value="1" id="ACTIVE" token="RSMRST_1" description="Receive state machine is released from reset. When released from reset, the receive state machine immediately begins detecting frame sync and is ready to receive. Receive TDM time slot begins at slot 0 after reset is released."/>
    </bitfield>
    <bitfield id="RSRCLR" width="1" begin="2" end="2" resetval="0" description="Receive serializer clear enable bit. By clearing then setting this bit, the receive buffer is flushed." range="" rwaccess="RW">
      <bitenum value="0" id="CLEAR" token="RSRCLR_0" description="Receive serializers are cleared."/>
      <bitenum value="1" id="ACTIVE" token="RSRCLR_1" description="Receive serializers are active."/>
    </bitfield>
    <bitfield id="RHCLKRST" width="1" begin="1" end="1" resetval="0" description="Receive high-frequency clock divider reset enable bit." range="" rwaccess="RW">
      <bitenum value="0" id="RESET" token="RHCLKRST_0" description="Receive high-frequency clock divider is held in reset."/>
      <bitenum value="1" id="ACTIVE" token="RHCLKRST_1" description="Receive high-frequency clock divider is running."/>
    </bitfield>
    <bitfield id="RCLKRST" width="1" begin="0" end="0" resetval="0" description="Receive clock divider reset enable bit." range="" rwaccess="RW">
      <bitenum value="0" id="RESET" token="RCLKRST_0" description="Receive clock divider is held in reset. When the clock divider is in reset, it passes through a divide-by-1 of its input."/>
      <bitenum value="1" id="ACTIVE" token="RCLKRST_1" description="Receive clock divider is running."/>
    </bitfield>
  </register>
  <register id="MCASP_AMUTE" acronym="MCASP_AMUTE" offset="0x48" width="32" description="Mute control register - Controls the MCASP mute output pin - AMUTE (device level - abemcasp_amuteout signal)">
    <bitfield id="RESERVED" width="19" begin="31" end="13" resetval="0x00000" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="XDMAERR" width="1" begin="12" end="12" resetval="0" description="Drives AMUTE active enable bit on transmit DMA error (XDMAERR)." range="" rwaccess="RW">
      <bitenum value="0" id="ENABLE" token="XDMAERR_0" description="Drive is disabled. Detection of transmit DMA error is ignored by abemcasp_amuteout."/>
      <bitenum value="1" id="DMA_MUTEN_1" token="XDMAERR_1" description="Drive is enabled (active). Upon detection of transmit DMA error, abemcasp_amuteout is active and is driven according to MUTEN bits."/>
    </bitfield>
    <bitfield id="RDMAERR" width="1" begin="11" end="11" resetval="0" description="If receive DMA error (RDMAERR), drive AMUTE active enable bit." range="" rwaccess="RW">
      <bitenum value="0" id="DMA_AMUTE._0" token="RDMAERR_0" description="Drive is disabled. Detection of receive DMA error is ignored by AMUTE."/>
      <bitenum value="1" id="DMA_AMUTE_MUTEN_1" token="RDMAERR_1" description="Drive is enabled (active). Upon detection of receive DMA error, AMUTE is active and is driven according to MUTEN bit."/>
    </bitfield>
    <bitfield id="XCKFAIL" width="1" begin="10" end="10" resetval="0" description="XMT bad clock. Drives AMUTE active enable bit on transmit clock failure (XCKFAIL)." range="" rwaccess="RW">
      <bitenum value="0" id="ENABLE" token="XCKFAIL_0" description="Drive is disabled. Detection of transmit clock failure is ignored by abemcasp_amuteout."/>
      <bitenum value="1" id="MUTEN_1" token="XCKFAIL_1" description="Drive is enabled (active). Upon detection of transmit clock failure, abemcasp_amuteout is active and is driven according to MUTEN bits."/>
    </bitfield>
    <bitfield id="RCKFAIL" width="1" begin="9" end="9" resetval="0" description="If receive clock failure (RCKFAIL), drive AMUTE active enable bit." range="" rwaccess="RW">
      <bitenum value="0" id="AMUTE._0" token="RCKFAIL_0" description="Drive is disabled. Detection of receive clock failure is ignored by AMUTE."/>
      <bitenum value="1" id="AMUTE_MUTEN_1" token="RCKFAIL_1" description="Drive is enabled (active). Upon detection of receive clock failure, AMUTE is active and is driven according to MUTEN bit."/>
    </bitfield>
    <bitfield id="XSYNCERR" width="1" begin="8" end="8" resetval="0" description="XMT unexpected FS. Drives AMUTE active enable bit on unexpected transmit frame-sync error (XSYNCERR)." range="" rwaccess="RW">
      <bitenum value="0" id="ENABLE" token="XSYNCERR_0" description="Drive is disabled. Detection of unexpected transmit frame-sync error is ignored by abemcasp_amuteout."/>
      <bitenum value="1" id="MUTEN_1" token="XSYNCERR_1" description="Drive is enabled (active). Upon detection of unexpected transmit frame-sync error, abemcasp_amuteout is active and is driven according to MUTEN bit."/>
    </bitfield>
    <bitfield id="RSYNCERR" width="1" begin="7" end="7" resetval="0" description="If unexpected receive frame sync error (RSYNCERR), drive AMUTE active enable bit." range="" rwaccess="RW">
      <bitenum value="0" id="AMUTE._0" token="RSYNCERR_0" description="Drive is disabled. Detection of unexpected receive frame sync error is ignored by AMUTE."/>
      <bitenum value="1" id="AMUTE_MUTEN_1" token="RSYNCERR_1" description="Drive is enabled (active). Upon detection of unexpected receive frame sync error, AMUTE is active and is driven according to MUTEN bit."/>
    </bitfield>
    <bitfield id="XUNDRN" width="1" begin="6" end="6" resetval="0" description="XMT underrun occurs. Drives AMUTE active enable bit on ransmit underrun error (XUNDRN)." range="" rwaccess="RW">
      <bitenum value="0" id="ENABLE" token="XUNDRN_0" description="Drive is disabled. Detection of transmit underrun error is ignored by abemcasp_amuteout."/>
      <bitenum value="1" id="MUTEN_1" token="XUNDRN_1" description="Drive is enabled (active). Upon detection of transmit underrun error, abemcasp_amuteout is active and is driven according to MUTEN bit."/>
    </bitfield>
    <bitfield id="ROVRN" width="1" begin="5" end="5" resetval="0" description="If receiver overrun error (ROVRN), drive AMUTE active enable bit." range="" rwaccess="RW">
      <bitenum value="0" id="AMUTE._0" token="ROVRN_0" description="Drive is disabled. Detection of receiver overrun error is ignored by AMUTE."/>
      <bitenum value="1" id="AMUTE_MUTEN_1" token="ROVRN_1" description="Drive is enabled (active). Upon detection of receiver overrun error, AMUTE is active and is driven according to MUTEN bit."/>
    </bitfield>
    <bitfield id="INSTAT" width="1" begin="4" end="4" resetval="0" description="Status of mute in pin, determines drive on AXR[n] pin, when theMCASP_PFUNC[n] and MCASP_PDIR[n] bits are set to 1." range="" rwaccess="R">
      <bitenum value="0" id="ACTIVE" token="INSTAT_0_r" description="Inactive"/>
      <bitenum value="1" id="1" token="INSTAT_1_r" description="Active. Audio mute in error is detected."/>
    </bitfield>
    <bitfield id="INEN" width="1" begin="3" end="3" resetval="0" description="Drive the device level abemcasp_amuteout signal active when abemcasp_amutein error is active." range="" rwaccess="RW">
      <bitenum value="0" id="ENABLE" token="INEN_0" description="Drive is disabled. abemcasp_amutein is ignored by abemcasp_amuteout."/>
      <bitenum value="1" id="INSTAT_1" token="INEN_1" description="Drive is enabled (active). INSTAT = 1 drives abemcasp_amuteout active."/>
    </bitfield>
    <bitfield id="INPOL" width="1" begin="2" end="2" resetval="0" description="Audio mute in - AMUTEIN pin (device level abemcasp_amutein signal) polarity select bit" range="" rwaccess="RW">
      <bitenum value="0" id="ACTLOW" token="INPOL_0" description="Polarity is active high. A high on abemcasp_amutein sets INSTAT to 1."/>
      <bitenum value="1" id="A_INSTAT_1" token="INPOL_1" description="Polarity is active low. A low on abemcasp_amutein sets INSTAT to 1."/>
    </bitfield>
    <bitfield id="MUTEN" width="2" begin="1" end="0" resetval="0x0" description="AMUTE pin (device level abemcasp_amuteout signal) enable bit field (unless overridden by GPIO registers)" range="" rwaccess="RW">
      <bitenum value="0" id="ERRLOW" token="MUTEN_0" description="Disabled, pin goes to 3-state condition."/>
      <bitenum value="1" id="1" token="MUTEN_1" description="Pin is driven high if error is detected."/>
      <bitenum value="2" id="Pin_is_driven_low_if_error_is_detected." token="MUTEN_2" description="Pin is driven low if error is detected."/>
    </bitfield>
  </register>
  <register id="MCASP_LBCTL" acronym="MCASP_LBCTL" offset="0x4C" width="32" description="The digital loopback control register () controls the internal (MCASP module)- level and chip-level loopback settings of the MCASP in TDM mode. Note that loopback is NOT supported if MCASP is configured in DIT mode.">
    <bitfield id="RESERVED" width="27" begin="31" end="5" resetval="0x000 0000" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="IOLBEN" width="1" begin="4" end="4" resetval="0" description="If DLBEN=0b1, the IOLBEN bit selects between and loopback modes. IOLBEN bit value is irrelevant, If DLBEN=0b0." range="" rwaccess="RW">
      <bitenum value="0" id="INTERNAL_LB" token="IOLBEN_0" description="MCASP internal loopback mode enabled. This selects a direct loopback between corresponding MCASP AXRn and AXRn+1 pins, bypassing device pad I/O buffers."/>
      <bitenum value="1" id="CHIP_LB" token="IOLBEN_1" description="Chip I/O-level loopback mode enabled. The MCASP data is looped back through the device pad I/O buffers."/>
    </bitfield>
    <bitfield id="MODE" width="2" begin="3" end="2" resetval="0x0" description="Loopback generator mode bits.0x2, 0x3: Reserved enum=RESERVED ." range="" rwaccess="RW">
      <bitenum value="0" id="NO_LOOPBACK" token="MODE_0" description="MODE must be set to 0x0 when MCASP is in non-loopback mode (DLBEN = 0b0)"/>
      <bitenum value="1" id="LOOPBACK" token="MODE_1" description="MODE must be set to 0x1 when MCASP operates in loopback mode (DLBEN =0b1). This is necessary to allow transmit clock and frame sync generators to be used by both transmit and receive sections."/>
    </bitfield>
    <bitfield id="ORD" width="1" begin="1" end="1" resetval="0" description="Loopback order bit when loopback mode is enabled (DLBEN = 1)." range="" rwaccess="RW">
      <bitenum value="0" id="ODD" token="ORD_0" description="Odd serializers N + 1 transmit to even serializers N that receive. The corresponding serializers must be programmed properly."/>
      <bitenum value="1" id="EVEN" token="ORD_1" description="Even serializers N transmit to odd serializers N+1 that receive. The corresponding serializers must be programmed properly."/>
    </bitfield>
    <bitfield id="DLBEN" width="1" begin="0" end="0" resetval="0" description="Loop back mode." range="" rwaccess="RW">
      <bitenum value="0" id="DISABLE" token="DLBEN_0" description="Loop back mode is disabled (normal MCASP operation)."/>
      <bitenum value="1" id="ENABLE" token="DLBEN_1" description="Loop back is enabled (TDM mode only). Loopback type is selected in IOLBEN bit."/>
    </bitfield>
  </register>
  <register id="MCASP_TXDITCTL" acronym="MCASP_TXDITCTL" offset="0x50" width="32" description="Transmit DIT mode control register, controls DIT operations of the MCASP">
    <bitfield id="RESERVED" width="28" begin="31" end="4" resetval="0x0000000" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="VB" width="1" begin="3" end="3" resetval="0" description="Valid bit for odd time slots (DIT right subframe)." range="" rwaccess="RW">
      <bitenum value="0" id="ONESTUFF" token="VB_0" description="V bit is 0 during odd DIT subframes."/>
      <bitenum value="1" id="V_bit_is_1_during_odd_DIT_subframes." token="VB_1" description="V bit is 1 during odd DIT subframes."/>
    </bitfield>
    <bitfield id="VA" width="1" begin="2" end="2" resetval="0" description="Valid bit for even time slots (DIT left subframe)." range="" rwaccess="RW">
      <bitenum value="0" id="ONESTUFF" token="VA_0" description="V bit is 0 during even DIT subframes."/>
      <bitenum value="1" id="V_bit_is_1_during_even_DIT_subframes." token="VA_1" description="V bit is 1 during even DIT subframes."/>
    </bitfield>
    <bitfield id="RESERVED" width="1" begin="1" end="1" resetval="0" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="DITEN" width="1" begin="0" end="0" resetval="0" description="DIT mode enable bit" range="" rwaccess="RW">
      <bitenum value="0" id="I2S" token="DITEN_0" description="DIT mode is disabled."/>
      <bitenum value="1" id="DIT" token="DITEN_1" description="DIT mode is enabled. Transmitter operates in DIT encoded mode."/>
    </bitfield>
  </register>
  <register id="MCASP_RXMASK" acronym="MCASP_RXMASK" offset="0x64" width="32" description="The receive format unit bit mask register () determines which bits of the received data are masked off and padded with a known value before being read by the CPU.">
    <bitfield id="RMASK_31_0" width="32" begin="31" end="0" resetval="0" description="Receive data mask enable bit." range="" rwaccess="RW">
      <bitenum value="0" id="USEMASK" token="RMASK_31_0_0" description="Corresponding bit of receive data (after passing through reverse and rotate units) is masked out and then padded with the selected bit pad value (RPAD and RPBIT bits in RFMT)."/>
      <bitenum value="1" id="NOMASK" token="RMASK_31_0_1" description="Corresponding bit of receive data (after passing through reverse and rotate units) is returned to CPU."/>
    </bitfield>
  </register>
  <register id="MCASP_RXFMT" acronym="MCASP_RXFMT" offset="0x68" width="32" description="The receive bit stream format register () configures the receive data format.">
    <bitfield id="RESERVED" width="14" begin="31" end="18" resetval="0x0000" description="" range="" rwaccess="RW"/>
    <bitfield id="RDATDLY" width="2" begin="17" end="16" resetval="0x0" description="Receive Frame sync delay of AXR[n]" range="" rwaccess="RW">
      <bitenum value="0" id="0BIT" token="RDATDLY_0" description="0-bit delay. The first receive data bit, AXR[n], occurs in same ACLKR cycle as the receive frame sync (AFSR)."/>
      <bitenum value="1" id="1BIT" token="RDATDLY_1" description="1-bit delay. The first receive data bit, AXR[n], occurs one ACLKR cycle after the receive frame sync (AFSR)."/>
      <bitenum value="2" id="2BIT" token="RDATDLY_2" description="2-bit delay. The first receive data bit, AXR[n], occurs two ACLKR cycles after the receive frame sync (AFSR)."/>
      <bitenum value="3" id="2BIT" token="RDATDLY_3" description="Reserved"/>
    </bitfield>
    <bitfield id="RRVRS" width="1" begin="15" end="15" resetval="0" description="Receive serial bitstream order" range="" rwaccess="RW">
      <bitenum value="0" id="LSBFIRST" token="RRVRS_0" description="Bitstream is LSB first. No bit reversal is performed in receive format bit reverse unit."/>
      <bitenum value="1" id="MSBFIRST" token="RRVRS_1" description="Bitstream is MSB first. Bit reversal is performed in receive format bit reverse unit."/>
    </bitfield>
    <bitfield id="RPAD" width="2" begin="14" end="13" resetval="0x0" description="Pad value for extra bits in slot not belonging to the word. This field only applies to bits when RMASK[n] = 0." range="" rwaccess="RW">
      <bitenum value="0" id="ZERO" token="RPAD_0" description="Pad extra bits with 0."/>
      <bitenum value="1" id="ONE" token="RPAD_1" description="Pad extra bits with 1."/>
      <bitenum value="2" id="RPBIT" token="RPAD_2" description="Pad extra bits with one of the bits from the word as specified by RPBIT bits."/>
      <bitenum value="3" id="RPBIT" token="RPAD_3" description="Reserved"/>
    </bitfield>
    <bitfield id="RPBIT" width="5" begin="12" end="8" resetval="0x00" description="RPBIT value determines which bit (as read by the CPU from RBUF[n]) is used to pad the extra bits. This field only applies when RPAD = 2h.0x01 - 0x1F: Pad with value of the bit positioned within the range RBUFn[31:1]. ." range="" rwaccess="RW">
      <bitenum value="0" id="Pad_with_value_of_bit_RBUFn[0]." token="RPBIT_0" description="Pad with value of bit RBUFn[0]."/>
    </bitfield>
    <bitfield id="RSSZ" width="4" begin="7" end="4" resetval="0x0" description="Receive slot size.0x0 - 0x2 : Reserved enum=RSVD ." range="" rwaccess="RW">
      <bitenum value="3" id="8BITS" token="RSSZ_3" description="Slot size is 8 bits"/>
      <bitenum value="4" id="RSVD" token="RSSZ_4" description="Reserved"/>
      <bitenum value="5" id="12BITS" token="RSSZ_5" description="Slot size is 12 bits"/>
      <bitenum value="6" id="RSVD" token="RSSZ_6" description="Reserved"/>
      <bitenum value="7" id="16BITS" token="RSSZ_7" description="Slot size is 16 bits"/>
      <bitenum value="8" id="RSVD" token="RSSZ_8" description="Reserved"/>
      <bitenum value="9" id="20BITS" token="RSSZ_9" description="Slot size is 20 bits"/>
      <bitenum value="10" id="RSVD" token="RSSZ_10" description="Reserved"/>
      <bitenum value="11" id="24BITS" token="RSSZ_11" description="Slot size is 24 bits"/>
      <bitenum value="12" id="RSVD" token="RSSZ_12" description="Reserved"/>
      <bitenum value="13" id="28BITS" token="RSSZ_13" description="Slot size is 28 bits"/>
      <bitenum value="14" id="32BITS" token="RSSZ_14" description="Reserved"/>
      <bitenum value="15" id="32BITS" token="RSSZ_15" description="Slot size is 32 bits"/>
    </bitfield>
    <bitfield id="RBUSEL" width="1" begin="3" end="3" resetval="0" description="Selects whether reads from serializer buffer RBUF[n] originate from the peripheral configuration CFG port or the DATA port." range="" rwaccess="RW">
      <bitenum value="0" id="VBUSP" token="RBUSEL_0" description="Reads from XRBUF[n] originate on DATA port. Reads from XRBUF[n] on the peripheral configuration port are ignored."/>
      <bitenum value="1" id="VBUS" token="RBUSEL_1" description="Reads from XRBUF[n] originate on peripheral configuration port. Reads from XRBUF[n] on the DATA port are ignored."/>
    </bitfield>
    <bitfield id="RROT" width="3" begin="2" end="0" resetval="0x0" description="Right-rotation value for receive rotate right format unit." range="" rwaccess="RW">
      <bitenum value="0" id="NONE" token="RROT_0" description="Rotate right by 0 (no rotation)."/>
      <bitenum value="1" id="4BITS" token="RROT_1" description="Rotate right by 4 bit positions."/>
      <bitenum value="2" id="8BITS" token="RROT_2" description="Rotate right by 8 bit positions."/>
      <bitenum value="3" id="12BITS" token="RROT_3" description="Rotate right by 12 bit positions."/>
      <bitenum value="4" id="16BITS" token="RROT_4" description="Rotate right by 16 bit positions."/>
      <bitenum value="5" id="20BITS" token="RROT_5" description="Rotate right by 20 bit positions."/>
      <bitenum value="6" id="24BITS" token="RROT_6" description="Rotate right by 24 bit positions."/>
      <bitenum value="7" id="28BITS" token="RROT_7" description="Rotate right by 28 bit positions."/>
    </bitfield>
  </register>
  <register id="MCASP_RXFMCTL" acronym="MCASP_RXFMCTL" offset="0x6C" width="32" description="The receive frame sync control register () configures the receive frame sync (AFSR).">
    <bitfield id="RESERVED" width="16" begin="31" end="16" resetval="0x0000" description="" range="" rwaccess="RW"/>
    <bitfield id="RMOD" width="9" begin="15" end="7" resetval="0x000" description="Receive frame sync mode select bits.0x0 - 0x1: Reserved . 0x3 - 0x20: 3-slot TDM to 32-slot TDM mode . 0x21 - 0x17F: Reserved . 0x181 - 0x1FF: Reserved ." range="" rwaccess="RW">
      <bitenum value="2" id="2-slot_TDM_mode(_I2S_receive_mode)" token="RMOD_2" description="2-slot TDM mode( I2S receive mode)"/>
      <bitenum value="384" id="TDM_DIR_IC_DIR_MCASP)_384" token="RMOD_384" description="384-slot TDM (external DIR IC inputting 384-slot DIR frames to MCASP)"/>
    </bitfield>
    <bitfield id="RESERVED" width="2" begin="6" end="5" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="FRWID" width="1" begin="4" end="4" resetval="0" description="Receive frame sync width select bit indicates the width of the receive frame sync (AFSR) during its active period." range="" rwaccess="RW">
      <bitenum value="0" id="BIT" token="FRWID_0" description="Single bit"/>
      <bitenum value="1" id="WORD" token="FRWID_1" description="Single word"/>
    </bitfield>
    <bitfield id="RESERVED" width="2" begin="3" end="2" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="FSRM" width="1" begin="1" end="1" resetval="0" description="Receive frame sync generation select bit." range="" rwaccess="RW">
      <bitenum value="0" id="EXTERNAL" token="FSRM_0" description="Externally-generated receive frame sync"/>
      <bitenum value="1" id="INTERNAL" token="FSRM_1" description="Internally-generated receive frame sync"/>
    </bitfield>
    <bitfield id="FSRP" width="1" begin="0" end="0" resetval="0" description="Receive frame sync polarity select bit." range="" rwaccess="RW">
      <bitenum value="0" id="RISINGEDGE" token="FSRP_0" description="A rising edge on receive frame sync (AFSR) indicates the beginning of a frame."/>
      <bitenum value="1" id="FALLINGEDGE" token="FSRP_1" description="A falling edge on receive frame sync (AFSR) indicates the beginning of a frame."/>
    </bitfield>
  </register>
  <register id="MCASP_ACLKRCTL" acronym="MCASP_ACLKRCTL" offset="0x70" width="32" description="The receive clock control register () configures the receive bit clock (ACLKR) and the receive clock generator.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x000000" description="" range="" rwaccess="RW"/>
    <bitfield id="CLKRP" width="1" begin="7" end="7" resetval="0" description="Receive bitstream clock polarity select bit. Note that this bitfield does not have any effect, ifMCASP_ACLKXCTL[6] ASYNC = 0" range="" rwaccess="RW">
      <bitenum value="0" id="FALLINGEDGE" token="CLKRP_0" description="Falling edge. Receiver samples data on the falling edge of the serial clock, so the external transmitter driving this receiver must shift data out on the rising edge of the serial clock."/>
      <bitenum value="1" id="RISINGEDGE" token="CLKRP_1" description="Rising edge. Receiver samples data on the rising edge of the serial clock, so the external transmitter driving this receiver must shift data out on the falling edge of the serial clock."/>
    </bitfield>
    <bitfield id="RESERVED" width="1" begin="6" end="6" resetval="0" description="" range="" rwaccess="RW"/>
    <bitfield id="CLKRM" width="1" begin="5" end="5" resetval="1" description="Receive bit clock source bit. Note that this bitfield does not have any effect, ifMCASP_ACLKXCTL[6] ASYNC = 0" range="" rwaccess="RW">
      <bitenum value="0" id="EXTERNAL" token="CLKRM_0" description="External receive clock source from ACLKR pin."/>
      <bitenum value="1" id="INTERNAL" token="CLKRM_1" description="Internal receive clock source from output of programmable bit clock divider."/>
    </bitfield>
    <bitfield id="CLKRDIV" width="5" begin="4" end="0" resetval="0x00" description="Receive bit clock divide ratio bits determine the divide-down ratio from AHCLKR to ACLKR. Note that this bitfield does not have any effect, ifMCASP_ACLKXCTL[6] ASYNC = 0.0x2 - 0x1F: Divide-by-3 to divide-by-32 ." range="" rwaccess="RW">
      <bitenum value="0" id="Divide-by-1" token="CLKRDIV_0" description="Divide-by-1"/>
      <bitenum value="1" id="Divide-by-2" token="CLKRDIV_1" description="Divide-by-2"/>
    </bitfield>
  </register>
  <register id="MCASP_AHCLKRCTL" acronym="MCASP_AHCLKRCTL" offset="0x74" width="32" description="The receive high-frequency clock control register () configures the receive high-frequency master clock (AHCLKR) and the receive clock generator.">
    <bitfield id="RESERVED" width="16" begin="31" end="16" resetval="0x000" description="" range="" rwaccess="RW"/>
    <bitfield id="HCLKRM" width="1" begin="15" end="15" resetval="1" description="Receive high-frequency clock source bit." range="" rwaccess="RW">
      <bitenum value="0" id="EXTERNAL" token="HCLKRM_0" description="External receive high-frequency clock source from AHCLKR pin."/>
      <bitenum value="1" id="INTERNAL" token="HCLKRM_1" description="Internal receive high-frequency clock source from output of programmable high clock divider."/>
    </bitfield>
    <bitfield id="HCLKRP" width="1" begin="14" end="14" resetval="0" description="Receive bitstream high-frequency clock polarity select bit." range="" rwaccess="RW">
      <bitenum value="0" id="NOTINVERTED" token="HCLKRP_0" description="Not inverted. AHCLKR is not inverted before programmable bit clock divider."/>
      <bitenum value="1" id="INVERTED" token="HCLKRP_1" description="Inverted. AHCLKR is inverted before programmable bit clock divider."/>
    </bitfield>
    <bitfield id="RESERVED" width="2" begin="13" end="12" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="HCLKRDIV" width="12" begin="11" end="0" resetval="0x000" description="Receive high-frequency clock divide ratio bits determine the divide-down ratio from AUXCLK to AHCLKR.0x2 - 0xFFF: Divide-by-3 to divide-by-4096 ." range="" rwaccess="RW">
      <bitenum value="0" id="Divide-by-1" token="HCLKRDIV_0" description="Divide-by-1"/>
      <bitenum value="1" id="Divide-by-2" token="HCLKRDIV_1" description="Divide-by-2"/>
    </bitfield>
  </register>
  <register id="MCASP_RXTDM" acronym="MCASP_RXTDM" offset="0x78" width="32" description="The receive TDM time slot register () specifies which TDM time slot the receiver is active.">
    <bitfield id="RTDMS_31_0" width="32" begin="31" end="0" resetval="0" description="Receiver mode during TDM time slot n." range="" rwaccess="RW">
      <bitenum value="0" id="INACTIVE" token="RTDMS_31_0_0" description="Receive TDM time slot n is inactive. The receive serializer does not shift in data during this slot."/>
      <bitenum value="1" id="ACTIVE" token="RTDMS_31_0_1" description="Receive TDM time slot n is active. The receive serializer shifts in data during this slot."/>
    </bitfield>
  </register>
  <register id="MCASP_RXSTAT" acronym="MCASP_RXSTAT" offset="0x80" width="32" description="The receiver status register () provides the receiver status and receive TDM time slot number.">
    <bitfield id="RESERVED" width="23" begin="31" end="9" resetval="0x00 0000" description="" range="" rwaccess="RW"/>
    <bitfield id="RERR" width="1" begin="8" end="8" resetval="0" description="RERR bit always returns a logic-OR of: ROVRN | RSYNCERR | RCKFAIL | RDMAERR Allows a single bit to be checked to determine if a receiver error has occurred." range="" rwaccess="RW">
      <bitenum value="0" id="NOERROR" token="RERR_0" description="No errors have occurred."/>
      <bitenum value="1" id="ERROR" token="RERR_1" description="An error has occurred."/>
    </bitfield>
    <bitfield id="RDMAERR" width="1" begin="7" end="7" resetval="0" description="Receive DMA error flag. RDMAERR is set when the CPU reads more serializers through the DMA port in a given time slot than were programmed as receivers. This bit is cleared by writing a 1 to this bit. Writing a 0 to this bit has no effect." range="" rwaccess="RW">
      <bitenum value="0" id="NOTOCCUR" token="RDMAERR_0" description="Receive DMA error did not occur."/>
      <bitenum value="1" id="OCCUR" token="RDMAERR_1" description="Receive DMA error did occur."/>
    </bitfield>
    <bitfield id="RSTAFRM" width="1" begin="6" end="6" resetval="0" description="Receive start of frame flag. This bit is cleared by writing a 1 to this bit. Writing a 0 to this bit has no effect." range="" rwaccess="RW">
      <bitenum value="0" id="NOTOCCUR" token="RSTAFRM_0" description="No new receive frame sync (AFSR) is detected."/>
      <bitenum value="1" id="OCCUR" token="RSTAFRM_1" description="A new receive frame sync (AFSR) is detected."/>
    </bitfield>
    <bitfield id="RDATA" width="1" begin="5" end="5" resetval="0" description="Receive data ready flag. This bit is cleared by writing a 1 to this bit. Writing a 0 to this bit has no effect." range="" rwaccess="RW">
      <bitenum value="0" id="NOTOCCUR" token="RDATA_0" description="No new data in RBUF."/>
      <bitenum value="1" id="OCCUR" token="RDATA_1" description="Data is transferred from XRSR to RBUF and ready to be serviced by the CPUs."/>
    </bitfield>
    <bitfield id="RLAST" width="1" begin="4" end="4" resetval="0" description="Receive last slot flag. RLAST is set along with RDATA, if the current slot is the last slot in a frame. This bit is cleared by writing a 1 to this bit. Writing a 0 to this bit has no effect." range="" rwaccess="RW">
      <bitenum value="0" id="NOTOCCUR" token="RLAST_0" description="Current slot is not the last slot in a frame."/>
      <bitenum value="1" id="OCCUR" token="RLAST_1" description="Current slot is the last slot in a frame. RDATA is also set."/>
    </bitfield>
    <bitfield id="RTDMSLOT" width="1" begin="3" end="3" resetval="0" description="Returns the LSB of RSLOT. Allows a single read ofMCASP_RXSTAT to determine whether the current TDM time slot is even or odd." range="" rwaccess="RW">
      <bitenum value="0" id="ODDSLOT" token="RTDMSLOT_0" description="Current TDM time slot is odd."/>
      <bitenum value="1" id="EVENSLOT" token="RTDMSLOT_1" description="Current TDM time slot is even."/>
    </bitfield>
    <bitfield id="RCKFAIL" width="1" begin="2" end="2" resetval="0" description="Receive clock failure flag. RCKFAIL is set when the receive clock failure detection circuit reports an error. This bit is cleared by writing a 1 to this bit. Writing a 0 to this bit has no effect." range="" rwaccess="RW">
      <bitenum value="0" id="NOTOCCUR" token="RCKFAIL_0" description="Receive clock failure did not occur."/>
      <bitenum value="1" id="OCCUR" token="RCKFAIL_1" description="Receive clock failure did occur."/>
    </bitfield>
    <bitfield id="RSYNCERR" width="1" begin="1" end="1" resetval="0" description="Unexpected receive frame sync flag. RSYNCERR is set when a new receive frame sync (AFSR) occurs before it is expected. This bit is cleared by writing a 1 to this bit. Writing a 0 to this bit has no effect." range="" rwaccess="RW">
      <bitenum value="0" id="NOTOCCUR" token="RSYNCERR_0" description="Unexpected receive frame sync did not occur."/>
      <bitenum value="1" id="OCCUR" token="RSYNCERR_1" description="Unexpected receive frame sync did occur."/>
    </bitfield>
    <bitfield id="ROVRN" width="1" begin="0" end="0" resetval="0" description="Receiver overrun flag. ROVRN is set when the receive serializer is instructed to transfer data from XRSR to RBUF, but the former data in RBUF has not yet been read by the CPU. This bit is cleared by writing a 1 to this bit. Writing a 0 to this bit has no effect." range="" rwaccess="RW">
      <bitenum value="0" id="NOTOCCUR" token="ROVRN_0" description="Receiver overrun did not occur."/>
      <bitenum value="1" id="OCCUR" token="ROVRN_1" description="Receiver overrun did occur."/>
    </bitfield>
  </register>
  <register id="MCASP_RXTDMSLOT" acronym="MCASP_RXTDMSLOT" offset="0x84" width="32" description="The current receive TDM time slot register () indicates the current time slot for the receive data frame.">
    <bitfield id="RESERVED" width="23" begin="31" end="9" resetval="0x00 0000" description="" range="" rwaccess="R"/>
    <bitfield id="RSLOTCNT" width="9" begin="8" end="0" resetval="0x000" description="0x0 - 0x17F: Current receive time slot count. Legal values: 0 to 383 (17Fh). TDM function is not supported for &amp;amp;gt; 32 time slots. However, TDM time slot counter may count to 383 when used to receive a DIR block (transferred over TDM format)." range="" rwaccess="R"/>
  </register>
  <register id="MCASP_RXCLKCHK" acronym="MCASP_RXCLKCHK" offset="0x88" width="32" description="The receive clock check control register (RCLKCHK) configures the receive clock failure detection circuit.">
    <bitfield id="RCNT" width="8" begin="31" end="24" resetval="0x00" description="0x0 - 0xFF: Receive clock count value (from previous measurement). The clock circuit continually counts the number of system clocks for every 32 receive high-frequency master clock (AHCLKR) signals, and stores the count in RCNT until the next measurement is taken." range="" rwaccess="R"/>
    <bitfield id="RMAX" width="8" begin="23" end="16" resetval="0x00" description="0x00-0xFF: Receive clock maximum boundary. This 8-bit unsigned value sets the maximum allowed boundary for the clock check counter after 32 receive high-frequency master clock (AHCLKR) signals have been received. If the current counter value is greater than RMAX after counting 32 AHCLKR signals, RCKFAIL inMCASP_RXSTAT is set. The comparison is performed using unsigned arithmetic." range="" rwaccess="RW"/>
    <bitfield id="RMIN" width="8" begin="15" end="8" resetval="0x00" description="0x00 - 0xFF: Receive clock minimum boundary. This 8-bit unsigned value sets the minimum allowed boundary for the clock check counter after 32 receive high-frequency master clock (AHCLKR) signals have been received. If RCNT is less than RMIN after counting 32 AHCLKR signals, RCKFAIL in RSTAT is set. The comparison is performed using unsigned arithmetic." range="" rwaccess="RW"/>
    <bitfield id="RESERVED" width="4" begin="7" end="4" resetval="0x0" description="" range="" rwaccess="RW"/>
    <bitfield id="RPS" width="4" begin="3" end="0" resetval="0x0" description="Receive clock check prescaler value.0x9 - 0xF: Reserved enum=DIVBY8 ." range="" rwaccess="RW">
      <bitenum value="0" id="DIVBY64" token="RPS_0" description="MCASP system clock divided by 1"/>
      <bitenum value="1" id="DIVBY2" token="RPS_1" description="MCASP system clock divided by 2"/>
      <bitenum value="2" id="DIVBY128" token="RPS_2" description="MCASP system clock divided by 4"/>
      <bitenum value="3" id="DIVBY1" token="RPS_3" description="MCASP system clock divided by 8"/>
      <bitenum value="4" id="DIVBY4" token="RPS_4" description="MCASP system clock divided by 16"/>
      <bitenum value="5" id="DIVBY256" token="RPS_5" description="MCASP system clock divided by 32"/>
      <bitenum value="6" id="DIVBY16" token="RPS_6" description="MCASP system clock divided by 64"/>
      <bitenum value="7" id="DIVBY32" token="RPS_7" description="MCASP system clock divided by 128"/>
      <bitenum value="8" id="DIVBY8" token="RPS_8" description="MCASP system clock divided by 256"/>
    </bitfield>
  </register>
  <register id="MCASP_TXMASK" acronym="MCASP_TXMASK" offset="0xA4" width="32" description="Transmit format unit bit mask register - Determines which bits of the transmitted data are masked off before being shifted out the MCASP">
    <bitfield id="XMASK_31_0" width="32" begin="31" end="0" resetval="0" description="Transmit data mask enable bit" range="" rwaccess="RW">
      <bitenum value="0" id="MCASP_0" token="XMASK_31_0_0" description="The corresponding bit of transmit data is masked out and then transmitted out the MCASP in place of the original bit."/>
      <bitenum value="1" id="MCASP._1" token="XMASK_31_0_1" description="The corresponding bit of transmit data is transmitted out the MCASP."/>
    </bitfield>
  </register>
  <register id="MCASP_TXFMT" acronym="MCASP_TXFMT" offset="0xA8" width="32" description="Transmit bitstream format register - configures the transmit data format">
    <bitfield id="RESERVED" width="14" begin="31" end="18" resetval="0x0000" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="XDATDLY" width="2" begin="17" end="16" resetval="0x0" description="Transmit sync bit delay" range="" rwaccess="RW">
      <bitenum value="0" id="0BIT" token="XDATDLY_0" description="0 bit delay - The first transmit data bit, on the AXR[n], occurs in the same abemcasp_aclkx cycle as the transmit frame sync (abemcasp_afsx)."/>
      <bitenum value="1" id="1BIT" token="XDATDLY_1" description="1-bit delay. The first transmit data bit, AXR[n], occurs one ACLKX cycle after the transmit frame sync (AFSX)."/>
      <bitenum value="2" id="2BIT" token="XDATDLY_2" description="2-bit delay. The first transmit data bit, AXR[n], occurs two ACLKX cycles after the transmit frame sync (AFSX)."/>
      <bitenum value="3" id="2BIT" token="XDATDLY_3" description="Reserved"/>
    </bitfield>
    <bitfield id="XRVRS" width="1" begin="15" end="15" resetval="0x0" description="Transmit serial bitstream order 0x0: Bitstream is LSB first. No bit reversal is performed in transmit format unit. 0x1: Bitstream is MSB first. Bit reversal is performed in transmit format bit reverse unit." range="" rwaccess="RW"/>
    <bitfield id="XPAD" width="2" begin="14" end="13" resetval="0x00" description="Pad value for extra bits in slot not belonging to word defined by XMASK. This field only applies to bits when XMASK[n] = 0. 0x0: Pad extra bits with 0. 0x1: Pad extra bits with 1. 0x2: Pad extra bits with one of the bits from the word as specified by XPBIT bits. 0x3: Reserved" range="" rwaccess="RW"/>
    <bitfield id="XPBIT" width="5" begin="12" end="8" resetval="0x0" description="XPBIT value determines which bit (as written by the CPU or DMA to XBUF[n]) is used to pad the extra bits before shifting. This field only applies when XPAD = 0x2." range="" rwaccess="RW"/>
    <bitfield id="XSSZ" width="4" begin="7" end="4" resetval="0x0" description="Transmit slot size0x0 - 0x2 : Reserved enum=RSV8 ." range="" rwaccess="RW">
      <bitenum value="3" id="RSV8" token="XSSZ_3" description="Slot size is 8 bits"/>
      <bitenum value="4" id="RSV8" token="XSSZ_4" description="Reserved"/>
      <bitenum value="5" id="RSV8" token="XSSZ_5" description="Slot size is 12 bits"/>
      <bitenum value="6" id="RSV8" token="XSSZ_6" description="Reserved"/>
      <bitenum value="7" id="RSV8" token="XSSZ_7" description="Slot size is 16 bits"/>
      <bitenum value="8" id="RSV8" token="XSSZ_8" description="Reserved"/>
      <bitenum value="9" id="RSV8" token="XSSZ_9" description="Slot size is 20 bits"/>
      <bitenum value="10" id="RSV8" token="XSSZ_10" description="Reserved"/>
      <bitenum value="11" id="RSV8" token="XSSZ_11" description="Slot size is 24 bits"/>
      <bitenum value="12" id="RSV8" token="XSSZ_12" description="Reserved"/>
      <bitenum value="13" id="RSV8" token="XSSZ_13" description="Slot size is 28 bits"/>
      <bitenum value="14" id="RSV8" token="XSSZ_14" description="Reserved"/>
      <bitenum value="15" id="Slot_size_is_32_bits." token="XSSZ_15" description="Slot size is 32 bits."/>
    </bitfield>
    <bitfield id="XBUSEL" width="1" begin="3" end="3" resetval="0" description="Selects whether writes to the serializer buffer XBUF[n] originate from the peripheral configuration CFG port or the DATA port." range="" rwaccess="RW">
      <bitenum value="0" id="VBUSP" token="XBUSEL_0" description="Writes to XBUF[n] originate from the DATA port. Writes to XBUF[n] from the peripheral configuration port are ignored with no effect on the MCASP."/>
      <bitenum value="1" id="VBUS" token="XBUSEL_1" description="Writes to XBUF[n] originate from the peripheral configuration port - CFG port. Writes to XBUF[n] from the DATA port are ignored with no effect on the MCASP."/>
    </bitfield>
    <bitfield id="XROT" width="3" begin="2" end="0" resetval="0x0" description="Right-rotation value for transmit rotate right format unit" range="" rwaccess="RW">
      <bitenum value="0" id="12BITS" token="XROT_0" description="Rotate right by 0 (no rotation)."/>
      <bitenum value="1" id="Rotate_right_by_4_bit_positions." token="XROT_1" description="Rotate right by 4 bit positions."/>
      <bitenum value="2" id="Rotate_right_by_8_bit_positions." token="XROT_2" description="Rotate right by 8 bit positions."/>
      <bitenum value="3" id="Rotate_right_by_12_bit_positions." token="XROT_3" description="Rotate right by 12 bit positions."/>
      <bitenum value="4" id="Rotate_right_by_16_bit_positions." token="XROT_4" description="Rotate right by 16 bit positions."/>
      <bitenum value="5" id="Rotate_right_by_20_bit_positions." token="XROT_5" description="Rotate right by 20 bit positions."/>
      <bitenum value="6" id="Rotate_right_by_24_bit_positions." token="XROT_6" description="Rotate right by 24 bit positions."/>
      <bitenum value="7" id="Rotate_right_by_28_bit_positions." token="XROT_7" description="Rotate right by 28 bit positions."/>
    </bitfield>
  </register>
  <register id="MCASP_TXFMCTL" acronym="MCASP_TXFMCTL" offset="0xAC" width="32" description="Transmit frame-sync control register - configures the transmit frame sync (abemcasp_afsx).">
    <bitfield id="RESERVED" width="16" begin="31" end="16" resetval="0x0000" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="XMOD" width="9" begin="15" end="7" resetval="0x000" description="Transmit frame-sync mode select bits 0x0 - 0x1: Reserved 0x2: 2-slot TDM mode () 0x3 - 0x20: 3-slot TDM to 32-slot TDM mode 0x21 - 0x17F: Reserved 0x180: 384-slot DIT mode All other: Reserved" range="" rwaccess="RW"/>
    <bitfield id="RESERVED" width="2" begin="6" end="5" resetval="0x0" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="FXWID" width="1" begin="4" end="4" resetval="0" description="The transmit frame-sync width select bit indicates the width of the transmit frame sync (abemcasp_afsx) during its active period." range="" rwaccess="RW">
      <bitenum value="0" id="WORD" token="FXWID_0" description="Single bit"/>
      <bitenum value="1" id="Single_word" token="FXWID_1" description="Single word"/>
    </bitfield>
    <bitfield id="RESERVED" width="2" begin="3" end="2" resetval="0x0" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="FSXM" width="1" begin="1" end="1" resetval="0" description="Transmit frame-sync generation select bit" range="" rwaccess="RW">
      <bitenum value="0" id="INTERNAL" token="FSXM_0" description="Externally-generated transmit frame"/>
      <bitenum value="1" id="1" token="FSXM_1" description="Internally-generated transmit frame sync"/>
    </bitfield>
    <bitfield id="FSXP" width="1" begin="0" end="0" resetval="0" description="Transmit frame-sync polarity select bit" range="" rwaccess="RW">
      <bitenum value="0" id="FALLINGEDGE" token="FSXP_0" description="Rising Edge - A rising edge on transmit frame sync (abemcasp_afsx) indicates the beginning of a frame."/>
      <bitenum value="1" id="A_1" token="FSXP_1" description="A falling edge on transmit frame sync (abemcasp_afsx) indicates the beginning of a frame."/>
    </bitfield>
  </register>
  <register id="MCASP_ACLKXCTL" acronym="MCASP_ACLKXCTL" offset="0xB0" width="32" description="Transmit clock control register - Configures the transmit bit clock (abemcasp_aclkx) and the transmit clock generator.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x00" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="CLKXP" width="1" begin="7" end="7" resetval="0" description="Transmit bitstream clock polarity select bit." range="" rwaccess="RW">
      <bitenum value="0" id="0" token="CLKXP_0" description="Rising edge. External receiver samples data on the falling edge of the serial clock, so the transmitter must shift data out on the rising edge of the serial clock."/>
      <bitenum value="1" id="1" token="CLKXP_1" description="Falling edge. External receiver samples data on the rising edge of the serial clock, so the transmitter must shift data out on the falling edge of the serial clock."/>
    </bitfield>
    <bitfield id="ASYNC" width="1" begin="6" end="6" resetval="1" description="Transmit operation asynchronous enable bit" range="" rwaccess="RW">
      <bitenum value="0" id="ASYNC" token="ASYNC_0" description="Synchronous. Transmit clock and frame sync provides the source for both the transmit and receive sections. Note that in this mode, the receive bit clock is an inverted version of the transmit bit clock."/>
      <bitenum value="1" id="Asynchronous" token="ASYNC_1" description="Asynchronous"/>
    </bitfield>
    <bitfield id="CLKXM" width="1" begin="5" end="5" resetval="1" description="Transmit bit clock source bit" range="" rwaccess="RW">
      <bitenum value="0" id="INTERNAL" token="CLKXM_0" description="External transmit clock source from ACLKX pin."/>
      <bitenum value="1" id="Internal_(output_of_divider)" token="CLKXM_1" description="Internal (output of divider)"/>
    </bitfield>
    <bitfield id="CLKXDIV" width="5" begin="4" end="0" resetval="0x00" description="Transmit bit clock divide ratio bits, determine the divide-down ratio from AHCLKX to ACLKX. 0x0: Divide-by-1 0x1: Divide-by-2 0x2 to 0x1F: Divide-by-3 to divide-by-32" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_AHCLKXCTL" acronym="MCASP_AHCLKXCTL" offset="0xB4" width="32" description="High-frequency transmit clock control register - Configures the transmit high-frequency master clock (abemcasp_ahclkx) and the transmit clock generator.">
    <bitfield id="RESERVED" width="16" begin="31" end="16" resetval="0x000" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="HCLKXM" width="1" begin="15" end="15" resetval="1" description="Transmit high-frequency clock source bit" range="" rwaccess="RW">
      <bitenum value="0" id="INTERNAL" token="HCLKXM_0" description="External transmit high-frequency clock source from AHCLKX pin."/>
      <bitenum value="1" id="1" token="HCLKXM_1" description="Internal transmit high-frequency clock source from output of programmable high clock divider"/>
    </bitfield>
    <bitfield id="HCLKXP" width="1" begin="14" end="14" resetval="0" description="Transmit bitstream high-frequency clock polarity select bit." range="" rwaccess="RW">
      <bitenum value="0" id="AHCLKX_0" token="HCLKXP_0" description="Not inverted. AHCLKX is not inverted before programmable bit clock divider."/>
      <bitenum value="1" id="AHCLKX_1" token="HCLKXP_1" description="Inverted. AHCLKX is inverted before programmable bit clock divider."/>
    </bitfield>
    <bitfield id="RESERVED" width="2" begin="13" end="12" resetval="0x0" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="HCLKXDIV" width="12" begin="11" end="0" resetval="0x000" description="Transmit high-frequency clock divide ratio bits determine the divide-down ratio from AUXCLK to abemcasp_ahclkx. 0x0: Divide-by-1 0x1: Divide-by-2 0x2 to 0xFFF: Divide-by-3 to divide-by-4096" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_TXTDM" acronym="MCASP_TXTDM" offset="0xB8" width="32" description="Transmit TDM slot 0-31 register - TDM time slot counter range is to 384 slots (to support SPDIF blocks of 384 subframes).">
    <bitfield id="XTDMS_31_0" width="32" begin="31" end="0" resetval="0" description="Transmitter mode during TDM time slot n" range="" rwaccess="RW">
      <bitenum value="0" id="TDM_0" token="XTDMS_31_0_0" description="Transmit TDM time slot n is inactive. The transmit serializer does not shift out data during this slot."/>
      <bitenum value="1" id="TDM_1" token="XTDMS_31_0_1" description="The transmit TDM time slot n is active. The transmit serializer shifts out data during this slot according to the serializer control registers - (where n=0 to 3)."/>
    </bitfield>
  </register>
  <register id="MCASP_EVTCTLX" acronym="MCASP_EVTCTLX" offset="0xBC" width="32" description="Transmitter Interrupt control register - controls generation of the MCASP transmit interrupt (XINT). When the register bit(s) is set to 1, the occurrence of the enabled MCASP condition(s) generates XINT.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x000000" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="XSTAFRM" width="1" begin="7" end="7" resetval="0" description="Transmit start of frame interrupt enable bit" range="" rwaccess="RW">
      <bitenum value="0" id="ENABLE" token="XSTAFRM_0" description="Interrupt is disabled. A transmit-start-of-frame interrupt does not generate a MCASP transmit interrupt (XINT)."/>
      <bitenum value="1" id="A_MCASP_(XINT)._1" token="XSTAFRM_1" description="Interrupt is enabled. A transmit-start-of-frame interrupt generates a MCASP transmit interrupt (XINT)."/>
    </bitfield>
    <bitfield id="RESERVED" width="1" begin="6" end="6" resetval="0" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="XDATA" width="1" begin="5" end="5" resetval="0" description="Transmit data-ready interrupt enable bit" range="" rwaccess="RW">
      <bitenum value="0" id="ENABLE" token="XDATA_0" description="Interrupt is disabled. A transmit data-ready interrupt does not generate a MCASP transmit interrupt (XINT)."/>
      <bitenum value="1" id="A_MCASP_(XINT)._1" token="XDATA_1" description="Interrupt is enabled. A transmit data-ready interrupt generates a MCASP transmit interrupt (XINT)."/>
    </bitfield>
    <bitfield id="XLAST" width="1" begin="4" end="4" resetval="0" description="Transmit last slot interrupt enable bit" range="" rwaccess="RW">
      <bitenum value="0" id="ENABLE" token="XLAST_0" description="Interrupt is disabled. A transmit-last-slot interrupt does not generate a MCASP transmit interrupt (XINT)."/>
      <bitenum value="1" id="A_MCASP_(XINT)._1" token="XLAST_1" description="Interrupt is enabled. A transmit-last-slot interrupt generates a MCASP transmit interrupt (XINT)."/>
    </bitfield>
    <bitfield id="XDMAERR" width="1" begin="3" end="3" resetval="0" description="Transmit DMA error interrupt enable bit" range="" rwaccess="RW">
      <bitenum value="0" id="ENABLE" token="XDMAERR_0" description="Interrupt is disabled. A transmit DMA error interrupt does not generate a MCASP transmit interrupt (XINT)."/>
      <bitenum value="1" id="A_DMA_MCASP_(XINT)._1" token="XDMAERR_1" description="Interrupt is enabled. A transmit DMA error interrupt generates a MCASP transmit interrupt (XINT)."/>
    </bitfield>
    <bitfield id="XCKFAIL" width="1" begin="2" end="2" resetval="0" description="Transmit clock failure interrupt enable bit" range="" rwaccess="RW">
      <bitenum value="0" id="ENABLE" token="XCKFAIL_0" description="Interrupt is disabled. A transmit clock failure interrupt does not generate a MCASP transmit interrupt (XINT)."/>
      <bitenum value="1" id="A_MCASP_(XINT)._1" token="XCKFAIL_1" description="Interrupt is enabled. A transmit clock failure interrupt generates a MCASP transmit interrupt (XINT)."/>
    </bitfield>
    <bitfield id="XSYNCERR" width="1" begin="1" end="1" resetval="0" description="Unexpected transmit frame-sync interrupt enable bit" range="" rwaccess="RW">
      <bitenum value="0" id="ENABLE" token="XSYNCERR_0" description="Interrupt is disabled. An unexpected transmit frame-sync interrupt does not generate a MCASP transmit interrupt (XINT)."/>
      <bitenum value="1" id="MCASP_(XINT)._1" token="XSYNCERR_1" description="Interrupt is enabled. An unexpected transmit frame-sync interrupt generates a MCASP transmit interrupt (XINT)."/>
    </bitfield>
    <bitfield id="XUNDRN" width="1" begin="0" end="0" resetval="0" description="Transmitter underrun interrupt enable bit" range="" rwaccess="RW">
      <bitenum value="0" id="ENABLE" token="XUNDRN_0" description="Interrupt is disabled. A transmitter underrun interrupt does not generate a MCASP transmit interrupt (XINT)."/>
      <bitenum value="1" id="A_MCASP_(XINT)._1" token="XUNDRN_1" description="Interrupt is enabled. A transmitter underrun interrupt generates a MCASP transmit interrupt (XINT)."/>
    </bitfield>
  </register>
  <register id="MCASP_TXSTAT" acronym="MCASP_TXSTAT" offset="0xC0" width="32" description="Transmitter status register - If the MCASP logic attempts to set an interrupt flag in the same cycle that the CPU writes to the flag to clear it, the MCASP logic has priority and the flag remains set. This also causes the generation of a new interrupt request.">
    <bitfield id="RESERVED" width="23" begin="31" end="9" resetval="0x000000" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="XERR" width="1" begin="8" end="8" resetval="0" description="XERR bit always returns a logic-OR of: XUNDRN | XSYNCERR | XCKFAIL | XDMAERR. Allows a single bit to be checked to determine if a transmitter error interrupt has occurred." range="" rwaccess="RW">
      <bitenum value="0" id="ERROR" token="XERR_0" description="No errors have occurred."/>
      <bitenum value="1" id="An_error_has_occurred." token="XERR_1" description="An error has occurred."/>
    </bitfield>
    <bitfield id="XDMAERR" width="1" begin="7" end="7" resetval="0" description="Transmit DMA error flag. XDMAERR is set when the CPU or DMA writes more words to the DATA port of the MCASP in a given time slot than it should. Causes a transmit interrupt (XINT) if this bit and XDMAERR inMCASP_EVTCTLX are set. This bit is cleared by writing a 1 to it. Writing a 0 has no effect." range="" rwaccess="RW">
      <bitenum value="0" id="OCCUR" token="XDMAERR_0" description="Transmit DMA error did not occur."/>
      <bitenum value="1" id="Transmit_DMA_error_occurred." token="XDMAERR_1" description="Transmit DMA error occurred."/>
    </bitfield>
    <bitfield id="XSTAFRM" width="1" begin="6" end="6" resetval="0" description="Transmit start of frame flag. Causes a transmit interrupt (XINT) if this bit and XSTAFRM inMCASP_EVTCTLX are set. This bit is cleared by writing a 1 to it. Writing a 0 has no effect." range="" rwaccess="RW">
      <bitenum value="0" id="OCCUR" token="XSTAFRM_0" description="No new transmit frame sync (AFSX) is detected."/>
      <bitenum value="1" id="A_(AFSX)_1" token="XSTAFRM_1" description="A new transmit frame sync (AFSX) is detected."/>
    </bitfield>
    <bitfield id="XDATA" width="1" begin="5" end="5" resetval="0" description="Transmit data ready flag. Causes a transmit interrupt (XINT) if this bit and XDATA inMCASP_EVTCTLX are set. This bit is cleared by writing a 1 to iit. Writing a 0 has no effect" range="" rwaccess="RW">
      <bitenum value="0" id="OCCUR" token="XDATA_0" description="XBUF[n] is written and is full"/>
      <bitenum value="1" id="XDATA_XDATA_DMA_(AXEVT)._1" token="XDATA_1" description="Data is copied from XBUF[n] to XRSR[n]. XBUF[n] is empty and ready to be written. XDATA is also set when the transmit serializers are taken out of reset. When XDATA is set, it always causes a DMA event (AXEVT)."/>
    </bitfield>
    <bitfield id="XLAST" width="1" begin="4" end="4" resetval="0" description="Transmit last slot flag. XLAST, along with XDATA, are set if the current slot is the last slot in a frame. Causes a transmit interrupt (XINT) if this bit and XLAST inMCASP_EVTCTLX are set. This bit is cleared by writing a 1 to iit. Writing a 0 has no effect." range="" rwaccess="RW">
      <bitenum value="0" id="OCCUR" token="XLAST_0" description="Current slot is not the last slot in a frame."/>
      <bitenum value="1" id="XDATA_1" token="XLAST_1" description="Current slot is the last slot in a frame. XDATA is also set."/>
    </bitfield>
    <bitfield id="XTDMSLOT" width="1" begin="3" end="3" resetval="0" description="Returns the LSB of XSLOT. Allows a single read of XSTAT to determine whether the current TDM time slot is even or odd." range="" rwaccess="R">
      <bitenum value="0" id="EVENSLOT" token="XTDMSLOT_0_r" description="Current TDM time slot is odd."/>
      <bitenum value="1" id="Current_TDM_time_slot_is_even." token="XTDMSLOT_1_r" description="Current TDM time slot is even."/>
    </bitfield>
    <bitfield id="XCKFAIL" width="1" begin="2" end="2" resetval="0" description="Transmit clock failure flag. XCKFAIL is set when the transmit clock failure detection circuit reports an error. Causes a transmit interrupt (XINT) if this bit and XCKFAIL inMCASP_EVTCTLX are set. This bit is cleared by writing a 1 to iit. Writing a 0 has no effect." range="" rwaccess="RW">
      <bitenum value="0" id="OCCUR" token="XCKFAIL_0" description="Transmit clock failure did not occur."/>
      <bitenum value="1" id="Transmit_clock_failure_occurred" token="XCKFAIL_1" description="Transmit clock failure occurred"/>
    </bitfield>
    <bitfield id="XSYNCERR" width="1" begin="1" end="1" resetval="0" description="Unexpected transmit frame-sync flag. XSYNCERR is set when a new transmit frame sync (AFSX) occurs before it is expected. Causes a transmit interrupt (XINT) if this bit and XSYNCERR inMCASP_EVTCTLX are set. This bit is cleared by writing a 1 to iit. Writing a 0 has no effect." range="" rwaccess="RW">
      <bitenum value="0" id="OCCUR" token="XSYNCERR_0" description="Unexpected transmit frame sync did not occur"/>
      <bitenum value="1" id="1" token="XSYNCERR_1" description="Unexpected transmit frame sync occurred."/>
    </bitfield>
    <bitfield id="XUNDRN" width="1" begin="0" end="0" resetval="0" description="Transmitter underrun flag. XUNDRN is set when the transmit serializer is instructed to transfer data from XBUF[n] to XRSR[n], but XBUF[n] has not yet been serviced with new data since the last transfer. Causes a transmit interrupt (XINT) if this bit and XUNDRN inMCASP_EVTCTLX are set. This bit is cleared by writing a 1 to iit. Writing a 0 has no effect." range="" rwaccess="RW">
      <bitenum value="0" id="OCCUR" token="XUNDRN_0" description="Transmitter underrun did not occur"/>
      <bitenum value="1" id="Transmitter_underrun_occurred." token="XUNDRN_1" description="Transmitter underrun occurred."/>
    </bitfield>
  </register>
  <register id="MCASP_TXTDMSLOT" acronym="MCASP_TXTDMSLOT" offset="0xC4" width="32" description="Current transmit TDM time slot register">
    <bitfield id="RESERVED" width="23" begin="31" end="9" resetval="0x000000" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="XSLOTCNT" width="9" begin="8" end="0" resetval="0x000" description="Current transmit time slot count. the value of this register is 0b101111111 (0x17f) during reset and 0 after reset." range="" rwaccess="R"/>
  </register>
  <register id="MCASP_TXCLKCHK" acronym="MCASP_TXCLKCHK" offset="0xC8" width="32" description="Transmit clock check control register - configures the transmit clock failure detection circuit.">
    <bitfield id="XCNT" width="8" begin="31" end="24" resetval="0x00" description="Transmit clock count value (from previous measurement). The clock circuit continually counts the number of system clocks for every 32 transmit high-frequency master clock (abemcasp_ahclkx) signals, and stores the count in XCNT until the next measurement is taken" range="" rwaccess="R"/>
    <bitfield id="XMAX" width="8" begin="23" end="16" resetval="0x00" description="0x0 to 0xFF: Transmit clock maximum boundary. This 8-bit unsigned value sets the maximum allowed boundary for the clock check counter after 32 transmit high-frequency master clock (abemcasp_ahclkx) signals have been received. If the current counter value is greater than XMAX after counting 32 AHCLKX signals, XCKFAIL in XSTAT is set. The comparison is performed using unsigned arithmetic." range="" rwaccess="RW"/>
    <bitfield id="XMIN" width="8" begin="15" end="8" resetval="0x00" description="0x0 to 0xFF: Transmit clock minimum boundary. This 8-bit unsigned value sets the minimum allowed boundary for the clock check counter after 32 transmit high-frequency master clock (abemcasp_ahclkx) signals have been received. If XCNT is less than XMIN after counting 32 AHCLKX signals, XCKFAIL in XSTAT is set. The comparison is performed using unsigned arithmetic." range="" rwaccess="RW"/>
    <bitfield id="RESERVED" width="4" begin="7" end="4" resetval="0x0" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="XPS" width="4" begin="3" end="0" resetval="0x0" description="Transmit clock check prescaler value 0x0: MCASP system clock divided by 1 0x1: MCASP system clock divided by 2 0x2: MCASP system clock divided by 4 0x3: MCASP system clock divided by 8 0x4: MCASP system clock divided by 16 0x5: MCASP system clock divided by 32 0x6: MCASP system clock divided by 64 0x7: MCASP system clock divided by 128 0x8: MCASP system clock divided by 256 0x9 to 0xF: Reserved" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_TXEVTCTL" acronym="MCASP_TXEVTCTL" offset="0xCC" width="32" description="Transmitter DMA event control register">
    <bitfield id="RESERVED" width="31" begin="31" end="1" resetval="0x0000 0000" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="XDATDMA" width="1" begin="0" end="0" resetval="0" description="Transmit data DMA request enable bit." range="" rwaccess="RW">
      <bitenum value="0" id="DMA_0" token="XDATDMA_0" description="The transmit data DMA request is enabled."/>
      <bitenum value="1" id="DMA_1" token="XDATDMA_1" description="The transmit data DMA request is disabled."/>
    </bitfield>
  </register>
  <register id="MCASP_DITCSRAi_0" acronym="MCASP_DITCSRAi_0" offset="0x100" width="32" description="DIT left channel status register - All six 32-bit registers (I = 0 to 5) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register file before a different set of data needs to be sent.">
    <bitfield id="DITCSRAi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Left (even TDM slot ) channel status" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITCSRAi_1" acronym="MCASP_DITCSRAi_1" offset="0x104" width="32" description="DIT left channel status register - All six 32-bit registers (I = 0 to 5) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register file before a different set of data needs to be sent.">
    <bitfield id="DITCSRAi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Left (even TDM slot ) channel status" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITCSRAi_2" acronym="MCASP_DITCSRAi_2" offset="0x108" width="32" description="DIT left channel status register - All six 32-bit registers (I = 0 to 5) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register file before a different set of data needs to be sent.">
    <bitfield id="DITCSRAi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Left (even TDM slot ) channel status" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITCSRAi_3" acronym="MCASP_DITCSRAi_3" offset="0x10C" width="32" description="DIT left channel status register - All six 32-bit registers (I = 0 to 5) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register file before a different set of data needs to be sent.">
    <bitfield id="DITCSRAi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Left (even TDM slot ) channel status" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITCSRAi_4" acronym="MCASP_DITCSRAi_4" offset="0x110" width="32" description="DIT left channel status register - All six 32-bit registers (I = 0 to 5) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register file before a different set of data needs to be sent.">
    <bitfield id="DITCSRAi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Left (even TDM slot ) channel status" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITCSRAi_5" acronym="MCASP_DITCSRAi_5" offset="0x114" width="32" description="DIT left channel status register - All six 32-bit registers (I = 0 to 5) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register file before a different set of data needs to be sent.">
    <bitfield id="DITCSRAi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Left (even TDM slot ) channel status" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITCSRBi_0" acronym="MCASP_DITCSRBi_0" offset="0x118" width="32" description="DIT right channel status register - All six 32-bit registers (I = 0 to 5) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register file before a different set of data needs to be sent.">
    <bitfield id="DITCSRBi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Right (odd TDM slot ) channel status" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITCSRBi_1" acronym="MCASP_DITCSRBi_1" offset="0x11C" width="32" description="DIT right channel status register - All six 32-bit registers (I = 0 to 5) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register file before a different set of data needs to be sent.">
    <bitfield id="DITCSRBi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Right (odd TDM slot ) channel status" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITCSRBi_2" acronym="MCASP_DITCSRBi_2" offset="0x120" width="32" description="DIT right channel status register - All six 32-bit registers (I = 0 to 5) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register file before a different set of data needs to be sent.">
    <bitfield id="DITCSRBi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Right (odd TDM slot ) channel status" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITCSRBi_3" acronym="MCASP_DITCSRBi_3" offset="0x124" width="32" description="DIT right channel status register - All six 32-bit registers (I = 0 to 5) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register file before a different set of data needs to be sent.">
    <bitfield id="DITCSRBi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Right (odd TDM slot ) channel status" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITCSRBi_4" acronym="MCASP_DITCSRBi_4" offset="0x128" width="32" description="DIT right channel status register - All six 32-bit registers (I = 0 to 5) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register file before a different set of data needs to be sent.">
    <bitfield id="DITCSRBi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Right (odd TDM slot ) channel status" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITCSRBi_5" acronym="MCASP_DITCSRBi_5" offset="0x12C" width="32" description="DIT right channel status register - All six 32-bit registers (I = 0 to 5) can store 192 bits of channel status data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register file before a different set of data needs to be sent.">
    <bitfield id="DITCSRBi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Right (odd TDM slot ) channel status" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITUDRAi_0" acronym="MCASP_DITUDRAi_0" offset="0x130" width="32" description="DIT left channel user data register - provides the user data of each left channel (even TDM time slot). All six 32-bit registers (I = 0 to 5) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register before a different set of data needs to be sent.">
    <bitfield id="DITUDRAi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Left (even TDM slot ) user data" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITUDRAi_1" acronym="MCASP_DITUDRAi_1" offset="0x134" width="32" description="DIT left channel user data register - provides the user data of each left channel (even TDM time slot). All six 32-bit registers (I = 0 to 5) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register before a different set of data needs to be sent.">
    <bitfield id="DITUDRAi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Left (even TDM slot ) user data" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITUDRAi_2" acronym="MCASP_DITUDRAi_2" offset="0x138" width="32" description="DIT left channel user data register - provides the user data of each left channel (even TDM time slot). All six 32-bit registers (I = 0 to 5) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register before a different set of data needs to be sent.">
    <bitfield id="DITUDRAi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Left (even TDM slot ) user data" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITUDRAi_3" acronym="MCASP_DITUDRAi_3" offset="0x13C" width="32" description="DIT left channel user data register - provides the user data of each left channel (even TDM time slot). All six 32-bit registers (I = 0 to 5) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register before a different set of data needs to be sent.">
    <bitfield id="DITUDRAi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Left (even TDM slot ) user data" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITUDRAi_4" acronym="MCASP_DITUDRAi_4" offset="0x140" width="32" description="DIT left channel user data register - provides the user data of each left channel (even TDM time slot). All six 32-bit registers (I = 0 to 5) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register before a different set of data needs to be sent.">
    <bitfield id="DITUDRAi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Left (even TDM slot ) user data" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITUDRAi_5" acronym="MCASP_DITUDRAi_5" offset="0x144" width="32" description="DIT left channel user data register - provides the user data of each left channel (even TDM time slot). All six 32-bit registers (I = 0 to 5) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register before a different set of data needs to be sent.">
    <bitfield id="DITUDRAi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Left (even TDM slot ) user data" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITUDRBi_0" acronym="MCASP_DITUDRBi_0" offset="0x148" width="32" description="DIT right user data register - provides the user data of each right channel (odd TDM time slot). All six 32-bit registers (I = 0 to 5) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register before a different set of data needs to be sent.">
    <bitfield id="DITUDRBi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Right (odd TDM slot ) user data" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITUDRBi_1" acronym="MCASP_DITUDRBi_1" offset="0x14C" width="32" description="DIT right user data register - provides the user data of each right channel (odd TDM time slot). All six 32-bit registers (I = 0 to 5) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register before a different set of data needs to be sent.">
    <bitfield id="DITUDRBi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Right (odd TDM slot ) user data" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITUDRBi_2" acronym="MCASP_DITUDRBi_2" offset="0x150" width="32" description="DIT right user data register - provides the user data of each right channel (odd TDM time slot). All six 32-bit registers (I = 0 to 5) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register before a different set of data needs to be sent.">
    <bitfield id="DITUDRBi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Right (odd TDM slot ) user data" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITUDRBi_3" acronym="MCASP_DITUDRBi_3" offset="0x154" width="32" description="DIT right user data register - provides the user data of each right channel (odd TDM time slot). All six 32-bit registers (I = 0 to 5) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register before a different set of data needs to be sent.">
    <bitfield id="DITUDRBi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Right (odd TDM slot ) user data" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITUDRBi_4" acronym="MCASP_DITUDRBi_4" offset="0x158" width="32" description="DIT right user data register - provides the user data of each right channel (odd TDM time slot). All six 32-bit registers (I = 0 to 5) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register before a different set of data needs to be sent.">
    <bitfield id="DITUDRBi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Right (odd TDM slot ) user data" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_DITUDRBi_5" acronym="MCASP_DITUDRBi_5" offset="0x15C" width="32" description="DIT right user data register - provides the user data of each right channel (odd TDM time slot). All six 32-bit registers (I = 0 to 5) can store 192 bits of user data for a complete block of transmission. The DIT reuses the same data for the next block. Make sure to update the register before a different set of data needs to be sent.">
    <bitfield id="DITUDRBi" width="32" begin="31" end="0" resetval="0x0000 0000" description="Right (odd TDM slot ) user data" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_XRSRCTLn_0" acronym="MCASP_XRSRCTLn_0" offset="0x180" width="32" description="Serializer n control register, (where n=0 to 3 in the device).">
    <bitfield id="RESERVED" width="26" begin="31" end="6" resetval="0x0000000" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="RRDY" width="1" begin="5" end="5" resetval="0" description="Receive buffer ready bit. RRDY indicates the current receive buffer state. Always reads 0 when programmed as a transmitter or as inactive. If SRMOD bit is set to receive (2h), RRDY switches from 0 to 1 whenever data is transferred from XRSRn to RBUFn." range="" rwaccess="R">
      <bitenum value="0" id="Receive_buffer_()_is_empty." token="RRDY_0_r" description="Receive buffer () is empty."/>
      <bitenum value="1" id="1" token="RRDY_1_r" description="Receive buffer () contains data and needs to be read before the start of the next time slot or a receiver overrun occurs."/>
    </bitfield>
    <bitfield id="XRDY" width="1" begin="4" end="4" resetval="0" description="Transmit buffer ready bit. XRDY indicates the current transmit buffer state. Always reads 0 when programmed as a receiver or as inactive. If SRMOD bit is set to transmit (1h), XRDY switches from 0 to 1 when XSRCLR in GBLCTL is switched from 0 to 1 to indicate an empty transmitter. XRDY remains set until XSRCLR is forced to 0, data is written to the corresponding transmit buffer, or SRMOD bit is changed to receive (2h) or inactive (0)." range="" rwaccess="R">
      <bitenum value="0" id="DATA" token="XRDY_0_r" description="The transmit buffer () contains data."/>
      <bitenum value="1" id="1" token="XRDY_1_r" description="The transmit buffer () is empty and needs to be written before the start of the next time slot or a transmit underrun occurs."/>
    </bitfield>
    <bitfield id="DISMOD" width="2" begin="3" end="2" resetval="0x0" description="Serializer pin drive mode bit. Drive on pin when in inactive TDM slot of transmit mode or when serializer is inactive. This field only applies if the pin is configured as a MCASP pin (PFUNC = 0)." range="" rwaccess="RW">
      <bitenum value="0" id="Drive_on_pin_is_3-state." token="DISMOD_0" description="Drive on pin is 3-state."/>
      <bitenum value="1" id="Reserved" token="DISMOD_1" description="Reserved"/>
      <bitenum value="2" id="Drive_on_pin_is_logic_low." token="DISMOD_2" description="Drive on pin is logic low."/>
      <bitenum value="3" id="Drive_on_pin_is_logic_high." token="DISMOD_3" description="Drive on pin is logic high."/>
    </bitfield>
    <bitfield id="SRMOD" width="2" begin="1" end="0" resetval="0x0" description="Serializer mode bit" range="" rwaccess="RW">
      <bitenum value="0" id="INACTIVE" token="SRMOD_0" description="The serializer is inactive"/>
      <bitenum value="1" id="RCV" token="SRMOD_1" description="The serializer is operating in transmit mode."/>
      <bitenum value="2" id="RCV" token="SRMOD_2" description="The serializer is operating in receive mode."/>
      <bitenum value="3" id="RCV" token="SRMOD_3" description="Reserved"/>
    </bitfield>
  </register>
  <register id="MCASP_XRSRCTLn_1" acronym="MCASP_XRSRCTLn_1" offset="0x184" width="32" description="Serializer n control register, (where n=0 to 3 in the device).">
    <bitfield id="RESERVED" width="26" begin="31" end="6" resetval="0x0000000" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="RRDY" width="1" begin="5" end="5" resetval="0" description="Receive buffer ready bit. RRDY indicates the current receive buffer state. Always reads 0 when programmed as a transmitter or as inactive. If SRMOD bit is set to receive (2h), RRDY switches from 0 to 1 whenever data is transferred from XRSRn to RBUFn." range="" rwaccess="R">
      <bitenum value="0" id="Receive_buffer_()_is_empty." token="RRDY_0_r" description="Receive buffer () is empty."/>
      <bitenum value="1" id="1" token="RRDY_1_r" description="Receive buffer () contains data and needs to be read before the start of the next time slot or a receiver overrun occurs."/>
    </bitfield>
    <bitfield id="XRDY" width="1" begin="4" end="4" resetval="0" description="Transmit buffer ready bit. XRDY indicates the current transmit buffer state. Always reads 0 when programmed as a receiver or as inactive. If SRMOD bit is set to transmit (1h), XRDY switches from 0 to 1 when XSRCLR in GBLCTL is switched from 0 to 1 to indicate an empty transmitter. XRDY remains set until XSRCLR is forced to 0, data is written to the corresponding transmit buffer, or SRMOD bit is changed to receive (2h) or inactive (0)." range="" rwaccess="R">
      <bitenum value="0" id="DATA" token="XRDY_0_r" description="The transmit buffer () contains data."/>
      <bitenum value="1" id="1" token="XRDY_1_r" description="The transmit buffer () is empty and needs to be written before the start of the next time slot or a transmit underrun occurs."/>
    </bitfield>
    <bitfield id="DISMOD" width="2" begin="3" end="2" resetval="0x0" description="Serializer pin drive mode bit. Drive on pin when in inactive TDM slot of transmit mode or when serializer is inactive. This field only applies if the pin is configured as a MCASP pin (PFUNC = 0)." range="" rwaccess="RW">
      <bitenum value="0" id="Drive_on_pin_is_3-state." token="DISMOD_0" description="Drive on pin is 3-state."/>
      <bitenum value="1" id="Reserved" token="DISMOD_1" description="Reserved"/>
      <bitenum value="2" id="Drive_on_pin_is_logic_low." token="DISMOD_2" description="Drive on pin is logic low."/>
      <bitenum value="3" id="Drive_on_pin_is_logic_high." token="DISMOD_3" description="Drive on pin is logic high."/>
    </bitfield>
    <bitfield id="SRMOD" width="2" begin="1" end="0" resetval="0x0" description="Serializer mode bit" range="" rwaccess="RW">
      <bitenum value="0" id="INACTIVE" token="SRMOD_0" description="The serializer is inactive"/>
      <bitenum value="1" id="RCV" token="SRMOD_1" description="The serializer is operating in transmit mode."/>
      <bitenum value="2" id="RCV" token="SRMOD_2" description="The serializer is operating in receive mode."/>
      <bitenum value="3" id="RCV" token="SRMOD_3" description="Reserved"/>
    </bitfield>
  </register>
  <register id="MCASP_XRSRCTLn_2" acronym="MCASP_XRSRCTLn_2" offset="0x188" width="32" description="Serializer n control register, (where n=0 to 3 in the device).">
    <bitfield id="RESERVED" width="26" begin="31" end="6" resetval="0x0000000" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="RRDY" width="1" begin="5" end="5" resetval="0" description="Receive buffer ready bit. RRDY indicates the current receive buffer state. Always reads 0 when programmed as a transmitter or as inactive. If SRMOD bit is set to receive (2h), RRDY switches from 0 to 1 whenever data is transferred from XRSRn to RBUFn." range="" rwaccess="R">
      <bitenum value="0" id="Receive_buffer_()_is_empty." token="RRDY_0_r" description="Receive buffer () is empty."/>
      <bitenum value="1" id="1" token="RRDY_1_r" description="Receive buffer () contains data and needs to be read before the start of the next time slot or a receiver overrun occurs."/>
    </bitfield>
    <bitfield id="XRDY" width="1" begin="4" end="4" resetval="0" description="Transmit buffer ready bit. XRDY indicates the current transmit buffer state. Always reads 0 when programmed as a receiver or as inactive. If SRMOD bit is set to transmit (1h), XRDY switches from 0 to 1 when XSRCLR in GBLCTL is switched from 0 to 1 to indicate an empty transmitter. XRDY remains set until XSRCLR is forced to 0, data is written to the corresponding transmit buffer, or SRMOD bit is changed to receive (2h) or inactive (0)." range="" rwaccess="R">
      <bitenum value="0" id="DATA" token="XRDY_0_r" description="The transmit buffer () contains data."/>
      <bitenum value="1" id="1" token="XRDY_1_r" description="The transmit buffer () is empty and needs to be written before the start of the next time slot or a transmit underrun occurs."/>
    </bitfield>
    <bitfield id="DISMOD" width="2" begin="3" end="2" resetval="0x0" description="Serializer pin drive mode bit. Drive on pin when in inactive TDM slot of transmit mode or when serializer is inactive. This field only applies if the pin is configured as a MCASP pin (PFUNC = 0)." range="" rwaccess="RW">
      <bitenum value="0" id="Drive_on_pin_is_3-state." token="DISMOD_0" description="Drive on pin is 3-state."/>
      <bitenum value="1" id="Reserved" token="DISMOD_1" description="Reserved"/>
      <bitenum value="2" id="Drive_on_pin_is_logic_low." token="DISMOD_2" description="Drive on pin is logic low."/>
      <bitenum value="3" id="Drive_on_pin_is_logic_high." token="DISMOD_3" description="Drive on pin is logic high."/>
    </bitfield>
    <bitfield id="SRMOD" width="2" begin="1" end="0" resetval="0x0" description="Serializer mode bit" range="" rwaccess="RW">
      <bitenum value="0" id="INACTIVE" token="SRMOD_0" description="The serializer is inactive"/>
      <bitenum value="1" id="RCV" token="SRMOD_1" description="The serializer is operating in transmit mode."/>
      <bitenum value="2" id="RCV" token="SRMOD_2" description="The serializer is operating in receive mode."/>
      <bitenum value="3" id="RCV" token="SRMOD_3" description="Reserved"/>
    </bitfield>
  </register>
  <register id="MCASP_XRSRCTLn_3" acronym="MCASP_XRSRCTLn_3" offset="0x18C" width="32" description="Serializer n control register, (where n=0 to 3 in the device).">
    <bitfield id="RESERVED" width="26" begin="31" end="6" resetval="0x0000000" description="Reserved" range="" rwaccess="RW"/>
    <bitfield id="RRDY" width="1" begin="5" end="5" resetval="0" description="Receive buffer ready bit. RRDY indicates the current receive buffer state. Always reads 0 when programmed as a transmitter or as inactive. If SRMOD bit is set to receive (2h), RRDY switches from 0 to 1 whenever data is transferred from XRSRn to RBUFn." range="" rwaccess="R">
      <bitenum value="0" id="Receive_buffer_()_is_empty." token="RRDY_0_r" description="Receive buffer () is empty."/>
      <bitenum value="1" id="1" token="RRDY_1_r" description="Receive buffer () contains data and needs to be read before the start of the next time slot or a receiver overrun occurs."/>
    </bitfield>
    <bitfield id="XRDY" width="1" begin="4" end="4" resetval="0" description="Transmit buffer ready bit. XRDY indicates the current transmit buffer state. Always reads 0 when programmed as a receiver or as inactive. If SRMOD bit is set to transmit (1h), XRDY switches from 0 to 1 when XSRCLR in GBLCTL is switched from 0 to 1 to indicate an empty transmitter. XRDY remains set until XSRCLR is forced to 0, data is written to the corresponding transmit buffer, or SRMOD bit is changed to receive (2h) or inactive (0)." range="" rwaccess="R">
      <bitenum value="0" id="DATA" token="XRDY_0_r" description="The transmit buffer () contains data."/>
      <bitenum value="1" id="1" token="XRDY_1_r" description="The transmit buffer () is empty and needs to be written before the start of the next time slot or a transmit underrun occurs."/>
    </bitfield>
    <bitfield id="DISMOD" width="2" begin="3" end="2" resetval="0x0" description="Serializer pin drive mode bit. Drive on pin when in inactive TDM slot of transmit mode or when serializer is inactive. This field only applies if the pin is configured as a MCASP pin (PFUNC = 0)." range="" rwaccess="RW">
      <bitenum value="0" id="Drive_on_pin_is_3-state." token="DISMOD_0" description="Drive on pin is 3-state."/>
      <bitenum value="1" id="Reserved" token="DISMOD_1" description="Reserved"/>
      <bitenum value="2" id="Drive_on_pin_is_logic_low." token="DISMOD_2" description="Drive on pin is logic low."/>
      <bitenum value="3" id="Drive_on_pin_is_logic_high." token="DISMOD_3" description="Drive on pin is logic high."/>
    </bitfield>
    <bitfield id="SRMOD" width="2" begin="1" end="0" resetval="0x0" description="Serializer mode bit" range="" rwaccess="RW">
      <bitenum value="0" id="INACTIVE" token="SRMOD_0" description="The serializer is inactive"/>
      <bitenum value="1" id="RCV" token="SRMOD_1" description="The serializer is operating in transmit mode."/>
      <bitenum value="2" id="RCV" token="SRMOD_2" description="The serializer is operating in receive mode."/>
      <bitenum value="3" id="RCV" token="SRMOD_3" description="Reserved"/>
    </bitfield>
  </register>
  <register id="MCASP_TXBUFn_0" acronym="MCASP_TXBUFn_0" offset="0x200" width="32" description="Transmit buffer n (where n= 0 to 3 in the device) - The transmit buffer for the serializer n holds data from the transmit format unit.">
    <bitfield id="XBUFn" width="32" begin="31" end="0" resetval="0x0000 0000" description="Transmit buffer n, (where n=0 to 3)" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_TXBUFn_1" acronym="MCASP_TXBUFn_1" offset="0x204" width="32" description="Transmit buffer n (where n= 0 to 3 in the device) - The transmit buffer for the serializer n holds data from the transmit format unit.">
    <bitfield id="XBUFn" width="32" begin="31" end="0" resetval="0x0000 0000" description="Transmit buffer n, (where n=0 to 3)" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_TXBUFn_2" acronym="MCASP_TXBUFn_2" offset="0x208" width="32" description="Transmit buffer n (where n= 0 to 3 in the device) - The transmit buffer for the serializer n holds data from the transmit format unit.">
    <bitfield id="XBUFn" width="32" begin="31" end="0" resetval="0x0000 0000" description="Transmit buffer n, (where n=0 to 3)" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_TXBUFn_3" acronym="MCASP_TXBUFn_3" offset="0x20C" width="32" description="Transmit buffer n (where n= 0 to 3 in the device) - The transmit buffer for the serializer n holds data from the transmit format unit.">
    <bitfield id="XBUFn" width="32" begin="31" end="0" resetval="0x0000 0000" description="Transmit buffer n, (where n=0 to 3)" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_RXBUFn_0" acronym="MCASP_RXBUFn_0" offset="0x280" width="32" description="Receive buffer n (where n= 0 to 3 in the device) - The receive buffer for the serializer n holds data from the receive format unit.">
    <bitfield id="RBUFn" width="32" begin="31" end="0" resetval="0x0000 0000" description="Receive Buffer n, (where n=0 to 3)" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_RXBUFn_1" acronym="MCASP_RXBUFn_1" offset="0x284" width="32" description="Receive buffer n (where n= 0 to 3 in the device) - The receive buffer for the serializer n holds data from the receive format unit.">
    <bitfield id="RBUFn" width="32" begin="31" end="0" resetval="0x0000 0000" description="Receive Buffer n, (where n=0 to 3)" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_RXBUFn_2" acronym="MCASP_RXBUFn_2" offset="0x288" width="32" description="Receive buffer n (where n= 0 to 3 in the device) - The receive buffer for the serializer n holds data from the receive format unit.">
    <bitfield id="RBUFn" width="32" begin="31" end="0" resetval="0x0000 0000" description="Receive Buffer n, (where n=0 to 3)" range="" rwaccess="RW"/>
  </register>
  <register id="MCASP_RXBUFn_3" acronym="MCASP_RXBUFn_3" offset="0x28C" width="32" description="Receive buffer n (where n= 0 to 3 in the device) - The receive buffer for the serializer n holds data from the receive format unit.">
    <bitfield id="RBUFn" width="32" begin="31" end="0" resetval="0x0000 0000" description="Receive Buffer n, (where n=0 to 3)" range="" rwaccess="RW"/>
  </register>
</module>
