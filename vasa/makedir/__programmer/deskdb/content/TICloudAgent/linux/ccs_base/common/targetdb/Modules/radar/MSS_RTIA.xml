<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="MSS_RTIA" id="MSS_RTIA">
  
  
  <register acronym="RTIGCTRL" description="Global Control Register starts / stops the counters " id="RTIGCTRL" offset="0x0" width="32">
    
  <bitfield begin="31" description="Reserved. Reads return 0 and writes have no effect" end="20" id="RESERVED2" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="19" description="NTUSEL: Select NTU signal. These bits determine which NTU input signal is used as external timebase. There are up to four inputs supported with four valid selection combinations. Any invalid selection value written to the NTUSEL bit-field will result in a TIED LOW being used as the NTU signal. The NTU signal will also be TIED LOW in case of a single-bit flip as it will result in an invalid combination of NTUSEL. User and privilege mode (read): 0000 = NTU0 0101 = NTU1 1010 = NTU2 1111 = NTU3 other = tied to ‘0’ Privilege mode (write): 0000 = NTU0 0101 = NTU1 1010 = NTU2 1111 = NTU3 other = tied to ‘0’" end="16" id="NTUSEL" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="15" description="COS: Continue On Suspend. This bit determines if both counters are stopped when the device goes into debug mode or if they continue counting. User and privilege mode (read): 0 = counters are stopped while in debug mode 1 = counters are running while in debug mode Privilege mode (write): 0 = stop counters in debug mode 1 = continue counting in debug mode" end="15" id="COS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Reserved. Reads return 0 and writes have no effect" end="2" id="RESERVED1" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="1" description="CNT1EN: Counter 1 Enable. The CNT1EN bit starts and stops the operation of counter block 1 (UC1 and FRC1). User and privilege mode (read): 0 = counters are stopped 1 = counters are running Privilege mode (write): 0 = stop counters 1 = start counters Gives the absolute 32 bit destination address (physical)." end="1" id="CNT1EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="CNT0EN: Counter 0 Enable.The CNT0EN bit starts and stops the operation of counter block 0 (UC0 and FRC0). User and privilege mode (read): 0 = counters are stopped 1 = counters are running Privilege mode (write): 0 = stop counters 1 = start counters Gives the absolute 32 bits source address (physical)." end="0" id="CNT0EN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="RTICAPCTRL" description="Capture Control controls the capture source for the counters" id="RTICAPCTRL" offset="0x8" width="32">
    
  <bitfield begin="31" description="Reserved. Reads return 0 and writes have no effect" end="2" id="RESERVED4" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="CAPCNTR1: Capture Counter 1. This bit determines, which external interrupt source triggers a capture event of both UC1 and FRC1. User and privilege mode (read): 0 = capture event is triggered by Capture Event Source 0 1 = capture event is triggered by Capture Event Source 1 Privilege mode (write): 0 = enable capture event triggered by Capture Event Source 0 1 = enable capture event triggered by Capture Event Source 1" end="1" id="CAPCNTR1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="CAPCNTR0: Capture Counter 0. This bit determines, which external interrupt source triggers a capture event of both UC0 and FRC0. User and privilege mode (read): 0 = capture event is triggered by Capture Event Source 0 1 = capture event is triggered by Capture Event Source 1 Privilege mode (write): 0 = enable capture event triggered by Capture Event Source 0 1 = enable capture event triggered by Capture Event Source 1 11 indexed 10 reserved 01 post-increment 00 constant" end="0" id="CAPCNTR0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="RTICOMPCTRL" description="Compare Control controls the source for the compare registers" id="RTICOMPCTRL" offset="0xC" width="32">
    
  <bitfield begin="31" description="Reserved. Reads return 0 and writes have no effect" end="13" id="RESERVED8" rwaccess="RW" width="19"></bitfield>
    
  <bitfield begin="12" description="COMPSEL3: Compare Select 3. This bit determines the counter with which the compare value hold in compare register 3 is compared. User and privilege mode (read): 0 = value will be compared with FRC 0 1 = value will be compared with FRC 1 Privilege mode (write): 0 = enable compare with FRC 0 1 = enable compare with FRC 1" end="12" id="COMP3SEL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Reserved. Reads return 0 and writes have no effect" end="9" id="RESERVED7" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="8" description="COMPSEL2: Compare Select 2. This bit determines the counter with which the compare value hold in compare register 2 is compared. User and privilege mode (read): 0 = value will be compared with FRC 0 1 = value will be compared with FRC 1 Privilege mode (write): 0 = enable compare with FRC 0 1 = enable compare with FRC 1" end="8" id="COMP2SEL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Reserved. Reads return 0 and writes have no effect" end="5" id="RESERVED6" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="4" description="COMPSEL1: Compare Select 1. This bit determines the counter with which the compare value hold in compare register 1 is compared. User and privilege mode (read): 0 = value will be compared with FRC 0 1 = value will be compared with FRC 1 Privilege mode (write): 0 = enable compare with FRC 0 1 = enable compare with FRC 1" end="4" id="COMP1SEL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Reserved. Reads return 0 and writes have no effect" end="1" id="RESERVED5" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="0" description="COMPSEL0: Compare Select 0. This bit determines the counter with which the compare value hold in compare register 0 is compared. User and privilege mode (read): 0 = value will be compared with FRC 0 1 = value will be compared with FRC 1 Privilege mode (write): 0 = enable compare with FRC 0 1 = enable compare with FRC 1" end="0" id="COMP0SEL" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="RTIFRC0" description="Free Running Counter 0 current value of free running counter 0" id="RTIFRC0" offset="0x10" width="32">
    
  <bitfield begin="31" description="FRC0: Free Running Counter 0. This registers holds the current value of the Free Running Counter 0 and will be updated continuously. User and privilege mode (read): current value of the counter Privilege mode (write): The counter can be preset by writing to this register. The counter increments then from this written value upwards. Note: Presetting counters If counters have to be preset, they have to be stopped from counting in the RTIGCTRL register in order to ensure consistency between RTIUC0 and RTIFRC0." end="0" id="FRC0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTIUC0" description="Up Counter 0 current value of prescale counter 0" id="RTIUC0" offset="0x14" width="32">
    
  <bitfield begin="31" description="UC0: Up Counter 0. This registers holds the current value of the Up Counter 0 and prescales the RTI clock. It will be only updated by a previous read of Free Running Counter 0. This gives effectively a 64 bit read of both counters, without having the problem of a counter being updated between two consecutive reads on Up Counter 0 and Free Running Counter 0. User and privilege mode (read): value of the counter when the Free Running Counter 0 was read Privilege mode (write): the counter can be preset by writing to this register. The counter increments then from this written value upwards. Note: Presetting counters If counters have to be preset, they have to be stopped from counting in the RTIGCTRL register in order to ensure consistency between RTIUC0 and RTIFRC0. Note: Preset value concern If the preset value is bigger than the compare value stored in register RTICPUC0 then it can take a long time until a compare matches, since RTIUC0 has to count up until it overflows." end="0" id="UC0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTICPUC0" description="Compare Up Counter 0 compare value compared with prescale counter 0" id="RTICPUC0" offset="0x18" width="32">
    
  <bitfield begin="31" description="This registers holds the compare value, which is compared with the Up Counter 0. When the compare matches, Free Running counter 0 is incremented. The Up Counter is set to zero when the counter value matches the CPUC0 value. The value set in this prescales the RTI clock. If CPUC0 = 0: then, frequency = RTICLK/ (2^32) If CPUC0 ≠ 0: then , frequency = RTICLK/(CPUC0 + 1) User and privilege mode (read): current compare value Privilege mode (write when TBEXT = 0): the compare value is updated Privilege mode (write when TBEXT = 1): the compare value is not changed" end="0" id="CPUC0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTICAFRC0" description="Capture Free Running Counter 0 current value of free running counter 0 on external event" id="RTICAFRC0" offset="0x20" width="32">
    
  <bitfield begin="31" description="CAFRC0: Capture Free Running Counter 0. This registers captures the current value of the Free Running Counter 0 when a event occurs, controlled by the external capture control block. User and privilege mode (read): value of Free Running Counter 0 on a capture event" end="0" id="CAFRC0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTICAUC0" description="Capture Up Counter 0 current value of prescale counter 0 on external event" id="RTICAUC0" offset="0x24" width="32">
    
  <bitfield begin="31" description="CAUC0: Capture Up Counter 0. This registers captures the current value of the Up Counter 0 when a event occurs, controlled by the external capture control block. The read sequence has to be the same as with Up Counter 0 and Free Running Counter 0. So the RTICAFRC0 register has to be read first, before the RTICAUC0 register is read. This sequence ensures that the value of the RTICAUC0 register is the corresponding value to the RTICAFRC0 register, even if another capture event happens in between the two reads. User and privilege mode (read): value of Up Counter 0 on a capture event" end="0" id="CAUC0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTIFRC1" description="Free Running Counter 1 current value of free running counter 1" id="RTIFRC1" offset="0x30" width="32">
    
  <bitfield begin="31" description="FRC1: Free Running Counter 1. This registers holds the current value of the Free Running Counter 1 and will be updated continuously. User and privilege mode (read): current value of the counter Privilege mode (write): The counter can be preset by writing to this register. The counter increments then from this written value upwards. Note: Presetting counters If counters have to be preset, they have to be stopped from counting in the RTIGCTRL register in order to ensure consistency between RTIUC1 and RTIFRC1." end="0" id="FRC1" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTIUC1" description="Up Counter 1 current value of prescale counter 1" id="RTIUC1" offset="0x34" width="32">
    
  <bitfield begin="31" description="UC1: Up Counter 1. This registers holds the current value of the Up Counter 1 and prescales the RTI clock. It will be only updated by a previous read of Free Running Counter 1. This gives effectively a 64 bit read of both counters, without having the problem of a counter being updated between two consecutive reads on Up Counter 1 and Free Running Counter 1. User and privilege mode (read): value of the counter when the Free Running Counter 1 was read Privilege mode (write): the counter can be preset by writing to this register. The counter increments then from this written value upwards. Note: Presetting counters If counters have to be preset, they have to be stopped from counting in the RTIGCTRL register in order to ensure consistency between RTIUC1 and RTIFRC1. Note: Preset value concern If the preset value is bigger than the compare value stored in register RTICPUC1 then it can take a long time until a compare matches, since RTIUC1 has to count up until it overflows." end="0" id="UC1" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTICPUC1" description="Compare Up Counter 1 compare value compared with prescale counter 1" id="RTICPUC1" offset="0x38" width="32">
    
  <bitfield begin="31" description="This registers holds the compare value, which is compared with the Up Counter 1. When the compare matches, Free Running Counter 1 is incremented. The Up Counter is set to zero when the counter value matches the CPUC1 value. The value set in this prescales the RTI clock. If CPUC1 = 0: then, frequency = RTICLK/ (2^32) If CPUC1 ≠ 0: then , frequency = RTICLK/(CPUC1 + 1) User and privilege mode (read): current compare value Privilege mode (write when TBEXT = 0): the compare value is updated Privilege mode (write when TBEXT = 1): the compare value is not changed" end="0" id="CPUC1" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTICAFRC1" description="Capture Free Running Counter 1 current value of free running counter 1 on external event" id="RTICAFRC1" offset="0x40" width="32">
    
  <bitfield begin="31" description="CAFRC1: Capture Free Running Counter 1. This registers captures the current value of the Free Running Counter 1 when a event occurs, controlled by the external capture control block. User and privilege mode (read): value of Free Running Counter 1 on a capture event" end="0" id="CAFRC1" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTICAUC1" description="Capture Up Counter 1 current value of prescale counter 1 on external event" id="RTICAUC1" offset="0x44" width="32">
    
  <bitfield begin="31" description="CAUC1: Capture Up Counter 1. This registers captures the current value of the Up Counter 1 when a event occurs, controlled by the external capture control block. The read sequence has to be the same as with Up Counter 1 and Free Running Counter 1. So the RTICAFRC1 register has to be read first, before the RTICAUC1 register is read. This sequence ensures that the value of the RTICAUC1 register is the corresponding value to the RTICAFRC1 register, even if another capture event happens in between the two reads. User and privilege mode (read): value of Up Counter 1 on a capture event" end="0" id="CAUC1" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTICOMP0" description="Compare 0 compare value to be compared with the counters" id="RTICOMP0" offset="0x50" width="32">
    
  <bitfield begin="31" description="COMP0: Compare 0. This registers holds a compare value, which is compared with the counter selected in the compare control logic. If the Free Running Counter matches the compare value, an interrupt is flagged. With this register it is also possible to initiate a DMA request. User and privilege mode (read): current compare value Privilege mode (write): update of the compare register with a new compare value Note: Reset behavior A reset does not generate a compare match, since the compare logic will only be active, when the associated counter block is enabled." end="0" id="COMP0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTIUDCP0" description="Update Compare 0 value to be added to the compare register 0 value on compare match" id="RTIUDCP0" offset="0x54" width="32">
    
  <bitfield begin="31" description="UDCP0: Update Compare 0 Register. This registers holds a value, which is added to the value in the compare 0 register each time a compare matches. This gives the possibility to generate periodic interrupts without software intervention. User and privilege mode (read): value to be added to the compare 0 register on the next compare match Privilege mode (write): new update value" end="0" id="UDCP0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTICOMP1" description="Compare 1 compare value to be compared with the counters" id="RTICOMP1" offset="0x58" width="32">
    
  <bitfield begin="31" description="COMP1: compare1. This registers holds a compare value, which is compared with the counter selected in the compare control logic. If the Free Running Counter matches the compare value, an interrupt is flagged. With this register it is also possible to initiate a DMA request. User and privilege mode (read): current compare value Privilege mode (write): update of the compare register with a new compare value Note: Reset behavior A reset does not generate a compare match, since the compare logic will only be active, when the associated counter block is enabled." end="0" id="COMP1" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTIUDCP1" description="Update Compare 1 value to be added to the compare register 1 value on compare match" id="RTIUDCP1" offset="0x5C" width="32">
    
  <bitfield begin="31" description="UDCP1: Update compare1 Register. This registers holds a value, which is added to the value in the compare1 register each time a compare matches. This gives the possibility to generate periodic interrupts without software intervention. User and privilege mode (read): value to be added to the compare1 register on the next compare match Privilege mode (write): new update value" end="0" id="UDCP1" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTICOMP2" description="Compare 2 compare value to be compared with the counters" id="RTICOMP2" offset="0x60" width="32">
    
  <bitfield begin="31" description="COMP2: compare 2. This registers holds a compare value, which is compared with the counter selected in the compare control logic. If the Free Running Counter matches the compare value, an interrupt is flagged. With this register it is also possible to initiate a DMA request. User and privilege mode (read): current compare value Privilege mode (write): update of the compare register with a new compare value Note: Reset behavior A reset does not generate a compare match, since the compare logic will only be active, when the associated counter block is enabled." end="0" id="COMP2" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTIUDCP2" description="Update Compare 2 value to be added to the compare register 2 value on compare match" id="RTIUDCP2" offset="0x64" width="32">
    
  <bitfield begin="31" description="UDCP2: Update compare 2 Register. This registers holds a value, which is added to the value in the compare 2 register each time a compare matches. This gives the possibility to generate periodic interrupts without software intervention. User and privilege mode (read): value to be added to the compare 2 register on the next compare match Privilege mode (write): new update value" end="0" id="UDCP2" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTICOMP3" description="Compare 3 compare value to be compared with the counters" id="RTICOMP3" offset="0x68" width="32">
    
  <bitfield begin="31" description="COMP3: compare 3. This registers holds a compare value, which is compared with the counter selected in the compare control logic. If the Free Running Counter matches the compare value, an interrupt is flagged. With this register it is also possible to initiate a DMA request. User and privilege mode (read): current compare value Privilege mode (write): update of the compare register with a new compare value Note: Reset behavior A reset does not generate a compare match, since the compare logic will only be active, when the associated counter block is enabled." end="0" id="COMP3" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTIUDCP3" description="Update Compare 3 value to be added to the compare register 3 value on compare match" id="RTIUDCP3" offset="0x6C" width="32">
    
  <bitfield begin="31" description="UDCP3: Update compare 3 Register. This registers holds a value, which is added to the value in the compare 3 register each time a compare matches. This gives the possibility to generate periodic interrupts without software intervention. User and privilege mode (read): value to be added to the compare 3 register on the next compare match Privilege mode (write): new update value" end="0" id="UDCP3" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTISETINT" description="Set Interrupt Enable sets interrupt enable bits int RTIINTCTRL without having to do a read-modify-write operation" id="RTISETINT" offset="0x80" width="32">
    
  <bitfield begin="31" description="Reserved. Reads return 0 and writes have no effect" end="19" id="RESERVED11" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="18" description="SETOVL1INT: Set Free Running Counter 1 Overflow Interrupt. User and privilege mode (read): 0 = interrupt is disabled 1 = interrupt is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = enable interrupt" end="18" id="SETOVL1INT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="SETOVL0INT: Set Free Running Counter 0 Overflow Interrupt. User and privilege mode (read): 0 = interrupt is disabled 1 = interrupt is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = enable interrupt" end="17" id="SETOVL0INT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Reserved. Reads return 0 and writes have no effect" end="12" id="RESERVED10" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="11" description="SETDMA3: Set Compare DMA Request 3. User and privilege mode (read): 0 = DMA request is disabled 1 = DMA request is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = enable DMA request" end="11" id="SETDMA3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="SETDMA2: Set Compare DMA Request 2. User and privilege mode (read): 0 = DMA request is disabled 1 = DMA request is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = enable DMA request" end="10" id="SETDMA2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="SETDMA1: Set Compare DMA Request 1. User and privilege mode (read): 0 = DMA request is disabled 1 = DMA request is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = enable DMA request" end="9" id="SETDMA1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="SETDMA0: Set Compare DMA Request 0. User and privilege mode (read): 0 = DMA request is disabled 1 = DMA request is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = enable DMA request" end="8" id="SETDMA0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Reserved. Reads return 0 and writes have no effect" end="4" id="RESERVED9" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="3" description="SETINT3: Set Compare Interrupt 3. User and privilege mode (read): 0 = interrupt is disabled 1 = interrupt is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged" end="3" id="SETINT3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="SETINT2: Set Compare Interrupt 2. User and privilege mode (read): 0 = interrupt is disabled 1 = interrupt is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = enable interrupt" end="2" id="SETINT2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="SETINT1: Set Compare Interrupt 1. User and privilege mode (read): 0 = interrupt is disabled 1 = interrupt is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = enable interrupt" end="1" id="SETINT1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="SETINT0: Set Compare Interrupt 0. User and privilege mode (read): 0 = interrupt is disabled 1 = interrupt is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = enable interrupt" end="0" id="SETINT0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="RTICLEARINT" description="Clear Interrupt Enable clears interrupt enable bits int RTIINTCTRL without having to do a read-modify-write operation" id="RTICLEARINT" offset="0x84" width="32">
    
  <bitfield begin="31" description="Reserved. Reads return 0 and writes have no effect" end="19" id="RESERVED14" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="18" description="CLEAROVL1INT: CLEAR Free Running Counter 1 Overflow Interrupt. User and privilege mode (read): 0 = interrupt is disabled 1 = interrupt is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = disable interrupt" end="18" id="CLEAROVL1INT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="CLEAROVL0INT: CLEAR Free Running Counter 0 Overflow Interrupt. User and privilege mode (read): 0 = interrupt is disabled 1 = interrupt is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = disable interrupt" end="17" id="CLEAROVL0INT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Reserved. Reads return 0 and writes have no effect" end="12" id="RESERVED13" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="11" description="CLEARDMA3: CLEAR Compare DMA Request 3. User and privilege mode (read): 0 = DMA request is disabled 1 = DMA request is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = disable DMA request" end="11" id="CLEARDMA3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="CLEARDMA2: CLEAR Compare DMA Request 2. User and privilege mode (read): 0 = DMA request is disabled 1 = DMA request is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = disable DMA request" end="10" id="CLEARDMA2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="CLEARDMA1: CLEAR Compare DMA Request 1. User and privilege mode (read): 0 = DMA request is disabled 1 = DMA request is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = disable DMA request" end="9" id="CLEARDMA1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="CLEARDMA0: CLEAR Compare DMA Request 0. User and privilege mode (read): 0 = DMA request is disabled 1 = DMA request is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = disable DMA request" end="8" id="CLEARDMA0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Reserved. Reads return 0 and writes have no effect" end="4" id="RESERVED12" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="3" description="CLEARINT3: CLEAR Compare Interrupt 3. User and privilege mode (read): 0 = interrupt is disabled 1 = interrupt is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = disable interrupt" end="3" id="CLEARINT3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="CLEARINT2: CLEAR Compare Interrupt 2. User and privilege mode (read): 0 = interrupt is disabled 1 = interrupt is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = disable interrupt" end="2" id="CLEARINT2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="CLEARINT1: CLEAR Compare Interrupt 1. User and privilege mode (read): 0 = interrupt is disabled 1 = interrupt is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = disable interrupt" end="1" id="CLEARINT1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="CLEARINT0: CLEAR Compare Interrupt 0. User and privilege mode (read): 0 = interrupt is disabled 1 = interrupt is enabled Privilege mode (write): 0 = leaves the corresponding bit unchanged 1 = disable interrupt" end="0" id="CLEARINT0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="RTIINTFLAG" description="Interrupt Flags interrupt pending bits" id="RTIINTFLAG" offset="0x88" width="32">
    
  <bitfield begin="31" description="Reserved. Reads return 0 and writes have no effect" end="19" id="RESERVED16" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="18" description="OVL1INT: Free Running Counter 1 Overflow Interrupt Flag. User and privilege mode (read): determines if an interrupt is pending 0 = no interrupt pending 1 = interrupt pending Privilege mode (write): 0 = leaves the bit unchanged 1 = set the bit to 0" end="18" id="OVL1INT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="OVL0INT: Free Running Counter 0 Overflow Interrupt Flag. User and privilege mode (read): determines if an interrupt is pending 0 = no interrupt pending 1 = interrupt pending Privilege mode (write): 0 = leaves the bit unchanged 1 = set the bit to 0" end="17" id="OVL0INT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Reserved. Reads return 0 and writes have no effect" end="4" id="RESERVED15" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="3" description="INT3: Interrupt Flag 3. User and privilege mode (read): determines if a interrupt is pending 0 = no interrupt pending 1 = interrupt pending Privilege mode (write): 0 = leaves the bit unchanged 1 = set the bit to 0" end="3" id="INT3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="INT2: Interrupt Flag 2. User and privilege mode (read): determines if a interrupt is pending 0 = no interrupt pending 1 = interrupt pending Privilege mode (write): 0 = leaves the bit unchanged 1 = set the bit to 0" end="2" id="INT2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="INT1: Interrupt Flag 1. User and privilege mode (read): determines if a interrupt is pending 0 = no interrupt pending 1 = interrupt pending Privilege mode (write): 0 = leaves the bit unchanged 1 = set the bit to 0" end="1" id="INT1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="INT0: Interrupt Flag 0. User and privilege mode (read): determines if a interrupt is pending 0 = no interrupt pending 1 = interrupt pending Privilege mode (write): 0 = leaves the bit unchanged 1 = set the bit to 0" end="0" id="INT0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="RTIINTCLRENABLE" description="RTI Compare Interrupt Clear Enable enable the auto clear functionality for each of the compare interrupts" id="RTIINTCLRENABLE" offset="0xAC" width="32">
    
  <bitfield begin="31" description="Reserved. Reads return 0 and writes have no effect" end="28" id="RESERVED25" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="27" description="INTCLRENABLE3. Enables the auto-clear functionality on the compare 3 interrupt. User and Privileged mode (read): 0x5 = Auto-clear for compare 3 interrupt is disabled. Any other value = Auto-clear for compare 3 interrupt is enabled. Privileged mode (write): 0x5 = Disables the auto-clear functionality on the compare 3 interrupt. Any other value = Enables the auto-clear functionality on the compare 3 interrupt." end="24" id="INTCLRENABLE3" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="23" description="Reserved. Reads return 0 and writes have no effect" end="20" id="RESERVED24" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="19" description="INTCLRENABLE2. Enables the auto-clear functionality on the compare 2 interrupt. User and Privileged mode (read): 0x5 = Auto-clear for compare 2 interrupt is disabled. Any other value = Auto-clear for compare 2 interrupt is enabled. Privileged mode (write): 0x5 = Disables the auto-clear functionality on the compare 2 interrupt. Any other value = Enables the auto-clear functionality on the compare 2 interrupt." end="16" id="INTCLRENABLE2" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="15" description="Reserved. Reads return 0 and writes have no effect" end="12" id="RESERVED23" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="11" description="INTCLRENABLE1. Enables the auto-clear functionality on the compare 1 interrupt. User and Privileged mode (read): 0x5 = Auto-clear for compare 1 interrupt is disabled. Any other value = Auto-clear for compare 1 interrupt is enabled. Privileged mode (write): 0x5 = Disables the auto-clear functionality on the compare 1 interrupt. Any other value = Enables the auto-clear functionality on the compare 1 interrupt." end="8" id="INTCLRENABLE1" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="7" description="Reserved. Reads return 0 and writes have no effect" end="4" id="RESERVED22" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="3" description="INTCLRENABLE0. Enables the auto-clear functionality on the compare 0 interrupt. User and Privileged mode (read): 0x5 = Auto-clear for compare 0 interrupt is disabled. Any other value = Auto-clear for compare 0 interrupt is enabled. Privileged mode (write): 0x5 = Disables the auto-clear functionality on the compare 0 interrupt. Any other value = Enables the auto-clear functionality on the compare 0 interrupt." end="0" id="INTCLRENABLE0" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="RTICOMP0CLR" description="Compare 0 Clear compare value to be compared with the counter to clear the compare0 interrupt line" id="RTICOMP0CLR" offset="0xB0" width="32">
    
  <bitfield begin="31" description="COMP0CLR: Compare 0 Clear. This registers holds a compare value, which is compared with the counter selected in the compare control logic. If the Free Running Counter matches the compare value, the compare 0 interrupt or DMA request line is cleared. User and privilege mode (read): current compare value Privilege mode (write): update of the compare register with a new compare value Note: Reset behavior A reset does not generate a compare match, since the compare logic will only be active, when the associated counter block is enabled." end="0" id="COMP0CLR" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTICOMP1CLR" description="Compare 1 Clear compare value to be compared with the counter to clear the compare1 interrupt line" id="RTICOMP1CLR" offset="0xB4" width="32">
    
  <bitfield begin="31" description="COMP1CLR: Compare 1 Clear. This registers holds a compare value, which is compared with the counter selected in the compare control logic. If the Free Running Counter matches the compare value, the Compare 1 interrupt or DMA request line is cleared. User and privilege mode (read): current compare value Privilege mode (write): update of the compare register with a new compare value Note: Reset behavior A reset does not generate a compare match, since the compare logic will only be active, when the associated counter block is enabled." end="0" id="COMP1CLR" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTICOMP2CLR" description="Compare 2 Clear compare value to be compared with the counter to clear the compare2 interrupt line" id="RTICOMP2CLR" offset="0xB8" width="32">
    
  <bitfield begin="31" description="COMP2CLR: Compare 2 Clear. This registers holds a compare value, which is compared with the counter selected in the compare control logic. If the Free Running Counter matches the compare value, the Compare 2 interrupt or DMA request line is cleared. User and privilege mode (read): current compare value Privilege mode (write): update of the compare register with a new compare value Note: Reset behavior A reset does not generate a compare match, since the compare logic will only be active, when the associated counter block is enabled." end="0" id="COMP2CLR" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RTICOMP3CLR" description="Compare 3 Clear compare value to be compared with the counter to clear the compare3 interrupt line" id="RTICOMP3CLR" offset="0xBC" width="32">
    
  <bitfield begin="31" description="COMP3CLR: Compare 3 Clear. This registers holds a compare value, which is compared with the counter selected in the compare control logic. If the Free Running Counter matches the compare value, the Compare 3 interrupt or DMA request line is cleared. User and privilege mode (read): current compare value Privilege mode (write): update of the compare register with a new compare value Note: Reset behavior A reset does not generate a compare match, since the compare logic will only be active, when the associated counter block is enabled." end="0" id="COMP3CLR" rwaccess="RW" width="32"></bitfield>
  </register>
</module>
