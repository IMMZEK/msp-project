<?xml version="1.0" encoding="UTF-8"?>
<module id="shamd5" HW_revision="">
    <register id="ODIGEST_A" width="32" offset="0x0" description="WRITE: Outer Digest [127:96] for MD5 [159:128] for SHA-1 [255:224] for SHA-2 / HMAC Key [31:0] for HMAC key proc READ: Outer Digest [127:96] for MD5 [159:128] for SHA-1 [255:224] for SHA-2">
    </register>
    <register id="ODIGEST_B" width="32" offset="0x4" description="WRITE: Outer Digest [95:64] for MD5 [127:96] for SHA-1 [223:192] for SHA-2 / HMAC Key [63:32] for HMAC key proc READ: Outer Digest [95:64] for MD5 [127:96] for SHA-1 [223:192] for SHA-2">
    </register>
    <register id="ODIGEST_C" width="32" offset="0x8" description="WRITE: Outer Digest [63:32] for MD5 [95:64] for SHA-1 [191:160] for SHA-2 / HMAC Key [95:64] for HMAC key proc READ: Outer Digest [63:32] for MD5 [95:64] for SHA-1 [191:160] for SHA-2">
    </register>
    <register id="ODIGEST_D" width="32" offset="0xC" description="WRITE: Outer Digest [31:0] for MD5 [63:31] for SHA-1 [159:128] for SHA-2 / HMAC Key [127:96] for HMAC key proc READ: Outer Digest [31:0] for MD5 [63:32] for SHA-1 [159:128] for SHA-2">
    </register>
    <register id="ODIGEST_E" width="32" offset="0x10" description="WRITE: Outer Digest [31:0] for SHA-1 [127:96] for SHA-2 / HMAC Key [159:128] for HMAC key proc READ: Outer Digest [31:0] for SHA-1 [127:96] for SHA-2">
    </register>
    <register id="ODIGEST_F" width="32" offset="0x14" description="WRITE: Outer Digest [95:64] for SHA-2 / HMAC Key [191:160] for HMAC key proc READ: Outer Digest [95:64] for SHA-2">
    </register>
    <register id="ODIGEST_G" width="32" offset="0x18" description="WRITE: Outer Digest [63:32] for SHA-2 / HMAC Key [223:192] for HMAC key proc READ: Outer Digest [63:32] for SHA-2">
    </register>
    <register id="ODIGEST_H" width="32" offset="0x1C" description="WRITE: Outer Digest [31:0] for SHA-2 / HMAC Key [255:224] for HMAC key proc READ: Outer Digest [31:0] for SHA-2">
    </register>
    <register id="IDIGEST_A" width="32" offset="0x20" description="WRITE: Inner / Initial Digest [127:96] for MD5 [159:128] for SHA-1 [255:224] for SHA-2 / HMAC Key [287:256] for HMAC key proc READ: Intermediate / Inner Digest [127:96] for MD5 [159:128] for SHA-1 [255:224] for SHA-2 / Result Digest/MAC [127:96] for MD5 [159:128] for SHA-1 [223:192] for SHA-2 224 [255:224] for SHA-2 256">
    </register>
    <register id="IDIGEST_B" width="32" offset="0x24" description="WRITE: Inner / Initial Digest [95:64] for MD5 [127:96] for SHA-1 [223:192] for SHA-2 / HMAC Key [319:288] for HMAC key proc READ: Intermediate / Inner Digest [95:64] for MD5 [127:96] for SHA-1 [223:192] for SHA-2 / Result Digest/MAC [95:64] for MD5 [127:96] for SHA-1 [191:160] for SHA-2 224 [223:192] for SHA-2 256">
    </register>
    <register id="IDIGEST_C" width="32" offset="0x28" description="WRITE: Inner / Initial Digest [63:32] for MD5 [95:64] for SHA-1 [191:160] for SHA- 2 / HMAC Key [351:320] for HMAC key proc READ: Intermediate / Inner Digest [63:32] for MD5 [95:64] for SHA-1 [191:160] for SHA-2 / Result Digest/MAC [63:32] for MD5 [95:64] for SHA-1 [159:128] for SHA-2 224 [191:160] for SHA-2 256">
    </register>
    <register id="IDIGEST_D" width="32" offset="0x2C" description="WRITE: Inner / Initial Digest [31:0] for MD5 [63:32] for SHA-1 [159:128] for SHA-2 / HMAC Key [383:352] for HMAC key proc READ: Intermediate / Inner Digest [31:0] for MD5 [63:32] for SHA-1 [159:128] for SHA-2 / Result Digest/MAC [31:0] for MD5 [63:32] for SHA-1 [127:96] for SHA-2 224 [159:128] for SHA-2 256">
    </register>
    <register id="IDIGEST_E" width="32" offset="0x30" description="WRITE: Inner / Initial Digest [31:0] for SHA-1 [127:96] for SHA-2 / HMAC Key [415:384] for HMAC key proc READ: Intermediate / Inner Digest [31:0] for SHA-1 [127:96] for SHA-2 / Result Digest/MAC [31:0] for SHA-1 [95:64] for SHA-2 224 [127:96] for SHA-2 256">
    </register>
    <register id="IDIGEST_F" width="32" offset="0x34" description="WRITE: Inner / Initial Digest [95:64] for SHA-2 / HMAC Key [447:416] for HMAC key proc READ: Intermediate / Inner Digest [95:64] for SHA-2 / Result Digest/MAC [63:32] for SHA-2 224 [95:64] for SHA-2 256">
    </register>
    <register id="IDIGEST_G" width="32" offset="0x38" description="WRITE: Inner / Initial Digest [63:32] for SHA-2 / HMAC Key [479:448] for HMAC key proc READ: Intermediate / Inner Digest [63:32] for SHA-2 / Result Digest/MAC [31:0] for SHA-2 224 [63:32] for SHA-2 256">
    </register>
    <register id="IDIGEST_H" width="32" offset="0x3C" description="WRITE: Inner / Initial Digest [31:0] for SHA-2 / HMAC Key [511:480] for HMAC key proc READ: Intermediate / Inner Digest [31:0] for SHA-2 / Result Digest/MAC [31:0] for SHA-2 256">
    </register>
    <register id="DIGEST_COUNT" width="32" offset="0x40" description="WRITE: Initial Digest Count ([31:6] only [5:0] assumed 0) READ: Result / IntermediateDigest Count The initial digest byte count for hash/HMAC continue operations (HMAC Key Processing = 0 and Use Algorithm Constants = 0) on the Secure World must be written to this register prior to starting the operation by writing to S_HASH_MODE. When either HMAC Key Processing is 1 or Use Algorithm Constants is 1 this register does not need to be written it will be overwritten with 64 (1 hash block of key XOR ipad) or 0 respectively automatically. When starting a HMAC operation from pre-computes (HMAC Key Processing is 0) then the value 64 must be written here to compensate for the appended key XOR ipad block. Note that the value written should always be a 64 byte multiple the lower 6 bits written are ignored. The updated digest byte count (initial digest byte count + bytes processed) can be read from this register when the status register indicates that the operation is done or suspended due to a context switch request or when a Secure World context out DMA is requested. In Advanced DMA mode when not suspended with a partial result reading the SHAMD5_DIGEST_COUNT register triggers the Hash/HMAC Engine to start the next context input DMA. Therefore reading the SHAMD5_DIGEST_COUNT register should always be the last context-read action if not suspended with a partial result (i.e. PartHashReady interrupt not pending).">
    </register>
    <register id="MODE" width="32" offset="0x44" description="Register SHAMD5_MODE">
        <bitfield id="ALGO" description="These bits select the hash algorithm to be used for processing: 0x0 md5_128 algorithm 0x1 sha1_160 algorithm 0x2 sha2_224 algorithm 0x3 sha2_256 algorithm" begin="2" end="1" width="2" rwaccess="R/W">
        </bitfield>
    </register>
    <register id="LENGTH" width="32" offset="0x48" description="WRITE: Block Length / Remaining Byte Count (bytes) READ: Remaining Byte Count. The value programmed MUST be a 64-byte multiple if Close Hash is set to 0. This register is also the trigger to start processing: once this register is written the core will commence requesting input data via DMA or IRQ (if programmed length &gt; 0) and start processing. The remaining byte count for the active operation can be read from this register when the interrupt status register indicates that the operation is suspended due to a context switch request.">
    </register>
    <register id="DATA0_IN" width="32" offset="0x80" description="Data input message 0">
    </register>
    <register id="DATA1_IN" width="32" offset="0x84" description="Data input message 1">
    </register>
    <register id="DATA2_IN" width="32" offset="0x88" description="Data input message 2">
    </register>
    <register id="DATA3_IN" width="32" offset="0x8C" description="Data input message 3">
    </register>
    <register id="DATA4_IN" width="32" offset="0x90" description="Data input message 4">
    </register>
    <register id="DATA5_IN" width="32" offset="0x94" description="Data input message 5">
    </register>
    <register id="DATA6_IN" width="32" offset="0x98" description="Data input message 6">
    </register>
    <register id="DATA7_IN" width="32" offset="0x9C" description="Data input message 7">
    </register>
    <register id="DATA8_IN" width="32" offset="0xA0" description="Data input message 8">
    </register>
    <register id="DATA9_IN" width="32" offset="0xA4" description="Data input message 9">
    </register>
    <register id="DATA10_IN" width="32" offset="0xA8" description="Data input message 10">
    </register>
    <register id="DATA11_IN" width="32" offset="0xAC" description="Data input message 11">
    </register>
    <register id="DATA12_IN" width="32" offset="0xB0" description="Data input message 12">
    </register>
    <register id="DATA13_IN" width="32" offset="0xB4" description="Data input message 13">
    </register>
    <register id="DATA14_IN" width="32" offset="0xB8" description="Data input message 14">
    </register>
    <register id="DATA15_IN" width="32" offset="0xBC" description="Data input message 15">
    </register>
    <register id="REVISION" width="32" offset="0x100" description="Register SHAMD5_REV">
        <bitfield id="SCHEME" description="" begin="31" end="30" width="2" rwaccess="R/W">
        </bitfield>
        <bitfield id="FUNC" description="Function indicates a software compatible module family. If there is no level of software compatibility a new Func number (and hence REVISION) should be assigned." begin="27" end="16" width="12" rwaccess="R/W">
        </bitfield>
        <bitfield id="R_RTL" description="RTL Version (R) maintained by IP design owner. RTL follows a numbering such as X.Y.R.Z which are explained in this table. R changes ONLY when: (1) PDS uploads occur which may have been due to spec changes (2) Bug fixes occur (3) Resets to '0' when X or Y changes. Design team has an internal 'Z' (customer invisible) number which increments on every drop that happens due to DV and RTL updates. Z resets to 0 when R increments." begin="15" end="11" width="5" rwaccess="R/W">
        </bitfield>
        <bitfield id="X_MAJOR" description="Major Revision (X) maintained by IP specification owner. X changes ONLY when: (1) There is a major feature addition. An example would be adding Master Mode to Utopia Level2. The Func field (or Class/Type in old PID format) will remain the same. X does NOT change due to: (1) Bug fixes (2) Change in feature parameters." begin="10" end="8" width="3" rwaccess="R/W">
        </bitfield>
        <bitfield id="CUSTOM" description="" begin="7" end="6" width="2" rwaccess="R/W">
        </bitfield>
        <bitfield id="Y_MINOR" description="Minor Revision (Y) maintained by IP specification owner. Y changes ONLY when: (1) Features are scaled (up or down). Flexibility exists in that this feature scalability may either be represented in the Y change or a specific register in the IP that indicates which features are exactly available. (2) When feature creeps from Is-Not list to Is list. But this may not be the case once it sees silicon; in which case X will change. Y does NOT change due to: (1) Bug fixes (2) Typos or clarifications (3) major functional/feature change/addition/deletion. Instead these changes may be reflected via R S X as applicable. Spec owner maintains a customer-invisible number 'S' which changes due to: (1) Typos/clarifications (2) Bug documentation. Note that this bug is not due to a spec change but due to implementation. Nevertheless the spec tracks the IP bugs. An RTL release (say for silicon PG1.1) that occurs due to bug fix should document the corresponding spec number (X.Y.S) in its release notes." begin="5" end="0" width="6" rwaccess="R/W">
        </bitfield>
    </register>
    <register id="SYSCONFIG" width="32" offset="0x110" description="Register SHAMD5_SYSCONFIG">
    </register>
    <register id="SYSSTATUS" width="32" offset="0x114" description="Register SHAMD5_SYSSTATUS">
    </register>
    <register id="IRQSTATUS" width="32" offset="0x118" description="Register SHAMD5_IRQSTATUS">
    </register>
    <register id="IRQENABLE" width="32" offset="0x11C" description="Register SHAMD5_IRQENABLE. The SHAMD5_IRQENABLE register contains an enable bit for each unique interrupt for the public side. An interrupt is enabled when both the global enable in SHAMD5_SYSCONFIG (PIT_en) and the bit in this register are both set to 1. An interrupt that is enabled is propagated to the SINTREQUEST_P output. Please note that the dedicated partial hash output (SINTREQUEST_PART_P) is not affected by this register it is only affected by the global enable SHAMD5_SYSCONFIG (PIT_en).">
    </register>
    <register id="HASH512_ODIGEST_A" width="32" offset="0x200" description="">
    </register>
    <register id="HASH512_ODIGEST_B" width="32" offset="0x204" description="">
    </register>
    <register id="HASH512_ODIGEST_C" width="32" offset="0x208" description="">
    </register>
    <register id="HASH512_ODIGEST_D" width="32" offset="0x20C" description="">
    </register>
    <register id="HASH512_ODIGEST_E" width="32" offset="0x210" description="">
    </register>
    <register id="HASH512_ODIGEST_F" width="32" offset="0x214" description="">
    </register>
    <register id="HASH512_ODIGEST_G" width="32" offset="0x218" description="">
    </register>
    <register id="HASH512_ODIGEST_H" width="32" offset="0x21C" description="">
    </register>
    <register id="HASH512_ODIGEST_I" width="32" offset="0x220" description="">
    </register>
    <register id="HASH512_ODIGEST_J" width="32" offset="0x224" description="">
    </register>
    <register id="HASH512_ODIGEST_K" width="32" offset="0x228" description="">
    </register>
    <register id="HASH512_ODIGEST_L" width="32" offset="0x22C" description="">
    </register>
    <register id="HASH512_ODIGEST_M" width="32" offset="0x230" description="">
    </register>
    <register id="HASH512_ODIGEST_N" width="32" offset="0x234" description="">
    </register>
    <register id="HASH512_ODIGEST_O" width="32" offset="0x238" description="">
    </register>
    <register id="HASH512_ODIGEST_P" width="32" offset="0x23C" description="">
    </register>
    <register id="HASH512_IDIGEST_A" width="32" offset="0x240" description="">
    </register>
    <register id="HASH512_IDIGEST_B" width="32" offset="0x244" description="">
    </register>
    <register id="HASH512_IDIGEST_C" width="32" offset="0x248" description="">
    </register>
    <register id="HASH512_IDIGEST_D" width="32" offset="0x24C" description="">
    </register>
    <register id="HASH512_IDIGEST_E" width="32" offset="0x250" description="">
    </register>
    <register id="HASH512_IDIGEST_F" width="32" offset="0x254" description="">
    </register>
    <register id="HASH512_IDIGEST_G" width="32" offset="0x258" description="">
    </register>
    <register id="HASH512_IDIGEST_H" width="32" offset="0x25C" description="">
    </register>
    <register id="HASH512_IDIGEST_I" width="32" offset="0x260" description="">
    </register>
    <register id="HASH512_IDIGEST_J" width="32" offset="0x264" description="">
    </register>
    <register id="HASH512_IDIGEST_K" width="32" offset="0x268" description="">
    </register>
    <register id="HASH512_IDIGEST_L" width="32" offset="0x26C" description="">
    </register>
    <register id="HASH512_IDIGEST_M" width="32" offset="0x270" description="">
    </register>
    <register id="HASH512_IDIGEST_N" width="32" offset="0x274" description="">
    </register>
    <register id="HASH512_IDIGEST_O" width="32" offset="0x278" description="">
    </register>
    <register id="HASH512_IDIGEST_P" width="32" offset="0x27C" description="">
    </register>
    <register id="HASH512_DIGEST_COUNT" width="32" offset="0x280" description="">
    </register>
    <register id="HASH512_MODE" width="32" offset="0x284" description="">
    </register>
    <register id="HASH512_LENGTH" width="32" offset="0x288" description="">
    </register>
</module>
