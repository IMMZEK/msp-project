<?xml version="1.0" encoding="utf-8"?>
<module id="MMCSD" HW_revision="" XML_version="1" description="MMC/SD Controller">
	<register id="MMCCTL" acronym="MMCCTL" offset="0x0000" width="32" description="MMC Control Register">
		<bitfield id="_RESV_1" width="21" begin="31" end="11" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="PERMDX" width="1" begin="10" end="10" resetval="0" description="Endian select Enable when writing" range="" rwaccess="RW">
			<bitenum id="LEND" value="0" token="LEND" description="Little Endian is selected"/>
			<bitenum id="BEND" value="1" token="BEND" description="Big Endian is selected"/>
		</bitfield>
		<bitfield id="PERMDR" width="1" begin="9" end="9" resetval="0" description="Endian select Enable when reading" range="" rwaccess="RW">
			<bitenum id="LEND" value="0" token="LEND" description="Little Endian is selected"/>
			<bitenum id="BEND" value="1" token="BEND" description="Big Endian is selected"/>
		</bitfield>
		<bitfield id="WIDTH1" width="1" begin="8" end="8" resetval="0" description="Data Bus Width1 (in only MMC mode)" range="" rwaccess="RW">
			<bitenum id="NOT_USED" value="11" token="NOT_USED" description="Data bus has 1-bit or 4-bit."/>
			<bitenum id="BIT8" value="27" token="BIT8" description="Data Bus has 8-bit, (all DAT0-7 are used)"/>
		</bitfield>
		<bitfield id="WIDTH0" width="1" begin="8" end="8" resetval="0" description="Data Bus Width0 (in only MMC mode)" range="" rwaccess="RW">
			<bitenum id="BIT1" value="11" token="BIT1" description="Data bus has 1-bit, (only DAT0 is used)."/>
			<bitenum id="BIT4" value="27" token="BIT4" description="Data Bus has 4-bit, (DAT0-3 are used)"/>
		</bitfield>
		<bitfield id="DATEG" width="2" begin="7" end="6" resetval="0" description="DAT3 Edge Detection Select" range="" rwaccess="RW">
			<bitenum id="DISABLE" value="11" token="DISABLE" description="DAT3 edge detection is disabled."/>
			<bitenum id="R_EDGE" value="27" token="R_EDGE" description=" DAT3 rising edge detection is enabled."/>
			<bitenum id="F_EDGE" value="267" token="F_EDGE" description="DAT3 falling edge detection is enabled."/>
			<bitenum id="RF_EDGE" value="283" token="RF_EDGE" description="DAT3 both edge detection is enabled"/>
		</bitfield>
		<bitfield id="_RESV_7" width="4" begin="5" end="2" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="CMDRST" width="1" begin="1" end="1" resetval="0" description="CMD Logic Reset" range="" rwaccess="RW">
			<bitenum id="ENABLE" value="0" token="ENABLE" description="The CMD line portion is enabled"/>
			<bitenum id="DISABLE" value="1" token="DISABLE" description="The CMD line portion is disabled and in reset state"/>
		</bitfield>
		<bitfield id="DATRST" width="1" begin="0" end="0" resetval="0" description="DAT Logic Reset" range="" rwaccess="RW">
			<bitenum id="ENABLE" value="0" token="ENABLE" description="The DAT line portion is enabled"/>
			<bitenum id="DISABLE" value="1" token="DISABLE" description="The DAT line portion is disabled and in reset state"/>
		</bitfield>
	</register>
	<register id="MMCCLK" acronym="MMCCLK" offset="0x0004" width="32" description="MMC Memory Clock Register">
		<bitfield id="_RESV_1" width="22" begin="31" end="10" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="DIV4" width="1" begin="9" end="9" resetval="0" description="DIV4 option" range="" rwaccess="RW">
			<bitenum id="DISABLE" value="0" token="DISABLE" description="DIV4 is disabled"/>
			<bitenum id="ENABLE" value="1" token="ENABLE" description="DIV4 is enabled"/>
		</bitfield>
		<bitfield id="CLKEN" width="1" begin="8" end="8" resetval="0" description="CLK Enable" range="" rwaccess="RW">
			<bitenum id="DISABLE" value="0" token="DISABLE" description="CLK pin is disabled and fixed"/>
			<bitenum id="ENABLE" value="1" token="ENABLE" description="CLK pin is enabled"/>
		</bitfield>
		<bitfield id="CLKRT" width="8" begin="7" end="0" resetval="255" description="Clock Pin Rate&amp;amp;#10;This indicates divider rate of the function clock&amp;amp;#10;MMC clock = function clock /2*(ClockRate + 1)" range="" rwaccess="RW"/>
	</register>
	<register id="MMCST0" acronym="MMCST0" offset="0x0008" width="32" description="MMC Status Register 0">
		<bitfield id="_RESV_1" width="18" begin="31" end="14" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="CCS" width="1" begin="13" end="13" resetval="0" description="Command Completion Signal &amp;amp;#10;0: Command 61 is not completed&amp;amp;#10;1: Command 61 is completed " range="" rwaccess="R">
			<bitenum id="Not_completed" value="0" token="Not_completed" description="Command 61 not completed"/>
			<bitenum id="Completed" value="1" token="Completed" description="Command 61 completed"/>
		</bitfield>
		<bitfield id="TRNDNE" width="1" begin="12" end="12" resetval="0" description="Transfer Done&amp;amp;#10;0: No data transfer is done&amp;amp;#10;1:Data transfer of specified length is done" range="" rwaccess="R">
			<bitenum id="Not_done" value="0" token="Not_done" description="Data transfer not done"/>
			<bitenum id="Done" value="1" token="Done" description="Data transfer done"/>
		</bitfield>
		<bitfield id="DATED" width="1" begin="11" end="11" resetval="0" description="DAT3 Edge Detect, bit is cleared when read by CPU&amp;amp;#10;0: No DAT3 edge is detected&amp;amp;#10;1: DAT3 edge has been detected" range="" rwaccess="R">
			<bitenum id="Not_detected" value="0" token="Not_detected" description="DAT3 Edge not detected"/>
			<bitenum id="Detected" value="1" token="Detected" description="DAT3 Edge detected"/>
		</bitfield>
		<bitfield id="DRRDY" width="1" begin="10" end="10" resetval="0" description="Data Receive Ready&amp;amp;#10;0: MMCDRR is not ready&amp;amp;#10;1: MMCDRR is ready to be reading a newdata by CPU or DMA" range="" rwaccess="R">
			<bitenum id="Not_ready" value="0" token="Not_ready" description="DRR not ready"/>
			<bitenum id="Ready" value="1" token="Ready" description="DRR ready"/>
		</bitfield>
		<bitfield id="DXRDY" width="1" begin="9" end="9" resetval="1" description="Data Transmit Ready&amp;amp;#10;0: MMCDXR is not ready&amp;amp;#10;1: MMCDXR is ready to be writing a new data by CPU or DMA  " range="" rwaccess="R">
			<bitenum id="Not_ready" value="0" token="Not_ready" description="DXR not ready"/>
			<bitenum id="Ready" value="1" token="Ready" description="DXR ready"/>
		</bitfield>
		<bitfield id="_RESV_7" width="1" begin="8" end="8" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="CRCRS" width="1" begin="7" end="7" resetval="0" description="CRC error (response)&amp;amp;#10;0: No CRC error is detected&amp;amp;#10;1: CRC error has been detected  " range="" rwaccess="R">
			<bitenum id="Not_detected" value="0" token="Not_detected" description="CRC response not detected"/>
			<bitenum id="Detected" value="1" token="Detected" description="CRC response detected"/>
		</bitfield>
		<bitfield id="CRCRD" width="1" begin="6" end="6" resetval="0" description="CRC error (read data)&amp;amp;#10;0: No CRC error is detected&amp;amp;#10;1: CRC error has been detected" range="" rwaccess="R">
			<bitenum id="Not_detected" value="0" token="Not_detected" description="CRC read data not detected"/>
			<bitenum id="Detected" value="1" token="Detected" description="CRC read data detected"/>
		</bitfield>
		<bitfield id="CRCWR" width="1" begin="5" end="5" resetval="0" description="CRC error (write data)&amp;amp;#10;0: No CRC error is detected&amp;amp;#10;1: CRC error has been detected " range="" rwaccess="R">
			<bitenum id="Not_detected" value="0" token="Not_detected" description="CRC write data not detected"/>
			<bitenum id="Detected" value="1" token="Detected" description="CRC write data detected"/>
		</bitfield>
		<bitfield id="TOUTRS" width="1" begin="4" end="4" resetval="0" description="Time_Out (response)&amp;amp;#10;0: No time_out occurs&amp;amp;#10;1: Time_out has occurred during waiting response " range="" rwaccess="R">
			<bitenum id="Not_occurred" value="0" token="Not_occurred" description="Time-Out response not occurred"/>
			<bitenum id="Occurred" value="1" token="Occurred" description="Time-Out response occurred"/>
		</bitfield>
		<bitfield id="TOUTRD" width="1" begin="3" end="3" resetval="0" description="Time_Out (read data)&amp;amp;#10;0: No time_out occurs&amp;amp;#10;1: Time_out has occurred during waiting response " range="" rwaccess="R">
			<bitenum id="Not_occurred" value="0" token="Not_occurred" description="Time-Out read data not occurred"/>
			<bitenum id="Occurred" value="1" token="Occurred" description="Time-Out read data occurred"/>
		</bitfield>
		<bitfield id="RSPDNE" width="1" begin="2" end="2" resetval="0" description="Command / Response Done&amp;amp;#10;0: No Receiving response done&amp;amp;#10;1: Response successfully has received or command has sent without response " range="" rwaccess="R">
			<bitenum id="Not_received" value="0" token="Not_received" description="Command/Response not received"/>
			<bitenum id="Received" value="1" token="Received" description="Command/Response received"/>
		</bitfield>
		<bitfield id="BSYDNE" width="1" begin="1" end="1" resetval="0" description="Busy Done&amp;amp;#10;0: No busy releasing done&amp;amp;#10;1: Released from busy state or expected busy not detected" range="" rwaccess="R">
			<bitenum id="Not_released" value="0" token="Not_released" description="Busy state not released"/>
			<bitenum id="Released" value="1" token="Released" description="Busy state released"/>
		</bitfield>
		<bitfield id="DATDNE" width="1" begin="0" end="0" resetval="0" description="Data Done&amp;amp;#10;0: No data transfer done&amp;amp;#10;1: Data transfer of specified length successfully done" range="" rwaccess="R">
			<bitenum id="Not_done" value="0" token="Not_done" description="Data transfer not done"/>
			<bitenum id="Done" value="1" token="Done" description="Data transfer done"/>
		</bitfield>
	</register>
	<register id="MMCST1" acronym="MMCST1" offset="0x000C" width="32" description="MMC Status Register 1">
		<bitfield id="_RESV_1" width="25" begin="31" end="7" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="FIFOFUL" width="1" begin="6" end="6" resetval="0" description="FIFO is full&amp;amp;#10;0: FIFO is not full&amp;amp;#10;1: FIFO is full" range="" rwaccess="R">
			<bitenum id="Not_full" value="0" token="Not_full" description="FIFO not full"/>
			<bitenum id="Full" value="1" token="Full" description="FIFO full"/>
		</bitfield>
		<bitfield id="FIFOEMP" width="1" begin="5" end="5" resetval="0" description="FIFO contains no data&amp;amp;#10;0: FIFO is not empty&amp;amp;#10;1: FIFO is empty" range="" rwaccess="R">
			<bitenum id="Not_empty" value="0" token="Not_empty" description="FIFO not empty"/>
			<bitenum id="Empty" value="1" token="Empty" description="FIFO empty"/>
		</bitfield>
		<bitfield id="DAT3ST" width="1" begin="4" end="4" resetval="0" description="DAT3 Status&amp;amp;#10;0: The status of DAT3 is L level&amp;amp;#10;1: The status of DAT3 is H level" range="" rwaccess="R">
			<bitenum id="Low" value="0" token="Low" description="DAT3 status low"/>
			<bitenum id="High" value="1" token="High" description="DAT3 status high"/>
		</bitfield>
		<bitfield id="DRFUL" width="1" begin="3" end="3" resetval="0" description="DRRDY Data receive full&amp;amp;#10;0: MMCDRR(data receive register) is not full&amp;amp;#10;1: MMCDRR(data receive register) is full" range="" rwaccess="R">
			<bitenum id="Not_full" value="0" token="Not_full" description="DRR not full"/>
			<bitenum id="Full" value="1" token="Full" description="DRR full"/>
		</bitfield>
		<bitfield id="DXEMP" width="1" begin="2" end="2" resetval="0" description="DXRDY Data transmit empty&amp;amp;#10;0: MMCDXR(data transmit register) is not empty&amp;amp;#10;1: MMCDXR(data transmit register) is empty" range="" rwaccess="R">
			<bitenum id="Not_empty" value="0" token="Not_empty" description="DXR not empty"/>
			<bitenum id="Empty" value="1" token="Empty" description="DXR empty"/>
		</bitfield>
		<bitfield id="CLKSTP" width="1" begin="1" end="1" resetval="1" description="Clock Stop Status&amp;amp;#10;0:CLK is active&amp;amp;#10;1:CLK is held L because of no sending data during CLKEN is 0, receive shift register is full, transmit shift register is empty" range="" rwaccess="R">
			<bitenum id="Low" value="0" token="Low" description="Clock Stop status low"/>
			<bitenum id="High" value="1" token="High" description="Clock Stop status high"/>
		</bitfield>
		<bitfield id="BUSY" width="1" begin="0" end="0" resetval="0" description="Busy&amp;amp;#10;0: No busy signal is detected&amp;amp;#10;1: Busy signal is detected after response with busy or during block write" range="" rwaccess="R">
			<bitenum id="Not_detected" value="0" token="Not_detected" description="Busy not detected"/>
			<bitenum id="Detected" value="1" token="Detected" description="Busy detected"/>
		</bitfield>
	</register>
	<register id="MMCIM" acronym="MMCIM" offset="0x0010" width="32" description="MMC Interrupt Mask Register">
		<bitfield id="_RESV_1" width="18" begin="31" end="14" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="ECCS" width="1" begin="13" end="13" resetval="0" description="CCS permission bit" range="" rwaccess="RW">
			<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
			<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
		</bitfield>
		<bitfield id="ETRNDNE" width="1" begin="12" end="12" resetval="0" description="TRNDNE permission bit" range="" rwaccess="RW">
			<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
			<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
		</bitfield>
		<bitfield id="EDATED" width="1" begin="11" end="11" resetval="0" description="DATED permission bit" range="" rwaccess="RW">
			<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
			<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
		</bitfield>
		<bitfield id="EDRRDY" width="1" begin="10" end="10" resetval="0" description="DRRDY permission bit" range="" rwaccess="RW">
			<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
			<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
		</bitfield>
		<bitfield id="EDXRDY" width="1" begin="9" end="9" resetval="0" description="DXRDY permission bit" range="" rwaccess="RW">
			<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
			<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
		</bitfield>
		<bitfield id="ESPIERR" width="1" begin="8" end="8" resetval="0" description="SPIERR permission bit (in SPI mode)" range="" rwaccess="RW">
			<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
			<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
		</bitfield>
		<bitfield id="ECRCRS" width="1" begin="7" end="7" resetval="0" description="CRCRS permission bit (response)" range="" rwaccess="RW">
			<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
			<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
		</bitfield>
		<bitfield id="ECRCRD" width="1" begin="6" end="6" resetval="0" description="CRCRD permission bit (read data)" range="" rwaccess="RW">
			<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
			<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
		</bitfield>
		<bitfield id="ECRCWR" width="1" begin="5" end="5" resetval="0" description="CRCWR permission bit (write data)" range="" rwaccess="RW">
			<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
			<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
		</bitfield>
		<bitfield id="ETOUTRS" width="1" begin="4" end="4" resetval="0" description="TOUTRS permission bit (response)" range="" rwaccess="RW">
			<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
			<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
		</bitfield>
		<bitfield id="ETOUTRD" width="1" begin="3" end="3" resetval="0" description="TOUTRD permission bit (read data)" range="" rwaccess="RW">
			<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
			<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
		</bitfield>
		<bitfield id="ERSPDNE" width="1" begin="2" end="2" resetval="0" description="RSPDNE permission bit" range="" rwaccess="RW">
			<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
			<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
		</bitfield>
		<bitfield id="EBSYDNE" width="1" begin="1" end="1" resetval="0" description="BSYDNE permission bit" range="" rwaccess="RW">
			<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
			<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
		</bitfield>
		<bitfield id="EDATDNE" width="1" begin="0" end="0" resetval="0" description="DATDNE permission bit" range="" rwaccess="RW">
			<bitenum id="PROHIBIT" value="0" token="PROHIBIT" description="Prohibit"/>
			<bitenum id="PERMIT" value="1" token="PERMIT" description="Permit"/>
		</bitfield>
	</register>
	<register id="MMCTOR" acronym="MMCTOR" offset="0x0014" width="32" description="MMC Response Time-out Register">
		<bitfield id="_RESV_1" width="14" begin="31" end="18" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="TOD_25_16" width="10" begin="17" end="8" resetval="0" description="Upper 10 bit of Data TimeOut Register (in MMC and SPI Modes)&amp;amp;#10;Time_Out Count For Data Read (in MMC mode)&amp;amp;#10;   0x00000: no time_out&amp;amp;#10;   0x00001: 1 CLK clock&amp;amp;#10;   0x00002: 2 CLK clocks&amp;amp;#10;   ...&amp;amp;#10;   0x1FFFF: 2097151 CLK clocks&amp;amp;#10;Time_Out Count For Data Read (in SPI mode)&amp;amp;#10;   0x00000: no time_out&amp;amp;#10;   0x00001: 1 x 8 CLK clocks&amp;amp;#10;   0x00002: 2 x 8 CLK clocks&amp;amp;#10;   ...&amp;amp;#10;   0x1FFFFF: 2097151 x 8 CLK clocks" range="" rwaccess="RW"/>
		<bitfield id="TOR" width="8" begin="7" end="0" resetval="0" description="Time_Out Count For Response&amp;amp;#10;In MMC mode&amp;amp;#10;  0000 0000: no time_out&amp;amp;#10;  0000 0001: 1 CLK clock&amp;amp;#10;  0000 0010: 2 CLK clocks &amp;amp;#10;   ...&amp;amp;#10;  1111 1111: 255 CLK clocks&amp;amp;#10;In SPI mode&amp;amp;#10;  0000 0000: no time_out&amp;amp;#10;  0000 0001: 1 x 8 CLK clock&amp;amp;#10;  0000 0010: 2 x 8 CLK clocks &amp;amp;#10;   ...&amp;amp;#10;  1111 1111: 255 x 8 CLK clocks" range="" rwaccess="RW"/>
	</register>
	<register id="MMCTOD" acronym="MMCTOD" offset="0x0018" width="32" description="MMC Data Read Time-out Register">
		<bitfield id="_RESV_1" width="16" begin="31" end="16" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="TOD_15_0" width="16" begin="15" end="0" resetval="0" description="Lower 16 bit of Data TimeOut Register&amp;amp;#10;Time_Out Count For Data Read (in MMC mode)&amp;amp;#10;   0x00000: no time_out&amp;amp;#10;   0x00001: 1 CLK clock&amp;amp;#10;   0x00002: 2 CLK clocks&amp;amp;#10;   ...&amp;amp;#10;   0x1FFFF: 2097151 CLK clocks&amp;amp;#10;Time_Out Count For Data Read (in SPI mode)&amp;amp;#10;   0x00000: no time_out&amp;amp;#10;   0x00001: 1 x 8 CLK clocks&amp;amp;#10;   0x00002: 2 x 8 CLK clocks&amp;amp;#10;   ...&amp;amp;#10;   0x1FFFFF: 2097151 x 8 CLK clocks" range="" rwaccess="RW"/>
	</register>
	<register id="MMCBLEN" acronym="MMCBLEN" offset="0x001C" width="32" description="MMC Block Length Register">
		<bitfield id="_RESV_1" width="20" begin="31" end="12" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="BLEN" width="12" begin="11" end="0" resetval="512" description="Block Length&amp;amp;#10;Specifies the byte count of a data block. Value 0x000 is prohibited" range="" rwaccess="RW"/>
	</register>
	<register id="MMCNBLK" acronym="MMCNBLK" offset="0x0020" width="32" description="MMC Number of Blocks Register">
		<bitfield id="_RESV_1" width="16" begin="31" end="16" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="NBLK" width="16" begin="15" end="0" resetval="0" description="Number of Blocks&amp;amp;#10;Specifies the total number of blocks to be transferred.The value 0x0000 means infinite blocks" range="" rwaccess="RW"/>
	</register>
	<register id="MMCNBLC" acronym="MMCNBLC" offset="0x0024" width="32" description="MMC Number of Blocks Counter">
		<bitfield id="_RESV_1" width="16" begin="31" end="16" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="NBLC" width="16" begin="15" end="0" resetval="65535" description="MMCNBLC is used in order to test the counter which operates with the value of MMCNBLK in a factory test or a chip evaluation&amp;amp;#10;Reading is possible in order to check the number of blocks to be transferred But Writing to this register is prohibited by User" range="" rwaccess="RW"/>
	</register>
	<register id="MMCDRR" acronym="MMCDRR" offset="0x0028" width="32" description="MMC Data Receive Register">
		<bitfield id="DRR" width="32" begin="31" end="0" resetval="0" description="This register is used for reading of receive data from card when block read&amp;amp;#10;&amp;amp;#10;Register expects little endian formatting" range="" rwaccess="RW"/>
	</register>
	<register id="MMCDXR" acronym="MMCDXR" offset="0x002C" width="32" description="MMC Data Transmit Register">
		<bitfield id="DXR" width="32" begin="31" end="0" resetval="0" description="This register is used for writing of transmit data to card when block write&amp;amp;#10;&amp;amp;#10;Register expects little endian formatting" range="" rwaccess="RW"/>
	</register>
	<register id="MMCCMD" acronym="MMCCMD" offset="0x0030" width="32" description="MMC Command Register">
		<bitfield id="_RESV_1" width="15" begin="31" end="17" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="DMATRIG" width="1" begin="16" end="16" resetval="0" description="DMA transfer event generation enable" range="" rwaccess="RW">
			<bitenum id="NO" value="0" token="NO" description="Do not generate DMA transfer event"/>
			<bitenum id="YES" value="1" token="YES" description=" Generate DMA transfer event (mmcsd_dma_xready_o)"/>
		</bitfield>
		<bitfield id="DCLR" width="1" begin="15" end="15" resetval="0" description="Data Receive/Transmit Clear" range="" rwaccess="RW">
			<bitenum id="NO" value="0" token="NO" description=" No clear"/>
			<bitenum id="CLEAR" value="1" token="CLEAR" description="Clear"/>
		</bitfield>
		<bitfield id="INITCK" width="1" begin="14" end="14" resetval="0" description="Initialize Clock&amp;amp;#10;Before sending the command (specified in CMD), 80 cycles of dummy clock will be inserted. This is required for resetting a card after power_on" range="" rwaccess="RW">
			<bitenum id="NO" value="0" token="NO" description=" No initialization clock"/>
			<bitenum id="INIT" value="1" token="INIT" description="Initialization clock insertion"/>
		</bitfield>
		<bitfield id="WDATX" width="1" begin="13" end="13" resetval="0" description="With Data" range="" rwaccess="RW">
			<bitenum id="NO" value="0" token="NO" description=" No data transfer"/>
			<bitenum id="DATA" value="1" token="DATA" description="With data transfer"/>
		</bitfield>
		<bitfield id="STRMTP" width="1" begin="12" end="12" resetval="0" description="Stream Transfer" range="" rwaccess="RW">
			<bitenum id="BLOCK" value="0" token="BLOCK" description=" Block data transfer"/>
			<bitenum id="STREAM" value="1" token="STREAM" description=" Stream data transfer"/>
			<bitenum id="NO" value="0" token="NO" description="When WDATX = 0"/>
		</bitfield>
		<bitfield id="DTRW" width="1" begin="11" end="11" resetval="0" description="Write" range="" rwaccess="RW">
			<bitenum id="READ" value="0" token="READ" description=" Data read"/>
			<bitenum id="WRITE" value="1" token="WRITE" description="Data write"/>
			<bitenum id="NO" value="0" token="NO" description="When WDATX = 0"/>
		</bitfield>
		<bitfield id="RSPFMT" width="2" begin="10" end="9" resetval="0" description="Response Format&amp;amp;#10;00:&amp;amp;#10;01: R1/R4/R5/R6 (48_bit length)&amp;amp;#10;10: R2 (136_bit length)&amp;amp;#10;11: R3 (48_bit length, without CRC)" range="" rwaccess="RW">
			<bitenum id="NORSP" value="11" token="NORSP" description=" No response"/>
			<bitenum id="R1" value="27" token="R1" description="48-bit Normal response"/>
			<bitenum id="R2" value="267" token="R2" description="136-bit length contents of CSD, CID registers"/>
			<bitenum id="R3" value="283" token="R3" description="48-bit length without CRC contents of OCR "/>
			<bitenum id="R4" value="27" token="R4" description="Fast I/O - 48 bit length"/>
			<bitenum id="R5" value="27" token="R5" description="Interrupt Request - 48 bit length"/>
			<bitenum id="R6" value="27" token="R6" description="Published RCA response-48bit length"/>
		</bitfield>
		<bitfield id="BSYEXP" width="1" begin="8" end="8" resetval="0" description="Busy Expected" range="" rwaccess="RW">
			<bitenum id="NO" value="0" token="NO" description="No busy signal expected"/>
			<bitenum id="BUSY" value="1" token="BUSY" description="Busy signal expected or in case of transfer abort"/>
		</bitfield>
		<bitfield id="PPLEN" width="1" begin="7" end="7" resetval="0" description="Push Pull Enable" range="" rwaccess="RW">
			<bitenum id="OD" value="0" token="OD" description="Push Pull Driver of CMD line is disable (Open drain)"/>
			<bitenum id="PP" value="1" token="PP" description="Push Pull Driver of CMD line is enable"/>
		</bitfield>
		<bitfield id="_RESV_11" width="1" begin="6" end="6" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="CMD" width="6" begin="5" end="0" resetval="0" description="Command Index&amp;amp;#10;The command to be sent to the CMD line" range="" rwaccess="RW"/>
	</register>
	<register id="MMCARGHL" acronym="MMCARGHL" offset="0x0034" width="32" description="MMC Argument  Register">
		<bitfield id="ARGH" width="16" begin="31" end="16" resetval="0" description="MSB of Argument Register&amp;amp;#10;MMCARGHL is used for specifying the arguments to be sent with the command specified by MMCCMD. Writing to MMCCMD cause start event of sending operation, that is, MMCARG has to be set before writing to MMCCMD. The content of this register will be kept after transfer to the shift register. However, modification to MMCARG is not allowed during sending operation" range="" rwaccess="RW"/>
		<bitfield id="ARGL" width="16" begin="15" end="0" resetval="0" description="LSB of Argument Register" range="" rwaccess="RW"/>
	</register>
	<register id="MMCRSP01" acronym="MMCRSP01" offset="0x0038" width="32" description="MMC Response Register 0 and 1 ">
		<bitfield id="MMCRSP1" width="16" begin="31" end="16" resetval="0" description="Response Register 1" range="" rwaccess="RW"/>
		<bitfield id="MMCRSP0" width="16" begin="15" end="0" resetval="0" description="Response Register 0" range="" rwaccess="RW"/>
	</register>
	<register id="MMCRSP23" acronym="MMCRSP23" offset="0x003C" width="32" description="MMC Response Register 2 and 3">
		<bitfield id="MMCRSP3" width="16" begin="31" end="16" resetval="0" description="Response Register 3" range="" rwaccess="RW"/>
		<bitfield id="MMCRSP2" width="16" begin="15" end="0" resetval="0" description="Response Register 2" range="" rwaccess="RW"/>
	</register>
	<register id="MMCRSP45" acronym="MMCRSP45" offset="0x0040" width="32" description="MMC Response Register 4 and 5">
		<bitfield id="MMCRSP5" width="16" begin="31" end="16" resetval="0" description="Response Register 5" range="" rwaccess="RW"/>
		<bitfield id="MMCRSP4" width="16" begin="15" end="0" resetval="0" description="Response Register 4" range="" rwaccess="RW"/>
	</register>
	<register id="MMCRSP67" acronym="MMCRSP67" offset="0x0044" width="32" description="MMC Response Register 6 and 7">
		<bitfield id="MMCRSP7" width="16" begin="31" end="16" resetval="0" description="Response Register 7" range="" rwaccess="RW"/>
		<bitfield id="MMCRSP6" width="16" begin="15" end="0" resetval="0" description="Response Register 6" range="" rwaccess="RW"/>
	</register>
	<register id="MMCDRSP" acronym="MMCDRSP" offset="0x0048" width="32" description="MMC Data Response Register">
		<bitfield id="_RESV_1" width="24" begin="31" end="8" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="DRSP" width="8" begin="7" end="0" resetval="0" description="Data Response&amp;amp;#10;During a write operation, the CRC status token is stored in this register" range="" rwaccess="RW"/>
	</register>
	<register id="MMCCIDX" acronym="MMCCIDX" offset="0x0050" width="32" description="MMC Command Index Register">
		<bitfield id="_RESV_1" width="24" begin="31" end="8" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="STRT" width="1" begin="7" end="7" resetval="0" description="Start bit" range="" rwaccess="RW"/>
		<bitfield id="XMIT" width="1" begin="6" end="6" resetval="0" description="Transmission bit" range="" rwaccess="RW"/>
		<bitfield id="CIDX" width="6" begin="5" end="0" resetval="0" description="Command Index&amp;amp;#10;Command index, is stored when it is received in MMC mode" range="" rwaccess="RW"/>
	</register>
	<register id="SDIOCTL" acronym="SDIOCTL" offset="0x0064" width="32" description="SDIO Control Register">
		<bitfield id="_RESV_1" width="30" begin="31" end="2" resetval="10" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="RDWTCR" width="1" begin="1" end="1" resetval="0" description="Read Wait enable for CRC error&amp;#10;If this bit is set, Read Wait operation automatically starts in case a CRC error is detected during multiple block read access, and while it's not the last block to be transferred. In this case, RDWTRQ (Read Wait request) is automatically set. To end the Read Wait operation, write '0' to RDWTRQ. (No need to clear RDWTCR)" range="" rwaccess="RW">
			<bitenum id="DISABLE" value="0" token="DISABLE" description="No read wait on CRC error"/>
			<bitenum id="ENABLE" value="1" token="ENABLE" description="Automatically start read wait on CRC error"/>
		</bitfield>
		<bitfield id="RDWTRQ" width="1" begin="0" end="0" resetval="0" description="Read Wait request&amp;#10;0: End Read Wait operation and release DAT[2]&amp;#10;1: Set a Read Wait request. If this bit is set, Read Wait operation starts 2 clocks after the end of the read data block. MMCIF asserts low level on DAT[2] until this bit is cleared" range="" rwaccess="RW">
			<bitenum id="DISABLE" value="0" token="DISABLE" description="End read wait request"/>
			<bitenum id="ENABLE" value="1" token="ENABLE" description="Enable read wait request"/>
		</bitfield>
	</register>
	<register id="SDIOST0" acronym="SDIOST0" offset="0x0068" width="32" description="SDIO Status Register 0">
		<bitfield id="_RESV_1" width="29" begin="31" end="3" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="RDWTST" width="1" begin="2" end="2" resetval="0" description="Read Wait status&amp;#10;RDWTST becomes '1' during Read Wait operation" range="" rwaccess="R">
			<bitenum id="CLEAR" value="0" token="CLEAR" description="No Read Wait Status"/>
			<bitenum id="SET" value="1" token="SET" description="Read Wait Status set"/>
		</bitfield>
		<bitfield id="INTPRD" width="1" begin="1" end="1" resetval="0" description="Interrupt period&amp;#10;INTPRD becomes '1' during Interrupt period" range="" rwaccess="R">
			<bitenum id="CLEAR" value="0" token="CLEAR" description="No Interrupt period"/>
			<bitenum id="SET" value="1" token="SET" description="Interupt period set"/>
		</bitfield>
		<bitfield id="DAT1" width="1" begin="0" end="0" resetval="1" description="DAT[1] status&amp;#10;DAT[1] can be monitored through this bit" range="" rwaccess="R">
			<bitenum id="CLEAR" value="0" token="CLEAR" description="Dat[1] is low"/>
			<bitenum id="SET" value="1" token="SET" description="Dat[1] is high"/>
		</bitfield>
	</register>
	<register id="SDIOIEN" acronym="SDIOIEN" offset="0x006C" width="32" description="SDIO Interrupt Enable Register">
		<bitfield id="_RESV_1" width="30" begin="31" end="2" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="RWSEN" width="1" begin="1" end="1" resetval="0" description="Read Wait interrupt enable" range="" rwaccess="RW">
			<bitenum id="DISABLE" value="0" token="DISABLE" description="Read Wait interrupt disable"/>
			<bitenum id="ENABLE" value="1" token="ENABLE" description="Read Wait interrupt enable"/>
		</bitfield>
		<bitfield id="IOINTEN" width="1" begin="0" end="0" resetval="0" description="SDIO card interrupt enable" range="" rwaccess="RW">
			<bitenum id="DISABLE" value="0" token="DISABLE" description="SDIO card interrupt disable"/>
			<bitenum id="ENABLE" value="1" token="ENABLE" description="SDIO card interrupt enable"/>
		</bitfield>
	</register>
	<register id="SDIOIST" acronym="SDIOIST" offset="0x0070" width="32" description="SDIO Interrupt Status Register">
		<bitfield id="_RESV_1" width="30" begin="31" end="2" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="RWS" width="1" begin="1" end="1" resetval="0" description="Read Wait interrupt status&amp;#10;0: Not interrupted&amp;#10;1: Interrupted&amp;#10;This bit is set to '1' when Read Wait operation starts and Read Wait interrupt is enabled. To clear this bit, write '1'" range="" rwaccess="RW">
			<bitenum id="CLEAR" value="0" token="CLEAR" description="No Read Wait Interrupt"/>
			<bitenum id="SET" value="1" token="SET" description="Read Wait Interrupt Status set"/>
		</bitfield>
		<bitfield id="IOINT" width="1" begin="0" end="0" resetval="0" description="SDIO card interrupt status&amp;#10;0: Not interrupted&amp;#10;1: Interrupted&amp;#10;This bit is set to '1' if the SDIO card interrupt is detected and card interrupt is enabled. To clear this bit, write '1' after the interrupt on the DAT[1] line is removed" range="" rwaccess="RW">
			<bitenum id="CLEAR" value="0" token="CLEAR" description="No SDIO card interrupt"/>
			<bitenum id="SET" value="1" token="SET" description="SDIO card interrupt set"/>
		</bitfield>
	</register>
	<register id="MMCFIFOCTL" acronym="MMCFIFOCTL" offset="0x0074" width="32" description="FIFO Control Register">
		<bitfield id="_RESV_1" width="27" begin="31" end="5" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="ACCWD" width="2" begin="4" end="3" resetval="0" description="Access Width (used by FIFO control to determine full/empty flag)" range="" rwaccess="RW">
			<bitenum id="4BYTES" value="11" token="4BYTES" description="CPU/DMA access width of 4 bytes"/>
			<bitenum id="3BYTES" value="27" token="3BYTES" description="CPU/DMA access width of 3 bytes"/>
			<bitenum id="2BYTES" value="267" token="2BYTES" description="CPU/DMA access width of 2 bytes"/>
			<bitenum id="1BYTE" value="283" token="1BYTE" description="CPU/DMA access width of 1 byte"/>
		</bitfield>
		<bitfield id="FIFOLEV" width="1" begin="2" end="2" resetval="0" description="Sets the threshold level which is used to determine when DMA request and FIFO threshold interrupt are triggered" range="" rwaccess="RW">
			<bitenum id="256BIT" value="0" token="256BIT" description="DMA Request every 256 bit sent/received"/>
			<bitenum id="512BIT" value="1" token="512BIT" description="DMA Request every 512 bit sent/received"/>
		</bitfield>
		<bitfield id="FIFODIR" width="1" begin="1" end="1" resetval="0" description="Determines if the FIFO is being written to or read from" range="" rwaccess="RW">
			<bitenum id="READ" value="0" token="READ" description="Read from FIFO"/>
			<bitenum id="WRITE" value="1" token="WRITE" description="Write to FIFO"/>
		</bitfield>
		<bitfield id="FIFORST" width="1" begin="0" end="0" resetval="0" description="Reset the internal state of the FIFO" range="" rwaccess="RW">
			<bitenum id="RESET" value="1" token="RESET" description="Reset FIFO"/>
		</bitfield>
	</register>
</module>
