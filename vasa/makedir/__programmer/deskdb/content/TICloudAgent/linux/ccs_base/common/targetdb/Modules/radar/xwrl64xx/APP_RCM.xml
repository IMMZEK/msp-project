<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="" id="APP_RCM">
  
  
  <register acronym="PID" description=" PID register " id="PID" offset="0x0" width="32">
    
  <bitfield begin="31" description="" end="16" id="" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="" end="11" id="" rwaccess="R" width="5"></bitfield>
    
  <bitfield begin="10" description="" end="8" id="" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="7" description="" end="6" id="" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="5" description="" end="0" id="" rwaccess="R" width="6"></bitfield>
  </register>
  
  
  <register acronym="APP_CPU_CLKCTL" description="" id="APP_CPU_CLKCTL" offset="0x4" width="32">
    
  <bitfield begin="27" description="Divide value 0x0 : div1 0x1 : div2 0x2 : div3 . . 0xF = div16 Data should be loaded as multibit. For example: if divider value of '0x8' should be selected then '0x888' should be configured to the register." end="16" id="divr" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="15" description="Select the source clock: 0x0 : OSC_CLK 0x1 : SLOW_CLK 0x2 : MDLL_CLK 0x3 : FAST_CLK 0x4 : SLOW_CLK 0x5 : SLOW_CLK 0x6 : SLOW_CLK 0x7 : SLOW_CLK For other values if the lower 3 bits matches with above, corresponding clock is selected. Data should be loaded as multibit. For example: if Clock source 0x5 should be selected then 0x555 should be configured to the register." end="4" id="srcsel" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="3" description="Reserved" end="0" id="Reserved" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_CPU_CLKSTAT" description="" id="APP_CPU_CLKSTAT" offset="0x8" width="32">
    
  <bitfield begin="11" description="Current Clock selected by GCM Clock Mux 0x1 : XTALCLK 0x2 : XTALCLKX2 0x4 : MDLL 0x8 : APLL/DPLL 0x10 : RCCLK" end="4" id="currclk" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="3" description="Gives the current divr setting used by the clock divider." end="0" id="currdivr" rwaccess="R" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_CAN_CLKCTL" description="" id="APP_CAN_CLKCTL" offset="0xC" width="32">
    
  <bitfield begin="27" description="Divide value 0x0 : div1 0x1 : div2 0x2 : div3 . . 0xF = div16 Data should be loaded as multibit. For example: if divider value of '0x8' should be selected then '0x888' should be configured to the register." end="16" id="divr" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="15" description="0x0 : OSC_CLK 0x1 : OSC_CLKX2 0x2 : MDLL_CLK 0x3 : FAST_CLK 0x4 : SLOW_CLK 0x5 : SLOW_CLK 0x6 : SLOW_CLK 0x7 : SLOW_CLKFor other values if the lower 3 bits matches with above, corresponding clock is selected. Data should be loaded as multibit. For example: if Clock source 0x5 should be selected then 0x555 should be configured to the register." end="4" id="srcsel" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="3" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="0" id="gate" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_CAN_CLKSTAT" description="" id="APP_CAN_CLKSTAT" offset="0x10" width="32">
    
  <bitfield begin="11" description="Current Clock selected by GCM Clock Mux 0x1 : XTALCLK 0x2 : XTALCLKX2 0x4 : MDLL 0x8 : APLL/DPLL 0x10 : RCCLK" end="4" id="currclk" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="3" description="Gives the current divr setting used by the clock divider." end="0" id="currdivr" rwaccess="R" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_SPI_CLKCTL" description="" id="APP_SPI_CLKCTL" offset="0x14" width="32">
    
  <bitfield begin="27" description="Divide value 0x0 : div1 0x1 : div2 0x2 : div3 . . 0xF = div16 Data should be loaded as multibit. For example: if divider value of '0x8' should be selected then '0x888' should be configured to the register." end="16" id="divr" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="15" description="0x0 : OSC_CLK 0x1 : OSC_CLKX2 0x2 : MDLL_CLK 0x3 : FAST_CLK 0x4 : SLOW_CLK 0x5 : SLOW_CLK 0x6 : SLOW_CLK 0x7 : SLOW_CLK For other values if the lower 3 bits matches with above, corresponding clock is selected. Data should be loaded as multibit. For example: if Clock source 0x5 should be selected then 0x555 should be configured to the register." end="4" id="srcsel" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="3" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="0" id="gate" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_SPI_CLKSTAT" description="" id="APP_SPI_CLKSTAT" offset="0x18" width="32">
    
  <bitfield begin="11" description="Current Clock selected by GCM Clock Mux 0x1 : XTALCLK 0x2 : XTALCLKX2 0x4 : MDLL 0x8 : APLL/DPLL 0x10 : RCCLK" end="4" id="currclk" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="3" description="Gives the current divr setting used by the clock divider." end="0" id="currdivr" rwaccess="R" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_SPI_BUSIF_CLKCTL" description="" id="APP_SPI_BUSIF_CLKCTL" offset="0x1C" width="32">
    
  <bitfield begin="11" description="Divide value 0x0 : div1 0x1 : div2 0x2 : div3 . . 0xF = div16 Data should be loaded as multibit. For example: if divider value of '0x8' should be selected then '0x888' should be configured to the register." end="0" id="divr" rwaccess="RW" width="12"></bitfield>
  </register>
  
  
  <register acronym="APP_SPI_BUSIF_CLKSTAT" description="" id="APP_SPI_BUSIF_CLKSTAT" offset="0x20" width="32">
    
  <bitfield begin="3" description="Gives the current divr setting used by the clock divider." end="0" id="currdivr" rwaccess="R" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_QSPI_CLKCTL" description="" id="APP_QSPI_CLKCTL" offset="0x24" width="32">
    
  <bitfield begin="27" description="Divide value 0x0 : div1 0x1 : div2 0x2 : div3 . . 0xF = div16 Data should be loaded as multibit. For example: if divider value of '0x8' should be selected then '0x888' should be configured to the register." end="16" id="divr" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="15" description="0x0 : OSC_CLK 0x1 : OSC_CLKX2 0x2 : MDLL_CLK 0x3 : FAST_CLK 0x4 : SLOW_CLK 0x5 : SLOW_CLK 0x6 : SLOW_CLK 0x7 : SLOW_CLK For other values if the lower 3 bits matches with above, corresponding clock is selected. Data should be loaded as multibit. For example: if Clock source 0x5 should be selected then 0x555 should be configured to the register." end="4" id="srcsel" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="3" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="0" id="gate" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_QSPI_CLKSTAT" description="" id="APP_QSPI_CLKSTAT" offset="0x28" width="32">
    
  <bitfield begin="11" description="Current Clock selected by GCM Clock Mux 0x1 : XTALCLK 0x2 : XTALCLKX2 0x4 : MDLL 0x8 : APLL/DPLL 0x10 : RCCLK" end="4" id="currclk" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="3" description="Gives the current divr setting used by the clock divider." end="0" id="currdivr" rwaccess="R" width="4"></bitfield>
  </register>
  
  
  <register acronym="TOPSS_CLKCTL" description="" id="TOPSS_CLKCTL" offset="0x2C" width="32">
    
  <bitfield begin="27" description="Divide value 0x0 : div1 0x1 : div2 0x2 : div3 . . 0xF = div16 Data should be loaded as multibit. For example: if divider value of '0x8' should be selected then '0x888' should be configured to the register." end="16" id="divr" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="15" description="0x0 : OSC_CLK 0x1 : SLOW_CLK 0x2 : MDLL 0x3 : FAST_CLK 0x4 : SLOW_CLK For other values if the lower 3 bits matches with above, corresponding clock is selected. Data should be loaded as multibit. For example: if Clock source 0x5 should be selected then 0x555 should be configured to the register." end="4" id="srcsel" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="3" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="0" id="gate" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="TOPSS_CLKSTAT" description="" id="TOPSS_CLKSTAT" offset="0x30" width="32">
    
  <bitfield begin="11" description="Current Clock selected by GCM Clock Mux 0x1 : XTALCLK 0x2 : XTALCLKX2 0x4 : MDLL 0x8 : APLL/DPLL 0x10 : RCCLK" end="4" id="currclk" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="3" description="Gives the current divr setting used by the clock divider." end="0" id="currdivr" rwaccess="R" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_RTI_CLKCTL" description="" id="APP_RTI_CLKCTL" offset="0x34" width="32">
    
  <bitfield begin="27" description="Divide value 0x0 : div1 0x1 : div2 0x2 : div3 . . 0xF = div16 Data should be loaded as multibit. For example: if divider value of '0x8' should be selected then '0x888' should be configured to the register." end="16" id="divr" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="15" description="0x0 : OSC_CLK 0x1 : XREF_IN 0x2 : OSC_CLK  (Ungated OSC_CLK for RTI in Sleep mode) 0x3 : SLOW_CLK 0x4 : SLOW_CLK 0x5 : SLOW_CLK 0x6 : SLOW_CLK 0x7 : SLOW_CLK For other values if the lower 3 bits matches with above, corresponding clock is selected. Data should be loaded as multibit. For example: if Clock source 0x5 should be selected then 0x555 should be configured to the register." end="4" id="srcsel" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="3" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="0" id="gate" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_RTI_CLKSTAT" description="" id="APP_RTI_CLKSTAT" offset="0x38" width="32">
    
  <bitfield begin="11" description="Current Clock selected by GCM Clock Mux 0x1 : XTALCLK 0x2 : XTALCLKX2 0x4 : MDLL 0x8 : APLL/DPLL 0x10 : RCCLK" end="4" id="currclk" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="3" description="Gives the current divr setting used by the clock divider." end="0" id="currdivr" rwaccess="R" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_WD_CLKCTL" description="" id="APP_WD_CLKCTL" offset="0x3C" width="32">
    
  <bitfield begin="27" description="Divide value 0x0 : div1 0x1 : div2 0x2 : div3 . . 0xF = div16 Data should be loaded as multibit. For example: if divider value of '0x8' should be selected then '0x888' should be configured to the register." end="16" id="divr" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="15" description="0x0 : OSC_CLK 0x1 : XREF_IN 0x2 : OSC_CLK 0x3 : SLOW_CLK 0x4 : SLOW_CLK 0x5 : SLOW_CLK 0x6 : SLOW_CLK 0x7 : SLOW_CLK For other values if the lower 3 bits matches with above, corresponding clock is selected. Data should be loaded as multibit. For example: if Clock source 0x5 should be selected then 0x555 should be configured to the register." end="4" id="srcsel" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="3" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="0" id="gate" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_WD_CLKSTAT" description="" id="APP_WD_CLKSTAT" offset="0x40" width="32">
    
  <bitfield begin="11" description="Current Clock selected by GCM Clock Mux 0x1 : XTALCLK 0x2 : XTALCLKX2 0x4 : MDLL 0x8 : APLL/DPLL 0x10 : RCCLK" end="4" id="currclk" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="3" description="Gives the current divr setting used by the clock divider." end="0" id="currdivr" rwaccess="R" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_UART_0_CLKCTL" description="" id="APP_UART_0_CLKCTL" offset="0x44" width="32">
    
  <bitfield begin="27" description="Divide value 0x0 : div1 0x1 : div2 0x2 : div3 . . 0xF = div16 Data should be loaded as multibit. For example: if divider value of '0x8' should be selected then '0x888' should be configured to the register." end="16" id="divr" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="3" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="0" id="gate" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_UART_0_CLKSTAT" description="" id="APP_UART_0_CLKSTAT" offset="0x48" width="32">
    
  <bitfield begin="3" description="Gives the current divr setting used by the clock divider." end="0" id="currdivr" rwaccess="R" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_UART_1_CLKCTL" description="" id="APP_UART_1_CLKCTL" offset="0x4C" width="32">
    
  <bitfield begin="27" description="Divide value 0x0 : div1 0x1 : div2 0x2 : div3 . . 0xF = div16 Data should be loaded as multibit. For example: if divider value of '0x8' should be selected then '0x888' should be configured to the register." end="16" id="divr" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="3" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="0" id="gate" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_UART_1_CLKSTAT" description="" id="APP_UART_1_CLKSTAT" offset="0x50" width="32">
    
  <bitfield begin="3" description="Gives the current divr setting used by the clock divider." end="0" id="currdivr" rwaccess="R" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_I2C_CLKCTL" description="" id="APP_I2C_CLKCTL" offset="0x54" width="32">
    
  <bitfield begin="27" description="Divide value 0x0 : div1 0x1 : div2 0x2 : div3 . . 0xF = div16 Data should be loaded as multibit. For example: if divider value of '0x8' should be selected then '0x888' should be configured to the register." end="16" id="divr" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="3" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="0" id="gate" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_I2C_CLKSTAT" description="" id="APP_I2C_CLKSTAT" offset="0x58" width="32">
    
  <bitfield begin="3" description="Gives the current divr setting used by the clock divider." end="0" id="currdivr" rwaccess="R" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_LIN_CLKCTL" description="" id="APP_LIN_CLKCTL" offset="0x5C" width="32">
    
  <bitfield begin="27" description="Divide value 0x0 : div1 0x1 : div2 0x2 : div3 . . 0xF = div16 Data should be loaded as multibit. For example: if divider value of '0x8' should be selected then '0x888' should be configured to the register." end="16" id="divr" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="3" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="0" id="gate" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="APP_LIN_CLKSTAT" description="" id="APP_LIN_CLKSTAT" offset="0x60" width="32">
    
  <bitfield begin="3" description="Gives the current divr setting used by the clock divider." end="0" id="currdivr" rwaccess="R" width="4"></bitfield>
  </register>
  
  
  <register acronym="RESERVED0" description="" id="RESERVED0" offset="0x64" width="32">
    
  <bitfield begin="31" description="Reserved" end="24" id="wphres" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="8" id="rores" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="7" description="Bit 2:0 - Software reset for hwass cba3to2 and m64top32 bridge instances in appss. (reset value - 0) Bit 5:3 - Software reset for fecss p2p async bridge instance in appss. (reset value - 0)  0x0 : Release the reset 0x7 : Assert the reset  Bit 31:6 - Reserved" end="0" id="rwres" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="RESERVED1" description="" id="RESERVED1" offset="0x68" width="32">
    
  <bitfield begin="31" description="Reserved" end="24" id="wphres" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="8" id="rores" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="7" description="Reserved" end="0" id="rwres" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="RESERVED2" description="" id="RESERVED2" offset="0x6C" width="32">
    
  <bitfield begin="31" description="Reserved" end="24" id="wphres" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="8" id="rores" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="7" description="Reserved" end="0" id="rwres" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="RESERVED3" description="" id="RESERVED3" offset="0x70" width="32">
    
  <bitfield begin="31" description="Reserved" end="24" id="wphres" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="8" id="rores" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="7" description="Reserved" end="0" id="rwres" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="IPCFGCLKGATE0" description="" id="IPCFGCLKGATE0" offset="0x74" width="32">
    
  <bitfield begin="29" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="27" id="app_i2c" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="26" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="24" id="app_dcc" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="23" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="21" id="app_wd" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="20" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="18" id="app_rti" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="17" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="15" id="app_esm" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="14" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="12" id="tpcc_a" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="11" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="9" id="tptc_a1" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="8" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="6" id="tptc_a0" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="5" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="3" id="app_qspi" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="2" description="Reserved Setting this bit does not cause any affect to any logic" end="0" id="xbara" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="IPCFGCLKGATE1" description="" id="IPCFGCLKGATE1" offset="0x78" width="32">
    
  <bitfield begin="29" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="27" id="res" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="26" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="24" id="app_ctrl" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="23" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="21" id="app_crc" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="20" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="18" id="app_pwm" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="17" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="15" id="app_lin" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="14" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="12" id="app_can" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="11" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="9" id="app_spi_1" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="8" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="6" id="app_spi_0" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="5" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="3" id="app_uart_1" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="2" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="0" id="app_uart_0" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="IPCFGCLKGATE2" description="" id="IPCFGCLKGATE2" offset="0x7C" width="32">
    
  <bitfield begin="14" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="12" id="pcr6" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="11" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="9" id="pcr5" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="8" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="6" id="hwass" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="5" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="3" id="rs232" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="2" description="0x0 : Enable the Clock 0x7 : Gate the clock" end="0" id="gio" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="BLOCKRESET0" description="" id="BLOCKRESET0" offset="0x80" width="32">
    
  <bitfield begin="29" description="0x0 : Release the reset 0x7 : Assert the reset" end="27" id="app_i2c" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="26" description="0x0 : Release the reset 0x7 : Assert the reset" end="24" id="app_dcc" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="23" description="0x0 : Release the reset 0x7 : Assert the reset" end="21" id="app_wd" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="20" description="0x0 : Release the reset 0x7 : Assert the reset" end="18" id="app_rti" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="17" description="0x0 : Release the reset 0x7 : Assert the reset" end="15" id="app_esm" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="14" description="0x0 : Release the reset 0x7 : Assert the reset" end="12" id="tpcc_a" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="11" description="0x0 : Release the reset 0x7 : Assert the reset" end="9" id="tptc_a1" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="8" description="0x0 : Release the reset 0x7 : Assert the reset" end="6" id="tptc_a0" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="5" description="0x0 : Release the reset 0x7 : Assert the reset" end="3" id="app_qspi" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="2" description="0x0 : Release the reset 0x7 : Assert the reset" end="0" id="hwass" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="BLOCKRESET1" description="" id="BLOCKRESET1" offset="0x84" width="32">
    
  <bitfield begin="29" description="0x0 : Release the reset 0x7 : Assert the reset" end="27" id="topss" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="26" description="0x0 : Release the reset 0x7 : Assert the reset" end="24" id="app_ctrl" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="23" description="0x0 : Release the reset 0x7 : Assert the reset" end="21" id="app_crc" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="20" description="0x0 : Release the reset 0x7 : Assert the reset" end="18" id="app_pwm" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="17" description="0x0 : Release the reset 0x7 : Assert the reset" end="15" id="app_lin" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="14" description="0x0 : Release the reset 0x7 : Assert the reset" end="12" id="app_can" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="11" description="0x0 : Release the reset 0x7 : Assert the reset" end="9" id="app_spi_1" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="8" description="0x0 : Release the reset 0x7 : Assert the reset" end="6" id="app_spi_0" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="5" description="0x0 : Release the reset 0x7 : Assert the reset" end="3" id="app_uart_1" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="2" description="0x0 : Release the reset 0x7 : Assert the reset" end="0" id="app_uart_0" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="BLOCKRESET2" description="" id="BLOCKRESET2" offset="0x88" width="32">
    
  <bitfield begin="8" description="0x0 : Release the reset 0x7 : Assert the reset" end="6" id="frc" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="5" description="0x0 : Release the reset 0x7 : Assert the reset" end="3" id="rs232" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="2" description="Reserved" end="0" id="reserved" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="PLATFORM_SIGNATURE" description="" id="PLATFORM_SIGNATURE" offset="0x8C" width="32">
    
  <bitfield begin="31" description="Platform signature to identify the platform" end="0" id="signature" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="POWERMODE" description="" id="POWERMODE" offset="0x90" width="32">
    
  <bitfield begin="3" description="CM3 Core Deep Sleep Status" end="3" id="CM3_DEEPSLEEP_STATUS" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="CM3 Core Sleep Status" end="2" id="CM3_SLEEP_STATUS" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="1" description="0x0 : CM4 CORE DEEP SLEEP 0x1 : DEVICE DEEP SLEEP" end="1" id="DEEPSLEEP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="0x0 : CM4 CORE SLEEP 0x1 : DEVICE SLEEP" end="0" id="SLEEP" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="RST_WFICHECK" description="" id="RST_WFICHECK" offset="0x94" width="32">
    
  <bitfield begin="2" description="Writing '000' will disable check for WFI before local reset assertion of app cpu" end="0" id="cpu" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="RST_ASSERTDLY" description="" id="RST_ASSERTDLY" offset="0x98" width="32">
    
  <bitfield begin="7" description="Value decides number of cycles reset should be asserted for cpu" end="0" id="common" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="RST2ASSERTDLY" description="" id="RST2ASSERTDLY" offset="0x9C" width="32">
    
  <bitfield begin="15" description="Value decides number of cycles to be held before asserting reset for app cpu" end="8" id="cpu" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="RST_FSM_TRIG" description="" id="RST_FSM_TRIG" offset="0xA0" width="32">
    
  <bitfield begin="2" description="FSM Reset Trigger" end="0" id="cpu" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="RST_CAUSE" description="" id="RST_CAUSE" offset="0xA4" width="32">
    
  <bitfield begin="7" description="Reset cause register for APP CPU 0x00 - All cleared 0x01 - Power On Reset (PoR) 0x02 - Subsystem Reset (Combination of Warm Reset initiated from PRCM using LPRADAR:TOP_PRCM:RST_APP_PD_SOFT_RESET and PoR reset) 0x04 - STC RESET 0x08 - Reserved 0x10 - CPU Only Reset triggered by writing to LPRADAR:APP_RCM:RST_FSM_TRIG&lt;RST_FSM_TRIG_CPU> (self triggered CPU reset during MEMSWAP/ECLIPSE mode to wait for WFI to assert the reset to CPU) 0x20 - Core Reset initiated from PRCM using LPRADAR:TOP_PRCM:RST_SOFT_APP_CORE_SYSRESET_REQ (reset CPU unconditionally - by debugger) or LPRADAR:TOP_PRCM:APP_CORE_SYSRESET_PARAM_WAKEUP_OUT_STATE 0x40 - Reserved" end="0" id="common" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="RST_CAUSE_CLR" description="" id="RST_CAUSE_CLR" offset="0xA8" width="32">
    
  <bitfield begin="2" description="Writing '111' will clear the RST_CAUSE register" end="0" id="cpu" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="XTALCLK_CLK_GATE" description="" id="XTALCLK_CLK_GATE" offset="0xAC" width="32">
    
  <bitfield begin="2" description="RESERVED" end="0" id="XTALCLK_CLK_GATE" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="XTALCLKX2_CLK_GATE" description="" id="XTALCLKX2_CLK_GATE" offset="0xB0" width="32">
    
  <bitfield begin="2" description="Writing 3'b111 will gate the XTALX2 clock.Writing 3'b000 will ungate the clock." end="0" id="XTALCLKX2_CLK_GATE" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="APLLDIV2_CLK_GATE" description="" id="APLLDIV2_CLK_GATE" offset="0xB4" width="32">
    
  <bitfield begin="2" description="Writing 3'b111 will gate the APLL/2clock to EDCC.Writing 3'b000 will ungate the clock." end="0" id="APLLDIV2_CLK_GATE" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="DFT_APPSS_LSTC_CLK_GATE" description="" id="DFT_APPSS_LSTC_CLK_GATE" offset="0xB8" width="32">
    
  <bitfield begin="2" description="Writing 3'b111 will gate the clock to LSTC.Writing 3'b000 will ungate the clock." end="0" id="DFT_APPSS_LSTC_CLK_GATE" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="DFT_APPSS_LSTC_VBUSP_CLK_GATE" description="" id="DFT_APPSS_LSTC_VBUSP_CLK_GATE" offset="0xBC" width="32">
    
  <bitfield begin="2" description="3'b000 : Gate clock to LSTC VBUSP 3'b111 : Ungate Clock to LSTC VBUSP" end="0" id="enable" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="APP_ROM_CLOCK_GATE" description="" id="APP_ROM_CLOCK_GATE" offset="0xC0" width="32">
    
  <bitfield begin="2" description="3'b000 : Ungate clock to APP ROM 3'b111 : Gate Clock to APP ROM" end="0" id="enable" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="APP_RAM1_CLOCK_GATE" description="" id="APP_RAM1_CLOCK_GATE" offset="0xC4" width="32">
    
  <bitfield begin="2" description="3'b000 : Ungate clock to APP RAM1 3'b111 : Gate Clock to APP_RAM1" end="0" id="enable" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="APP_RAM2_CLOCK_GATE" description="" id="APP_RAM2_CLOCK_GATE" offset="0xC8" width="32">
    
  <bitfield begin="2" description="3'b000 : Ungate clock to APP RAM2 3'b111 : Gate Clock to APP RAM2" end="0" id="enable" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="APP_RAM3_CLOCK_GATE" description="" id="APP_RAM3_CLOCK_GATE" offset="0xCC" width="32">
    
  <bitfield begin="2" description="3'b000 : Ungate clock to APP RAM3 3'b111 : Gate Clock to APP RAM3" end="0" id="enable" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="CFG_XBARA_DYNAMIC_CG" description="" id="CFG_XBARA_DYNAMIC_CG" offset="0xD0" width="32">
    
  <bitfield begin="2" description="Enable APPSS crossbar dynamic clock gating. 1 - Dynamic clock gating feature is enabled. When the feature is enabed, the CM4 should monitor for any possible pending transactions from various masters like DMA/NWA and if no transaction is expected to be iniated by the masters, the CM4 executes WFI. On ssertion of WFI signal, the clock to crossbar is gated. The clock is automatically ungated under two conditions (i) when the WFI signal is deasserted by any interrupted (ii) when any of the APPSS TPCC triggers are asserted. Instead of WFI, cfg_xbara_set_dynamic_cg also can be used to start the clock gating. 0 - Dynamic clock gating feature is disabled. The clock to APPSS crossbar is not gated dynamically. The clock to APPSS crossbar is gated/ungated as per device ice level power states." end="0" id="enable" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="CFG_TPTC1_DYNAMIC_CG" description="" id="CFG_TPTC1_DYNAMIC_CG" offset="0xD4" width="32">
    
  <bitfield begin="2" description="Enable APPSS TPTC1 crossbar dynamic clock gating. 1 - Dynamic clock gating feature is enabled. Same behaviour as cfg_xbara_dynamic_cg_en - for both entry to clock gating and exit from clock gating. WFI or cfg_tptc1_set_dynamic_cg 0 - Dynamic clock gating feature is disabled. The clock to APPSS TPTC1 crossbar is not gated dynamically. The clock to APPSS TPTC1 crossbar is gated/ungated as per device ice level power states." end="0" id="enable" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="CFG_TPTC2_DYNAMIC_CG" description="" id="CFG_TPTC2_DYNAMIC_CG" offset="0xD8" width="32">
    
  <bitfield begin="2" description="Enable APPSS TPTC2 crossbar dynamic clock gating. 1 - Dynamic clock gating feature is enabled. Same behaviour as cfg_xbara_dynamic_cg_en - for both entry to clock gating and exit from clock gating. WFI or cfg_tptc2_set_dynamic_cg 0 - Dynamic clock gating feature is disabled. The clock to APPSS TPTC2 crossbar is not gated dynamically. The clock to APPSS TPTC2 crossbar is gated/ungated as per device ice level power states" end="0" id="enable" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="CFG_XBARA_SET_DYNAMIC_CG" description="" id="CFG_XBARA_SET_DYNAMIC_CG" offset="0xDC" width="32">
    
  <bitfield begin="0" description="Start APPSS crossbar dynamic clock gating. This is used instead of WFI. 1 - Start the clock gating. In order to start again, write 0 followed by 1. Rise edge is detected internally, to start the clock gating. 0 - Clock is ungated. Fall edge is detected internally to ungate the clock." end="0" id="set" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CFG_TPTC1_SET_DYNAMIC_CG" description="" id="CFG_TPTC1_SET_DYNAMIC_CG" offset="0xE0" width="32">
    
  <bitfield begin="0" description="Start APPSS tptc1 dynamic clock gating. This is used instead of WFI. 1 - Start the clock gating. In order to start again, write 0 followed by 1. Rise edge is detected internally, to start the clock gating. 0 - Clock is ungated. Fall edge is detected internally to ungate the clock." end="0" id="set" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CFG_TPTC2_SET_DYNAMIC_CG" description="" id="CFG_TPTC2_SET_DYNAMIC_CG" offset="0xE4" width="32">
    
  <bitfield begin="0" description="Start APPSS tptc2 dynamic clock gating. This is used instead of WFI. 1 - Start the clock gating. In order to start again, write 0 followed by 1. Rise edge is detected internally, to start the clock gating. 0 - Clock is ungated. Fall edge is detected internally to ungate the clock." end="0" id="set" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CM4_FORCE_HCLK_GATE" description="" id="CM4_FORCE_HCLK_GATE" offset="0xE8" width="32">
    
  <bitfield begin="2" description="3'b000 - CM4 HCLK is ungated 3'b111 - CM4 HCLK is gated" end="0" id="enable" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="LIN_SCI_DIV" description="" id="LIN_SCI_DIV" offset="0xEC" width="32">
    
  <bitfield begin="7" description="ICG Based Divider for LIN" end="0" id="val" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="APP_LSTC_EN" description="" id="APP_LSTC_EN" offset="0xF0" width="32">
    
  <bitfield begin="0" description="Enable vbusp_req and clk_en for app lstc" end="0" id="enable" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="LOCK0_KICK0" description="  - KICK0 component " id="LOCK0_KICK0" offset="0x1008" width="32">
    
  <bitfield begin="31" description=" - KICK0 component" end="0" id="" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="LOCK0_KICK1" description="  - KICK1 component " id="LOCK0_KICK1" offset="0x100C" width="32">
    
  <bitfield begin="31" description=" - KICK1 component" end="0" id="" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="intr_raw_status" description=" Interrupt Raw Status/Set Register " id="intr_raw_status" offset="0x1010" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="intr_enabled_status_clear" description=" Interrupt Enabled Status/Clear register " id="intr_enabled_status_clear" offset="0x1014" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="intr_enable" description=" Interrupt Enable register " id="intr_enable" offset="0x1018" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="intr_enable_clear" description=" Interrupt Enable Clear register " id="intr_enable_clear" offset="0x101C" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="eoi" description=" EOI register " id="eoi" offset="0x1020" width="32">
    
  <bitfield begin="7" description="EOI vector value. Write this with interrupt distribution value in the chip." end="0" id="" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="fault_address" description=" Fault Address register " id="fault_address" offset="0x1024" width="32">
    
  <bitfield begin="31" description="Fault Address." end="0" id="" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="fault_type_status" description=" Fault Type Status register " id="fault_type_status" offset="0x1028" width="32">
    
  <bitfield begin="6" description="Non-secure access." end="6" id="" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="5" description="Fault Type   10_0000 = Supervisor read  fault  - priv = 1 dir = 1 dtype != 1    01_0000 = Supervisor write fault  - priv = 1 dir = 0   00_1000 = Supervisor execute fault - priv = 1 dir = 1 dtype = 1   00_0100 = User read  fault - priv = 0 dir = 1 dtype = 1   00_0010 = User write fault - priv = 0 dir = 0   00_0001 = User execute fault - priv = 0 dir = 1 dtype = 1   00_0000 = No fault" end="0" id="" rwaccess="R" width="6"></bitfield>
  </register>
  
  
  <register acronym="fault_attr_status" description=" Fault Attribute Status register " id="fault_attr_status" offset="0x102C" width="32">
    
  <bitfield begin="31" description="XID." end="20" id="" rwaccess="R" width="12"></bitfield>
    
  <bitfield begin="19" description="Route ID." end="8" id="" rwaccess="R" width="12"></bitfield>
    
  <bitfield begin="7" description="Privilege ID." end="0" id="" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="fault_clear" description=" Fault Clear register " id="fault_clear" offset="0x1030" width="32">
    
  <bitfield begin="0" description="Fault clear. Writing a 1 clears the current fault. Writing a 0 has no effect." end="0" id="" rwaccess="W" width="1"></bitfield>
  </register>
</module>
