/* File:            tms570xc_rm57x_cross_trigger.gel                          */
/* Versions:        1.0                                                       */
/*                                                                            */
/* Note: This GEL configure the on-chip CoreSight Cross Triggering Modules    */
/* (CTI)                                                                      */
/*                                                                            */


/*----------------------------------------------------------------------------*/
/* Function - Enable_CTI1                                                     */
/*                                                                            */
Enable_CTI1() {
    
    GEL_TextOut("NOTES:\n\tEnable CTI1\n");

/* Unlock writes to CTI */
        *(int *) 0xffa07fb0 = 0xc5acce55; 

/* enable ECT in CTICONTROL */
        *(int *) 0xffa07000 = 0x00000001; 

/* Map CTITRIGIN0=CortexR5-0 DBGTRIGGER to Channel 0*/
        *(int *) 0xffa07020 = 0x00000001; 

/* Map CTITRIGIN7=CortexR5-0 DBGTRIGGER to Channel 0-3 */
/* DBGTRIGGER from Cortex-R5-0 is mapped to both CTITRIIN0 and CTITRIIN7 */
        *(int *) 0xffa0703c = 0x00000001; 

/* Map CTITRIGOUT0=CortexR5-0 EDBGRQ to Channel 3*/
        *(int *) 0xffa070a0 = 0x00000000; 

/* Map CTITRIGOUT7=CortexR5-0 DBRESTARTED to Channel 1*/
        *(int *) 0xffa070bc = 0x00000000; 


/* Enable all 4 channel interfaces */

        *(int *) 0xffa07140 = 0x00000003; 

} /* Enable_CTI1 */

/*----------------------------------------------------------------------------*/
/* Function - Enable_CTI2                                                     */
/*                                                                            */
Enable_CTI2() {
    
    GEL_TextOut("NOTES:\n\tEnable CTI2\n");

/* Unlock writes to CTI */
        *(int *) 0xffa08fb0 = 0xc5acce55; 

/* enable ECT in CTICONTROL */
        *(int *) 0xffa08000 = 0x00000001; 

/* Map CTITRIGIN0=CortexR5-1 DBGTRIGGER to Channel 0*/
        *(int *) 0xffa08020 = 0x00000000; 

/* Map CTITRIGIN7=CortexR5-1 DBGTRIGGER to Channel 7*/
/* DBGTRIGGER from Cortex-R5-1 is mapped to both CTITRIIN0 and CTITRIIN7 */
        *(int *) 0xffa0803c = 0x00000000; 

/* Map CTITRIGOUT0=CortexR5-1 EDBGRQ to Channel 3*/
        *(int *) 0xffa080a0 = 0x00000001; 

/* Map CTITRIGOUT7=CortexR5-1 DBRESTARTED to Channel 1*/
        *(int *) 0xffa080bc = 0x00000001; 


/* Enable all 4 channel interfaces */

        *(int *) 0xffa08140 = 0x00000003; 

} /* Enable_CTI2 */

/*----------------------------------------------------------------------------*/
/* Function - Enable_CTI3                                                     */
/*                                                                            */
Enable_CTI3() {
    
    GEL_TextOut("NOTES:\n\tEnable CTI3\n");

/* Unlock writes to CTI */
        *(int *) 0xffa09fb0 = 0xc5acce55; 

/* enable ECT in CTICONTROL */
        *(int *) 0xffa09000 = 0x00000001; 

/* Note: there are no CTITRIGIN[7:0] mapped to CTI3 */

/* Map CTITRIGOUT0=TPIU TRIGIN to Channel 2 */
/* Possible triggers from Channel 2 could be the ETMR5-0/1 EXTOUT[1:0] */
/* The ETMR5_0 EXTOUT[1:0] are mapped to the CTITRIIN[3:2] of the CTI1 */
/* The ETMR5_1 EXTOUT[1:0] are mapped to the CTITRIIN[3:2] of the CTI2 */

        *(int *) 0xffa090a0 = 0x00000004; 

/* Map CTITRIGOUT1=TPIU FLUSHIN to Channel 2 */
/* Possible triggers from Channel 3 could be the ETMR5-0/1 EXTOUT[1:0] */
/* The ETMR5_0 EXTOUT[1:0] are mapped to the CTITRIIN[3:2] of the CTI1 */
/* The ETMR5_1 EXTOUT[1:0] are mapped to the CTITRIIN[3:2] of the CTI2 */

        *(int *) 0xffa090a4 = 0x00000004;

/* Since there are no implemented CTITRIGIN there is no need to enable channel interfaces  */
/* for CTICHOUT gating */

        *(int *) 0xffa09140 = 0x0000000F; 

} /* Enable_CTI3 */

/*----------------------------------------------------------------------------*/
/* Function - Enable_CTI4                                                     */
/*                                                                            */
Enable_CTI4() {
    
    GEL_TextOut("NOTES:\n\tEnable CTI4\n");

/* Unlock writes to CTI */
        *(int *) 0xffa0afb0 = 0xc5acce55; 

/* enable ECT in CTICONTROL */
        *(int *) 0xffa0a000 = 0x00000001; 

/* Map CTITRIGIN0=DMA_DBGREQ to Channel 3 */

        *(int *) 0xffa0a020 = 0x00000008; 

/* Map CTITRIGIN1=N2HET1_DBGREQ to Channel 3 */
        *(int *) 0xffa0a024 = 0x00000008; 

/* Map CTITRIGIN2=N2HET2_DBGREQ to Channel 3 */
        *(int *) 0xffa0a028 = 0x00000008; 

/* Map CTITRIGIN3=HTU1_DBGREQ to Channel 3 */
        *(int *) 0xffa0a02c = 0x00000008; 

/* Map CTITRIGIN4=HTU2_DBGREQ to Channel 3 */
        *(int *) 0xffa0a030 = 0x00000008; 

/* Map CTITRIGIN5=DMA_DBGREQ to Channel 3 */
/* DMA_DBGREQ is mapped to both CTITRIGIN0 and CTITRIGIN5. One is pulse and another is level */
        *(int *) 0xffa0a034 = 0x00000008;

/* Map CTITRIGIN6=N2HET1_DBGREQ or HTU1_DBGREQ to Channel 3 */
        *(int *) 0xffa0a038 = 0x00000008; 

/* Map CTITRIGIN7=N2HET2_DBGREQ or HTU2_DBGREQ to Channel 3 */
        *(int *) 0xffa0a03c = 0x00000008; 
 
/* Map CTITRIGOUT0=SYS_MODULE_TRIGGER to Channel 0*/
/* When the CPU is halted, the SUSPEND will come from Channel 0 * /
/* The SUSPEND is the result of the assertion on the DBGTRIGGER from the CPU */
/* SYS_MODULE_TRIGGER is broadcasted to L2FMC, CCMR5, CRCx, and SYS modules */
        *(int *) 0xffa0a0a0 = 0x00000001; 

/* Map CTITRIGOUT0=USER_PERIPHERAL_TRIGGER1 to Channel 0*/
/* USER_PERIPHERAL_TRIGGER1 is broadcasted to: */
/* DMA, RTIx, AWMx, HTUx, SCIx, LINx, I2Cx, EMAC, EQEP, ECAP, DMM and DCCx modules */
        *(int *) 0xffa0a0a4 = 0x00000001; 

/* Map CTITRIGOUT0=USER_PERIPHERAL_TRIGGER2 to Channel 0*/
/* USER_PERIPHERAL_TRIGGER2 is broadcasted to DCANx modules */

        *(int *) 0xffa0a0a8 = 0x00000001;

/* Map CTITRIGOUT0=USER_PERIPHERAL_TRIGGER3 to Channel 0*/
/* USER_PERIPHERAL_TRIGGER3 is broadcasted to ETPWMx modules */
        *(int *) 0xffa0a0ac = 0x00000001;


/* Enable channel interfaces  */

        *(int *) 0xffa0a140 = 0x0000000F; 

} /* Enable_CTI4 */

Disable__CTI1() {
    
    GEL_TextOut("NOTES:\n\tDisable CTI1\n");

/* Unlock writes to CTI */
        *(int *) 0xffa07fb0 = 0xc5acce55; 

/* enable ECT in CTICONTROL */
        *(int *) 0xffa07000 = 0x0000000; 



} /* Disable_CTI1 */
Disable__CTI2() {
    
    GEL_TextOut("NOTES:\n\tDisable CTI2\n");

/* Unlock writes to CTI */
        *(int *) 0xffa08fb0 = 0xc5acce55; 

/* enable ECT in CTICONTROL */
        *(int *) 0xffa08000 = 0x0000000; 



} /* Disable_CTI2 */

Disable__CTI3() {
    
    GEL_TextOut("NOTES:\n\tDisable CTI3\n");

/* Unlock writes to CTI */
        *(int *) 0xffa09fb0 = 0xc5acce55; 

/* enable ECT in CTICONTROL */
        *(int *) 0xffa09000 = 0x0000000; 



} /* Disable_CTI3 */

Disable__CTI4() {
    
    GEL_TextOut("NOTES:\n\tDisable CTI4\n");

/* Unlock writes to CTI */
        *(int *) 0xffa0afb0 = 0xc5acce55; 

/* enable ECT in CTICONTROL */
        *(int *) 0xffa0a000 = 0x0000000; 



} /* Disable_CTI4 */


/*----------------------------------------------------------------------------*/
/* MenuItem - "Configure Embedded Cross Triggering"                           */
/*                                                                            */
menuitem "Configure Cross Triggering";

    hotmenu Setup_All_CTI(){

        Enable_CTI1();
        Enable_CTI2();
        Enable_CTI3();
        Enable_CTI4();
    }

    hotmenu Disable_All_CTI(){

        Disable__CTI1();
        Disable__CTI2();
        Disable__CTI3();
        Disable__CTI4();
    }


    hotmenu Setup_CTI1(){
    
        Enable_CTI1();
    }
    hotmenu Setup_CTI2(){
    
        Enable_CTI2();
    }
    hotmenu Setup_CTI3(){
    
        Enable_CTI3();
    }
    hotmenu Setup_CTI4(){
    
        Enable_CTI4();
    }

    hotmenu Disable_CTI1(){
    
        Disable__CTI1();
    }
    hotmenu Disable_CTI2(){
    
        Disable__CTI2();
    }
    hotmenu Disable_CTI3(){
    
        Disable__CTI3();
    }
    hotmenu Disable_CTI4(){
    
        Disable__CTI4();
    }

