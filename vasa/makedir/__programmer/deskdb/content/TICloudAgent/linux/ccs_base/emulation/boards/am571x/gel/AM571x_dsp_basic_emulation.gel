/*******************************************************************/ 
/* This GEL file is loaded on the command line of Code Composer    */
/* The StartUp() function is called every time you start           */
/* Code Composer.  You can customize this function to              */
/* initialize wait states or to perform other initialization.      */
/*                                                                 */
/* AM571x C66 basic emulation          config                      */
/*                                                                 */
/*                                                                 */
/*******************************************************************/


menuitem "Basic Emulation"
/**********************************************************************
 *
 *  FUNCTIONS
 *
 **********************************************************************/
 
int G_Control = 0 ;
int address1 = 0;
int address2 = 0;

//hotmenu load_asm_program_ddr1()
load_asm_program_ddr1()
{
    GEL_TextOut("Load asm program in ddr1 \n");
    *(int *)0x88000800 = 0x0;
    *(int *)0x88000804 = 0x0;
    *(int *)0x88000808 = 0x0;
    *(int *)0x8800080C = 0x0;
    *(int *)0x88000810 = 0x0;
    *(int *)0x88000814 = 0x0;
    *(int *)0x88000818 = 0x0;
    *(int *)0x8800081C = 0x0;
    *(int *)0x88000820 = 0x0;
    *(int *)0x88000824 = 0x0;
    *(int *)0x88000828 = 0x0FFFFE12;
    *(int *)0x8800082C = 0x0;
    *(int *)0x88000830 = 0x0;
    *(int *)0x88000834 = 0x0;
    *(int *)0x88000838 = 0x0;
    *(int *)0x8800083C = 0x0;
    *(int *)0x88000840 = 0x0;
    *(int *)0x88000844 = 0x0;
    *(int *)0x88000848 = 0x0;
    *(int *)0x8800084C = 0x0;
    *(int *)0x88000850 = 0x0;

    PC = 0x88000800;
    
    GEL_TextOut("Load asm program in ddr1 done \n");
}

//hotmenu load_asm_program_ddr2()
load_asm_program_ddr2()
{
    GEL_TextOut("Load asm program in ddr2 \n");
    *(int *)0x88000A00 = 0x0;
    *(int *)0x88000A04 = 0x0;
    *(int *)0x88000A08 = 0x0;
    *(int *)0x88000A0C = 0x0;
    *(int *)0x88000A10 = 0x0;
    *(int *)0x88000A14 = 0x0;
    *(int *)0x88000A18 = 0x0;
    *(int *)0x88000A1C = 0x0;
    *(int *)0x88000A20 = 0x0;
    *(int *)0x88000A24 = 0x0;
    *(int *)0x88000A28 = 0x0FFFFE12;
    *(int *)0x88000A2C = 0x0;
    *(int *)0x88000A30 = 0x0;
    *(int *)0x88000A34 = 0x0;
    *(int *)0x88000A38 = 0x0;
    *(int *)0x88000A3C = 0x0;
    *(int *)0x88000A40 = 0x0;
    *(int *)0x88000A44 = 0x0;
    *(int *)0x88000A48 = 0x0;
    *(int *)0x88000A4C = 0x0;
    *(int *)0x88000A50 = 0x0;

    PC = 0x88000A00;
    
    GEL_TextOut("Load asm program in ddr2 done\n");
}

hotmenu load_asm_program_SL2_L1()
{
    GEL_TextOut("Load asm program in SL2_L1 \n");
    *(int *)0x10800A00 = 0x0;
    *(int *)0x10800A04 = 0x0;
    *(int *)0x10800A08 = 0x0;
    *(int *)0x10800A0C = 0x0;
    *(int *)0x10800A10 = 0x0;
    *(int *)0x10800A14 = 0x0;
    *(int *)0x10800A18 = 0x0;
    *(int *)0x10800A1C = 0x0;
    *(int *)0x10800A20 = 0x0;
    *(int *)0x10800A24 = 0x0;
    *(int *)0x10800A28 = 0x0FFFFE12;
    *(int *)0x10800A2C = 0x0;
    *(int *)0x10800A30 = 0x0;
    *(int *)0x10800A34 = 0x0;
    *(int *)0x10800A38 = 0x0;
    *(int *)0x10800A3C = 0x0;
    *(int *)0x10800A40 = 0x0;
    *(int *)0x10800A44 = 0x0;
    *(int *)0x10800A48 = 0x0;
    *(int *)0x10800A4C = 0x0;
    *(int *)0x10800A50 = 0x0;

    PC = 0x10800A00;
    
    GEL_TextOut("Load asm program in SL2_L1 done\n");
}


hotmenu load_asm_program_SL2_L2()
{
    GEL_TextOut("Load asm program in SL2_L2 \n");
    *(int *)0x10820A00 = 0x0;
    *(int *)0x10820A04 = 0x0;
    *(int *)0x10820A08 = 0x0;
    *(int *)0x10820A0C = 0x0;
    *(int *)0x10820A10 = 0x0;
    *(int *)0x10820A14 = 0x0;
    *(int *)0x10820A18 = 0x0;
    *(int *)0x10820A1C = 0x0;
    *(int *)0x10820A20 = 0x0;
    *(int *)0x10820A24 = 0x0;
    *(int *)0x10820A28 = 0x0FFFFE12;
    *(int *)0x10820A2C = 0x0;
    *(int *)0x10820A30 = 0x0;
    *(int *)0x10820A34 = 0x0;
    *(int *)0x10820A38 = 0x0;
    *(int *)0x10820A3C = 0x0;
    *(int *)0x10820A40 = 0x0;
    *(int *)0x10820A44 = 0x0;
    *(int *)0x10820A48 = 0x0;
    *(int *)0x10820A4C = 0x0;
    *(int *)0x10820A50 = 0x0;

    PC = 0x10820A00;
    
    GEL_TextOut("Load asm program in SL2_L2 done\n");
}
OnHalt() 
{   
    if (G_Control==1000)
    {
        GEL_TextOut("basic_asm_execution_control_SWbkpt %x %x\n ",,,,, address1, PC);      
        GEL_Run();
    }
    if (G_Control==1001)
    {
        GEL_TextOut("basic_asm_execution_control_HWbkpt %x %x\n",,,,, address2, PC);        
        GEL_TextOut("basic_asm_execution_control DONE !!!! \n");
        GEL_Run();
    }
    
    if (G_Control==1002)
    { 
        GEL_BreakPtReset(); // clears all SW bkpt.
        GEL_HWBreakPtReset(); // clears all HW bkpt.
    }    
    G_Control++;  
}

//hotmenu basic_asm_execution_control_ddr1()
basic_asm_execution_control_ddr1()
{
    PC = 0x88000800;
    G_Control=1000;
    address1=0x88000818;
    address2=0x88000820;
    GEL_TextOut("basic_asm_execution_control \n");
    GEL_TextOut("TEST PERFORM ON DDR1 \n");
    
    GEL_BreakPtReset(); // clears all SW bkpt.
    GEL_HWBreakPtReset(); // clears all HW bkpt.
    GEL_BreakPtAdd(0x88000818);    
    GEL_HWBreakPtAdd(0x88000820);
    GEL_Run();
    
}


hotmenu basic_asm_execution_control_sl2_l1()
{
    PC = 0x10800A00;
    G_Control=1000;
    address1=0x10800A18;
    address2=0x10800A20;
    GEL_TextOut("basic_asm_execution_control \n");
    GEL_TextOut("TEST PERFORM ON SL2_L1 \n");
    
    GEL_BreakPtReset(); // clears all SW bkpt.
    GEL_HWBreakPtReset(); // clears all HW bkpt.
    GEL_BreakPtAdd(0x10800A18);    
    GEL_HWBreakPtAdd(0x10800A20);
    GEL_Run();
    
}
//hotmenu basic_asm_execution_control_ddr2()
basic_asm_execution_control_ddr2()
{
    PC = 0x88000A00;
    G_Control=1000;
    address1=0x88000A18;
    address2=0x88000A20;
    GEL_TextOut("basic_asm_execution_control \n");
    GEL_TextOut("TEST PERFORM ON DDR2 \n");
    
    GEL_BreakPtReset(); // clears all SW bkpt.
    GEL_HWBreakPtReset(); // clears all HW bkpt.
    GEL_BreakPtAdd(0x88000A18);
    GEL_HWBreakPtAdd(0x88000A20);
    GEL_Run();
}

hotmenu basic_asm_execution_control_sl2_l2()
{
    PC = 0x10820A00;
    G_Control=1000;
    address1=0x10820A18;
    address2=0x10820A20;
    GEL_TextOut("basic_asm_execution_control \n");
    GEL_TextOut("TEST PERFORM ON SL2_L2 \n");
    
    GEL_BreakPtReset(); // clears all SW bkpt.
    GEL_HWBreakPtReset(); // clears all HW bkpt.
    GEL_BreakPtAdd(0x10820A18);    
    GEL_HWBreakPtAdd(0x10820A20);
    GEL_Run();
    
}
