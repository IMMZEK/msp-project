<module name="UART5" acronym="" XML_version="1.0" HW_revision="n/a" description="">
	<register id="MEM_DLL" acronym="MEM_DLL" offset="0x0" width="32" description="Divisor Latches Low Register">
		<bitfield id="CLOCK_LSB" width="8" begin="7" end="0" resetval="0x0" description="Used to store the 8-bit LSB divisor value" range="7 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_RHR" acronym="MEM_RHR" offset="0x0" width="32" description="The receiver section consists of the receiver holding register (RHR) and the receiver shift register. The RHR is actually a 64-byte FIFO. The receiver shift register receives serial data from RX input. The data is converted to parallel data and moved to the RHR. If the FIFO is disabled location zero of the FIFO is used to store the single data character. 
Note: If an overflow occurs the data in the RHR is not overwritten.">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RHR" width="8" begin="7" end="0" resetval="0x0" description="Receive holding register" range="7 - 0" rwaccess="R"/>
	</register>
	<register id="MEM_THR" acronym="MEM_THR" offset="0x0" width="32" description="The transmitter section consists of the transmit holding register (THR) and the transmit shift register. The transmit holding register is actually a 64-byte FIFO. The LH writes data to the THR. The data is placed into the transmit shift register where it is shifted out serially on the TX output. If the FIFO is disabled location zero of the FIFO is used to store the data. ">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="THR" width="8" begin="7" end="0" resetval="0x0" description="TRANSMIT HOLDING REGISTER" range="7 - 0" rwaccess="W"/>
	</register>
	<register id="MEM_DLH" acronym="MEM_DLH" offset="0x4" width="32" description="Divisor Latches High Register">
		<bitfield id="CLOCK_MSB" width="8" begin="7" end="0" resetval="0x0" description="Used to store the 8-bit MSB divisor value" range="7 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_IER_CIR" acronym="MEM_IER_CIR" offset="0x4" width="32" description="The interrupt enable register (IER) can be programmed to enable/disable any interrupt. There are 6 types of interrupt in these modes, TX status, status FIFO interrupt, RX overrun, last byte in RX FIFO, THR interrupt and RHR interrupt and they can be enabled/disabled individually.">
		<bitfield id="NOT_USED2" width="2" begin="7" end="6" resetval="0x0" description="" range="7 - 6" rwaccess="R/W"/> 
		<bitfield id="TX_STATUS_IT" width="1" begin="5" end="5" resetval="0x0" description="" range="5" rwaccess="R/W"/> 
		<bitfield id="NOT_USED1" width="1" begin="4" end="4" resetval="0x0" description="" range="4" rwaccess="R/W"/> 
		<bitfield id="RX_OVERRUN_IT" width="1" begin="3" end="3" resetval="0x0" description="" range="3" rwaccess="R/W"/> 
		<bitfield id="RX_STOP_IT" width="1" begin="2" end="2" resetval="0x0" description="" range="2" rwaccess="R/W"/> 
		<bitfield id="THR_IT" width="1" begin="1" end="1" resetval="0x0" description="" range="1" rwaccess="R/W"/> 
		<bitfield id="RHR_IT" width="1" begin="0" end="0" resetval="0x0" description="" range="0" rwaccess="R/W"/>
	</register>
	<register id="MEM_IER_IRDA" acronym="MEM_IER_IRDA" offset="0x4" width="32" description="The interrupt enable register (IER) can be programmed to enable/disable any interrupt. There are 8 types of interrupt in these modes, received EOF, LSR interrupt, TX status, status FIFO interrupt, RX overrun, last byte in RX FIFO, THR interrupt and RHR interrupt and they can be enabled/disabled individually.">
		<bitfield id="EOF_IT" width="1" begin="7" end="7" resetval="0x0" description="" range="7" rwaccess="R/W"/> 
		<bitfield id="LINE_STS_IT" width="1" begin="6" end="6" resetval="0x0" description="" range="6" rwaccess="R/W"/> 
		<bitfield id="TX_STATUS_IT" width="1" begin="5" end="5" resetval="0x0" description="" range="5" rwaccess="R/W"/> 
		<bitfield id="STS_FIFO_TRIG_IT" width="1" begin="4" end="4" resetval="0x0" description="" range="4" rwaccess="R/W"/> 
		<bitfield id="RX_OVERRUN_IT" width="1" begin="3" end="3" resetval="0x0" description="" range="3" rwaccess="R/W"/> 
		<bitfield id="LAST_RX_BYTE_IT" width="1" begin="2" end="2" resetval="0x0" description="" range="2" rwaccess="R/W"/> 
		<bitfield id="THR_IT" width="1" begin="1" end="1" resetval="0x0" description="" range="1" rwaccess="R/W"/> 
		<bitfield id="RHR_IT" width="1" begin="0" end="0" resetval="0x0" description="" range="0" rwaccess="R/W"/>
	</register>
	<register id="MEM_IER_UART" acronym="MEM_IER_UART" offset="0x4" width="32" description="The interrupt enable register (IER) can be programmed to enable/disable any interrupt. There are seven types of interrupt in this mode: receiver error, RHR interrupt, THR interrupt, XOFF received and CTS*/RTS* change of state from low to high. Each interrupt can be enabled/disabled individually. There is also a sleep mode enable bit.">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="CTS_IT" width="1" begin="7" end="7" resetval="0x0" description="" range="7" rwaccess="R/W"/> 
		<bitfield id="RTS_IT" width="1" begin="6" end="6" resetval="0x0" description="" range="6" rwaccess="R/W"/> 
		<bitfield id="XOFF_IT" width="1" begin="5" end="5" resetval="0x0" description="" range="5" rwaccess="R/W"/> 
		<bitfield id="SLEEP_MODE" width="1" begin="4" end="4" resetval="0x0" description="" range="4" rwaccess="R/W"/> 
		<bitfield id="MODEM_STS_IT" width="1" begin="3" end="3" resetval="0x0" description="" range="3" rwaccess="R/W"/> 
		<bitfield id="LINE_STS_IT" width="1" begin="2" end="2" resetval="0x0" description="" range="2" rwaccess="R/W"/> 
		<bitfield id="THR_IT" width="1" begin="1" end="1" resetval="0x0" description="" range="1" rwaccess="R/W"/> 
		<bitfield id="RHR_IT" width="1" begin="0" end="0" resetval="0x0" description="" range="0" rwaccess="R/W"/>
	</register>
	<register id="MEM_EFR" acronym="MEM_EFR" offset="0x8" width="32" description="Enhanced Feature Register">
		<bitfield id="AUTO_CTS_EN" width="1" begin="7" end="7" resetval="0x0" description="Auto-CTS enable bit. 0: Normal operation. 1: Auto-CTS flow control is enabled i.e. transmission is halted when the CTS* pin is high (inactive)." range="7" rwaccess="R/W"/> 
		<bitfield id="AUTO_RTS_EN" width="1" begin="6" end="6" resetval="0x0" description="Auto-RTS enable bit. 0: Normal operation. 1: Auto- RTS flow control is enabled i.e. RTS* pin goes high (inactive) when the receiver FIFO HALT trigger level, TCR[3:0], is reached, and goes low (active) when the receiver FIFO RESTORE transmission trigger level is reached." range="6" rwaccess="R/W"/> 
		<bitfield id="SPECIAL_CHAR_DETECT" width="1" begin="5" end="5" resetval="0x0" description="0: Normal operation. 1: Special character detect enable. Received data is compared with XOFF2 data. If a match occurs the received data is transferred to RX FIFO and IIR bit 4 is set to 1 to indicate a special character has been detected." range="5" rwaccess="R/W"/> 
		<bitfield id="ENHANCED_EN" width="1" begin="4" end="4" resetval="0x0" description="Enhanced functions write enable bit. 0: Disables writing to IER bits 4-7, FCR bits 4-5, and MCR bits 5-7. 1: Enables writing to IER bits 4-7, FCR bits 4-5, and MCR bits 5-7." range="4" rwaccess="R/W"/> 
		<bitfield id="SW_FLOW_CONTROL" width="4" begin="3" end="0" resetval="0x0" description="Combinations of Software flow control can be selected by programming bit 3 - bit 0. See Software Flow Control Options" range="3 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_FCR" acronym="MEM_FCR" offset="0x8" width="32" description="Notes:
	Bits 4 and 5 can only be written to when EFR[4] = 1
	Bits 0 to 3 can be changed only when the baud clock is not running (DLL and DLH set to 0)
	See Table 31 for FCR[5:4] setting restriction when SCR[6]=1
	See Table 32 for FCR[7:6] setting restriction when SCR[7]=1">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RX_FIFO_TRIG" width="2" begin="7" end="6" resetval="0x0" description="Sets the trigger level for the RX FIFO:  If SCR[7] = 0 and TLR[7:4] = 0000:  00:   8 characters 01: 16 characters 10: 56 characters 11: 60 characters  If SCR[7] = 0 and TLR[7:4] != 0000, RX_FIFO_TRIG is not considered.  If SCR[7]=1, RX_FIFO_TRIG is 2 LSB of the trigger level [1-63 on 6 bits] with the granularity 1." range="7 - 6" rwaccess="W"/> 
		<bitfield id="TX_FIFO_TRIG" width="2" begin="5" end="4" resetval="0x0" description="Sets the trigger level for the TX FIFO:  If SCR[6] = 0 and TLR[3:0] = 0000:  00:   8 spaces 01: 16 spaces 10: 32 spaces 11: 56 spaces  If SCR[6] = 0 and TLR[3:0] != 0000, TX_FIFO_TRIG is not considered.  If SCR[6]=1, TX_FIFO_TRIG is 2 LSB of the trigger level [1-63 on 6 bits] with the granularity 1" range="5 - 4" rwaccess="W"/> 
		<bitfield id="DMA_MODE" width="1" begin="3" end="3" resetval="0x0" description="This register is considered if SCR[0] = 0." range="3" rwaccess="W"/> 
		<bitfield id="TX_FIFO_CLEAR" width="1" begin="2" end="2" resetval="0x0" description="" range="2" rwaccess="W"/> 
		<bitfield id="RX_FIFO_CLEAR" width="1" begin="1" end="1" resetval="0x0" description="" range="1" rwaccess="W"/> 
		<bitfield id="FIFO_EN" width="1" begin="0" end="0" resetval="0x0" description="" range="0" rwaccess="W"/>
	</register>
	<register id="MEM_IIR_CIR" acronym="MEM_IIR_CIR" offset="0x8" width="32" description="The IIR is a read-only register, which provides the source of the interrupt in a prioritized manner.">
		<bitfield id="TX_STATUS_IT" width="1" begin="5" end="5" resetval="0x0" description="" range="5" rwaccess="R"/> 
		<bitfield id="RX_OE_IT" width="1" begin="3" end="3" resetval="0x0" description="" range="3" rwaccess="R"/> 
		<bitfield id="RX_STOP_IT" width="1" begin="2" end="2" resetval="0x0" description="" range="2" rwaccess="R"/> 
		<bitfield id="THR_IT" width="1" begin="1" end="1" resetval="0x0" description="" range="1" rwaccess="R"/> 
		<bitfield id="RHR_IT" width="1" begin="0" end="0" resetval="0x0" description="" range="0" rwaccess="R"/>
	</register>
	<register id="MEM_IIR_IRDA" acronym="MEM_IIR_IRDA" offset="0x8" width="32" description="The IIR is a read-only register, which provides the source of the interrupt in a prioritized manner.">
		<bitfield id="EOF_IT" width="1" begin="7" end="7" resetval="0x0" description="" range="7" rwaccess="R"/> 
		<bitfield id="LINE_STS_IT" width="1" begin="6" end="6" resetval="0x0" description="" range="6" rwaccess="R"/> 
		<bitfield id="TX_STATUS_IT" width="1" begin="5" end="5" resetval="0x0" description="" range="5" rwaccess="R"/> 
		<bitfield id="STS_FIFO_IT" width="1" begin="4" end="4" resetval="0x0" description="" range="4" rwaccess="R"/> 
		<bitfield id="RX_OE_IT" width="1" begin="3" end="3" resetval="0x0" description="" range="3" rwaccess="R"/> 
		<bitfield id="RX_FIFO_LAST_BYTE_IT" width="1" begin="2" end="2" resetval="0x0" description="" range="2" rwaccess="R"/> 
		<bitfield id="THR_IT" width="1" begin="1" end="1" resetval="0x0" description="" range="1" rwaccess="R"/> 
		<bitfield id="RHR_IT" width="1" begin="0" end="0" resetval="0x0" description="" range="0" rwaccess="R"/>
	</register>
	<register id="MEM_IIR_UART" acronym="MEM_IIR_UART" offset="0x8" width="32" description="The IIR is a read-only register, which provides the source of the interrupt in a prioritized manner.">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="FCR_MIRROR" width="2" begin="7" end="6" resetval="0x0" description="Mirror the contents of FCR[0] on both bits." range="7 - 6" rwaccess="R"/> 
		<bitfield id="IT_TYPE" width="5" begin="5" end="1" resetval="0x0" description="" range="5 - 1" rwaccess="R"/> 
		<bitfield id="IT_PENDING" width="1" begin="0" end="0" resetval="0x1" description="" range="0" rwaccess="R"/>
	</register>
	<register id="MEM_LCR" acronym="MEM_LCR" offset="0xC" width="32" description="LCR[6:0] define parameters of the transmission and reception.

Note: As soon as LCR[6] is set to 1, the TX line is forced to 0 and remains in this state as long as LCR[6] = 1.">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="DIV_EN" width="1" begin="7" end="7" resetval="0x0" description="" range="7" rwaccess="R/W"/> 
		<bitfield id="BREAK_EN" width="1" begin="6" end="6" resetval="0x0" description="Break control bit." range="6" rwaccess="R/W"/> 
		<bitfield id="PARITY_TYPE2" width="1" begin="5" end="5" resetval="0x0" description="Selects the forced parity format [if LCR[3] = 1]. If LCR[5] = 1 and LCR[4] = 0, the parity bit is forced to 1 in the transmitted and received data. If LCR[5] = 1 and LCR[4] = 1, the parity bit is forced to 0 in the transmitted and received data." range="5" rwaccess="R/W"/> 
		<bitfield id="PARITY_TYPE1" width="1" begin="4" end="4" resetval="0x0" description="" range="4" rwaccess="R/W"/> 
		<bitfield id="PARITY_EN" width="1" begin="3" end="3" resetval="0x0" description="" range="3" rwaccess="R/W"/> 
		<bitfield id="NB_STOP" width="1" begin="2" end="2" resetval="0x0" description="Specifies the number of stop bits:" range="2" rwaccess="R/W"/> 
		<bitfield id="CHAR_LENGTH" width="2" begin="1" end="0" resetval="0x0" description="Specifies the word length to be transmitted or received." range="1 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_MCR" acronym="MEM_MCR" offset="0x10" width="32" description="MCR[3:0] controls the interface with the modem, data set or peripheral device that is emulating the modem. ">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RESERVED" width="1" begin="7" end="7" resetval="0x0" description="" range="7" rwaccess="R"/> 
		<bitfield id="TCR_TLR" width="1" begin="6" end="6" resetval="0x0" description="" range="6" rwaccess="R/W"/> 
		<bitfield id="XON_EN" width="1" begin="5" end="5" resetval="0x0" description="" range="5" rwaccess="R/W"/> 
		<bitfield id="LOOPBACK_EN" width="1" begin="4" end="4" resetval="0x0" description="" range="4" rwaccess="R/W"/> 
		<bitfield id="CD_STS_CH" width="1" begin="3" end="3" resetval="0x0" description="" range="3" rwaccess="R/W"/> 
		<bitfield id="RI_STS_CH" width="1" begin="2" end="2" resetval="0x0" description="" range="2" rwaccess="R/W"/> 
		<bitfield id="RTS" width="1" begin="1" end="1" resetval="0x0" description="In loop back controls MSR[4].  If auto-RTS is enabled the RTS* output is controlled by hardware flow control." range="1" rwaccess="R/W"/> 
		<bitfield id="DTR" width="1" begin="0" end="0" resetval="0x0" description="" range="0" rwaccess="R/W"/>
	</register>
	<register id="MEM_XON1_ADDR1" acronym="MEM_XON1_ADDR1" offset="0x10" width="32" description="XON1/ADDR1 Register">
		<bitfield id="XON_WORD1" width="8" begin="7" end="0" resetval="0x0" description="Used to store the 8-bit XON1 character in UART modes and ADDR1 address 1 for IrDA modes." range="7 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_LSR_CIR" acronym="MEM_LSR_CIR" offset="0x14" width="32" description="">
		<bitfield id="THR_EMPTY" width="1" begin="7" end="7" resetval="0x1" description="" range="7" rwaccess="R"/> 
		<bitfield id="RESERVED" width="1" begin="6" end="6" resetval="0x0" description="" range="6" rwaccess="R"/> 
		<bitfield id="RX_STOP" width="1" begin="5" end="5" resetval="0x0" description="The RX_STOP is generated based on the value set in the BOF Length register (EBLR). It is cleared on a single read of the LSR register" range="5" rwaccess="R"/> 
		<bitfield id="RX_FIFO_E" width="1" begin="0" end="0" resetval="0x1" description="" range="0" rwaccess="R"/>
	</register>
	<register id="MEM_LSR_IRDA" acronym="MEM_LSR_IRDA" offset="0x14" width="32" description="">
		<bitfield id="THR_EMPTY" width="1" begin="7" end="7" resetval="0x1" description="" range="7" rwaccess="R"/> 
		<bitfield id="STS_FIFO_FULL" width="1" begin="6" end="6" resetval="0x0" description="" range="6" rwaccess="R"/> 
		<bitfield id="RX_LAST_BYTE" width="1" begin="5" end="5" resetval="0x0" description="" range="5" rwaccess="R"/> 
		<bitfield id="FRAME_TOO_LONG" width="1" begin="4" end="4" resetval="0x0" description="" range="4" rwaccess="R"/> 
		<bitfield id="ABORT" width="1" begin="3" end="3" resetval="0x0" description="" range="3" rwaccess="R"/> 
		<bitfield id="CRC" width="1" begin="2" end="2" resetval="0x0" description="" range="2" rwaccess="R"/> 
		<bitfield id="STS_FIFO_E" width="1" begin="1" end="1" resetval="0x1" description="" range="1" rwaccess="R"/> 
		<bitfield id="RX_FIFO_E" width="1" begin="0" end="0" resetval="0x1" description="" range="0" rwaccess="R"/>
	</register>
	<register id="MEM_LSR_UART" acronym="MEM_LSR_UART" offset="0x14" width="32" description="">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RX_FIFO_STS" width="1" begin="7" end="7" resetval="0x0" description="" range="7" rwaccess="R"/> 
		<bitfield id="TX_SR_E" width="1" begin="6" end="6" resetval="0x1" description="" range="6" rwaccess="R"/> 
		<bitfield id="TX_FIFO_E" width="1" begin="5" end="5" resetval="0x1" description="" range="5" rwaccess="R"/> 
		<bitfield id="RX_BI" width="1" begin="4" end="4" resetval="0x0" description="" range="4" rwaccess="R"/> 
		<bitfield id="RX_FE" width="1" begin="3" end="3" resetval="0x0" description="" range="3" rwaccess="R"/> 
		<bitfield id="RX_PE" width="1" begin="2" end="2" resetval="0x0" description="" range="2" rwaccess="R"/> 
		<bitfield id="RX_OE" width="1" begin="1" end="1" resetval="0x0" description="" range="1" rwaccess="R"/> 
		<bitfield id="RX_FIFO_E" width="1" begin="0" end="0" resetval="0x0" description="" range="0" rwaccess="R"/>
	</register>
	<register id="MEM_XON2_ADDR2" acronym="MEM_XON2_ADDR2" offset="0x14" width="32" description="XON2/ADDR2 Register">
		<bitfield id="XON_WORD2" width="8" begin="7" end="0" resetval="0x0" description="Used to store the 8-bit XON2 character in UART modes and ADDR2 address 2 for IrDA modes." range="7 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_MSR" acronym="MEM_MSR" offset="0x18" width="32" description="This register provides information about the current state of the control lines from the modem, data set or peripheral device to the LH. It also indicates when a control input from the modem changes state.">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="NCD_STS" width="1" begin="7" end="7" resetval="0x0" description="This bit is the complement of the DCD* input. In loop-back mode it is equivalent to MCR[3] " range="7" rwaccess="R"/> 
		<bitfield id="NRI_STS" width="1" begin="6" end="6" resetval="0x0" description="This bit is the complement of the RI* input. In loop-back mode it is equivalent to MCR[2]" range="6" rwaccess="R"/> 
		<bitfield id="NDSR_STS" width="1" begin="5" end="5" resetval="0x0" description="This bit is the complement of the DSR* input. In loop-back mode, it is equivalent to MCR[0]" range="5" rwaccess="R"/> 
		<bitfield id="NCTS_STS" width="1" begin="4" end="4" resetval="0x0" description="This bit is the complement of the CTS* input. In loop-back mode it is equivalent to MCR[1]" range="4" rwaccess="R"/> 
		<bitfield id="DCD_STS" width="1" begin="3" end="3" resetval="0x0" description="Indicates that DCD* input [or MCR[3] in loop back] has changed. Cleared on a read." range="3" rwaccess="R"/> 
		<bitfield id="RI_STS" width="1" begin="2" end="2" resetval="0x0" description="Indicates that RI* input [or MCR[2] in loop back] has changed state from low to high. Cleared on a read." range="2" rwaccess="R"/> 
		<bitfield id="DSR_STS" width="1" begin="1" end="1" resetval="0x0" description="" range="1" rwaccess="R"/> 
		<bitfield id="CTS_STS" width="1" begin="0" end="0" resetval="0x0" description="" range="0" rwaccess="R"/>
	</register>
	<register id="MEM_TCR" acronym="MEM_TCR" offset="0x18" width="32" description="Transmission Control Register">
		<bitfield id="RX_FIFO_TRIG_START" width="4" begin="7" end="4" resetval="0x0" description="RX FIFO trigger level to RESTORE transmission (0 - 60)" range="7 - 4" rwaccess="R/W"/> 
		<bitfield id="RX_FIFO_TRIG_HALT" width="4" begin="3" end="0" resetval="0x15" description="RX FIFO trigger level to HALT transmission (0 - 60)" range="3 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_XOFF1" acronym="MEM_XOFF1" offset="0x18" width="32" description="XOFF1 Register">
		<bitfield id="XOFF_WORD1" width="8" begin="7" end="0" resetval="0x0" description="Used to store the 8-bit XOFF1 character in used in UART modes." range="7 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_SPR" acronym="MEM_SPR" offset="0x1C" width="32" description="This read/write register does not control the module in anyway. It is intended as a scratchpad register to be used by the programmer to hold temporary data.">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="SPR_WORD" width="8" begin="7" end="0" resetval="0x0" description="Scratchpad register" range="7 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_TLR" acronym="MEM_TLR" offset="0x1C" width="32" description="Trigger Level Register">
		<bitfield id="RX_FIFO_TRIG_DMA" width="4" begin="7" end="4" resetval="0x0" description="Receive FIFO trigger level" range="7 - 4" rwaccess="R/W"/> 
		<bitfield id="TX_FIFO_TRIG_DMA" width="4" begin="3" end="0" resetval="0x0" description="Transmit FIFO trigger level" range="3 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_XOFF2" acronym="MEM_XOFF2" offset="0x1C" width="32" description="XOFF2 Register">
		<bitfield id="XOFF_WORD2" width="8" begin="7" end="0" resetval="0x0" description="Used to store the 8-bit XOFF2 character in used in UART modes." range="7 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_MDR1" acronym="MEM_MDR1" offset="0x20" width="32" description="The mode of operation can be programmed by writing to MDR1[2:0] and therefore the MDR1 must be programmed on start-up after configuration of the configuration registers (DLL, DLH, LCR). The value of MDR1[2:0] must not be changed again during normal operation. 

Note: If the module is disabled by setting the MODE_SELECT field to">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="FRAME_END_MODE" width="1" begin="7" end="7" resetval="0x0" description="IrDA mode only." range="7" rwaccess="R/W"/> 
		<bitfield id="SIP_MODE" width="1" begin="6" end="6" resetval="0x0" description="MIR/FIR modes only." range="6" rwaccess="R/W"/> 
		<bitfield id="SCT" width="1" begin="5" end="5" resetval="0x0" description="Store and control the transmission" range="5" rwaccess="R/W"/> 
		<bitfield id="SET_TXIR" width="1" begin="4" end="4" resetval="0x0" description="Used to configure the infrared transceiver." range="4" rwaccess="R/W"/> 
		<bitfield id="IR_SLEEP" width="1" begin="3" end="3" resetval="0x0" description="" range="3" rwaccess="R/W"/> 
		<bitfield id="MODE_SELECT" width="3" begin="2" end="0" resetval="0x7" description="" range="2 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_MDR2" acronym="MEM_MDR2" offset="0x24" width="32" description="IR-IrDA and IR-CIR modes only.

MDR2[0] describes the status of the interrupt in IIR[5]. The IRTX_UNDERRUN bit should be read after an IIR[5] TX_STATUS_IT interrupt has occurred. The bits [2:1] of this register sets the trigger level for the frame status FIFO (8 entries) and must be programmed before the mode is programmed in MDR1[2:0].

Note: The MDR2[6] gives the flexibility to invert the RX pin inside the UART module to ensure that the protocol at the input of the transceiver module has the same polarity at module level. By default, the RX pin is inverted because most of transceiver invert the IR receive pin.">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="SET_TXIR_ALT" width="1" begin="7" end="7" resetval="0x0" description="Provide alternate functionnality for MDR1[4] [SET_TXIR]" range="7" rwaccess="R/W"/> 
		<bitfield id="IRRXINVERT" width="1" begin="6" end="6" resetval="0x0" description="Only for IR mode [IRDA &#38; CIR]Invert RX pin inside the module before the voting or sampling system logic of the infra red block. This will not affect the RX path in UART Modem modes." range="6" rwaccess="R/W"/> 
		<bitfield id="CIR_PULSE_MODE" width="2" begin="5" end="4" resetval="0x0" description="CIR Pulse modulation definition. It defines high level of the pulse width associated with a digit:" range="5 - 4" rwaccess="R/W"/> 
		<bitfield id="UART_PULSE" width="1" begin="3" end="3" resetval="0x0" description="UART mode only. Used to allow pulse shaping in UART mode." range="3" rwaccess="R/W"/> 
		<bitfield id="STS_FIFO_TRIG" width="2" begin="2" end="1" resetval="0x0" description="Only for IR-IRDA mode. Frame Status FIFO Threshold select:" range="2 - 1" rwaccess="R/W"/> 
		<bitfield id="IRTX_UNDERRUN" width="1" begin="0" end="0" resetval="0x0" description="IRDA Transmission status interrupt.When the IIR[5] interrupt occurs, the meaning of the interrupt is :" range="0" rwaccess="R"/>
	</register>
	<register id="MEM_SFLSR" acronym="MEM_SFLSR" offset="0x28" width="32" description="IrDA modes only.

Reading this register effectively reads frame status information from the status FIFO (this register doesn't physically exist). Reading this register will increment the status FIFO read pointer (SFREGL and SFREGH must be read first).">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RESERVED5" width="3" begin="7" end="5" resetval="0x0" description="" range="7 - 5" rwaccess="R"/> 
		<bitfield id="OE_ERROR" width="1" begin="4" end="4" resetval="0x0" description="" range="4" rwaccess="R"/> 
		<bitfield id="FRAME_TOO_LONG_ERROR" width="1" begin="3" end="3" resetval="0x0" description="" range="3" rwaccess="R"/> 
		<bitfield id="ABORT_DETECT" width="1" begin="2" end="2" resetval="0x0" description="" range="2" rwaccess="R"/> 
		<bitfield id="CRC_ERROR" width="1" begin="1" end="1" resetval="0x0" description="" range="1" rwaccess="R"/> 
		<bitfield id="RESERVED0" width="1" begin="0" end="0" resetval="0x0" description="" range="0" rwaccess="R"/>
	</register>
	<register id="MEM_TXFLL" acronym="MEM_TXFLL" offset="0x28" width="32" description="IrDA modes only.

The registers TXFLL and TXFLH hold the 13-bit transmit frame length (expressed in bytes). TXFLL holds the least significant bits and TXFLH holds the most significant bits. The frame length value is used if the frame length method of frame closing is used.">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="TXFLL" width="8" begin="7" end="0" resetval="0x0" description="LSB register used to specify the frame length" range="7 - 0" rwaccess="W"/>
	</register>
	<register id="MEM_RESUME" acronym="MEM_RESUME" offset="0x2C" width="32" description="IR-IrDA and IR-CIR modes only.

This register is used to clear internal flags, which halt transmission/reception when an underrun/overrun error occurs. Reading this register resumes the halted operation. This register does not physically exist and reads always as 0x00.">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RESUME" width="8" begin="7" end="0" resetval="0x0" description="Dummy read to restart the TX or RX" range="7 - 0" rwaccess="R"/>
	</register>
	<register id="MEM_TXFLH" acronym="MEM_TXFLH" offset="0x2C" width="32" description="IrDA modes only.
The registers TXFLL and TXFLH hold the 13-bit transmit frame length (expressed in bytes). TXFLL holds the least significant bits and TXFLH holds the most significant bits. The frame length value is used if the frame length method of frame closing is used.">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RESERVED" width="3" begin="7" end="5" resetval="0x0" description="" range="7 - 5" rwaccess="R"/> 
		<bitfield id="TXFLH" width="5" begin="4" end="0" resetval="0x0" description="MSB register used to specify the frame length" range="4 - 0" rwaccess="W"/>
	</register>
	<register id="MEM_RXFLL" acronym="MEM_RXFLL" offset="0x30" width="32" description="IrDA modes only.

The registers RXFLL and RXFLH hold the 12-bit receive maximum frame length. RXFLL holds the least significant bits and RXFLH holds the most significant bits. If the intended maximum receive frame length is n bytes, then program RXFLL and RXFLH to be n + 3 in SIR or MIR modes and n + 6 in FIR mode (+3 and +6 are due to frame format with CRC and stop flag; there are two bytes associated with the FIR stop flag).">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RXFLL" width="8" begin="7" end="0" resetval="0x0" description="LSB register used to specify the frame length in reception" range="7 - 0" rwaccess="W"/>
	</register>
	<register id="MEM_SFREGL" acronym="MEM_SFREGL" offset="0x30" width="32" description="IrDA modes only.

The frame lengths of received frames are written into the status FIFO. This information can be read by reading the SFREGL and SFREGH registers (i.e. these registers do not physically exist). The least significant bits are read from SFREGL and the most significant bits are read from SFREGH. Reading these registers does not alter the status FIFO read pointer. These registers should be read before the pointer is incremented by reading the SFLSR.">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="SFREGL" width="8" begin="7" end="0" resetval="0x0" description="LSB part of the frame length" range="7 - 0" rwaccess="R"/>
	</register>
	<register id="MEM_RXFLH" acronym="MEM_RXFLH" offset="0x34" width="32" description="IrDA modes only.

The registers RXFLL and RXFLH hold the 12-bit receive maximum frame length. RXFLL holds the least significant bits and RXFLH holds the most significant bits. If the intended maximum receive frame length is n bytes, then program RXFLL and RXFLH to be n + 3 in SIR or MIR modes and n + 6 in FIR mode (+3 and +6 are due to frame format with CRC and stop flag; there are two bytes associated with the FIR stop flag).">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RESERVED" width="4" begin="7" end="4" resetval="0x0" description="" range="7 - 4" rwaccess="R"/> 
		<bitfield id="RXFLH" width="4" begin="3" end="0" resetval="0x0" description="MSB register used to specify the frame length in reception" range="3 - 0" rwaccess="W"/>
	</register>
	<register id="MEM_SFREGH" acronym="MEM_SFREGH" offset="0x34" width="32" description="IrDA modes only.

The frame lengths of received frames are written into the status FIFO. This information can be read by reading the SFREGL and SFREGH registers (i.e. these registers do not physically exist). The least significant bits are read from SFREGL and the most significant bits are read from SFREGH. Reading these registers does not alter the status FIFO read pointer. These registers should be read before the pointer is incremented by reading the SFLSR.">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RESERVED" width="4" begin="7" end="4" resetval="0x0" description="" range="7 - 4" rwaccess="R"/> 
		<bitfield id="SFREGH" width="4" begin="3" end="0" resetval="0x0" description="MSB part of the frame length" range="3 - 0" rwaccess="R"/>
	</register>
	<register id="MEM_BLR" acronym="MEM_BLR" offset="0x38" width="32" description="IrDA modes only.

Note that BLR[6] is used to select whether 0xC0 or 0xFF start patterns are to be used, when multiple start flags are required in SIR Mode. If only one start flag is required, this will always be 0xC0. If n start flags are required, then either (n-1) 0xC0 or (n-1) 0xFF flags are sent, followed by a single 0xC0 flag (immediately preceding the first data byte).">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="STS_FIFO_RESET" width="1" begin="7" end="7" resetval="0x0" description="Status FIFO reset. This bit is self-clearing" range="7" rwaccess="R/W1TS"/> 
		<bitfield id="XBOF_TYPE" width="1" begin="6" end="6" resetval="0x1" description="SIR xBOF select." range="6" rwaccess="R/W"/> 
		<bitfield id="RESERVED" width="6" begin="5" end="0" resetval="0x0" description="" range="5 - 0" rwaccess="R"/>
	</register>
	<register id="MEM_UASR" acronym="MEM_UASR" offset="0x38" width="32" description="UART Autobauding Status Register">
		<bitfield id="PARITY_TYPE" width="2" begin="7" end="6" resetval="0x0" description="00 => No Parity identified. 01 => Parity space. 10 => Even Parity. 11 => Odd Parity" range="7 - 6" rwaccess="R"/> 
		<bitfield id="BIT_BY_CHAR" width="1" begin="5" end="5" resetval="0x0" description="0 => 7 bits character identified. 1 => 8 bits character identified" range="5" rwaccess="R"/> 
		<bitfield id="SPEED" width="5" begin="4" end="0" resetval="0x0" description="Used to report the speed identified. 00000 => No speed identified. 00001 => 115200 bauds. 00010 => 57600 bauds. 00011 => 38400 bauds. 00100 => 28800 bauds. 00101 => 19200 bauds. 00110 => 14400 bauds. 00111 => 9600 bauds. 01000 => 4800 bauds. 01001 => 2400 bauds. 01010 => 1200 bauds" range="4 - 0" rwaccess="R"/>
	</register>
	<register id="MEM_ACREG" acronym="MEM_ACREG" offset="0x3C" width="32" description="IR-IrDA and IR-CIR modes only.">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="PULSE_TYPE" width="1" begin="7" end="7" resetval="0x0" description="SIR pulse width select:" range="7" rwaccess="R/W"/> 
		<bitfield id="SD_MOD" width="1" begin="6" end="6" resetval="0x0" description="Primary output used to configure transceivers. Connected to the SD/MODE input pin of IrDA transceivers." range="6" rwaccess="R/W"/> 
		<bitfield id="DIS_IR_RX" width="1" begin="5" end="5" resetval="0x0" description="" range="5" rwaccess="R/W"/> 
		<bitfield id="DIS_TX_UNDERRUN" width="1" begin="4" end="4" resetval="0x0" description="It is recommended to disable TX FIFO underrun capability by masking corresponding underrun interrupt. When disabling underrun by setting ACREG[4]=1, garbage data is sent over TX line." range="4" rwaccess="R/W"/> 
		<bitfield id="SEND_SIP" width="1" begin="3" end="3" resetval="0x0" description="MIR/FIR Modes only.Send Serial Infrared Interaction Pulse [SIP]  If this bit is set during a MIR/FIR transmission, the SIP will be send at the end of it.This bit automatically gets cleared at the end of the SIP transmission." range="3" rwaccess="R/W1TS"/> 
		<bitfield id="SCTX_EN" width="1" begin="2" end="2" resetval="0x0" description="Store and controlled TX start. When MDR1[5] = 1 and the LH writes 1 to this bit the TX state machine starts frame transmission. This bit is self-clearing." range="2" rwaccess="R/W1TS"/> 
		<bitfield id="ABORT_EN" width="1" begin="1" end="1" resetval="0x0" description="Frame Abort. The LH can intentionally abort transmission of a frame by writing 1 to this bit. Neither the end flag nor the CRC bits are appended to the frame.     If transmit FIFO is not empty and MDR1[5]=1, UART IrDA will start a new transfer with data of previous frame as soon as abort frame has been sent. Therefore, TX FIFO must be reset before sending an abort frame." range="1" rwaccess="R/W"/> 
		<bitfield id="EOT_EN" width="1" begin="0" end="0" resetval="0x0" description="EOT [end of transmission] bit. The LH writes 1 to this bit just before it writes the last byte to the TX FIFO in set-EOT bit frame closing method. This bit automatically gets cleared when the LH writes to the THR [TX FIFO]." range="0" rwaccess="R/W1TS"/>
	</register>
	<register id="MEM_SCR" acronym="MEM_SCR" offset="0x40" width="32" description="Note: Bit 4 enables the wake-up interrupt, but this interrupt is not mapped into the IIR register. Therefore, when an interrupt occurs and there is no interrupt pending in the IIR register, the SSR[1] bit must be checked. To clear the wake-up interrupt, bit SCR[4] must be reset to 0.">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RX_TRIG_GRANU1" width="1" begin="7" end="7" resetval="0x0" description="" range="7" rwaccess="R/W"/> 
		<bitfield id="TX_TRIG_GRANU1" width="1" begin="6" end="6" resetval="0x0" description="" range="6" rwaccess="R/W"/> 
		<bitfield id="DSR_IT" width="1" begin="5" end="5" resetval="0x0" description="" range="5" rwaccess="R/W"/> 
		<bitfield id="RX_CTS_DSR_WAKE_UP_ENABLE" width="1" begin="4" end="4" resetval="0x0" description="" range="4" rwaccess="R/W"/> 
		<bitfield id="TX_EMPTY_CTL_IT" width="1" begin="3" end="3" resetval="0x0" description="" range="3" rwaccess="R/W"/> 
		<bitfield id="DMA_MODE_2" width="2" begin="2" end="1" resetval="0x0" description="Used to specify the DMA mode valid if SCR[0] = 1" range="2 - 1" rwaccess="R/W"/> 
		<bitfield id="DMA_MODE_CTL" width="1" begin="0" end="0" resetval="0x0" description="" range="0" rwaccess="R/W"/>
	</register>
	<register id="MEM_SSR" acronym="MEM_SSR" offset="0x44" width="32" description="Note: Bit 1 is reset only when SCR[4] is reset to 0.">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RESERVED" width="5" begin="7" end="3" resetval="0x0" description="" range="7 - 3" rwaccess="R"/> 
		<bitfield id="DMA_COUNTER_RST" width="1" begin="2" end="2" resetval="0x1" description="" range="2" rwaccess="R/W"/> 
		<bitfield id="RX_CTS_DSR_WAKE_UP_STS" width="1" begin="1" end="1" resetval="0x0" description="" range="1" rwaccess="R"/> 
		<bitfield id="TX_FIFO_FULL" width="1" begin="0" end="0" resetval="0x0" description="" range="0" rwaccess="R"/>
	</register>
	<register id="MEM_EBLR" acronym="MEM_EBLR" offset="0x48" width="32" description="IR-IrDA and IR-CIR modes only.

In IR-IrDA SIR operation, this register specifies the number of BOF + xBOFs to transmit. Value set into this register must take into account the BOF character, therefore to only sent one BOF with no XBOF this register must be set to 1. To send one BOF with N XBOF this register must be set to N+1. Furthermore, the value 0 will send 1 BOF plus 255 XBOF.

In IR-IrDA MIR mode, this register specifies the number of additional start flags (MIR protocol mandates a minimum of 2 start flags).

In IR-CIR mode, this register specifies the number of consecutive zeros to be received before generating the RX_STOP interrupt (IIR[2]). All the received zeros are stored in the RX FIFO. When the register is set to 0, this feature is de-activated and always in reception state which can be disabled by setting the ACREG[5] to">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="EBLR" width="8" begin="7" end="0" resetval="0x0" description="IR-IRDA mode: This register allows to define up to 176 xBOFs, the maximum required by IrDA specification.  IR-CIR mode: This register specifies the number of consecutive zeros to be received before generating the RX_STOP interrupt [IIR[2]].  0x00: feature disabled. 0x01: generate RX_STOP interrupt after receiving one zero bit. ... 0xFF: generate RX_STOP interrupt after receiving 255 zero bits." range="7 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_MVR" acronym="MEM_MVR" offset="0x50" width="32" description="The reset value is fixed by hardware and corresponds to the RTL revision of this module. A reset has no effect on the value returned

Notes:
	UART / IRDA SIR only module is revision 1.x (WMU_012_1 specification).
	UART / IRDA with SIR, MIR and FIR support is revision 2.x (WMU_012_2 specification).
	UART / IRDA with SIR, MIR and FIR / CIR support is revision 3.x (this specification).
For example: MVR = 0x30 => Version 3.0 MVR = 0x38 => Version 3.8">
		<bitfield id="SCHEME" width="2" begin="31" end="30" resetval="0x1" description="Scheme revision number of module" range="31 - 30" rwaccess="R"/> 
		<bitfield id="RESERVED" width="2" begin="29" end="28" resetval="0x0" description="" range="29 - 28" rwaccess="R"/> 
		<bitfield id="FUNC" width="12" begin="27" end="16" resetval="0x1858" description="Function revision number of module" range="27 - 16" rwaccess="R"/> 
		<bitfield id="RTL" width="5" begin="15" end="11" resetval="0x8" description="Rtl revision number of module" range="15 - 11" rwaccess="R"/> 
		<bitfield id="MAJOR" width="3" begin="10" end="8" resetval="0x6" description="Major revision number of the module." range="10 - 8" rwaccess="R"/> 
		<bitfield id="CUSTOM" width="2" begin="7" end="6" resetval="0x0" description="Custom revision number of the module." range="7 - 6" rwaccess="R"/> 
		<bitfield id="MINOR" width="6" begin="5" end="0" resetval="0x3" description="Minor revision number of the module." range="5 - 0" rwaccess="R"/>
	</register>
	<register id="MEM_SYSC" acronym="MEM_SYSC" offset="0x54" width="32" description="The auto idle bit controls a power saving technique to reduce the logic power consumption of the OCP interface. That is to say when the feature is enabled, the clock will be gated off until an OCP command for this device has been detected. When the software reset bit is set high it causes a full device reset.">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RESERVED" width="3" begin="7" end="5" resetval="0x0" description="" range="7 - 5" rwaccess="R"/> 
		<bitfield id="IDLEMODE" width="2" begin="4" end="3" resetval="0x0" description="POWER MANAGEMENT REQ/ACK CONTROL REF: OCP DESIGN GUIDELINES VERSION 1.1" range="4 - 3" rwaccess="R/W"/> 
		<bitfield id="ENAWAKEUP" width="1" begin="2" end="2" resetval="0x0" description="WAKE UP FEATURE CONTROL" range="2" rwaccess="R/W"/> 
		<bitfield id="SOFTRESET" width="1" begin="1" end="1" resetval="0x0" description="Software reset. Set this bit to 1 to trigger a module reset. This bit is automatically reset by the hardware. During reads it always returns a 0." range="1" rwaccess="W"/> 
		<bitfield id="AUTOIDLE" width="1" begin="0" end="0" resetval="0x0" description="Internal OCP clock gating strategy" range="0" rwaccess="R/W"/>
	</register>
	<register id="MEM_SYSS" acronym="MEM_SYSS" offset="0x58" width="32" description="">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RESERVED" width="7" begin="7" end="1" resetval="0x0" description="" range="7 - 1" rwaccess="R"/> 
		<bitfield id="RESETDONE" width="1" begin="0" end="0" resetval="0x0" description="Internal Reset Monitoring" range="0" rwaccess="R"/>
	</register>
	<register id="MEM_WER" acronym="MEM_WER" offset="0x5C" width="32" description="The UART wakeup enable register is used to mask and unmask a UART event that would subsequently notify the system. The events are any activity in the logic that could cause an interrupt and/ or an activity that would require the system to wakeup. It should be noted that even if the wakeup is disabled for certain events, if these events are also an interrupt to the UART, then the UART will still register the interrupt as such.">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="EVENT_7_TX_WAKEUP_EN" width="1" begin="7" end="7" resetval="0x1" description="" range="7" rwaccess="R/W"/> 
		<bitfield id="EVENT_6_RECEIVER_LINE_STATUS_INTERRUPT" width="1" begin="6" end="6" resetval="0x1" description="" range="6" rwaccess="R/W"/> 
		<bitfield id="EVENT_5_RHR_INTERRUPT" width="1" begin="5" end="5" resetval="0x1" description="" range="5" rwaccess="R/W"/> 
		<bitfield id="EVENT_4_RX_ACTIVITY" width="1" begin="4" end="4" resetval="0x1" description="" range="4" rwaccess="R/W"/> 
		<bitfield id="EVENT_3_DCD_CD_ACTIVITY" width="1" begin="3" end="3" resetval="0x1" description="" range="3" rwaccess="R/W"/> 
		<bitfield id="EVENT_2_RI_ACTIVITY" width="1" begin="2" end="2" resetval="0x1" description="" range="2" rwaccess="R/W"/> 
		<bitfield id="EVENT_1_DSR_ACTIVITY" width="1" begin="1" end="1" resetval="0x1" description="" range="1" rwaccess="R/W"/> 
		<bitfield id="EVENT_0_CTS_ACTIVITY" width="1" begin="0" end="0" resetval="0x1" description="" range="0" rwaccess="R/W"/>
	</register>
	<register id="MEM_CFPS" acronym="MEM_CFPS" offset="0x60" width="32" description="Since the Consumer IR works at modulation rates of 30  56.8 KHz, the 48 MHz clock must be pre scaled before the clock can drive the IR logic. This register sets the divisor rate to give a range to accommodate the remote control requirements in BAUD multiples of 12x. The value of the CFPS at reset is 0105 decimal which equates to a 38.1 KHz output from starting conditions. The 48 MHz carrier is prescaled by the CFPS which is then divided by the 12x BAUD multiple.">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="CFPS" width="8" begin="7" end="0" resetval="0x105" description="System clock frequency prescaler at [12x multiple]. Examples for CFPS values are given in the table below.  Target Freq [KHz]	CFPS [decimal]	Actual Freq[KHz] 	30			133		30.08 	32.75			122		32.79 	36			111		36.04 	36.7			109		36.69 	38*			105		38.1 	40			100		40 	56.8			70		57.14  * configured at reset to this value  Note: CFPS = 0 is not supported." range="7 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_RXFIFO_LVL" acronym="MEM_RXFIFO_LVL" offset="0x64" width="32" description="Level of the RX FIFO">
		<bitfield id="RESERVED24" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RXFIFO_LVL" width="8" begin="7" end="0" resetval="0x0" description="" range="7 - 0" rwaccess="R"/>
	</register>
	<register id="MEM_TXFIFO_LVL" acronym="MEM_TXFIFO_LVL" offset="0x68" width="32" description="Level of the TX FIFO">
		<bitfield id="RESERVED24" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="TXFIFO_LVL" width="8" begin="7" end="0" resetval="0x0" description="" range="7 - 0" rwaccess="R"/>
	</register>
	<register id="MEM_IER2" acronym="MEM_IER2" offset="0x6C" width="32" description="Enables RX/TX FIFOs empty corresponding interrupts.">
		<bitfield id="RESERVED1" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RESERVED" width="5" begin="7" end="3" resetval="0x0" description="" range="7 - 3" rwaccess="R"/> 
		<bitfield id="RHR_IT_DIS" width="1" begin="2" end="2" resetval="0x0" description="" range="2" rwaccess="R/W"/> 
		<bitfield id="EN_TXFIFO_EMPTY" width="1" begin="1" end="1" resetval="0x0" description="Enables[1]/DISABLES[00 EN_TXFIFO_EMPTY interrupt." range="1" rwaccess="R/W"/> 
		<bitfield id="EN_RXFIFO_EMPTY" width="1" begin="0" end="0" resetval="0x0" description="Enables[1]/disables[0] EN_RXFIFO_EMPTY interrupt." range="0" rwaccess="R/W"/>
	</register>
	<register id="MEM_ISR2" acronym="MEM_ISR2" offset="0x70" width="32" description="Status of  RX/TX FIFOs empty corresponding interrupts.">
		<bitfield id="RESERVED1" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RESERVED" width="6" begin="7" end="2" resetval="0x0" description="" range="7 - 2" rwaccess="R"/> 
		<bitfield id="TXFIFO_EMPTY_STS" width="1" begin="1" end="1" resetval="0x1" description="TXFIFO interrupt pending" range="1" rwaccess="R/W1TC"/> 
		<bitfield id="RXFIFO_EMPTY_STS" width="1" begin="0" end="0" resetval="0x1" description="RXFIFO interrupt pending" range="0" rwaccess="R/W1TC"/>
	</register>
	<register id="MEM_FREQ_SEL" acronym="MEM_FREQ_SEL" offset="0x74" width="32" description="Sample per bit value selector">
		<bitfield id="FREQ_SEL" width="8" begin="7" end="0" resetval="0x26" description="Sets the sample per bit if non default frequency is used. MDR3[1] must be set to 1 after this value is set. Must be equal or higher then 6." range="7 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_ABAUD_1ST_CHAR" acronym="MEM_ABAUD_1ST_CHAR" offset="0x78" width="32" description="Unused">
		<bitfield id="RESERVED" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R"/>
	</register>
	<register id="MEM_BAUD_2ND_CHAR" acronym="MEM_BAUD_2ND_CHAR" offset="0x7C" width="32" description="Unused">
		<bitfield id="RESERVED" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R"/>
	</register>
	<register id="MEM_MDR3" acronym="MEM_MDR3" offset="0x80" width="32" description="Mode definition register 3.">
		<bitfield id="RESERVED2" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="DIR_EN" width="1" begin="4" end="4" resetval="0x0" description="RS-485 External Transceiver Direction Enable" range="4" rwaccess="R/W"/> 
		<bitfield id="DIR_POL" width="1" begin="3" end="3" resetval="0x0" description="RS-485 External Transceiver Direction Polarity. 0 => TX: RTS=0, RX: RTS=1. 1 => TX: RTS=1, RX: RTS=0" range="3" rwaccess="R/W"/> 
		<bitfield id="SET_DMA_TX_THRESHOLD" width="1" begin="2" end="2" resetval="0x0" description="Enable to set different TX DMA threshold then 64-trigger [usage of new register TX_DNA_THRESHOLD]" range="2" rwaccess="R/W"/> 
		<bitfield id="NONDEFAULT_FREQ" width="1" begin="1" end="1" resetval="0x0" description="Enables[1]/Disables[0] using NONDEFAULT  fclk frequencies" range="1" rwaccess="R/W"/> 
		<bitfield id="DISABLE_CIR_RX_DEMOD" width="1" begin="0" end="0" resetval="0x0" description="Disables[1]/Enables[0] CIR RX demodulation" range="0" rwaccess="R/W"/>
	</register>
	<register id="MEM_TX_DMA_THRESHOLD" acronym="MEM_TX_DMA_THRESHOLD" offset="0x84" width="32" description="Use to manually set the TX DMA threshold level.
MDR3[2] SET_TX_DMA_THRESHOLD must be one and 
must be value + tx_trigger_level &#60;= 64 (TX FIFO size).
If not, 64-tx_trigger_level will be used w/o modifying 
the value of this register.">
		<bitfield id="TX_DMA_THRESHOLD" width="6" begin="5" end="0" resetval="0x0" description="Use to manually set the TX DMA threshold level." range="5 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_MDR4" acronym="MEM_MDR4" offset="0x88" width="32" description="Mode definition register 4">
		<bitfield id="RESERVED1" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RESERVED" width="1" begin="7" end="7" resetval="0x0" description="" range="7" rwaccess="R"/> 
		<bitfield id="MODE9" width="1" begin="6" end="6" resetval="0x0" description="9-bit character length. When '1', overrides character length setting in LCR" range="6" rwaccess="R/W"/> 
		<bitfield id="FREQ_SEL_H" width="3" begin="5" end="3" resetval="0x0" description="Upper 3 bits of FREQ_SEL register for higher division values, as required for example for FI/Di in ISO7816 mode" range="5 - 3" rwaccess="R/W"/> 
		<bitfield id="MODE" width="3" begin="2" end="0" resetval="0x0" description="New modes [when set, overrides MDR1 modes]" range="2 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_EFR2" acronym="MEM_EFR2" offset="0x8C" width="32" description="Enhanced Features Register 2">
		<bitfield id="RESERVED1" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="BROADCAST" width="1" begin="7" end="7" resetval="0x0" description="Enables broadcast address matching in multi-drop address match mode" range="7" rwaccess="R/W"/> 
		<bitfield id="TIMEOUT_BEHAVE" width="1" begin="6" end="6" resetval="0x0" description="Specifies how timeout is measured" range="6" rwaccess="R/W"/> 
		<bitfield id="C8" width="1" begin="5" end="5" resetval="0x0" description="Value for ISO 7816 C8 pin for software control" range="5" rwaccess="R/W"/> 
		<bitfield id="C4" width="1" begin="4" end="4" resetval="0x0" description="Value for ISO 7816 C4 pin for software control" range="4" rwaccess="R/W"/> 
		<bitfield id="C2" width="1" begin="3" end="3" resetval="0x0" description="Value for ISO 7816 reset pin [software controllable]" range="3" rwaccess="R/W"/> 
		<bitfield id="MULTIDROP" width="1" begin="2" end="2" resetval="0x0" description="Enables parity Multi-drop mode [overrides LCR[5..3]] when '1'" range="2" rwaccess="R/W"/> 
		<bitfield id="RHR_OVERRUN" width="1" begin="1" end="1" resetval="0x0" description="RHR Overrun behaviour when buffer full" range="1" rwaccess="R/W"/> 
		<bitfield id="ENDIAN" width="1" begin="0" end="0" resetval="0x0" description="Endianness" range="0" rwaccess="R/W"/>
	</register>
	<register id="MEM_ECR" acronym="MEM_ECR" offset="0x90" width="32" description="Enhanced Control register">
		<bitfield id="RESERVED1" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="RESERVED" width="2" begin="7" end="6" resetval="0x0" description="" range="7 - 6" rwaccess="R"/> 
		<bitfield id="CLEAR_TX_PE" width="1" begin="5" end="5" resetval="0x0" description="Write 1 to clear parity error from the Transmitter to allow it to continue to try sending data [ISO7816 transmit only]" range="5" rwaccess="W"/> 
		<bitfield id="TX_EN" width="1" begin="4" end="4" resetval="0x1" description="Enables/Disables the transmitter" range="4" rwaccess="R/W"/> 
		<bitfield id="RX_EN" width="1" begin="3" end="3" resetval="0x1" description="Enables/Disables the receiver" range="3" rwaccess="R/W"/> 
		<bitfield id="TX_RST" width="1" begin="2" end="2" resetval="0x0" description="Writing '1' resets the transmitter" range="2" rwaccess="W"/> 
		<bitfield id="RX_RST" width="1" begin="1" end="1" resetval="0x0" description="Writing '1' resets the receiver" range="1" rwaccess="W"/> 
		<bitfield id="A_MULTIDROP" width="1" begin="0" end="0" resetval="0x0" description="In multi-drop mode, when written with the value '1' causes the next byte written into THR to be transmitted with the parity bit set, signaling an address" range="0" rwaccess="W"/>
	</register>
	<register id="MEM_TIMEGUARD" acronym="MEM_TIMEGUARD" offset="0x94" width="32" description="Timeguard">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="TIMEGUARD" width="8" begin="7" end="0" resetval="0x0" description="Specifies the amount of idle baud clocks [transmitter bit period] to  insert between  transmitted bytes, useful when comunicating with slower devices" range="7 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_TIMEOUTL" acronym="MEM_TIMEOUTL" offset="0x98" width="32" description="Timeout lower byte">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="TIMEOUT_L" width="8" begin="7" end="0" resetval="0x0" description="Custom timeout period in baud clocks, to override the internal value, when different from 0. [Lower byte of the 16 bit value]" range="7 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_TIMEOUTH" acronym="MEM_TIMEOUTH" offset="0x9C" width="32" description="Timeout higher byte">
		<bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="TIMEOUT_H" width="8" begin="7" end="0" resetval="0x0" description="Custom timeout period in baud clocks, to override the internal value, when different from 0. [Higher byte of the 16 bit value]" range="7 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_SCCR" acronym="MEM_SCCR" offset="0xA0" width="32" description="Smartcard (ISO7816) mode Control Register">
		<bitfield id="RESERVED1" width="24" begin="31" end="8" resetval="0x0" description="" range="31 - 8" rwaccess="R"/> 
		<bitfield id="DSNACK" width="1" begin="7" end="7" resetval="0x0" description="Applies Max_Iteration to receiver aswell - when maximum number of NACKs  have been returned, the receiver will accept the data regardless of error. The data will be loaded into the receiver FIFO and PE will be set when reading it." range="7" rwaccess="R/W"/> 
		<bitfield id="INACK" width="1" begin="6" end="6" resetval="0x0" description="Inhibit NACK when receiving, even if an error is received. The data will be loaded into the receiver FIFO and PE will be set when reading it." range="6" rwaccess="R/W"/> 
		<bitfield id="RESERVED" width="3" begin="5" end="3" resetval="0x0" description="" range="5 - 3" rwaccess="R"/> 
		<bitfield id="MAX_ITERATION" width="3" begin="2" end="0" resetval="0x7" description="Number of times to repeat transmitted character, if the receiver did not acknowledge. If not acknowledged after the max value is reached, the USART transmitter will set parity error, stop and not continue until it is cleared." range="2 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_ERHR" acronym="MEM_ERHR" offset="0xA4" width="32" description="Extended Receive Holding Register">
		<bitfield id="RESERVED" width="23" begin="31" end="9" resetval="0x0" description="" range="31 - 9" rwaccess="R"/> 
		<bitfield id="ERHR" width="9" begin="8" end="0" resetval="0x0" description="Extended Receive Holding Register - allows accessing the full 9bit RHR" range="8 - 0" rwaccess="R"/>
	</register>
	<register id="MEM_ETHR" acronym="MEM_ETHR" offset="0xA4" width="32" description="Extended Transmit Holding Register">
		<bitfield id="RESERVED" width="23" begin="31" end="9" resetval="0x0" description="" range="31 - 9" rwaccess="R"/> 
		<bitfield id="ETHR" width="9" begin="8" end="0" resetval="0x0" description="Extended Transmit Holding Register - allows writing the full 9bit RHR" range="8 - 0" rwaccess="W"/>
	</register>
	<register id="MEM_MAR" acronym="MEM_MAR" offset="0xA8" width="32" description="Multidrop Address Register">
		<bitfield id="ADDRESS" width="8" begin="7" end="0" resetval="0x0" description="Multidrop match address value" range="7 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_MMR" acronym="MEM_MMR" offset="0xAC" width="32" description="Multidrop Mask Register">
		<bitfield id="MASK" width="8" begin="7" end="0" resetval="0x0" description="Address match masking value ? writing a 0 to a bit means that the corresponding address bit will be ignored in matching" range="7 - 0" rwaccess="R/W"/>
	</register>
	<register id="MEM_MBR" acronym="MEM_MBR" offset="0xB0" width="32" description="Multidrop Broadcast Address Register">
		<bitfield id="BROADCAST_ADDRESS" width="8" begin="7" end="0" resetval="0x0" description="Broadcast address for address matching" range="7 - 0" rwaccess="R/W"/>
	</register>
</module>