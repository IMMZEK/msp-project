<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="RCSS_CSI2" id="RCSS_CSI2">
  
  
  <register acronym="CSI2_REVISION" description="         MODULE REVISION   This register contains the IP revision code in binary coded   digital. For example we have: 0x01 = revision 0.1 and 0x21   = revision 2.1   " id="CSI2_REVISION" offset="0x0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="8" id="RES1" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="IP revision   [7:4] Major revision   [3:0] Minor revision    " end="0" id="REV" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="CSI2_SYSCONFIG" description="         SYSTEM CONFIGURATION REGISTER   This register is the OCP-socket system configuration   register.   " id="CSI2_SYSCONFIG" offset="0x10" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="14" id="RES2" rwaccess="R" width="18"></bitfield>
    
  <bitfield begin="13" description="RESERVE FIELD" end="12" id="MSTANDBY_MODE" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="11" description="RESERVE FIELD" end="2" id="RES3" rwaccess="R" width="10"></bitfield>
    
  <bitfield begin="1" description="Software reset. Set the bit to 1 to trigger a module reset. The bit is automatically reset by the hw. During reads return 0. 0:  Normal mode.  1:  The module is reset " end="1" id="SOFT_RESET" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description=" Internal OCP gating strategy 0:  OCP clock is free-running.  1:  Automatic OCP clock gating strategy is applied based on the OCP interface activity." end="0" id="AUTO_IDLE" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_SYSSTATUS" description="         SYSTEM STATUS REGISTER   This register provides status information about the module   excluding the interrupt status register.   " id="CSI2_SYSSTATUS" offset="0x14" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="1" id="RES4" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description="Internal reset monitoring Read 0x1: Reset completed. Read 0x0: Internal module reset is on going." end="0" id="RESET_DONE" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_IRQSTATUS" description="         INTERRUPT STATUS REGISTER - All contexts   This register associates one bit for each context in order   to determine which context has generated the interrupt. The   context shall be enabled for events to be generated on that   context.   If the " id="CSI2_IRQSTATUS" offset="0x18" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="15" id="RES5" rwaccess="R" width="17"></bitfield>
    
  <bitfield begin="14" description="OCP Error Interrupt 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   (RW W1toClr)   " end="14" id="OCP_ERR_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Short packet reception status (other than synch events: Line Start, Line End, Frame Start, and Frame End: data type between 0x8 and x0F only shall be considered). 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   (RW   W1toClr)   " end="13" id="SHORT_PACKET_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="ECC has been used to do the correction of the only 1-bit error status (short packet only). 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="12" id="ECC_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="ECC error status (short and long packets). No correction of the header because of more than 1-bit error. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="11" id="ECC_NO_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="RESERVE FIELD" end="10" id="COMPLEXIO2_ERR_IRQ" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="9" description="Error signaling from Complex IO #1: status of the PHY errors received from the complex IO #1 (events are defined in CSI2_COMPLEXIO1_IRQSTATUS for the 1st complex IO).  Read 0:  READS: Event is false.  Read 1:  READS: Event is true (pending). " end="9" id="COMPLEXIO1_ERR_IRQ" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="8" description="FIFO overflow error status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="8" id="FIFO_OVF_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Context 7 Read 0:  READS: Event is false.  Read 1:  READS: Event is true (pending). " end="7" id="CONTEXT7" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="6" description="Context 6 Read 0:  READS: Event is false.  Read 1:  READS: Event is true (pending). " end="6" id="CONTEXT6" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="5" description="Context 5 Read 0:  READS: Event is false.  Read 1:  READS: Event is true (pending). " end="5" id="CONTEXT5" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="4" description="Context 4 Read 0:  READS: Event is false.  Read 1:  READS: Event is true (pending). " end="4" id="CONTEXT4" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Context 3 Read 0:  READS: Event is false.  Read 1:  READS: Event is true (pending). " end="3" id="CONTEXT3" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="Context 2 Read 0:  READS: Event is false.  Read 1:  READS: Event is true (pending). " end="2" id="CONTEXT2" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="1" description="Context 1 Read 0:  READS: Event is false.  Read 1:  READS: Event is true (pending). " end="1" id="CONTEXT1" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="Context 0 Read 0:  READS: Event is false.  Read 1:  READS: Event is true (pending). " end="0" id="CONTEXT0" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_IRQENABLE" description="         INTERRUPT ENABLE REGISTER - All contexts   This register associates one bit for each context in order   to enable/disable each context individually.   " id="CSI2_IRQENABLE" offset="0x1C" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="15" id="RES6" rwaccess="R" width="17"></bitfield>
    
  <bitfield begin="14" description="OCP Error Interrupt 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="14" id="OCP_ERR_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Short packet reception (other than synch events: Line Start, Line End, Frame Start, and Frame End: data type between 0x8 and x0F only shall be considered). 0:  Event is masked  1:  Event generates an interrupt when it occurs " end="13" id="SHORT_PACKET_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="ECC has been used to correct the only 1-bit error (short packet only). 0:  Event is masked  1:  Event generates an interrupt when it occurs " end="12" id="ECC_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="ECC error (short and long packets). No correction of the header because of more than 1-bit error. 0:  Event is masked  1:  Event generates an interrupt when it occurs " end="11" id="ECC_NO_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="RESERVED" end="10" id="COMPLEXIO2_ERR_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Error signaling from Complex IO #1: the interrupt is triggered when any error is received from the complex IO #1 (events are defined in CSI2_COMPLEXIO1_IRQSTATUS for the 1st complex IO).  0:  Event is masked  1:  Event generates an interrupt when it occurs " end="9" id="COMPLEXIO1_ERR_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="FIFO overflow enable 0:  Event is masked  1:  Event generates an interrupt when it occurs " end="8" id="FIFO_OVF_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Context 7 0:  Event is masked  1:  Event generates an interrupt when it occurs " end="7" id="CONTEXT7" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Context 6 0:  Event is masked  1:  Event generates an interrupt when it occurs " end="6" id="CONTEXT6" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Context 5 0:  Event is masked  1:  Event generates an interrupt when it occurs " end="5" id="CONTEXT5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Context 4 0:  Event is masked  1:  Event generates an interrupt when it occurs " end="4" id="CONTEXT4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Context 3 0:  Event is masked  1:  Event generates an interrupt when it occurs " end="3" id="CONTEXT3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Context 2 0:  Event is masked  1:  Event generates an interrupt when it occurs " end="2" id="CONTEXT2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Context 1 0:  Event is masked  1:  Event generates an interrupt when it occurs " end="1" id="CONTEXT1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Context 0 0:  Event is masked  1:  Event generates an interrupt when it occurs " end="0" id="CONTEXT0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTRL" description="         GLOBAL CONTROL REGISTER   This register controls the CSI2 RECEIVER module. This   register shall not be modified dynamically (except IF_EN bit   field).   " id="CSI2_CTRL" offset="0x40" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="23" id="RES7" rwaccess="R" width="9"></bitfield>
    
  <bitfield begin="22" description="RESERVE FIELD" end="20" id="MFLAG_LEVH" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="19" description="RESERVE FIELD" end="17" id="MFLAG_LEVL" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="16" description="Sets the DMA burst size on the L3 interconnect. 0:  Use the burst size defined in the BURST_SIZE register  1:  Allow generation of 16x64-bit bursts " end="16" id="BURST_SIZE_EXPAND" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="RESERVE FIELD" end="15" id="VP_CLK_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Streaming mode 0:  Disable  1:  Enable " end="14" id="STREAMING" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Not Posted Writes 0:  Disable  1:  Enable " end="13" id="NON_POSTED_WRITE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="          RESERVE FIELD" end="12" id="RES8" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="11" description="RESERVE FIELD" end="11" id="VP_ONLY_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Indicates if 64-bit or 32-bit streaming burst is used. Valid only if CSI2_CTRL.STREAMING=1 0:  64-bit streaming burst is used; byte enable pattern is 0xFF  1:  32-bit streaming burst is used; byte enable pattern is 0x0F " end="10" id="STREAMING_32_BIT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="RESERVE FIELD" end="8" id="VP_OUT_CTRL" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="7" description="Enables the debug mode. 0:  Disable  1:  Enable " end="7" id="DBG_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Sets the DMA burst size on the L3 interconnect. 0x0:  1x64 OCP writes  0x1:  2x64 OCP writes  0x2:  4x64 OCP writes  0x3:  8x64 OCP writes " end="5" id="BURST_SIZE" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="4" description="Select endianness for YUV422 8 bit and YUV420 legacy formats. 0:  Use native MIPI CSI2 endianness:  Little endian for all formats except for YUV422 8b and YUV420 Legacy which a big endian.  1:  Store all pixel formats little endian. " end="4" id="ENDIANNESS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Set the modality in which IF_EN works. 0:  If IF_EN = 0 the interface is disabled immediately.  1:  If IF_EN = 1 the interface is disabled after all FEC sync code have been received for the active contexts. " end="3" id="FRAME" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Enables the Error Correction Code check for the received header (short and long packets for all virtual channel ids). 0:  Disabled  1:  Enabled " end="2" id="ECC_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="          RESERVE FIELD" end="1" id="SECURE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Enables the physical interface to the module. 0:  The interface is disabled. If FRAME = 0, it is disabled immediately. If FRAME = 1, it is disabled when each context has received the FEC sync code.  1:  The interface is enabled immediately, the data acquisition starts on the next FSC sync code.  Writing '1' to this register when the current value is '0' has the effect to clear the output FIFO. The pixel data of the following frame will be written in the PING buffer, i.e., the CSI2_CTX_CTRL.PING_PONG bits are reset to '0' as well. " end="0" id="IF_EN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_DBG_H" description="         DEBUG REGISTER (Header)   This register provides a way to debug the CSI2 RECEIVER   module with no image sensor connected to the module. The   debug mode is enabled by CSI2_CTRL.DBG_EN. Only full 32-bit   values shall be written. The register is " id="CSI2_DBG_H" offset="0x44" width="32">
    
  <bitfield begin="31" description=" 32-bit input value.    " end="0" id="DBG" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="CSI2_GNQ" description="         GENERIC PARAMETER REGISTER   This register provide a way to read the generic parameters   used in the design.   " id="CSI2_GNQ" offset="0x48" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="6" id="RES9" rwaccess="R" width="26"></bitfield>
    
  <bitfield begin="5" description="Output FIFO size in multiple of 68 bits. Read 0x2:  8x 68 bits  Read 0x3:  16x 68 bits  Read 0x4:  32x 68 bits  Read 0x5:  64x 68 bits  Read 0x6:  128 x 68 bits  Read 0x7:  256 x 68 bits  " end="2" id="FIFODEPTH" rwaccess="R" width="4"></bitfield>
    
  <bitfield begin="1" description="Number of contexts supported by the module. Read 0x0:  1 Context  Read 0x1:  2 Contexts  Read 0x2:  4 Contexts  Read 0x3:  8 Contexts " end="0" id="NBCONTEXTS" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="CSI2_COMPLEXIO_CFG2" description="         COMPLEX IO CONFIGURATION REGISTER for the complex IO #2   This register contains the lane configuration for the order   and position of the lanes (clock and data) and the polarity   order for the control of the PHY differential signals in   addit" id="CSI2_COMPLEXIO_CFG2" offset="0x4C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="31" id="RES10" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="30" description="RESERVE FIELD" end="30" id="RESET_CTRL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="RESERVE FIELD" end="29" id="RESET_DONE" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="28" description="RESERVE FIELD" end="27" id="PWR_CMD" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="26" description="RESERVE FIELD" end="25" id="PWR_STATUS" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="24" description="RESERVE FIELD" end="24" id="PWR_AUTO" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="RESERVE FIELD" end="20" id="RES11" rwaccess="R" width="4"></bitfield>
    
  <bitfield begin="19" description="RESERVE FIELD" end="19" id="DATA4_POL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="RESERVE FIELD" end="16" id="DATA4_POSITION" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="15" description="RESERVE FIELD" end="15" id="DATA3_POL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="RESERVE FIELD" end="12" id="DATA3_POSITION" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="11" description="RESERVE FIELD" end="11" id="DATA2_POL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="RESERVE FIELD" end="8" id="DATA2_POSITION" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="7" description="RESERVE FIELD" end="7" id="DATA1_POL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="RESERVE FIELD" end="4" id="DATA1_POSITION" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="3" description="RESERVE FIELD" end="3" id="CLOCK_POL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="RESERVE FIELD" end="0" id="CLOCK_POSITION" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="CSI2_COMPLEXIO_CFG1" description="         COMPLEXIO CONFIGURATION REGISTER for the complex IO #1   This register contains the lane configuration for the order   and position of the lanes (clock and data) and the polarity   order for the control of the PHY differential signals in   additi" id="CSI2_COMPLEXIO_CFG1" offset="0x50" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="31" id="RES12" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="30" description="Controls the reset of the complex IO 0:  Complex IO reset active.  1:  Complex IO reset de-asserted.    " end="30" id="RESET_CTRL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="Internal reset monitoring of the power domain using the PPI byte clock from the complex io Read 0:  Internal module reset is on going.  Read 1:  Reset completed.  " end="29" id="RESET_DONE" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="28" description="Command for power control of the complex io 0x0:  Command to change to OFF state  0x1:  Command to change to ON state  0x2:  Command to change to Ultra Low Power state  " end="27" id="PWR_CMD" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="26" description="Status of the power control of the complex io Read 0x0:  Complex IO in OFF state  Read 0x1:  Complex IO in ON state  Read 0x2:  Complex IO in Ultra Low Power state  " end="25" id="PWR_STATUS" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="24" description="Automatic switch between ULP and ON states based on ULPM signals from complex iO 0:  Disable  1:  Enable  " end="24" id="PWR_AUTO" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="          RESERVE FIELD" end="20" id="RES13" rwaccess="R" width="4"></bitfield>
    
  <bitfield begin="19" description="+/- differential pin order of DATA lane 4. 0:  +/- pin order  1:  -/+ pin order  " end="19" id="DATA4_POL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="Position and order of the DATA  lane 4. The values 6 and 7 are reserved. 0x0:  Not used/connected  0x1:  Data lane 4 is at the position 1.  0x2:  Data lane 4 is at the position 2.  0x3:  Data lane 4 is at the position 3.  0x4:  Data lane 4 is at the position 4.  0x5:  Data lane 4  is at the position 5.  " end="16" id="DATA4_POSITION" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="15" description="+/- differential pin order of DATA lane 3. 0:  +/- pin order  1:  -/+ pin order  " end="15" id="DATA3_POL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Position and order of the DATA  lane 3. The values 6 and 7 are reserved. 0x0:  Not used/connected  0x1:  Data lane 3 is at the position 1.  0x2:  Data lane 3 is at the position 2.  0x3:  Data lane 3 is at the position 3.  0x4:  Data lane 3 is at the position 4.  0x5:  Data lane 3  is at the position 5.  " end="12" id="DATA3_POSITION" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="11" description="+/- differential pin order of DATA lane 2. 0:  +/- pin order  1:  -/+ pin order  " end="11" id="DATA2_POL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Position and order of the DATA  lane 2. The values 6 and 7 are reserved. 0x0:  Not used/connected  0x1:  Data lane 2 is at the position 1.  0x2:  Data lane 2 is at the position 2.  0x3:  Data lane 2 is at the position 3.  0x4:  Data lane 2 is at the position 4.  0x5:  Data lane 2  is at the position 5.  " end="8" id="DATA2_POSITION" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="7" description="+/- differential pin order of DATA lane 1. 0:  +/- pin order  1:  -/+ pin order  " end="7" id="DATA1_POL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Position and order of the DATA  lane 1. 0, 6 and 7 are reserved. The data lane 1 is always present. 0x1:  Data lane 1 is at the position 1.  0x2:  Data lane 1 is at the position 2.  0x3:  Data lane 1 is at the position 3.  0x4:  Data lane 1 is at the position 4.  0x5:  Data lane 1  is at the position 5.  " end="4" id="DATA1_POSITION" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="3" description="+/- differential pin order of CLOCK lane. 0:  +/- pin order  1:  -/+ pin order  " end="3" id="CLOCK_POL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Position and order of the CLOCK lane. 0, 6 and 7 are reserved. The clock lane is always present. 0x1:  Clock lane is at the position 1.  0x2:  Clock lane is at the position 2.  0x3:  Clock lane is at the position 3.  0x4:  Clock lane is at the position 4.  0x5:  Clock lane is at the position 5.  " end="0" id="CLOCK_POSITION" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="CSI2_COMPLEXIO1_IRQSTATUS" description="         INTERRUPT STATUS REGISTER - All errors from complex IO #1   " id="CSI2_COMPLEXIO1_IRQSTATUS" offset="0x54" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="27" id="RES14" rwaccess="R" width="5"></bitfield>
    
  <bitfield begin="26" description="At least one of the active lanes has exit the ULPM 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW   W1toClr)   " end="26" id="STATEALLULPMEXIT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="All active lanes are entering in ULPM. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="25" id="STATEALLULPMENTER" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Lane #5 in Ultra Low Power Mode 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="24" id="STATEULPM5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="Lane #4 in Ultra Low Power Mode 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="23" id="STATEULPM4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="22" description="Lane #3 in Ultra Low Power Mode 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="22" id="STATEULPM3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="21" description="Lane #2 in Ultra Low Power Mode 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="21" id="STATEULPM2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="20" description="Lane #1 in Ultra Low Power Mode 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="20" id="STATEULPM1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="Control error for lane #5 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="19" id="ERRCONTROL5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="Control error for lane #4 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="18" id="ERRCONTROL4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="Control error for lane #3 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="17" id="ERRCONTROL3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Control error for lane #2 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="16" id="ERRCONTROL2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="Control error for lane #1 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="15" id="ERRCONTROL1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Escape entry error for lane #5 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="14" id="ERRESC5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Escape entry error for lane #4 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="13" id="ERRESC4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Escape entry error for lane #3 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="12" id="ERRESC3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Escape entry error for lane #2 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="11" id="ERRESC2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Escape entry error for lane #1 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="10" id="ERRESC1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Start of transmission sync error for lane #5 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="9" id="ERRSOTSYNCHS5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Start of transmission sync error for lane #4 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="8" id="ERRSOTSYNCHS4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Start of transmission sync error for lane #3 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="7" id="ERRSOTSYNCHS3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Start of transmission sync error for lane #2 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="6" id="ERRSOTSYNCHS2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description=" Start of transmission sync error for lane #1 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="5" id="ERRSOTSYNCHS1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Start of transmission error for lane #5 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="4" id="ERRSOTHS5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Start of transmission error for lane #4 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="3" id="ERRSOTHS4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Start of transmission error for lane #3 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="2" id="ERRSOTHS3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Start of transmission error for lane #2 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="1" id="ERRSOTHS2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Start of transmission error for lane #1 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="0" id="ERRSOTHS1" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_COMPLEXIO2_IRQSTATUS" description="         INTERRUPT STATUS REGISTER - All errors from complex IO #2   " id="CSI2_COMPLEXIO2_IRQSTATUS" offset="0x58" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="27" id="RES15" rwaccess="R" width="5"></bitfield>
    
  <bitfield begin="26" description="RESERVE FIELD" end="26" id="STATEALLULPMEXIT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="RESERVE FIELD" end="25" id="STATEALLULPMENTER" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="RESERVE FIELD" end="24" id="STATEULPM5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="RESERVE FIELD" end="23" id="STATEULPM4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="22" description="RESERVE FIELD" end="22" id="STATEULPM3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="21" description="RESERVE FIELD" end="21" id="STATEULPM2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="20" description="RESERVE FIELD" end="20" id="STATEULPM1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="RESERVE FIELD" end="19" id="ERRCONTROL5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="RESERVE FIELD" end="18" id="ERRCONTROL4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="RESERVE FIELD" end="17" id="ERRCONTROL3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="RESERVE FIELD" end="16" id="ERRCONTROL2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="RESERVE FIELD" end="15" id="ERRCONTROL1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="RESERVE FIELD" end="14" id="ERRESC5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="RESERVE FIELD" end="13" id="ERRESC4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="RESERVE FIELD" end="12" id="ERRESC3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="RESERVE FIELD" end="11" id="ERRESC2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="RESERVE FIELD" end="10" id="ERRESC1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="RESERVE FIELD" end="9" id="ERRSOTSYNCHS5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="RESERVE FIELD" end="8" id="ERRSOTSYNCHS4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="RESERVE FIELD" end="7" id="ERRSOTSYNCHS3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="RESERVE FIELD" end="6" id="ERRSOTSYNCHS2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="RESERVE FIELD" end="5" id="ERRSOTSYNCHS1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="RESERVE FIELD" end="4" id="ERRSOTHS5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="RESERVE FIELD" end="3" id="ERRSOTHS4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="RESERVE FIELD" end="2" id="ERRSOTHS3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="RESERVE FIELD" end="1" id="ERRSOTHS2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="RESERVE FIELD" end="0" id="ERRSOTHS1" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_SHORT_PACKET" description="         SHORT PACKET INFORMATION -   This register sets the 24-bit DATA_ID + Short Packet Data   Field when the data type is between 0x8 and x0F   " id="CSI2_SHORT_PACKET" offset="0x5C" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="24" id="RES16" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="23" description="         Short Packet information: DATA ID + DATA FIELD     " end="0" id="SHORT_PACKET" rwaccess="R" width="24"></bitfield>
  </register>
  
  
  <register acronym="CSI2_COMPLEXIO1_IRQENABLE" description="         INTERRUPT ENABLE REGISTER - All errors from complex IO #1   " id="CSI2_COMPLEXIO1_IRQENABLE" offset="0x60" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="27" id="RES17" rwaccess="R" width="5"></bitfield>
    
  <bitfield begin="26" description="At least one of the active lanes has exit the ULPM 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="26" id="STATEALLULPMEXIT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="All active lanes are entering in ULPM. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="25" id="STATEALLULPMENTER" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Lane #5 in Ultra Low Power Mode 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="24" id="STATEULPM5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="Lane #4 in Ultra Low Power Mode 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="23" id="STATEULPM4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="22" description="Lane #3 in Ultra Low Power Mode 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="22" id="STATEULPM3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="21" description="Lane #2 in Ultra Low Power Mode 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="21" id="STATEULPM2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="20" description="Lane #1 in Ultra Low Power Mode 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="20" id="STATEULPM1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="Control error for lane #5 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="19" id="ERRCONTROL5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="Control error for lane #4 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="18" id="ERRCONTROL4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="Control error for lane #3 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="17" id="ERRCONTROL3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Control error for lane #2 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="16" id="ERRCONTROL2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="Control error for lane #1 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="15" id="ERRCONTROL1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Escape entry error for lane #5 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="14" id="ERRESC5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Escape entry error for lane #4 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="13" id="ERRESC4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Escape entry error for lane #3 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="12" id="ERRESC3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Escape entry error for lane #2 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="11" id="ERRESC2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Escape entry error for lane #1 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="10" id="ERRESC1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Start of transmission sync error for lane #5 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="9" id="ERRSOTSYNCHS5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Start of transmission sync error for lane #4 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="8" id="ERRSOTSYNCHS4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Start of transmission sync error for lane #3 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="7" id="ERRSOTSYNCHS3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Start of transmission sync error for lane #2 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="6" id="ERRSOTSYNCHS2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Start of transmission sync error for lane #1 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="5" id="ERRSOTSYNCHS1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Start of transmission error for lane #5 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="4" id="ERRSOTHS5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Start of transmission error for lane #4 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="3" id="ERRSOTHS4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Start of transmission error for lane #3 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="2" id="ERRSOTHS3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Start of transmission error for lane #2 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="1" id="ERRSOTHS2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Start of transmission error for lane #1 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="0" id="ERRSOTHS1" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_COMPLEXIO2_IRQENABLE" description="         INTERRUPT ENABLE REGISTER - All errors from complex IO #2   " id="CSI2_COMPLEXIO2_IRQENABLE" offset="0x64" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="27" id="RES18" rwaccess="R" width="5"></bitfield>
    
  <bitfield begin="26" description="RESERVE FIELD" end="26" id="STATEALLULPMEXIT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="RESERVE FIELD" end="25" id="STATEALLULPMENTER" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="RESERVE FIELD" end="24" id="STATEULPM5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="RESERVE FIELD" end="23" id="STATEULPM4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="22" description="RESERVE FIELD" end="22" id="STATEULPM3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="21" description="RESERVE FIELD" end="21" id="STATEULPM2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="20" description="RESERVE FIELD" end="20" id="STATEULPM1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="RESERVE FIELD" end="19" id="ERRCONTROL5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="RESERVE FIELD" end="18" id="ERRCONTROL4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="RESERVE FIELD" end="17" id="ERRCONTROL3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="RESERVE FIELD" end="16" id="ERRCONTROL2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="RESERVE FIELD" end="15" id="ERRCONTROL1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="RESERVE FIELD" end="14" id="ERRESC5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="RESERVE FIELD" end="13" id="ERRESC4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="RESERVE FIELD" end="12" id="ERRESC3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="RESERVE FIELD" end="11" id="ERRESC2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="RESERVE FIELD" end="10" id="ERRESC1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="RESERVE FIELD" end="9" id="ERRSOTSYNCHS5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="RESERVE FIELD" end="8" id="ERRSOTSYNCHS4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="RESERVE FIELD" end="7" id="ERRSOTSYNCHS3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="RESERVE FIELD" end="6" id="ERRSOTSYNCHS2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="RESERVE FIELD" end="5" id="ERRSOTSYNCHS1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="RESERVE FIELD" end="4" id="ERRSOTHS5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="RESERVE FIELD" end="3" id="ERRSOTHS4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="RESERVE FIELD" end="2" id="ERRSOTHS3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="RESERVE FIELD" end="1" id="ERRSOTHS2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="RESERVE FIELD" end="0" id="ERRSOTHS1" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_DBG_P" description="         DEBUG REGISTER (Payload)   This register provides a way to debug the CSI2 RECEIVER   module with no image sensor connected to the module. The   debug mode is enabled by CSI2_CTRL.DBG_EN. Only full 32-bit   values shall be written. The register is" id="CSI2_DBG_P" offset="0x68" width="32">
    
  <bitfield begin="31" description="         32-bit input value.    " end="0" id="DBG" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="CSI2_TIMING" description="         TIMING REGISTER   This register controls the CSI2 RECEIVER module. This   register shall not be modified while CSI2_CTRL.IF_EN is set   to '1'.   It is used to indicate the number of L3 cycles for the Stop   State monitoring.   " id="CSI2_TIMING" offset="0x6C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="31" id="FORCE_RX_MODE_IO2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="RESERVE FIELD" end="30" id="STOP_STATE_X16_IO2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="RESERVE FIELD" end="29" id="STOP_STATE_X4_IO2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="28" description="RESERVE FIELD" end="16" id="STOP_STATE_COUNTER_IO2" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="15" description="Control of ForceRxMode signal 0:  De-assertion of ForceRxMode. The HW reset the bit at the end of the Force RX Mode assertion. The SW can reset the bit in order to stop the assertion of the ForceRXMode signal prior to the completion of the period.  1:  Assertion of ForceRxMode  " end="15" id="FORCE_RX_MODE_IO1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Multiplication factor for the number of L3 cycles defined in STOP_STATE_COUNTER bit-field 0:  The number of L3 cycles defined in STOP_STATE _COUNTER is multiplied by 1x  1:  The number of L3 cycles defined in STOP_STATE _COUNTER is multiplied by 16x  " end="14" id="STOP_STATE_X16_IO1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Multiplication factor for the number of L3 cycles defined in STOP_STATE_COUNTER bit-field 0:  The number of L3 cycles defined in STOP_STATE _COUNTER is multiplied by 1x  1:  The number of L3 cycles defined in STOP_STATE _COUNTER is multiplied by 4x  " end="13" id="STOP_STATE_X4_IO1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Stop State counter for monitoring. It indicates the number of L3 to monitor for Stop State before de-asserting ForceRxMode (Complex IO #1). The value is from 0 to 8191. " end="0" id="STOP_STATE_COUNTER_IO1" rwaccess="RW" width="13"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX0_CTRL1" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code.   " id="CSI2_CTX0_CTRL1" offset="0x70" width="32">
    
  <bitfield begin="31" description="Allows swapping bytes two by two in the payload data. It doesn't affect  - short packets - long packet header or footers - CRC calculation The purpose is to by swap data send to the OCP port and/or video port 0:  Disabled  1:  Enabled  " end="31" id="BYTESWAP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Enables the generic mode. 0:  Disabled. Data is received according to CSI2_CTX_CTRL1.FORMAT and the long packet code transmitted in the MIPI stream is used.  1:  Enabled. Data is received according to CSI2_CTX_CTRL1.FORMAT and the long packet code transmitted in the MIPI stream is ignored.  " end="30" id="GENERIC" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="          RESERVE FIELD" end="29" id="RES19" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="28" description="Enable horizontal downscaling by a factor of two. Applies to RAW data when transcoding is enabled. Must be disabled when transcoding is disabled. 0:  Disable  1:  Enable  " end="28" id="HSCALE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Enables image transcoding. When this features is enabled: - the data format from the camera is defined by the FORMAT register - the format after transcode is defined by the TRANSCODE register. The memory storage / video port formats is defined by the TRANSCODE register 0x0:  Feature disabled.  0x1:  Outputs DPCM compressed RAW10 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data  0x2:  Outputs DPCM compressed RAW12 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data  0x3:  Outputs ALAW compressed RAW10 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data.  0x4:  Outputs uncompressed RAW8 data. Data in memory is organized as regular RAW8 data  0x5:  Outputs uncompressed RAW10 data. Data in memory is organized as regular RAW10+EXP16 data  0x6:  Outputs uncompressed RAW10 data. Data in memory is organized as regular packed RAW10 data  0x7:  Outputs uncompressed RAW12 data. Data in memory is organized as regular RAW12+EXP16 data  0x8:  Outputs uncompressed RAW12 data. Data in memory is organized as regular packed RAW12 data  0x9:  Outputs uncompressed RAW14 data.  " end="24" id="TRANSCODE" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="23" description="Number of FEC to receive between using swap of CSI2_CTX_DAT_PING_ADDR and CSI2_CTX_DAT_PONG_ADDR for the calculation of the address in memory. (shall be used only in interlace mode, otherwise set to '1')" end="16" id="FEC_NUMBER" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Sets the number of frame to acquire. Once the frame acquisition starts, the COUNT value is decremented after every frame. When COUNT reaches 0, the FRAME_NUMBER_IRQ interrupt is triggered and CTX_EN is set to '0'. Writes to this bit field are controlled by the COUNT_UNLOCK bit. During the same OCP write access , the bit-field COUNT_UNLOCK shall be written in addition to COUNT bit-field in order to change the COUNT value.  COUNT can be overwritten dynamically with a new count value.&quot; 0: Infinite number of frames (no count). 1: 1 frame to acquire ... 255: 255 frames to acquire. " end="8" id="COUNT" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Indicates if the end of frame signal shall be asserted at the end of the frame Read 0:  The end of frame signal is not asserted at the end of each frame.  Read 1:  The end of frame signal is asserted at the end of each frame. " end="7" id="EOF_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Indicates if the end of line signal shall be asserted at the end of the line. Read 0:  The end of line signal is not asserted at the end of each frame.  Read 1:  The end of line signal is asserted at the end of each frame. " end="6" id="EOL_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Enables the checksum check for the received payload (long packet only). 0:  Disabled  1:  Enabled  " end="5" id="CS_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Unlock writes to the COUNT bit field.  Write 0:  COUNT bit field is locked. Writes have no effect  Write 1:  COUNT bit field is unlocked. Writes are possible. " end="4" id="COUNT_UNLOCK" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="3" description="Indicates whether the PING or PONG destination address (CSI2_CTX_DAT_PING_ADDR or CSI2_CTX_DAT_PONG_ADDR) was used to write the last frame.  This bit field toggles after every FEC_NUMBER FEC sync code received for the current context. Read 0:  PING buffer  Read 1:  PONG buffer " end="3" id="PING_PONG" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="RESERVE FIELD" end="2" id="VP_FORCE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Line modulo configuration 0:  CSI2_CTX_CTRL3.LINE_NUMBER is used once per frame for the generation of the LINE_NUMBER_IRQ.  1:  CSI2_CTX_CTRL3.LINE_NUMBER is used as a modulo number for the generation of the LINE_NUMBER_IRQ (multiple times the interrupt can be generated for each frame) " end="1" id="LINE_MODULO" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Enables the Context 0:  Disabled  1:  Enabled  " end="0" id="CTX_EN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX0_CTRL2" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code (except for VIRTUAL_ID and FORMAT   fields). The change of VIRTUIAL_ID and FORMAT ha" id="CSI2_CTX0_CTRL2" offset="0x74" width="32">
    
  <bitfield begin="31" description="Frame number. The CSI-2 protocol engine extracts the frame number from the SOF short packet sent by the camera. " end="16" id="FRAME" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="          RESERVE FIELD" end="15" id="RES20" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="14" description="Selects the pixel format of USER_DEFINED in FORMAT 0x0:  RAW6  0x1:  RAW7  0x2:  RAW8 (not valid if FORMAT is USER_DEFINED_8_BIT_DATA_TYPE_x_EXP8 with x from 1 to 8)  " end="13" id="USER_DEF_MAPPING" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="12" description="Virtual channel ID 0x0:  Virtual Channel ID 0  0x1:  Virtual Channel ID 1  0x2:  Virtual Channel ID 2  0x3:  Virtual Channel ID 3  " end="11" id="VIRTUAL_ID" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="10" description="Selects the DPCM predictor. 0:  The advanced predictor is used. Not supported for 10 – 8 – 10 algorithm. Performance limited to 1 pixel/cycle.  1:  The simple predictor is used.  " end="10" id="DPCM_PRED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Data format selection. 0x000:  OTHERS (except NULL and BLANKING packets)  0x012:  Embedded 8-bit non-image data (e.g. JPEG)  0x018:  YUV420 8bit  0x019:  YUV420 10bit  0x01A:  YUV420 8bit legacy  0x01C:  YUV420 8bit + CSPS  0x01D:  YUV420 10bit + CSPS  0x01E:  YUV422 8bit  0x01F:  YUV422 10bit  0x022:  RGB565  0x024:  RGB888  0x028:  RAW6  0x029:  RAW7  0x02A:  RAW8  0x02B:  RAW10  0x02C:  RAW12  0x02D:  RAW14  0x033:  RGB666 + EXP32_24   0x040:  USER_DEFINED_8_BIT_DATA_TYPE_1  0x041:  USER_DEFINED_8_BIT_DATA_TYPE_2  0x042:  USER_DEFINED_8_BIT_DATA_TYPE_3  0x043:  USER_DEFINED_8_BIT_DATA_TYPE_4  0x044:  USER_DEFINED_8_BIT_DATA_TYPE_5  0x045:  USER_DEFINED_8_BIT_DATA_TYPE_6  0x046:  USER_DEFINED_8_BIT_DATA_TYPE_7  0x047:  USER_DEFINED_8_BIT_DATA_TYPE_8  0x068:  RAW6 + EXP8  0x069:  RAW7 + EXP8  0x080:  USER_DEFINED_8_BIT_DATA_TYPE_1 + EXP8  0x081:  USER_DEFINED_8_BIT_DATA_TYPE_2 + EXP8  0x082:  USER_DEFINED_8_BIT_DATA_TYPE_3 + EXP8  0x083:  USER_DEFINED_8_BIT_DATA_TYPE_4 + EXP8  0x084:  USER_DEFINED_8_BIT_DATA_TYPE_5 + EXP8  0x085:  USER_DEFINED_8_BIT_DATA_TYPE_6 + EXP8  0x086:  USER_DEFINED_8_BIT_DATA_TYPE_7 + EXP8  0x087:  USER_DEFINED_8_BIT_DATA_TYPE_8 + EXP8  0x09E:  YUV422 8bit + VP  0x0A0:  RGB444 + EXP16  0x0A1:  RGB555 + EXP16  0x0AB:  RAW10 + EXP16  0x0AC:  RAW12 + EXP16  0x0AD:  RAW14 + EXP16  0x0DE:  Same as YUV422 8bit + VP but data  is send as 16-bit wide words to video port. Could be used together with the GENERIC and BYTESWAP features  0x0E3:  RGB666 + EXP32  0x0E4:  RGB888 + EXP32  0x0E8:  RAW6 + DPCM10 + VP  0x12A:  RAW8 + VP  0x12C:  RAW12 + VP  0x12D:  RAW14 + VP  0x12F:  RAW10 + VP  0x140:  USER_DEFINED_8_BIT_DATA_TYPE_1_DPCM12_VP  0x141:  USER_DEFINED_8_BIT_DATA_TYPE_2_DPCM12_VP  0x142:  USER_DEFINED_8_BIT_DATA_TYPE_3_DPCM12_VP  0x143:  USER_DEFINED_8_BIT_DATA_TYPE_4_DPCM12_VP  0x144:  USER_DEFINED_8_BIT_DATA_TYPE_5_DPCM12_VP  0x145:  USER_DEFINED_8_BIT_DATA_TYPE_6_DPCM12_VP  0x146:  USER_DEFINED_8_BIT_DATA_TYPE_7_DPCM12_VP  0x147:  USER_DEFINED_8_BIT_DATA_TYPE_8_DPCM12_VP  0x1C0:  USER_DEFINED_8_BIT_DATA_TYPE_1_DPCM12_EXP16  0x1C1:  USER_DEFINED_8_BIT_DATA_TYPE_2_DPCM12_EXP16  0x1C2:  USER_DEFINED_8_BIT_DATA_TYPE_3_DPCM12_EXP16  0x1C3:  USER_DEFINED_8_BIT_DATA_TYPE_4_DPCM12_EXP16  0x1C4:  USER_DEFINED_8_BIT_DATA_TYPE_5_DPCM12_EXP16  0x1C5:  USER_DEFINED_8_BIT_DATA_TYPE_6_DPCM12_EXP16  0x1C6:  USER_DEFINED_8_BIT_DATA_TYPE_7_DPCM12_EXP16  0x1C7:  USER_DEFINED_8_BIT_DATA_TYPE_8_DPCM12_EXP16  0x229:  RAW7 + DPCM10 + EXP16  0x2A8:  RAW6 + DPCM10 + EXP16  0x2AA:  RAW8 + DPCM10 + EXP16  0x2C0:  USER_DEFINED_8_BIT_DATA_TYPE_1 + DPCM10 + EXP16  0x2C1:  USER_DEFINED_8_BIT_DATA_TYPE_2 + DPCM10 + EXP16  0x2C2:  USER_DEFINED_8_BIT_DATA_TYPE_3 + DPCM10 + EXP16  0x2C3:  USER_DEFINED_8_BIT_DATA_TYPE_4 + DPCM10 + EXP16  0x2C4:  USER_DEFINED_8_BIT_DATA_TYPE_5 + DPCM10 + EXP16  0x2C5:  USER_DEFINED_8_BIT_DATA_TYPE_6 + DPCM10 + EXP16  0x2C6:  USER_DEFINED_8_BIT_DATA_TYPE_7 + DPCM10 + EXP16  0x2C7:  USER_DEFINED_8_BIT_DATA_TYPE_8 + DPCM10 + EXP16  0x329:  RAW7 + DPCM10 + VP  0x32A:  RAW8 + DPCM10 + VP  0x340:  USER_DEFINED_8_BIT_DATA_TYPE_1 + DPCM10 + VP  0x341:  USER_DEFINED_8_BIT_DATA_TYPE_2 + DPCM10 + VP  0x342:  USER_DEFINED_8_BIT_DATA_TYPE_3 + DPCM10 + VP  0x343:  USER_DEFINED_8_BIT_DATA_TYPE_4 + DPCM10 + VP  0x344:  USER_DEFINED_8_BIT_DATA_TYPE_5 + DPCM10 + VP  0x345:  USER_DEFINED_8_BIT_DATA_TYPE_6 + DPCM10 + VP  0x346:  USER_DEFINED_8_BIT_DATA_TYPE_7 + DPCM10 + VP  0x347:  USER_DEFINED_8_BIT_DATA_TYPE_8 + DPCM10 + VP  0x368:  RAW6 DPCM12 + VP  0x369:  RAW7 DPCM12 + EXP16  0x36A:  RAW8 DPCM12 + EXP16  0x3A8:  RAW6 DPCM12 + EXP16  0x3A9:  RAW7 DPCM12 + VP  0x3AA:  RAW8 DPCM12 + VP  " end="0" id="FORMAT" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX0_DAT_OFST" description="         DATA MEM ADDRESS OFFSET REGISTER - Context   This register sets the offset which is applied on the   destination address after each line is written to memory.   This register applies for both CSI2_CTX_DAT_PING_ADDR and   CSI2_CTX_DAT_PONG_ADDR.  " id="CSI2_CTX0_DAT_OFST" offset="0x78" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="17" id="RES21" rwaccess="R" width="15"></bitfield>
    
  <bitfield begin="16" description="Line offset programmed in bytes (signed value 2's complement). If OFST = 0, the data is written contiguously in memory. Otherwise, OFST sets the destination offset between the first pixel of the previous line and the first pixel of the current line. Valid range: -2^17 ~ (2^17-1) " end="5" id="OFST" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="0" id="RES" rwaccess="R" width="5"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX0_DAT_PING_ADDR" description="         DATA MEM PING ADDRESS REGISTER - Context   This register sets the 32-bit memory address where the pixel   data are stored. The destination is double buffered: this   register sets the PING address. Double buffering is enabled   when the addresses" id="CSI2_CTX0_DAT_PING_ADDR" offset="0x7C" width="32">
    
  <bitfield begin="31" description="         27 most significant bits of the 32-bit address.    " end="5" id="ADDR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="0" id="RES" rwaccess="R" width="5"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX0_DAT_PONG_ADDR" description="         DATA MEM PONG ADDRESS REGISTER - Context   This register sets the 32-bit memory address where the pixel   data are stored. The destination is double buffered: this   register sets the PONG address. Double buffering is enabled   when the addresses" id="CSI2_CTX0_DAT_PONG_ADDR" offset="0x80" width="32">
    
  <bitfield begin="31" description="         27 most significant bits of the 32-bit address.    " end="5" id="ADDR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="0" id="RES" rwaccess="R" width="5"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX0_IRQENABLE" description="         INTERRUPT ENABLE REGISTER - Context   This register regroups all the events related to Context.   " id="CSI2_CTX0_IRQENABLE" offset="0x84" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="9" id="RES22" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="Context - ECC has been used to correct the only 1-bit error (long packet only). 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="8" id="ECC_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Context - Line number is reached. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="7" id="LINE_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Context - Frame counter reached. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="6" id="FRAME_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Context - Check-Sum of the payload mismatch detection 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="5" id="CS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="4" id="RES23" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Context - Line end sync code detection.  0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="3" id="LE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Context - Line start sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="2" id="LS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Context - Frame end sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="1" id="FE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Context - Frame start sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="0" id="FS_IRQ" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX0_IRQSTATUS" description="         INTERRUPT STATUS REGISTER - Context   This register regroups all the events related to Context.   " id="CSI2_CTX0_IRQSTATUS" offset="0x88" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="9" id="RES24" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="Context - ECC has been used to do the correction of the only 1-bit error status (long packet only). 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  . - (RW W1toClr)   " end="8" id="ECC_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Contexc - Line number reached status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="7" id="LINE_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Context - Frame counter reached status 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.     - (RW W1toClr)   " end="6" id="FRAME_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Context - Check-Sum mismatch status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="5" id="CS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="4" id="RES25" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Context - Line end sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  .   - (RW W1toClr)   " end="3" id="LE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Context - Line start sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW   W1toClr)   " end="2" id="LS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Context - Frame end sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW   W1toClr)   " end="1" id="FE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Context - Frame start sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW   W1toClr)   " end="0" id="FS_IRQ" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX0_CTRL3" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code.   " id="CSI2_CTX0_CTRL3" offset="0x8C" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description="When TRANSCODE=0 Alpha value for RGB888, RGB666 and RBG444. When TRANSCODE=1 and BYS=1 Image width, in pixels, acquired from the BYS port." end="16" id="ALPHA" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="15" description="Line number for the interrupt generation" end="0" id="LINE_NUMBER" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX1_CTRL1" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code.   " id="CSI2_CTX1_CTRL1" offset="0x90" width="32">
    
  <bitfield begin="31" description="Allows swapping bytes two by two in the payload data. It doesn't affect  - short packets - long packet header or footers - CRC calculation The purpose is to by swap data send to the OCP port and/or video port 0:  Disabled  1:  Enabled  " end="31" id="BYTESWAP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Enables the generic mode. 0:  Disabled. Data is received according to CSI2_CTX_CTRL1.FORMAT and the long packet code transmitted in the MIPI stream is used.  1:  Enabled. Data is received according to CSI2_CTX_CTRL1.FORMAT and the long packet code transmitted in the MIPI stream is ignored.  " end="30" id="GENERIC" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="          RESERVE FIELD" end="29" id="RES19" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="28" description="Enable horizontal downscaling by a factor of two. Applies to RAW data when transcoding is enabled. Must be disabled when transcoding is disabled. 0:  Disable  1:  Enable  " end="28" id="HSCALE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Enables image transcoding. When this features is enabled: - the data format from the camera is defined by the FORMAT register - the format after transcode is defined by the TRANSCODE register. The memory storage / video port formats is defined by the TRANSCODE register 0x0:  Feature disabled.  0x1:  Outputs DPCM compressed RAW10 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data  0x2:  Outputs DPCM compressed RAW12 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data  0x3:  Outputs ALAW compressed RAW10 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data.  0x4:  Outputs uncompressed RAW8 data. Data in memory is organized as regular RAW8 data  0x5:  Outputs uncompressed RAW10 data. Data in memory is organized as regular RAW10+EXP16 data  0x6:  Outputs uncompressed RAW10 data. Data in memory is organized as regular packed RAW10 data  0x7:  Outputs uncompressed RAW12 data. Data in memory is organized as regular RAW12+EXP16 data  0x8:  Outputs uncompressed RAW12 data. Data in memory is organized as regular packed RAW12 data  0x9:  Outputs uncompressed RAW14 data.  " end="24" id="TRANSCODE" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="23" description="Number of FEC to receive between using swap of CSI2_CTX_DAT_PING_ADDR and CSI2_CTX_DAT_PONG_ADDR for the calculation of the address in memory. (shall be used only in interlace mode, otherwise set to '1')" end="16" id="FEC_NUMBER" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Sets the number of frame to acquire. Once the frame acquisition starts, the COUNT value is decremented after every frame. When COUNT reaches 0, the FRAME_NUMBER_IRQ interrupt is triggered and CTX_EN is set to '0'. Writes to this bit field are controlled by the COUNT_UNLOCK bit. During the same OCP write access , the bit-field COUNT_UNLOCK shall be written in addition to COUNT bit-field in order to change the COUNT value.  COUNT can be overwritten dynamically with a new count value.&quot; 0: Infinite number of frames (no count). 1: 1 frame to acquire ... 255: 255 frames to acquire. " end="8" id="COUNT" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Indicates if the end of frame signal shall be asserted at the end of the frame Read 0:  The end of frame signal is not asserted at the end of each frame.  Read 1:  The end of frame signal is asserted at the end of each frame. " end="7" id="EOF_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Indicates if the end of line signal shall be asserted at the end of the line. Read 0:  The end of line signal is not asserted at the end of each frame.  Read 1:  The end of line signal is asserted at the end of each frame. " end="6" id="EOL_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Enables the checksum check for the received payload (long packet only). 0:  Disabled  1:  Enabled  " end="5" id="CS_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Unlock writes to the COUNT bit field.  Write 0:  COUNT bit field is locked. Writes have no effect  Write 1:  COUNT bit field is unlocked. Writes are possible. " end="4" id="COUNT_UNLOCK" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="3" description="Indicates whether the PING or PONG destination address (CSI2_CTX_DAT_PING_ADDR or CSI2_CTX_DAT_PONG_ADDR) was used to write the last frame.  This bit field toggles after every FEC_NUMBER FEC sync code received for the current context. Read 0:  PING buffer  Read 1:  PONG buffer " end="3" id="PING_PONG" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="RESERVE FIELD" end="2" id="VP_FORCE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Line modulo configuration 0:  CSI2_CTX_CTRL3.LINE_NUMBER is used once per frame for the generation of the LINE_NUMBER_IRQ.  1:  CSI2_CTX_CTRL3.LINE_NUMBER is used as a modulo number for the generation of the LINE_NUMBER_IRQ (multiple times the interrupt can be generated for each frame) " end="1" id="LINE_MODULO" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Enables the Context 0:  Disabled  1:  Enabled  " end="0" id="CTX_EN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX1_CTRL2" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code (except for VIRTUAL_ID and FORMAT   fields). The change of VIRTUIAL_ID and FORMAT ha" id="CSI2_CTX1_CTRL2" offset="0x94" width="32">
    
  <bitfield begin="31" description="Frame number. The CSI-2 protocol engine extracts the frame number from the SOF short packet sent by the camera. " end="16" id="FRAME" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="          RESERVE FIELD" end="15" id="RES20" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="14" description="Selects the pixel format of USER_DEFINED in FORMAT 0x0:  RAW6  0x1:  RAW7  0x2:  RAW8 (not valid if FORMAT is USER_DEFINED_8_BIT_DATA_TYPE_x_EXP8 with x from 1 to 8)  " end="13" id="USER_DEF_MAPPING" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="12" description="Virtual channel ID 0x0:  Virtual Channel ID 0  0x1:  Virtual Channel ID 1  0x2:  Virtual Channel ID 2  0x3:  Virtual Channel ID 3  " end="11" id="VIRTUAL_ID" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="10" description="Selects the DPCM predictor. 0:  The advanced predictor is used. Not supported for 10 – 8 – 10 algorithm. Performance limited to 1 pixel/cycle.  1:  The simple predictor is used.  " end="10" id="DPCM_PRED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Data format selection. 0x000:  OTHERS (except NULL and BLANKING packets)  0x012:  Embedded 8-bit non-image data (e.g. JPEG)  0x018:  YUV420 8bit  0x019:  YUV420 10bit  0x01A:  YUV420 8bit legacy  0x01C:  YUV420 8bit + CSPS  0x01D:  YUV420 10bit + CSPS  0x01E:  YUV422 8bit  0x01F:  YUV422 10bit  0x022:  RGB565  0x024:  RGB888  0x028:  RAW6  0x029:  RAW7  0x02A:  RAW8  0x02B:  RAW10  0x02C:  RAW12  0x02D:  RAW14  0x033:  RGB666 + EXP32_24   0x040:  USER_DEFINED_8_BIT_DATA_TYPE_1  0x041:  USER_DEFINED_8_BIT_DATA_TYPE_2  0x042:  USER_DEFINED_8_BIT_DATA_TYPE_3  0x043:  USER_DEFINED_8_BIT_DATA_TYPE_4  0x044:  USER_DEFINED_8_BIT_DATA_TYPE_5  0x045:  USER_DEFINED_8_BIT_DATA_TYPE_6  0x046:  USER_DEFINED_8_BIT_DATA_TYPE_7  0x047:  USER_DEFINED_8_BIT_DATA_TYPE_8  0x068:  RAW6 + EXP8  0x069:  RAW7 + EXP8  0x080:  USER_DEFINED_8_BIT_DATA_TYPE_1 + EXP8  0x081:  USER_DEFINED_8_BIT_DATA_TYPE_2 + EXP8  0x082:  USER_DEFINED_8_BIT_DATA_TYPE_3 + EXP8  0x083:  USER_DEFINED_8_BIT_DATA_TYPE_4 + EXP8  0x084:  USER_DEFINED_8_BIT_DATA_TYPE_5 + EXP8  0x085:  USER_DEFINED_8_BIT_DATA_TYPE_6 + EXP8  0x086:  USER_DEFINED_8_BIT_DATA_TYPE_7 + EXP8  0x087:  USER_DEFINED_8_BIT_DATA_TYPE_8 + EXP8  0x09E:  YUV422 8bit + VP  0x0A0:  RGB444 + EXP16  0x0A1:  RGB555 + EXP16  0x0AB:  RAW10 + EXP16  0x0AC:  RAW12 + EXP16  0x0AD:  RAW14 + EXP16  0x0DE:  Same as YUV422 8bit + VP but data  is send as 16-bit wide words to video port. Could be used together with the GENERIC and BYTESWAP features  0x0E3:  RGB666 + EXP32  0x0E4:  RGB888 + EXP32  0x0E8:  RAW6 + DPCM10 + VP  0x12A:  RAW8 + VP  0x12C:  RAW12 + VP  0x12D:  RAW14 + VP  0x12F:  RAW10 + VP  0x140:  USER_DEFINED_8_BIT_DATA_TYPE_1_DPCM12_VP  0x141:  USER_DEFINED_8_BIT_DATA_TYPE_2_DPCM12_VP  0x142:  USER_DEFINED_8_BIT_DATA_TYPE_3_DPCM12_VP  0x143:  USER_DEFINED_8_BIT_DATA_TYPE_4_DPCM12_VP  0x144:  USER_DEFINED_8_BIT_DATA_TYPE_5_DPCM12_VP  0x145:  USER_DEFINED_8_BIT_DATA_TYPE_6_DPCM12_VP  0x146:  USER_DEFINED_8_BIT_DATA_TYPE_7_DPCM12_VP  0x147:  USER_DEFINED_8_BIT_DATA_TYPE_8_DPCM12_VP  0x1C0:  USER_DEFINED_8_BIT_DATA_TYPE_1_DPCM12_EXP16  0x1C1:  USER_DEFINED_8_BIT_DATA_TYPE_2_DPCM12_EXP16  0x1C2:  USER_DEFINED_8_BIT_DATA_TYPE_3_DPCM12_EXP16  0x1C3:  USER_DEFINED_8_BIT_DATA_TYPE_4_DPCM12_EXP16  0x1C4:  USER_DEFINED_8_BIT_DATA_TYPE_5_DPCM12_EXP16  0x1C5:  USER_DEFINED_8_BIT_DATA_TYPE_6_DPCM12_EXP16  0x1C6:  USER_DEFINED_8_BIT_DATA_TYPE_7_DPCM12_EXP16  0x1C7:  USER_DEFINED_8_BIT_DATA_TYPE_8_DPCM12_EXP16  0x229:  RAW7 + DPCM10 + EXP16  0x2A8:  RAW6 + DPCM10 + EXP16  0x2AA:  RAW8 + DPCM10 + EXP16  0x2C0:  USER_DEFINED_8_BIT_DATA_TYPE_1 + DPCM10 + EXP16  0x2C1:  USER_DEFINED_8_BIT_DATA_TYPE_2 + DPCM10 + EXP16  0x2C2:  USER_DEFINED_8_BIT_DATA_TYPE_3 + DPCM10 + EXP16  0x2C3:  USER_DEFINED_8_BIT_DATA_TYPE_4 + DPCM10 + EXP16  0x2C4:  USER_DEFINED_8_BIT_DATA_TYPE_5 + DPCM10 + EXP16  0x2C5:  USER_DEFINED_8_BIT_DATA_TYPE_6 + DPCM10 + EXP16  0x2C6:  USER_DEFINED_8_BIT_DATA_TYPE_7 + DPCM10 + EXP16  0x2C7:  USER_DEFINED_8_BIT_DATA_TYPE_8 + DPCM10 + EXP16  0x329:  RAW7 + DPCM10 + VP  0x32A:  RAW8 + DPCM10 + VP  0x340:  USER_DEFINED_8_BIT_DATA_TYPE_1 + DPCM10 + VP  0x341:  USER_DEFINED_8_BIT_DATA_TYPE_2 + DPCM10 + VP  0x342:  USER_DEFINED_8_BIT_DATA_TYPE_3 + DPCM10 + VP  0x343:  USER_DEFINED_8_BIT_DATA_TYPE_4 + DPCM10 + VP  0x344:  USER_DEFINED_8_BIT_DATA_TYPE_5 + DPCM10 + VP  0x345:  USER_DEFINED_8_BIT_DATA_TYPE_6 + DPCM10 + VP  0x346:  USER_DEFINED_8_BIT_DATA_TYPE_7 + DPCM10 + VP  0x347:  USER_DEFINED_8_BIT_DATA_TYPE_8 + DPCM10 + VP  0x368:  RAW6 DPCM12 + VP  0x369:  RAW7 DPCM12 + EXP16  0x36A:  RAW8 DPCM12 + EXP16  0x3A8:  RAW6 DPCM12 + EXP16  0x3A9:  RAW7 DPCM12 + VP  0x3AA:  RAW8 DPCM12 + VP  " end="0" id="FORMAT" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX1_DAT_OFST" description="         DATA MEM ADDRESS OFFSET REGISTER - Context   This register sets the offset which is applied on the   destination address after each line is written to memory.   This register applies for both CSI2_CTX_DAT_PING_ADDR and   CSI2_CTX_DAT_PONG_ADDR.  " id="CSI2_CTX1_DAT_OFST" offset="0x98" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="17" id="RES21" rwaccess="R" width="15"></bitfield>
    
  <bitfield begin="16" description="Line offset programmed in bytes (signed value 2's complement). If OFST = 0, the data is written contiguously in memory. Otherwise, OFST sets the destination offset between the first pixel of the previous line and the first pixel of the current line. Valid range: -2^17 ~ (2^17-1) " end="5" id="OFST" rwaccess="RW" width="12"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX1_DAT_PING_ADDR" description="         DATA MEM PING ADDRESS REGISTER - Context   This register sets the 32-bit memory address where the pixel   data are stored. The destination is double buffered: this   register sets the PING address. Double buffering is enabled   when the addresses" id="CSI2_CTX1_DAT_PING_ADDR" offset="0x9C" width="32">
    
  <bitfield begin="31" description="         27 most significant bits of the 32-bit address.    " end="5" id="ADDR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="0" id="RES" rwaccess="R" width="5"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX1_DAT_PONG_ADDR" description="         DATA MEM PONG ADDRESS REGISTER - Context   This register sets the 32-bit memory address where the pixel   data are stored. The destination is double buffered: this   register sets the PONG address. Double buffering is enabled   when the addresses" id="CSI2_CTX1_DAT_PONG_ADDR" offset="0xA0" width="32">
    
  <bitfield begin="31" description="         27 most significant bits of the 32-bit address.    " end="5" id="ADDR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="0" id="RES" rwaccess="R" width="5"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX1_IRQENABLE" description="         INTERRUPT ENABLE REGISTER - Context   This register regroups all the events related to Context.   " id="CSI2_CTX1_IRQENABLE" offset="0xA4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="9" id="RES22" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="Context - ECC has been used to correct the only 1-bit error (long packet only). 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="8" id="ECC_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Context - Line number is reached. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="7" id="LINE_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Context - Frame counter reached. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="6" id="FRAME_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Context - Check-Sum of the payload mismatch detection 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="5" id="CS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="4" id="RES23" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Context - Line end sync code detection.  0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="3" id="LE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Context - Line start sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="2" id="LS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Context - Frame end sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="1" id="FE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Context - Frame start sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="0" id="FS_IRQ" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX1_IRQSTATUS" description="         INTERRUPT STATUS REGISTER - Context   This register regroups all the events related to Context.   " id="CSI2_CTX1_IRQSTATUS" offset="0xA8" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="9" id="RES24" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="Context - ECC has been used to do the correction of the only 1-bit error status (long packet only). 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  . - (RW W1toClr)   " end="8" id="ECC_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Contexc - Line number reached status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="7" id="LINE_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Context - Frame counter reached status 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.     - (RW W1toClr)   " end="6" id="FRAME_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Context - Check-Sum mismatch status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="5" id="CS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="4" id="RES25" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Context - Line end sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  .   - (RW W1toClr)   " end="3" id="LE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Context - Line start sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW   W1toClr)   " end="2" id="LS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Context - Frame end sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW   W1toClr)   " end="1" id="FE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Context - Frame start sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW   W1toClr)   " end="0" id="FS_IRQ" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX1_CTRL3" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code.   " id="CSI2_CTX1_CTRL3" offset="0xAC" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description="When TRANSCODE=0 Alpha value for RGB888, RGB666 and RBG444. When TRANSCODE=1 and BYS=1 Image width, in pixels, acquired from the BYS port." end="16" id="ALPHA" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="15" description="Line number for the interrupt generation" end="0" id="LINE_NUMBER" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX2_CTRL1" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code.   " id="CSI2_CTX2_CTRL1" offset="0xB0" width="32">
    
  <bitfield begin="31" description="Allows swapping bytes two by two in the payload data. It doesn't affect  - short packets - long packet header or footers - CRC calculation The purpose is to by swap data send to the OCP port and/or video port 0:  Disabled  1:  Enabled  " end="31" id="BYTESWAP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Enables the generic mode. 0:  Disabled. Data is received according to CSI2_CTX_CTRL1.FORMAT and the long packet code transmitted in the MIPI stream is used.  1:  Enabled. Data is received according to CSI2_CTX_CTRL1.FORMAT and the long packet code transmitted in the MIPI stream is ignored.  " end="30" id="GENERIC" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="          RESERVE FIELD" end="29" id="RES19" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="28" description="Enable horizontal downscaling by a factor of two. Applies to RAW data when transcoding is enabled. Must be disabled when transcoding is disabled. 0:  Disable  1:  Enable  " end="28" id="HSCALE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Enables image transcoding. When this features is enabled: - the data format from the camera is defined by the FORMAT register - the format after transcode is defined by the TRANSCODE register. The memory storage / video port formats is defined by the TRANSCODE register 0x0:  Feature disabled.  0x1:  Outputs DPCM compressed RAW10 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data  0x2:  Outputs DPCM compressed RAW12 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data  0x3:  Outputs ALAW compressed RAW10 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data.  0x4:  Outputs uncompressed RAW8 data. Data in memory is organized as regular RAW8 data  0x5:  Outputs uncompressed RAW10 data. Data in memory is organized as regular RAW10+EXP16 data  0x6:  Outputs uncompressed RAW10 data. Data in memory is organized as regular packed RAW10 data  0x7:  Outputs uncompressed RAW12 data. Data in memory is organized as regular RAW12+EXP16 data  0x8:  Outputs uncompressed RAW12 data. Data in memory is organized as regular packed RAW12 data  0x9:  Outputs uncompressed RAW14 data.  " end="24" id="TRANSCODE" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="23" description="Number of FEC to receive between using swap of CSI2_CTX_DAT_PING_ADDR and CSI2_CTX_DAT_PONG_ADDR for the calculation of the address in memory. (shall be used only in interlace mode, otherwise set to '1')" end="16" id="FEC_NUMBER" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Sets the number of frame to acquire. Once the frame acquisition starts, the COUNT value is decremented after every frame. When COUNT reaches 0, the FRAME_NUMBER_IRQ interrupt is triggered and CTX_EN is set to '0'. Writes to this bit field are controlled by the COUNT_UNLOCK bit. During the same OCP write access , the bit-field COUNT_UNLOCK shall be written in addition to COUNT bit-field in order to change the COUNT value.  COUNT can be overwritten dynamically with a new count value.&quot; 0: Infinite number of frames (no count). 1: 1 frame to acquire ... 255: 255 frames to acquire. " end="8" id="COUNT" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Indicates if the end of frame signal shall be asserted at the end of the frame Read 0:  The end of frame signal is not asserted at the end of each frame.  Read 1:  The end of frame signal is asserted at the end of each frame. " end="7" id="EOF_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Indicates if the end of line signal shall be asserted at the end of the line. Read 0:  The end of line signal is not asserted at the end of each frame.  Read 1:  The end of line signal is asserted at the end of each frame. " end="6" id="EOL_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Enables the checksum check for the received payload (long packet only). 0:  Disabled  1:  Enabled  " end="5" id="CS_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Unlock writes to the COUNT bit field.  Write 0:  COUNT bit field is locked. Writes have no effect  Write 1:  COUNT bit field is unlocked. Writes are possible. " end="4" id="COUNT_UNLOCK" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="3" description="Indicates whether the PING or PONG destination address (CSI2_CTX_DAT_PING_ADDR or CSI2_CTX_DAT_PONG_ADDR) was used to write the last frame.  This bit field toggles after every FEC_NUMBER FEC sync code received for the current context. Read 0:  PING buffer  Read 1:  PONG buffer " end="3" id="PING_PONG" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="RESERVE FIELD" end="2" id="VP_FORCE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Line modulo configuration 0:  CSI2_CTX_CTRL3.LINE_NUMBER is used once per frame for the generation of the LINE_NUMBER_IRQ.  1:  CSI2_CTX_CTRL3.LINE_NUMBER is used as a modulo number for the generation of the LINE_NUMBER_IRQ (multiple times the interrupt can be generated for each frame) " end="1" id="LINE_MODULO" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Enables the Context 0:  Disabled  1:  Enabled  " end="0" id="CTX_EN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX2_CTRL2" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code (except for VIRTUAL_ID and FORMAT   fields). The change of VIRTUIAL_ID and FORMAT ha" id="CSI2_CTX2_CTRL2" offset="0xB4" width="32">
    
  <bitfield begin="31" description="Frame number. The CSI-2 protocol engine extracts the frame number from the SOF short packet sent by the camera. " end="16" id="FRAME" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="          RESERVE FIELD" end="15" id="RES20" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="14" description="Selects the pixel format of USER_DEFINED in FORMAT 0x0:  RAW6  0x1:  RAW7  0x2:  RAW8 (not valid if FORMAT is USER_DEFINED_8_BIT_DATA_TYPE_x_EXP8 with x from 1 to 8)  " end="13" id="USER_DEF_MAPPING" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="12" description="Virtual channel ID 0x0:  Virtual Channel ID 0  0x1:  Virtual Channel ID 1  0x2:  Virtual Channel ID 2  0x3:  Virtual Channel ID 3  " end="11" id="VIRTUAL_ID" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="10" description="Selects the DPCM predictor. 0:  The advanced predictor is used. Not supported for 10 – 8 – 10 algorithm. Performance limited to 1 pixel/cycle.  1:  The simple predictor is used.  " end="10" id="DPCM_PRED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Data format selection. 0x000:  OTHERS (except NULL and BLANKING packets)  0x012:  Embedded 8-bit non-image data (e.g. JPEG)  0x018:  YUV420 8bit  0x019:  YUV420 10bit  0x01A:  YUV420 8bit legacy  0x01C:  YUV420 8bit + CSPS  0x01D:  YUV420 10bit + CSPS  0x01E:  YUV422 8bit  0x01F:  YUV422 10bit  0x022:  RGB565  0x024:  RGB888  0x028:  RAW6  0x029:  RAW7  0x02A:  RAW8  0x02B:  RAW10  0x02C:  RAW12  0x02D:  RAW14  0x033:  RGB666 + EXP32_24   0x040:  USER_DEFINED_8_BIT_DATA_TYPE_1  0x041:  USER_DEFINED_8_BIT_DATA_TYPE_2  0x042:  USER_DEFINED_8_BIT_DATA_TYPE_3  0x043:  USER_DEFINED_8_BIT_DATA_TYPE_4  0x044:  USER_DEFINED_8_BIT_DATA_TYPE_5  0x045:  USER_DEFINED_8_BIT_DATA_TYPE_6  0x046:  USER_DEFINED_8_BIT_DATA_TYPE_7  0x047:  USER_DEFINED_8_BIT_DATA_TYPE_8  0x068:  RAW6 + EXP8  0x069:  RAW7 + EXP8  0x080:  USER_DEFINED_8_BIT_DATA_TYPE_1 + EXP8  0x081:  USER_DEFINED_8_BIT_DATA_TYPE_2 + EXP8  0x082:  USER_DEFINED_8_BIT_DATA_TYPE_3 + EXP8  0x083:  USER_DEFINED_8_BIT_DATA_TYPE_4 + EXP8  0x084:  USER_DEFINED_8_BIT_DATA_TYPE_5 + EXP8  0x085:  USER_DEFINED_8_BIT_DATA_TYPE_6 + EXP8  0x086:  USER_DEFINED_8_BIT_DATA_TYPE_7 + EXP8  0x087:  USER_DEFINED_8_BIT_DATA_TYPE_8 + EXP8  0x09E:  YUV422 8bit + VP  0x0A0:  RGB444 + EXP16  0x0A1:  RGB555 + EXP16  0x0AB:  RAW10 + EXP16  0x0AC:  RAW12 + EXP16  0x0AD:  RAW14 + EXP16  0x0DE:  Same as YUV422 8bit + VP but data  is send as 16-bit wide words to video port. Could be used together with the GENERIC and BYTESWAP features  0x0E3:  RGB666 + EXP32  0x0E4:  RGB888 + EXP32  0x0E8:  RAW6 + DPCM10 + VP  0x12A:  RAW8 + VP  0x12C:  RAW12 + VP  0x12D:  RAW14 + VP  0x12F:  RAW10 + VP  0x140:  USER_DEFINED_8_BIT_DATA_TYPE_1_DPCM12_VP  0x141:  USER_DEFINED_8_BIT_DATA_TYPE_2_DPCM12_VP  0x142:  USER_DEFINED_8_BIT_DATA_TYPE_3_DPCM12_VP  0x143:  USER_DEFINED_8_BIT_DATA_TYPE_4_DPCM12_VP  0x144:  USER_DEFINED_8_BIT_DATA_TYPE_5_DPCM12_VP  0x145:  USER_DEFINED_8_BIT_DATA_TYPE_6_DPCM12_VP  0x146:  USER_DEFINED_8_BIT_DATA_TYPE_7_DPCM12_VP  0x147:  USER_DEFINED_8_BIT_DATA_TYPE_8_DPCM12_VP  0x1C0:  USER_DEFINED_8_BIT_DATA_TYPE_1_DPCM12_EXP16  0x1C1:  USER_DEFINED_8_BIT_DATA_TYPE_2_DPCM12_EXP16  0x1C2:  USER_DEFINED_8_BIT_DATA_TYPE_3_DPCM12_EXP16  0x1C3:  USER_DEFINED_8_BIT_DATA_TYPE_4_DPCM12_EXP16  0x1C4:  USER_DEFINED_8_BIT_DATA_TYPE_5_DPCM12_EXP16  0x1C5:  USER_DEFINED_8_BIT_DATA_TYPE_6_DPCM12_EXP16  0x1C6:  USER_DEFINED_8_BIT_DATA_TYPE_7_DPCM12_EXP16  0x1C7:  USER_DEFINED_8_BIT_DATA_TYPE_8_DPCM12_EXP16  0x229:  RAW7 + DPCM10 + EXP16  0x2A8:  RAW6 + DPCM10 + EXP16  0x2AA:  RAW8 + DPCM10 + EXP16  0x2C0:  USER_DEFINED_8_BIT_DATA_TYPE_1 + DPCM10 + EXP16  0x2C1:  USER_DEFINED_8_BIT_DATA_TYPE_2 + DPCM10 + EXP16  0x2C2:  USER_DEFINED_8_BIT_DATA_TYPE_3 + DPCM10 + EXP16  0x2C3:  USER_DEFINED_8_BIT_DATA_TYPE_4 + DPCM10 + EXP16  0x2C4:  USER_DEFINED_8_BIT_DATA_TYPE_5 + DPCM10 + EXP16  0x2C5:  USER_DEFINED_8_BIT_DATA_TYPE_6 + DPCM10 + EXP16  0x2C6:  USER_DEFINED_8_BIT_DATA_TYPE_7 + DPCM10 + EXP16  0x2C7:  USER_DEFINED_8_BIT_DATA_TYPE_8 + DPCM10 + EXP16  0x329:  RAW7 + DPCM10 + VP  0x32A:  RAW8 + DPCM10 + VP  0x340:  USER_DEFINED_8_BIT_DATA_TYPE_1 + DPCM10 + VP  0x341:  USER_DEFINED_8_BIT_DATA_TYPE_2 + DPCM10 + VP  0x342:  USER_DEFINED_8_BIT_DATA_TYPE_3 + DPCM10 + VP  0x343:  USER_DEFINED_8_BIT_DATA_TYPE_4 + DPCM10 + VP  0x344:  USER_DEFINED_8_BIT_DATA_TYPE_5 + DPCM10 + VP  0x345:  USER_DEFINED_8_BIT_DATA_TYPE_6 + DPCM10 + VP  0x346:  USER_DEFINED_8_BIT_DATA_TYPE_7 + DPCM10 + VP  0x347:  USER_DEFINED_8_BIT_DATA_TYPE_8 + DPCM10 + VP  0x368:  RAW6 DPCM12 + VP  0x369:  RAW7 DPCM12 + EXP16  0x36A:  RAW8 DPCM12 + EXP16  0x3A8:  RAW6 DPCM12 + EXP16  0x3A9:  RAW7 DPCM12 + VP  0x3AA:  RAW8 DPCM12 + VP  " end="0" id="FORMAT" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX2_DAT_OFST" description="         DATA MEM ADDRESS OFFSET REGISTER - Context   This register sets the offset which is applied on the   destination address after each line is written to memory.   This register applies for both CSI2_CTX_DAT_PING_ADDR and   CSI2_CTX_DAT_PONG_ADDR.  " id="CSI2_CTX2_DAT_OFST" offset="0xB8" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="17" id="RES21" rwaccess="R" width="15"></bitfield>
    
  <bitfield begin="16" description="Line offset programmed in bytes (signed value 2's complement). If OFST = 0, the data is written contiguously in memory. Otherwise, OFST sets the destination offset between the first pixel of the previous line and the first pixel of the current line. Valid range: -2^17 ~ (2^17-1) " end="5" id="OFST" rwaccess="RW" width="12"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX2_DAT_PING_ADDR" description="         DATA MEM PING ADDRESS REGISTER - Context   This register sets the 32-bit memory address where the pixel   data are stored. The destination is double buffered: this   register sets the PING address. Double buffering is enabled   when the addresses" id="CSI2_CTX2_DAT_PING_ADDR" offset="0xBC" width="32">
    
  <bitfield begin="31" description="         27 most significant bits of the 32-bit address.    " end="5" id="ADDR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="0" id="RES" rwaccess="R" width="5"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX2_DAT_PONG_ADDR" description="         DATA MEM PONG ADDRESS REGISTER - Context   This register sets the 32-bit memory address where the pixel   data are stored. The destination is double buffered: this   register sets the PONG address. Double buffering is enabled   when the addresses" id="CSI2_CTX2_DAT_PONG_ADDR" offset="0xC0" width="32">
    
  <bitfield begin="31" description="         27 most significant bits of the 32-bit address.    " end="5" id="ADDR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="0" id="RES" rwaccess="R" width="5"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX2_IRQENABLE" description="         INTERRUPT ENABLE REGISTER - Context   This register regroups all the events related to Context.   " id="CSI2_CTX2_IRQENABLE" offset="0xC4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="9" id="RES22" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="Context - ECC has been used to correct the only 1-bit error (long packet only). 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="8" id="ECC_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Context - Line number is reached. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="7" id="LINE_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Context - Frame counter reached. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="6" id="FRAME_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Context - Check-Sum of the payload mismatch detection 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="5" id="CS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="4" id="RES23" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Context - Line end sync code detection.  0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="3" id="LE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Context - Line start sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="2" id="LS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Context - Frame end sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="1" id="FE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Context - Frame start sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="0" id="FS_IRQ" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX2_IRQSTATUS" description="         INTERRUPT STATUS REGISTER - Context   This register regroups all the events related to Context.   " id="CSI2_CTX2_IRQSTATUS" offset="0xC8" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="9" id="RES24" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="Context - ECC has been used to do the correction of the only 1-bit error status (long packet only). 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  . - (RW W1toClr)   " end="8" id="ECC_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Contexc - Line number reached status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="7" id="LINE_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Context - Frame counter reached status 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.     - (RW W1toClr)   " end="6" id="FRAME_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Context - Check-Sum mismatch status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="5" id="CS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="4" id="RES25" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Context - Line end sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  .   - (RW W1toClr)   " end="3" id="LE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Context - Line start sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW   W1toClr)   " end="2" id="LS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Context - Frame end sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW   W1toClr)   " end="1" id="FE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Context - Frame start sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW   W1toClr)   " end="0" id="FS_IRQ" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX2_CTRL3" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code.   " id="CSI2_CTX2_CTRL3" offset="0xCC" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description="When TRANSCODE=0 Alpha value for RGB888, RGB666 and RBG444. When TRANSCODE=1 and BYS=1 Image width, in pixels, acquired from the BYS port." end="16" id="ALPHA" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="15" description="Line number for the interrupt generation" end="0" id="LINE_NUMBER" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX3_CTRL1" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code.   " id="CSI2_CTX3_CTRL1" offset="0xD0" width="32">
    
  <bitfield begin="31" description="Allows swapping bytes two by two in the payload data. It doesn't affect  - short packets - long packet header or footers - CRC calculation The purpose is to by swap data send to the OCP port and/or video port 0:  Disabled  1:  Enabled  " end="31" id="BYTESWAP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Enables the generic mode. 0:  Disabled. Data is received according to CSI2_CTX_CTRL1.FORMAT and the long packet code transmitted in the MIPI stream is used.  1:  Enabled. Data is received according to CSI2_CTX_CTRL1.FORMAT and the long packet code transmitted in the MIPI stream is ignored.  " end="30" id="GENERIC" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="          RESERVE FIELD" end="29" id="RES19" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="28" description="Enable horizontal downscaling by a factor of two. Applies to RAW data when transcoding is enabled. Must be disabled when transcoding is disabled. 0:  Disable  1:  Enable  " end="28" id="HSCALE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Enables image transcoding. When this features is enabled: - the data format from the camera is defined by the FORMAT register - the format after transcode is defined by the TRANSCODE register. The memory storage / video port formats is defined by the TRANSCODE register 0x0:  Feature disabled.  0x1:  Outputs DPCM compressed RAW10 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data  0x2:  Outputs DPCM compressed RAW12 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data  0x3:  Outputs ALAW compressed RAW10 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data.  0x4:  Outputs uncompressed RAW8 data. Data in memory is organized as regular RAW8 data  0x5:  Outputs uncompressed RAW10 data. Data in memory is organized as regular RAW10+EXP16 data  0x6:  Outputs uncompressed RAW10 data. Data in memory is organized as regular packed RAW10 data  0x7:  Outputs uncompressed RAW12 data. Data in memory is organized as regular RAW12+EXP16 data  0x8:  Outputs uncompressed RAW12 data. Data in memory is organized as regular packed RAW12 data  0x9:  Outputs uncompressed RAW14 data.  " end="24" id="TRANSCODE" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="23" description="Number of FEC to receive between using swap of CSI2_CTX_DAT_PING_ADDR and CSI2_CTX_DAT_PONG_ADDR for the calculation of the address in memory. (shall be used only in interlace mode, otherwise set to '1')" end="16" id="FEC_NUMBER" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Sets the number of frame to acquire. Once the frame acquisition starts, the COUNT value is decremented after every frame. When COUNT reaches 0, the FRAME_NUMBER_IRQ interrupt is triggered and CTX_EN is set to '0'. Writes to this bit field are controlled by the COUNT_UNLOCK bit. During the same OCP write access , the bit-field COUNT_UNLOCK shall be written in addition to COUNT bit-field in order to change the COUNT value.  COUNT can be overwritten dynamically with a new count value.&quot; 0: Infinite number of frames (no count). 1: 1 frame to acquire ... 255: 255 frames to acquire. " end="8" id="COUNT" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Indicates if the end of frame signal shall be asserted at the end of the frame Read 0:  The end of frame signal is not asserted at the end of each frame.  Read 1:  The end of frame signal is asserted at the end of each frame. " end="7" id="EOF_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Indicates if the end of line signal shall be asserted at the end of the line. Read 0:  The end of line signal is not asserted at the end of each frame.  Read 1:  The end of line signal is asserted at the end of each frame. " end="6" id="EOL_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Enables the checksum check for the received payload (long packet only). 0:  Disabled  1:  Enabled  " end="5" id="CS_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Unlock writes to the COUNT bit field.  Write 0:  COUNT bit field is locked. Writes have no effect  Write 1:  COUNT bit field is unlocked. Writes are possible. " end="4" id="COUNT_UNLOCK" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="3" description="Indicates whether the PING or PONG destination address (CSI2_CTX_DAT_PING_ADDR or CSI2_CTX_DAT_PONG_ADDR) was used to write the last frame.  This bit field toggles after every FEC_NUMBER FEC sync code received for the current context. Read 0:  PING buffer  Read 1:  PONG buffer " end="3" id="PING_PONG" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="RESERVE FIELD" end="2" id="VP_FORCE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Line modulo configuration 0:  CSI2_CTX_CTRL3.LINE_NUMBER is used once per frame for the generation of the LINE_NUMBER_IRQ.  1:  CSI2_CTX_CTRL3.LINE_NUMBER is used as a modulo number for the generation of the LINE_NUMBER_IRQ (multiple times the interrupt can be generated for each frame) " end="1" id="LINE_MODULO" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Enables the Context 0:  Disabled  1:  Enabled  " end="0" id="CTX_EN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX3_CTRL2" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code (except for VIRTUAL_ID and FORMAT   fields). The change of VIRTUIAL_ID and FORMAT ha" id="CSI2_CTX3_CTRL2" offset="0xD4" width="32">
    
  <bitfield begin="31" description="Frame number. The CSI-2 protocol engine extracts the frame number from the SOF short packet sent by the camera. " end="16" id="FRAME" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="          RESERVE FIELD" end="15" id="RES20" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="14" description="Selects the pixel format of USER_DEFINED in FORMAT 0x0:  RAW6  0x1:  RAW7  0x2:  RAW8 (not valid if FORMAT is USER_DEFINED_8_BIT_DATA_TYPE_x_EXP8 with x from 1 to 8)  " end="13" id="USER_DEF_MAPPING" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="12" description="Virtual channel ID 0x0:  Virtual Channel ID 0  0x1:  Virtual Channel ID 1  0x2:  Virtual Channel ID 2  0x3:  Virtual Channel ID 3  " end="11" id="VIRTUAL_ID" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="10" description="Selects the DPCM predictor. 0:  The advanced predictor is used. Not supported for 10 – 8 – 10 algorithm. Performance limited to 1 pixel/cycle.  1:  The simple predictor is used.  " end="10" id="DPCM_PRED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Data format selection. 0x000:  OTHERS (except NULL and BLANKING packets)  0x012:  Embedded 8-bit non-image data (e.g. JPEG)  0x018:  YUV420 8bit  0x019:  YUV420 10bit  0x01A:  YUV420 8bit legacy  0x01C:  YUV420 8bit + CSPS  0x01D:  YUV420 10bit + CSPS  0x01E:  YUV422 8bit  0x01F:  YUV422 10bit  0x022:  RGB565  0x024:  RGB888  0x028:  RAW6  0x029:  RAW7  0x02A:  RAW8  0x02B:  RAW10  0x02C:  RAW12  0x02D:  RAW14  0x033:  RGB666 + EXP32_24   0x040:  USER_DEFINED_8_BIT_DATA_TYPE_1  0x041:  USER_DEFINED_8_BIT_DATA_TYPE_2  0x042:  USER_DEFINED_8_BIT_DATA_TYPE_3  0x043:  USER_DEFINED_8_BIT_DATA_TYPE_4  0x044:  USER_DEFINED_8_BIT_DATA_TYPE_5  0x045:  USER_DEFINED_8_BIT_DATA_TYPE_6  0x046:  USER_DEFINED_8_BIT_DATA_TYPE_7  0x047:  USER_DEFINED_8_BIT_DATA_TYPE_8  0x068:  RAW6 + EXP8  0x069:  RAW7 + EXP8  0x080:  USER_DEFINED_8_BIT_DATA_TYPE_1 + EXP8  0x081:  USER_DEFINED_8_BIT_DATA_TYPE_2 + EXP8  0x082:  USER_DEFINED_8_BIT_DATA_TYPE_3 + EXP8  0x083:  USER_DEFINED_8_BIT_DATA_TYPE_4 + EXP8  0x084:  USER_DEFINED_8_BIT_DATA_TYPE_5 + EXP8  0x085:  USER_DEFINED_8_BIT_DATA_TYPE_6 + EXP8  0x086:  USER_DEFINED_8_BIT_DATA_TYPE_7 + EXP8  0x087:  USER_DEFINED_8_BIT_DATA_TYPE_8 + EXP8  0x09E:  YUV422 8bit + VP  0x0A0:  RGB444 + EXP16  0x0A1:  RGB555 + EXP16  0x0AB:  RAW10 + EXP16  0x0AC:  RAW12 + EXP16  0x0AD:  RAW14 + EXP16  0x0DE:  Same as YUV422 8bit + VP but data  is send as 16-bit wide words to video port. Could be used together with the GENERIC and BYTESWAP features  0x0E3:  RGB666 + EXP32  0x0E4:  RGB888 + EXP32  0x0E8:  RAW6 + DPCM10 + VP  0x12A:  RAW8 + VP  0x12C:  RAW12 + VP  0x12D:  RAW14 + VP  0x12F:  RAW10 + VP  0x140:  USER_DEFINED_8_BIT_DATA_TYPE_1_DPCM12_VP  0x141:  USER_DEFINED_8_BIT_DATA_TYPE_2_DPCM12_VP  0x142:  USER_DEFINED_8_BIT_DATA_TYPE_3_DPCM12_VP  0x143:  USER_DEFINED_8_BIT_DATA_TYPE_4_DPCM12_VP  0x144:  USER_DEFINED_8_BIT_DATA_TYPE_5_DPCM12_VP  0x145:  USER_DEFINED_8_BIT_DATA_TYPE_6_DPCM12_VP  0x146:  USER_DEFINED_8_BIT_DATA_TYPE_7_DPCM12_VP  0x147:  USER_DEFINED_8_BIT_DATA_TYPE_8_DPCM12_VP  0x1C0:  USER_DEFINED_8_BIT_DATA_TYPE_1_DPCM12_EXP16  0x1C1:  USER_DEFINED_8_BIT_DATA_TYPE_2_DPCM12_EXP16  0x1C2:  USER_DEFINED_8_BIT_DATA_TYPE_3_DPCM12_EXP16  0x1C3:  USER_DEFINED_8_BIT_DATA_TYPE_4_DPCM12_EXP16  0x1C4:  USER_DEFINED_8_BIT_DATA_TYPE_5_DPCM12_EXP16  0x1C5:  USER_DEFINED_8_BIT_DATA_TYPE_6_DPCM12_EXP16  0x1C6:  USER_DEFINED_8_BIT_DATA_TYPE_7_DPCM12_EXP16  0x1C7:  USER_DEFINED_8_BIT_DATA_TYPE_8_DPCM12_EXP16  0x229:  RAW7 + DPCM10 + EXP16  0x2A8:  RAW6 + DPCM10 + EXP16  0x2AA:  RAW8 + DPCM10 + EXP16  0x2C0:  USER_DEFINED_8_BIT_DATA_TYPE_1 + DPCM10 + EXP16  0x2C1:  USER_DEFINED_8_BIT_DATA_TYPE_2 + DPCM10 + EXP16  0x2C2:  USER_DEFINED_8_BIT_DATA_TYPE_3 + DPCM10 + EXP16  0x2C3:  USER_DEFINED_8_BIT_DATA_TYPE_4 + DPCM10 + EXP16  0x2C4:  USER_DEFINED_8_BIT_DATA_TYPE_5 + DPCM10 + EXP16  0x2C5:  USER_DEFINED_8_BIT_DATA_TYPE_6 + DPCM10 + EXP16  0x2C6:  USER_DEFINED_8_BIT_DATA_TYPE_7 + DPCM10 + EXP16  0x2C7:  USER_DEFINED_8_BIT_DATA_TYPE_8 + DPCM10 + EXP16  0x329:  RAW7 + DPCM10 + VP  0x32A:  RAW8 + DPCM10 + VP  0x340:  USER_DEFINED_8_BIT_DATA_TYPE_1 + DPCM10 + VP  0x341:  USER_DEFINED_8_BIT_DATA_TYPE_2 + DPCM10 + VP  0x342:  USER_DEFINED_8_BIT_DATA_TYPE_3 + DPCM10 + VP  0x343:  USER_DEFINED_8_BIT_DATA_TYPE_4 + DPCM10 + VP  0x344:  USER_DEFINED_8_BIT_DATA_TYPE_5 + DPCM10 + VP  0x345:  USER_DEFINED_8_BIT_DATA_TYPE_6 + DPCM10 + VP  0x346:  USER_DEFINED_8_BIT_DATA_TYPE_7 + DPCM10 + VP  0x347:  USER_DEFINED_8_BIT_DATA_TYPE_8 + DPCM10 + VP  0x368:  RAW6 DPCM12 + VP  0x369:  RAW7 DPCM12 + EXP16  0x36A:  RAW8 DPCM12 + EXP16  0x3A8:  RAW6 DPCM12 + EXP16  0x3A9:  RAW7 DPCM12 + VP  0x3AA:  RAW8 DPCM12 + VP  " end="0" id="FORMAT" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX3_DAT_OFST" description="         DATA MEM ADDRESS OFFSET REGISTER - Context   This register sets the offset which is applied on the   destination address after each line is written to memory.   This register applies for both CSI2_CTX_DAT_PING_ADDR and   CSI2_CTX_DAT_PONG_ADDR.  " id="CSI2_CTX3_DAT_OFST" offset="0xD8" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="17" id="RES21" rwaccess="R" width="15"></bitfield>
    
  <bitfield begin="16" description="Line offset programmed in bytes (signed value 2's complement). If OFST = 0, the data is written contiguously in memory. Otherwise, OFST sets the destination offset between the first pixel of the previous line and the first pixel of the current line. Valid range: -2^17 ~ (2^17-1) " end="5" id="OFST" rwaccess="RW" width="12"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX3_DAT_PING_ADDR" description="         DATA MEM PING ADDRESS REGISTER - Context   This register sets the 32-bit memory address where the pixel   data are stored. The destination is double buffered: this   register sets the PING address. Double buffering is enabled   when the addresses" id="CSI2_CTX3_DAT_PING_ADDR" offset="0xDC" width="32">
    
  <bitfield begin="31" description="         27 most significant bits of the 32-bit address.    " end="5" id="ADDR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="0" id="RES" rwaccess="R" width="5"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX3_DAT_PONG_ADDR" description="         DATA MEM PONG ADDRESS REGISTER - Context   This register sets the 32-bit memory address where the pixel   data are stored. The destination is double buffered: this   register sets the PONG address. Double buffering is enabled   when the addresses" id="CSI2_CTX3_DAT_PONG_ADDR" offset="0xE0" width="32">
    
  <bitfield begin="31" description="         27 most significant bits of the 32-bit address.    " end="5" id="ADDR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="0" id="RES" rwaccess="R" width="5"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX3_IRQENABLE" description="         INTERRUPT ENABLE REGISTER - Context   This register regroups all the events related to Context.   " id="CSI2_CTX3_IRQENABLE" offset="0xE4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="9" id="RES22" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="Context - ECC has been used to correct the only 1-bit error (long packet only). 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="8" id="ECC_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Context - Line number is reached. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="7" id="LINE_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Context - Frame counter reached. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="6" id="FRAME_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Context - Check-Sum of the payload mismatch detection 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="5" id="CS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="4" id="RES23" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Context - Line end sync code detection.  0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="3" id="LE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Context - Line start sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="2" id="LS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Context - Frame end sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="1" id="FE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Context - Frame start sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="0" id="FS_IRQ" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX3_IRQSTATUS" description="         INTERRUPT STATUS REGISTER - Context   This register regroups all the events related to Context.   " id="CSI2_CTX3_IRQSTATUS" offset="0xE8" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="9" id="RES24" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="Context - ECC has been used to do the correction of the only 1-bit error status (long packet only). 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  . - (RW W1toClr)   " end="8" id="ECC_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Contexc - Line number reached status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="7" id="LINE_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Context - Frame counter reached status 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.     - (RW W1toClr)   " end="6" id="FRAME_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Context - Check-Sum mismatch status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="5" id="CS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="4" id="RES25" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Context - Line end sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  .   - (RW W1toClr)   " end="3" id="LE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Context - Line start sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW   W1toClr)   " end="2" id="LS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Context - Frame end sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW   W1toClr)   " end="1" id="FE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Context - Frame start sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW   W1toClr)   " end="0" id="FS_IRQ" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX3_CTRL3" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code.   " id="CSI2_CTX3_CTRL3" offset="0xEC" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description="When TRANSCODE=0 Alpha value for RGB888, RGB666 and RBG444. When TRANSCODE=1 and BYS=1 Image width, in pixels, acquired from the BYS port." end="16" id="ALPHA" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="15" description="Line number for the interrupt generation" end="0" id="LINE_NUMBER" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX4_CTRL1" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code.   " id="CSI2_CTX4_CTRL1" offset="0xF0" width="32">
    
  <bitfield begin="31" description="Allows swapping bytes two by two in the payload data. It doesn't affect  - short packets - long packet header or footers - CRC calculation The purpose is to by swap data send to the OCP port and/or video port 0:  Disabled  1:  Enabled  " end="31" id="BYTESWAP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Enables the generic mode. 0:  Disabled. Data is received according to CSI2_CTX_CTRL1.FORMAT and the long packet code transmitted in the MIPI stream is used.  1:  Enabled. Data is received according to CSI2_CTX_CTRL1.FORMAT and the long packet code transmitted in the MIPI stream is ignored.  " end="30" id="GENERIC" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="          RESERVE FIELD" end="29" id="RES19" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="28" description="Enable horizontal downscaling by a factor of two. Applies to RAW data when transcoding is enabled. Must be disabled when transcoding is disabled. 0:  Disable  1:  Enable  " end="28" id="HSCALE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Enables image transcoding. When this features is enabled: - the data format from the camera is defined by the FORMAT register - the format after transcode is defined by the TRANSCODE register. The memory storage / video port formats is defined by the TRANSCODE register 0x0:  Feature disabled.  0x1:  Outputs DPCM compressed RAW10 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data  0x2:  Outputs DPCM compressed RAW12 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data  0x3:  Outputs ALAW compressed RAW10 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data.  0x4:  Outputs uncompressed RAW8 data. Data in memory is organized as regular RAW8 data  0x5:  Outputs uncompressed RAW10 data. Data in memory is organized as regular RAW10+EXP16 data  0x6:  Outputs uncompressed RAW10 data. Data in memory is organized as regular packed RAW10 data  0x7:  Outputs uncompressed RAW12 data. Data in memory is organized as regular RAW12+EXP16 data  0x8:  Outputs uncompressed RAW12 data. Data in memory is organized as regular packed RAW12 data  0x9:  Outputs uncompressed RAW14 data.  " end="24" id="TRANSCODE" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="23" description="Number of FEC to receive between using swap of CSI2_CTX_DAT_PING_ADDR and CSI2_CTX_DAT_PONG_ADDR for the calculation of the address in memory. (shall be used only in interlace mode, otherwise set to '1')" end="16" id="FEC_NUMBER" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Sets the number of frame to acquire. Once the frame acquisition starts, the COUNT value is decremented after every frame. When COUNT reaches 0, the FRAME_NUMBER_IRQ interrupt is triggered and CTX_EN is set to '0'. Writes to this bit field are controlled by the COUNT_UNLOCK bit. During the same OCP write access , the bit-field COUNT_UNLOCK shall be written in addition to COUNT bit-field in order to change the COUNT value.  COUNT can be overwritten dynamically with a new count value.&quot; 0: Infinite number of frames (no count). 1: 1 frame to acquire ... 255: 255 frames to acquire. " end="8" id="COUNT" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Indicates if the end of frame signal shall be asserted at the end of the frame Read 0:  The end of frame signal is not asserted at the end of each frame.  Read 1:  The end of frame signal is asserted at the end of each frame. " end="7" id="EOF_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Indicates if the end of line signal shall be asserted at the end of the line. Read 0:  The end of line signal is not asserted at the end of each frame.  Read 1:  The end of line signal is asserted at the end of each frame. " end="6" id="EOL_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Enables the checksum check for the received payload (long packet only). 0:  Disabled  1:  Enabled  " end="5" id="CS_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Unlock writes to the COUNT bit field.  Write 0:  COUNT bit field is locked. Writes have no effect  Write 1:  COUNT bit field is unlocked. Writes are possible. " end="4" id="COUNT_UNLOCK" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="3" description="Indicates whether the PING or PONG destination address (CSI2_CTX_DAT_PING_ADDR or CSI2_CTX_DAT_PONG_ADDR) was used to write the last frame.  This bit field toggles after every FEC_NUMBER FEC sync code received for the current context. Read 0:  PING buffer  Read 1:  PONG buffer " end="3" id="PING_PONG" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="RESERVE FIELD" end="2" id="VP_FORCE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Line modulo configuration 0:  CSI2_CTX_CTRL3.LINE_NUMBER is used once per frame for the generation of the LINE_NUMBER_IRQ.  1:  CSI2_CTX_CTRL3.LINE_NUMBER is used as a modulo number for the generation of the LINE_NUMBER_IRQ (multiple times the interrupt can be generated for each frame) " end="1" id="LINE_MODULO" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Enables the Context 0:  Disabled  1:  Enabled  " end="0" id="CTX_EN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX4_CTRL2" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code (except for VIRTUAL_ID and FORMAT   fields). The change of VIRTUIAL_ID and FORMAT ha" id="CSI2_CTX4_CTRL2" offset="0xF4" width="32">
    
  <bitfield begin="31" description="Frame number. The CSI-2 protocol engine extracts the frame number from the SOF short packet sent by the camera. " end="16" id="FRAME" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="          RESERVE FIELD" end="15" id="RES20" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="14" description="Selects the pixel format of USER_DEFINED in FORMAT 0x0:  RAW6  0x1:  RAW7  0x2:  RAW8 (not valid if FORMAT is USER_DEFINED_8_BIT_DATA_TYPE_x_EXP8 with x from 1 to 8)  " end="13" id="USER_DEF_MAPPING" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="12" description="Virtual channel ID 0x0:  Virtual Channel ID 0  0x1:  Virtual Channel ID 1  0x2:  Virtual Channel ID 2  0x3:  Virtual Channel ID 3  " end="11" id="VIRTUAL_ID" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="10" description="Selects the DPCM predictor. 0:  The advanced predictor is used. Not supported for 10 – 8 – 10 algorithm. Performance limited to 1 pixel/cycle.  1:  The simple predictor is used.  " end="10" id="DPCM_PRED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Data format selection. 0x000:  OTHERS (except NULL and BLANKING packets)  0x012:  Embedded 8-bit non-image data (e.g. JPEG)  0x018:  YUV420 8bit  0x019:  YUV420 10bit  0x01A:  YUV420 8bit legacy  0x01C:  YUV420 8bit + CSPS  0x01D:  YUV420 10bit + CSPS  0x01E:  YUV422 8bit  0x01F:  YUV422 10bit  0x022:  RGB565  0x024:  RGB888  0x028:  RAW6  0x029:  RAW7  0x02A:  RAW8  0x02B:  RAW10  0x02C:  RAW12  0x02D:  RAW14  0x033:  RGB666 + EXP32_24   0x040:  USER_DEFINED_8_BIT_DATA_TYPE_1  0x041:  USER_DEFINED_8_BIT_DATA_TYPE_2  0x042:  USER_DEFINED_8_BIT_DATA_TYPE_3  0x043:  USER_DEFINED_8_BIT_DATA_TYPE_4  0x044:  USER_DEFINED_8_BIT_DATA_TYPE_5  0x045:  USER_DEFINED_8_BIT_DATA_TYPE_6  0x046:  USER_DEFINED_8_BIT_DATA_TYPE_7  0x047:  USER_DEFINED_8_BIT_DATA_TYPE_8  0x068:  RAW6 + EXP8  0x069:  RAW7 + EXP8  0x080:  USER_DEFINED_8_BIT_DATA_TYPE_1 + EXP8  0x081:  USER_DEFINED_8_BIT_DATA_TYPE_2 + EXP8  0x082:  USER_DEFINED_8_BIT_DATA_TYPE_3 + EXP8  0x083:  USER_DEFINED_8_BIT_DATA_TYPE_4 + EXP8  0x084:  USER_DEFINED_8_BIT_DATA_TYPE_5 + EXP8  0x085:  USER_DEFINED_8_BIT_DATA_TYPE_6 + EXP8  0x086:  USER_DEFINED_8_BIT_DATA_TYPE_7 + EXP8  0x087:  USER_DEFINED_8_BIT_DATA_TYPE_8 + EXP8  0x09E:  YUV422 8bit + VP  0x0A0:  RGB444 + EXP16  0x0A1:  RGB555 + EXP16  0x0AB:  RAW10 + EXP16  0x0AC:  RAW12 + EXP16  0x0AD:  RAW14 + EXP16  0x0DE:  Same as YUV422 8bit + VP but data  is send as 16-bit wide words to video port. Could be used together with the GENERIC and BYTESWAP features  0x0E3:  RGB666 + EXP32  0x0E4:  RGB888 + EXP32  0x0E8:  RAW6 + DPCM10 + VP  0x12A:  RAW8 + VP  0x12C:  RAW12 + VP  0x12D:  RAW14 + VP  0x12F:  RAW10 + VP  0x140:  USER_DEFINED_8_BIT_DATA_TYPE_1_DPCM12_VP  0x141:  USER_DEFINED_8_BIT_DATA_TYPE_2_DPCM12_VP  0x142:  USER_DEFINED_8_BIT_DATA_TYPE_3_DPCM12_VP  0x143:  USER_DEFINED_8_BIT_DATA_TYPE_4_DPCM12_VP  0x144:  USER_DEFINED_8_BIT_DATA_TYPE_5_DPCM12_VP  0x145:  USER_DEFINED_8_BIT_DATA_TYPE_6_DPCM12_VP  0x146:  USER_DEFINED_8_BIT_DATA_TYPE_7_DPCM12_VP  0x147:  USER_DEFINED_8_BIT_DATA_TYPE_8_DPCM12_VP  0x1C0:  USER_DEFINED_8_BIT_DATA_TYPE_1_DPCM12_EXP16  0x1C1:  USER_DEFINED_8_BIT_DATA_TYPE_2_DPCM12_EXP16  0x1C2:  USER_DEFINED_8_BIT_DATA_TYPE_3_DPCM12_EXP16  0x1C3:  USER_DEFINED_8_BIT_DATA_TYPE_4_DPCM12_EXP16  0x1C4:  USER_DEFINED_8_BIT_DATA_TYPE_5_DPCM12_EXP16  0x1C5:  USER_DEFINED_8_BIT_DATA_TYPE_6_DPCM12_EXP16  0x1C6:  USER_DEFINED_8_BIT_DATA_TYPE_7_DPCM12_EXP16  0x1C7:  USER_DEFINED_8_BIT_DATA_TYPE_8_DPCM12_EXP16  0x229:  RAW7 + DPCM10 + EXP16  0x2A8:  RAW6 + DPCM10 + EXP16  0x2AA:  RAW8 + DPCM10 + EXP16  0x2C0:  USER_DEFINED_8_BIT_DATA_TYPE_1 + DPCM10 + EXP16  0x2C1:  USER_DEFINED_8_BIT_DATA_TYPE_2 + DPCM10 + EXP16  0x2C2:  USER_DEFINED_8_BIT_DATA_TYPE_3 + DPCM10 + EXP16  0x2C3:  USER_DEFINED_8_BIT_DATA_TYPE_4 + DPCM10 + EXP16  0x2C4:  USER_DEFINED_8_BIT_DATA_TYPE_5 + DPCM10 + EXP16  0x2C5:  USER_DEFINED_8_BIT_DATA_TYPE_6 + DPCM10 + EXP16  0x2C6:  USER_DEFINED_8_BIT_DATA_TYPE_7 + DPCM10 + EXP16  0x2C7:  USER_DEFINED_8_BIT_DATA_TYPE_8 + DPCM10 + EXP16  0x329:  RAW7 + DPCM10 + VP  0x32A:  RAW8 + DPCM10 + VP  0x340:  USER_DEFINED_8_BIT_DATA_TYPE_1 + DPCM10 + VP  0x341:  USER_DEFINED_8_BIT_DATA_TYPE_2 + DPCM10 + VP  0x342:  USER_DEFINED_8_BIT_DATA_TYPE_3 + DPCM10 + VP  0x343:  USER_DEFINED_8_BIT_DATA_TYPE_4 + DPCM10 + VP  0x344:  USER_DEFINED_8_BIT_DATA_TYPE_5 + DPCM10 + VP  0x345:  USER_DEFINED_8_BIT_DATA_TYPE_6 + DPCM10 + VP  0x346:  USER_DEFINED_8_BIT_DATA_TYPE_7 + DPCM10 + VP  0x347:  USER_DEFINED_8_BIT_DATA_TYPE_8 + DPCM10 + VP  0x368:  RAW6 DPCM12 + VP  0x369:  RAW7 DPCM12 + EXP16  0x36A:  RAW8 DPCM12 + EXP16  0x3A8:  RAW6 DPCM12 + EXP16  0x3A9:  RAW7 DPCM12 + VP  0x3AA:  RAW8 DPCM12 + VP  " end="0" id="FORMAT" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX4_DAT_OFST" description="         DATA MEM ADDRESS OFFSET REGISTER - Context   This register sets the offset which is applied on the   destination address after each line is written to memory.   This register applies for both CSI2_CTX_DAT_PING_ADDR and   CSI2_CTX_DAT_PONG_ADDR.  " id="CSI2_CTX4_DAT_OFST" offset="0xF8" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="17" id="RES21" rwaccess="R" width="15"></bitfield>
    
  <bitfield begin="16" description="Line offset programmed in bytes (signed value 2's complement). If OFST = 0, the data is written contiguously in memory. Otherwise, OFST sets the destination offset between the first pixel of the previous line and the first pixel of the current line. Valid range: -2^17 ~ (2^17-1) " end="5" id="OFST" rwaccess="RW" width="12"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX4_DAT_PING_ADDR" description="         DATA MEM PING ADDRESS REGISTER - Context   This register sets the 32-bit memory address where the pixel   data are stored. The destination is double buffered: this   register sets the PING address. Double buffering is enabled   when the addresses" id="CSI2_CTX4_DAT_PING_ADDR" offset="0xFC" width="32">
    
  <bitfield begin="31" description="         27 most significant bits of the 32-bit address.    " end="5" id="ADDR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="0" id="RES" rwaccess="R" width="5"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX4_DAT_PONG_ADDR" description="         DATA MEM PONG ADDRESS REGISTER - Context   This register sets the 32-bit memory address where the pixel   data are stored. The destination is double buffered: this   register sets the PONG address. Double buffering is enabled   when the addresses" id="CSI2_CTX4_DAT_PONG_ADDR" offset="0x100" width="32">
    
  <bitfield begin="31" description="         27 most significant bits of the 32-bit address.    " end="5" id="ADDR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="0" id="RES" rwaccess="R" width="5"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX4_IRQENABLE" description="         INTERRUPT ENABLE REGISTER - Context   This register regroups all the events related to Context.   " id="CSI2_CTX4_IRQENABLE" offset="0x104" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="9" id="RES22" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="Context - ECC has been used to correct the only 1-bit error (long packet only). 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="8" id="ECC_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Context - Line number is reached. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="7" id="LINE_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Context - Frame counter reached. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="6" id="FRAME_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Context - Check-Sum of the payload mismatch detection 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="5" id="CS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="4" id="RES23" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Context - Line end sync code detection.  0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="3" id="LE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Context - Line start sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="2" id="LS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Context - Frame end sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="1" id="FE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Context - Frame start sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="0" id="FS_IRQ" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX4_IRQSTATUS" description="         INTERRUPT STATUS REGISTER - Context   This register regroups all the events related to Context.   " id="CSI2_CTX4_IRQSTATUS" offset="0x108" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="9" id="RES24" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="Context - ECC has been used to do the correction of the only 1-bit error status (long packet only). 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  . - (RW W1toClr)   " end="8" id="ECC_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Contexc - Line number reached status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="7" id="LINE_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Context - Frame counter reached status 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.     - (RW W1toClr)   " end="6" id="FRAME_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Context - Check-Sum mismatch status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="5" id="CS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="4" id="RES25" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Context - Line end sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  .   - (RW W1toClr)   " end="3" id="LE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Context - Line start sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW   W1toClr)   " end="2" id="LS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Context - Frame end sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW   W1toClr)   " end="1" id="FE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Context - Frame start sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW   W1toClr)   " end="0" id="FS_IRQ" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX4_CTRL3" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code.   " id="CSI2_CTX4_CTRL3" offset="0x10C" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description="When TRANSCODE=0 Alpha value for RGB888, RGB666 and RBG444. When TRANSCODE=1 and BYS=1 Image width, in pixels, acquired from the BYS port." end="16" id="ALPHA" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="15" description="Line number for the interrupt generation" end="0" id="LINE_NUMBER" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX5_CTRL1" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code.   " id="CSI2_CTX5_CTRL1" offset="0x110" width="32">
    
  <bitfield begin="31" description="Allows swapping bytes two by two in the payload data. It doesn't affect  - short packets - long packet header or footers - CRC calculation The purpose is to by swap data send to the OCP port and/or video port 0:  Disabled  1:  Enabled  " end="31" id="BYTESWAP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Enables the generic mode. 0:  Disabled. Data is received according to CSI2_CTX_CTRL1.FORMAT and the long packet code transmitted in the MIPI stream is used.  1:  Enabled. Data is received according to CSI2_CTX_CTRL1.FORMAT and the long packet code transmitted in the MIPI stream is ignored.  " end="30" id="GENERIC" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="          RESERVE FIELD" end="29" id="RES19" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="28" description="Enable horizontal downscaling by a factor of two. Applies to RAW data when transcoding is enabled. Must be disabled when transcoding is disabled. 0:  Disable  1:  Enable  " end="28" id="HSCALE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Enables image transcoding. When this features is enabled: - the data format from the camera is defined by the FORMAT register - the format after transcode is defined by the TRANSCODE register. The memory storage / video port formats is defined by the TRANSCODE register 0x0:  Feature disabled.  0x1:  Outputs DPCM compressed RAW10 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data  0x2:  Outputs DPCM compressed RAW12 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data  0x3:  Outputs ALAW compressed RAW10 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data.  0x4:  Outputs uncompressed RAW8 data. Data in memory is organized as regular RAW8 data  0x5:  Outputs uncompressed RAW10 data. Data in memory is organized as regular RAW10+EXP16 data  0x6:  Outputs uncompressed RAW10 data. Data in memory is organized as regular packed RAW10 data  0x7:  Outputs uncompressed RAW12 data. Data in memory is organized as regular RAW12+EXP16 data  0x8:  Outputs uncompressed RAW12 data. Data in memory is organized as regular packed RAW12 data  0x9:  Outputs uncompressed RAW14 data.  " end="24" id="TRANSCODE" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="23" description="Number of FEC to receive between using swap of CSI2_CTX_DAT_PING_ADDR and CSI2_CTX_DAT_PONG_ADDR for the calculation of the address in memory. (shall be used only in interlace mode, otherwise set to '1')" end="16" id="FEC_NUMBER" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Sets the number of frame to acquire. Once the frame acquisition starts, the COUNT value is decremented after every frame. When COUNT reaches 0, the FRAME_NUMBER_IRQ interrupt is triggered and CTX_EN is set to '0'. Writes to this bit field are controlled by the COUNT_UNLOCK bit. During the same OCP write access , the bit-field COUNT_UNLOCK shall be written in addition to COUNT bit-field in order to change the COUNT value.  COUNT can be overwritten dynamically with a new count value.&quot; 0: Infinite number of frames (no count). 1: 1 frame to acquire ... 255: 255 frames to acquire. " end="8" id="COUNT" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Indicates if the end of frame signal shall be asserted at the end of the frame Read 0:  The end of frame signal is not asserted at the end of each frame.  Read 1:  The end of frame signal is asserted at the end of each frame. " end="7" id="EOF_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Indicates if the end of line signal shall be asserted at the end of the line. Read 0:  The end of line signal is not asserted at the end of each frame.  Read 1:  The end of line signal is asserted at the end of each frame. " end="6" id="EOL_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Enables the checksum check for the received payload (long packet only). 0:  Disabled  1:  Enabled  " end="5" id="CS_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Unlock writes to the COUNT bit field.  Write 0:  COUNT bit field is locked. Writes have no effect  Write 1:  COUNT bit field is unlocked. Writes are possible. " end="4" id="COUNT_UNLOCK" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="3" description="Indicates whether the PING or PONG destination address (CSI2_CTX_DAT_PING_ADDR or CSI2_CTX_DAT_PONG_ADDR) was used to write the last frame.  This bit field toggles after every FEC_NUMBER FEC sync code received for the current context. Read 0:  PING buffer  Read 1:  PONG buffer " end="3" id="PING_PONG" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="RESERVE FIELD" end="2" id="VP_FORCE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Line modulo configuration 0:  CSI2_CTX_CTRL3.LINE_NUMBER is used once per frame for the generation of the LINE_NUMBER_IRQ.  1:  CSI2_CTX_CTRL3.LINE_NUMBER is used as a modulo number for the generation of the LINE_NUMBER_IRQ (multiple times the interrupt can be generated for each frame) " end="1" id="LINE_MODULO" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Enables the Context 0:  Disabled  1:  Enabled  " end="0" id="CTX_EN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX5_CTRL2" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code (except for VIRTUAL_ID and FORMAT   fields). The change of VIRTUIAL_ID and FORMAT ha" id="CSI2_CTX5_CTRL2" offset="0x114" width="32">
    
  <bitfield begin="31" description="Frame number. The CSI-2 protocol engine extracts the frame number from the SOF short packet sent by the camera. " end="16" id="FRAME" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="          RESERVE FIELD" end="15" id="RES20" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="14" description="Selects the pixel format of USER_DEFINED in FORMAT 0x0:  RAW6  0x1:  RAW7  0x2:  RAW8 (not valid if FORMAT is USER_DEFINED_8_BIT_DATA_TYPE_x_EXP8 with x from 1 to 8)  " end="13" id="USER_DEF_MAPPING" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="12" description="Virtual channel ID 0x0:  Virtual Channel ID 0  0x1:  Virtual Channel ID 1  0x2:  Virtual Channel ID 2  0x3:  Virtual Channel ID 3  " end="11" id="VIRTUAL_ID" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="10" description="Selects the DPCM predictor. 0:  The advanced predictor is used. Not supported for 10 – 8 – 10 algorithm. Performance limited to 1 pixel/cycle.  1:  The simple predictor is used.  " end="10" id="DPCM_PRED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Data format selection. 0x000:  OTHERS (except NULL and BLANKING packets)  0x012:  Embedded 8-bit non-image data (e.g. JPEG)  0x018:  YUV420 8bit  0x019:  YUV420 10bit  0x01A:  YUV420 8bit legacy  0x01C:  YUV420 8bit + CSPS  0x01D:  YUV420 10bit + CSPS  0x01E:  YUV422 8bit  0x01F:  YUV422 10bit  0x022:  RGB565  0x024:  RGB888  0x028:  RAW6  0x029:  RAW7  0x02A:  RAW8  0x02B:  RAW10  0x02C:  RAW12  0x02D:  RAW14  0x033:  RGB666 + EXP32_24   0x040:  USER_DEFINED_8_BIT_DATA_TYPE_1  0x041:  USER_DEFINED_8_BIT_DATA_TYPE_2  0x042:  USER_DEFINED_8_BIT_DATA_TYPE_3  0x043:  USER_DEFINED_8_BIT_DATA_TYPE_4  0x044:  USER_DEFINED_8_BIT_DATA_TYPE_5  0x045:  USER_DEFINED_8_BIT_DATA_TYPE_6  0x046:  USER_DEFINED_8_BIT_DATA_TYPE_7  0x047:  USER_DEFINED_8_BIT_DATA_TYPE_8  0x068:  RAW6 + EXP8  0x069:  RAW7 + EXP8  0x080:  USER_DEFINED_8_BIT_DATA_TYPE_1 + EXP8  0x081:  USER_DEFINED_8_BIT_DATA_TYPE_2 + EXP8  0x082:  USER_DEFINED_8_BIT_DATA_TYPE_3 + EXP8  0x083:  USER_DEFINED_8_BIT_DATA_TYPE_4 + EXP8  0x084:  USER_DEFINED_8_BIT_DATA_TYPE_5 + EXP8  0x085:  USER_DEFINED_8_BIT_DATA_TYPE_6 + EXP8  0x086:  USER_DEFINED_8_BIT_DATA_TYPE_7 + EXP8  0x087:  USER_DEFINED_8_BIT_DATA_TYPE_8 + EXP8  0x09E:  YUV422 8bit + VP  0x0A0:  RGB444 + EXP16  0x0A1:  RGB555 + EXP16  0x0AB:  RAW10 + EXP16  0x0AC:  RAW12 + EXP16  0x0AD:  RAW14 + EXP16  0x0DE:  Same as YUV422 8bit + VP but data  is send as 16-bit wide words to video port. Could be used together with the GENERIC and BYTESWAP features  0x0E3:  RGB666 + EXP32  0x0E4:  RGB888 + EXP32  0x0E8:  RAW6 + DPCM10 + VP  0x12A:  RAW8 + VP  0x12C:  RAW12 + VP  0x12D:  RAW14 + VP  0x12F:  RAW10 + VP  0x140:  USER_DEFINED_8_BIT_DATA_TYPE_1_DPCM12_VP  0x141:  USER_DEFINED_8_BIT_DATA_TYPE_2_DPCM12_VP  0x142:  USER_DEFINED_8_BIT_DATA_TYPE_3_DPCM12_VP  0x143:  USER_DEFINED_8_BIT_DATA_TYPE_4_DPCM12_VP  0x144:  USER_DEFINED_8_BIT_DATA_TYPE_5_DPCM12_VP  0x145:  USER_DEFINED_8_BIT_DATA_TYPE_6_DPCM12_VP  0x146:  USER_DEFINED_8_BIT_DATA_TYPE_7_DPCM12_VP  0x147:  USER_DEFINED_8_BIT_DATA_TYPE_8_DPCM12_VP  0x1C0:  USER_DEFINED_8_BIT_DATA_TYPE_1_DPCM12_EXP16  0x1C1:  USER_DEFINED_8_BIT_DATA_TYPE_2_DPCM12_EXP16  0x1C2:  USER_DEFINED_8_BIT_DATA_TYPE_3_DPCM12_EXP16  0x1C3:  USER_DEFINED_8_BIT_DATA_TYPE_4_DPCM12_EXP16  0x1C4:  USER_DEFINED_8_BIT_DATA_TYPE_5_DPCM12_EXP16  0x1C5:  USER_DEFINED_8_BIT_DATA_TYPE_6_DPCM12_EXP16  0x1C6:  USER_DEFINED_8_BIT_DATA_TYPE_7_DPCM12_EXP16  0x1C7:  USER_DEFINED_8_BIT_DATA_TYPE_8_DPCM12_EXP16  0x229:  RAW7 + DPCM10 + EXP16  0x2A8:  RAW6 + DPCM10 + EXP16  0x2AA:  RAW8 + DPCM10 + EXP16  0x2C0:  USER_DEFINED_8_BIT_DATA_TYPE_1 + DPCM10 + EXP16  0x2C1:  USER_DEFINED_8_BIT_DATA_TYPE_2 + DPCM10 + EXP16  0x2C2:  USER_DEFINED_8_BIT_DATA_TYPE_3 + DPCM10 + EXP16  0x2C3:  USER_DEFINED_8_BIT_DATA_TYPE_4 + DPCM10 + EXP16  0x2C4:  USER_DEFINED_8_BIT_DATA_TYPE_5 + DPCM10 + EXP16  0x2C5:  USER_DEFINED_8_BIT_DATA_TYPE_6 + DPCM10 + EXP16  0x2C6:  USER_DEFINED_8_BIT_DATA_TYPE_7 + DPCM10 + EXP16  0x2C7:  USER_DEFINED_8_BIT_DATA_TYPE_8 + DPCM10 + EXP16  0x329:  RAW7 + DPCM10 + VP  0x32A:  RAW8 + DPCM10 + VP  0x340:  USER_DEFINED_8_BIT_DATA_TYPE_1 + DPCM10 + VP  0x341:  USER_DEFINED_8_BIT_DATA_TYPE_2 + DPCM10 + VP  0x342:  USER_DEFINED_8_BIT_DATA_TYPE_3 + DPCM10 + VP  0x343:  USER_DEFINED_8_BIT_DATA_TYPE_4 + DPCM10 + VP  0x344:  USER_DEFINED_8_BIT_DATA_TYPE_5 + DPCM10 + VP  0x345:  USER_DEFINED_8_BIT_DATA_TYPE_6 + DPCM10 + VP  0x346:  USER_DEFINED_8_BIT_DATA_TYPE_7 + DPCM10 + VP  0x347:  USER_DEFINED_8_BIT_DATA_TYPE_8 + DPCM10 + VP  0x368:  RAW6 DPCM12 + VP  0x369:  RAW7 DPCM12 + EXP16  0x36A:  RAW8 DPCM12 + EXP16  0x3A8:  RAW6 DPCM12 + EXP16  0x3A9:  RAW7 DPCM12 + VP  0x3AA:  RAW8 DPCM12 + VP  " end="0" id="FORMAT" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX5_DAT_OFST" description="         DATA MEM ADDRESS OFFSET REGISTER - Context   This register sets the offset which is applied on the   destination address after each line is written to memory.   This register applies for both CSI2_CTX_DAT_PING_ADDR and   CSI2_CTX_DAT_PONG_ADDR.  " id="CSI2_CTX5_DAT_OFST" offset="0x118" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="17" id="RES21" rwaccess="R" width="15"></bitfield>
    
  <bitfield begin="16" description="Line offset programmed in bytes (signed value 2's complement). If OFST = 0, the data is written contiguously in memory. Otherwise, OFST sets the destination offset between the first pixel of the previous line and the first pixel of the current line. Valid range: -2^17 ~ (2^17-1) " end="5" id="OFST" rwaccess="RW" width="12"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX5_DAT_PING_ADDR" description="         DATA MEM PING ADDRESS REGISTER - Context   This register sets the 32-bit memory address where the pixel   data are stored. The destination is double buffered: this   register sets the PING address. Double buffering is enabled   when the addresses" id="CSI2_CTX5_DAT_PING_ADDR" offset="0x11C" width="32">
    
  <bitfield begin="31" description="         27 most significant bits of the 32-bit address.    " end="5" id="ADDR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="0" id="RES" rwaccess="R" width="5"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX5_DAT_PONG_ADDR" description="         DATA MEM PONG ADDRESS REGISTER - Context   This register sets the 32-bit memory address where the pixel   data are stored. The destination is double buffered: this   register sets the PONG address. Double buffering is enabled   when the addresses" id="CSI2_CTX5_DAT_PONG_ADDR" offset="0x120" width="32">
    
  <bitfield begin="31" description="         27 most significant bits of the 32-bit address.    " end="5" id="ADDR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="0" id="RES" rwaccess="R" width="5"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX5_IRQENABLE" description="         INTERRUPT ENABLE REGISTER - Context   This register regroups all the events related to Context.   " id="CSI2_CTX5_IRQENABLE" offset="0x124" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="9" id="RES22" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="Context - ECC has been used to correct the only 1-bit error (long packet only). 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="8" id="ECC_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Context - Line number is reached. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="7" id="LINE_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Context - Frame counter reached. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="6" id="FRAME_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Context - Check-Sum of the payload mismatch detection 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="5" id="CS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="4" id="RES23" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Context - Line end sync code detection.  0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="3" id="LE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Context - Line start sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="2" id="LS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Context - Frame end sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="1" id="FE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Context - Frame start sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="0" id="FS_IRQ" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX5_IRQSTATUS" description="         INTERRUPT STATUS REGISTER - Context   This register regroups all the events related to Context.   " id="CSI2_CTX5_IRQSTATUS" offset="0x128" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="9" id="RES24" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="Context - ECC has been used to do the correction of the only 1-bit error status (long packet only). 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  . - (RW W1toClr)   " end="8" id="ECC_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Contexc - Line number reached status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="7" id="LINE_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Context - Frame counter reached status 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.     - (RW W1toClr)   " end="6" id="FRAME_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Context - Check-Sum mismatch status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="5" id="CS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="4" id="RES25" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Context - Line end sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  .   - (RW W1toClr)   " end="3" id="LE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Context - Line start sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW   W1toClr)   " end="2" id="LS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Context - Frame end sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW   W1toClr)   " end="1" id="FE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Context - Frame start sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW   W1toClr)   " end="0" id="FS_IRQ" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX5_CTRL3" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code.   " id="CSI2_CTX5_CTRL3" offset="0x12C" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description="When TRANSCODE=0 Alpha value for RGB888, RGB666 and RBG444. When TRANSCODE=1 and BYS=1 Image width, in pixels, acquired from the BYS port." end="16" id="ALPHA" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="15" description="Line number for the interrupt generation" end="0" id="LINE_NUMBER" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX6_CTRL1" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code.   " id="CSI2_CTX6_CTRL1" offset="0x130" width="32">
    
  <bitfield begin="31" description="Allows swapping bytes two by two in the payload data. It doesn't affect  - short packets - long packet header or footers - CRC calculation The purpose is to by swap data send to the OCP port and/or video port 0:  Disabled  1:  Enabled  " end="31" id="BYTESWAP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Enables the generic mode. 0:  Disabled. Data is received according to CSI2_CTX_CTRL1.FORMAT and the long packet code transmitted in the MIPI stream is used.  1:  Enabled. Data is received according to CSI2_CTX_CTRL1.FORMAT and the long packet code transmitted in the MIPI stream is ignored.  " end="30" id="GENERIC" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="          RESERVE FIELD" end="29" id="RES19" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="28" description="Enable horizontal downscaling by a factor of two. Applies to RAW data when transcoding is enabled. Must be disabled when transcoding is disabled. 0:  Disable  1:  Enable  " end="28" id="HSCALE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Enables image transcoding. When this features is enabled: - the data format from the camera is defined by the FORMAT register - the format after transcode is defined by the TRANSCODE register. The memory storage / video port formats is defined by the TRANSCODE register 0x0:  Feature disabled.  0x1:  Outputs DPCM compressed RAW10 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data  0x2:  Outputs DPCM compressed RAW12 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data  0x3:  Outputs ALAW compressed RAW10 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data.  0x4:  Outputs uncompressed RAW8 data. Data in memory is organized as regular RAW8 data  0x5:  Outputs uncompressed RAW10 data. Data in memory is organized as regular RAW10+EXP16 data  0x6:  Outputs uncompressed RAW10 data. Data in memory is organized as regular packed RAW10 data  0x7:  Outputs uncompressed RAW12 data. Data in memory is organized as regular RAW12+EXP16 data  0x8:  Outputs uncompressed RAW12 data. Data in memory is organized as regular packed RAW12 data  0x9:  Outputs uncompressed RAW14 data.  " end="24" id="TRANSCODE" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="23" description="Number of FEC to receive between using swap of CSI2_CTX_DAT_PING_ADDR and CSI2_CTX_DAT_PONG_ADDR for the calculation of the address in memory. (shall be used only in interlace mode, otherwise set to '1')" end="16" id="FEC_NUMBER" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Sets the number of frame to acquire. Once the frame acquisition starts, the COUNT value is decremented after every frame. When COUNT reaches 0, the FRAME_NUMBER_IRQ interrupt is triggered and CTX_EN is set to '0'. Writes to this bit field are controlled by the COUNT_UNLOCK bit. During the same OCP write access , the bit-field COUNT_UNLOCK shall be written in addition to COUNT bit-field in order to change the COUNT value.  COUNT can be overwritten dynamically with a new count value.&quot; 0: Infinite number of frames (no count). 1: 1 frame to acquire ... 255: 255 frames to acquire. " end="8" id="COUNT" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Indicates if the end of frame signal shall be asserted at the end of the frame Read 0:  The end of frame signal is not asserted at the end of each frame.  Read 1:  The end of frame signal is asserted at the end of each frame. " end="7" id="EOF_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Indicates if the end of line signal shall be asserted at the end of the line. Read 0:  The end of line signal is not asserted at the end of each frame.  Read 1:  The end of line signal is asserted at the end of each frame. " end="6" id="EOL_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Enables the checksum check for the received payload (long packet only). 0:  Disabled  1:  Enabled  " end="5" id="CS_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Unlock writes to the COUNT bit field.  Write 0:  COUNT bit field is locked. Writes have no effect  Write 1:  COUNT bit field is unlocked. Writes are possible. " end="4" id="COUNT_UNLOCK" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="3" description="Indicates whether the PING or PONG destination address (CSI2_CTX_DAT_PING_ADDR or CSI2_CTX_DAT_PONG_ADDR) was used to write the last frame.  This bit field toggles after every FEC_NUMBER FEC sync code received for the current context. Read 0:  PING buffer  Read 1:  PONG buffer " end="3" id="PING_PONG" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="RESERVE FIELD" end="2" id="VP_FORCE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Line modulo configuration 0:  CSI2_CTX_CTRL3.LINE_NUMBER is used once per frame for the generation of the LINE_NUMBER_IRQ.  1:  CSI2_CTX_CTRL3.LINE_NUMBER is used as a modulo number for the generation of the LINE_NUMBER_IRQ (multiple times the interrupt can be generated for each frame) " end="1" id="LINE_MODULO" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Enables the Context 0:  Disabled  1:  Enabled  " end="0" id="CTX_EN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX6_CTRL2" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code (except for VIRTUAL_ID and FORMAT   fields). The change of VIRTUIAL_ID and FORMAT ha" id="CSI2_CTX6_CTRL2" offset="0x134" width="32">
    
  <bitfield begin="31" description="Frame number. The CSI-2 protocol engine extracts the frame number from the SOF short packet sent by the camera. " end="16" id="FRAME" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="          RESERVE FIELD" end="15" id="RES20" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="14" description="Selects the pixel format of USER_DEFINED in FORMAT 0x0:  RAW6  0x1:  RAW7  0x2:  RAW8 (not valid if FORMAT is USER_DEFINED_8_BIT_DATA_TYPE_x_EXP8 with x from 1 to 8)  " end="13" id="USER_DEF_MAPPING" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="12" description="Virtual channel ID 0x0:  Virtual Channel ID 0  0x1:  Virtual Channel ID 1  0x2:  Virtual Channel ID 2  0x3:  Virtual Channel ID 3  " end="11" id="VIRTUAL_ID" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="10" description="Selects the DPCM predictor. 0:  The advanced predictor is used. Not supported for 10 – 8 – 10 algorithm. Performance limited to 1 pixel/cycle.  1:  The simple predictor is used.  " end="10" id="DPCM_PRED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Data format selection. 0x000:  OTHERS (except NULL and BLANKING packets)  0x012:  Embedded 8-bit non-image data (e.g. JPEG)  0x018:  YUV420 8bit  0x019:  YUV420 10bit  0x01A:  YUV420 8bit legacy  0x01C:  YUV420 8bit + CSPS  0x01D:  YUV420 10bit + CSPS  0x01E:  YUV422 8bit  0x01F:  YUV422 10bit  0x022:  RGB565  0x024:  RGB888  0x028:  RAW6  0x029:  RAW7  0x02A:  RAW8  0x02B:  RAW10  0x02C:  RAW12  0x02D:  RAW14  0x033:  RGB666 + EXP32_24   0x040:  USER_DEFINED_8_BIT_DATA_TYPE_1  0x041:  USER_DEFINED_8_BIT_DATA_TYPE_2  0x042:  USER_DEFINED_8_BIT_DATA_TYPE_3  0x043:  USER_DEFINED_8_BIT_DATA_TYPE_4  0x044:  USER_DEFINED_8_BIT_DATA_TYPE_5  0x045:  USER_DEFINED_8_BIT_DATA_TYPE_6  0x046:  USER_DEFINED_8_BIT_DATA_TYPE_7  0x047:  USER_DEFINED_8_BIT_DATA_TYPE_8  0x068:  RAW6 + EXP8  0x069:  RAW7 + EXP8  0x080:  USER_DEFINED_8_BIT_DATA_TYPE_1 + EXP8  0x081:  USER_DEFINED_8_BIT_DATA_TYPE_2 + EXP8  0x082:  USER_DEFINED_8_BIT_DATA_TYPE_3 + EXP8  0x083:  USER_DEFINED_8_BIT_DATA_TYPE_4 + EXP8  0x084:  USER_DEFINED_8_BIT_DATA_TYPE_5 + EXP8  0x085:  USER_DEFINED_8_BIT_DATA_TYPE_6 + EXP8  0x086:  USER_DEFINED_8_BIT_DATA_TYPE_7 + EXP8  0x087:  USER_DEFINED_8_BIT_DATA_TYPE_8 + EXP8  0x09E:  YUV422 8bit + VP  0x0A0:  RGB444 + EXP16  0x0A1:  RGB555 + EXP16  0x0AB:  RAW10 + EXP16  0x0AC:  RAW12 + EXP16  0x0AD:  RAW14 + EXP16  0x0DE:  Same as YUV422 8bit + VP but data  is send as 16-bit wide words to video port. Could be used together with the GENERIC and BYTESWAP features  0x0E3:  RGB666 + EXP32  0x0E4:  RGB888 + EXP32  0x0E8:  RAW6 + DPCM10 + VP  0x12A:  RAW8 + VP  0x12C:  RAW12 + VP  0x12D:  RAW14 + VP  0x12F:  RAW10 + VP  0x140:  USER_DEFINED_8_BIT_DATA_TYPE_1_DPCM12_VP  0x141:  USER_DEFINED_8_BIT_DATA_TYPE_2_DPCM12_VP  0x142:  USER_DEFINED_8_BIT_DATA_TYPE_3_DPCM12_VP  0x143:  USER_DEFINED_8_BIT_DATA_TYPE_4_DPCM12_VP  0x144:  USER_DEFINED_8_BIT_DATA_TYPE_5_DPCM12_VP  0x145:  USER_DEFINED_8_BIT_DATA_TYPE_6_DPCM12_VP  0x146:  USER_DEFINED_8_BIT_DATA_TYPE_7_DPCM12_VP  0x147:  USER_DEFINED_8_BIT_DATA_TYPE_8_DPCM12_VP  0x1C0:  USER_DEFINED_8_BIT_DATA_TYPE_1_DPCM12_EXP16  0x1C1:  USER_DEFINED_8_BIT_DATA_TYPE_2_DPCM12_EXP16  0x1C2:  USER_DEFINED_8_BIT_DATA_TYPE_3_DPCM12_EXP16  0x1C3:  USER_DEFINED_8_BIT_DATA_TYPE_4_DPCM12_EXP16  0x1C4:  USER_DEFINED_8_BIT_DATA_TYPE_5_DPCM12_EXP16  0x1C5:  USER_DEFINED_8_BIT_DATA_TYPE_6_DPCM12_EXP16  0x1C6:  USER_DEFINED_8_BIT_DATA_TYPE_7_DPCM12_EXP16  0x1C7:  USER_DEFINED_8_BIT_DATA_TYPE_8_DPCM12_EXP16  0x229:  RAW7 + DPCM10 + EXP16  0x2A8:  RAW6 + DPCM10 + EXP16  0x2AA:  RAW8 + DPCM10 + EXP16  0x2C0:  USER_DEFINED_8_BIT_DATA_TYPE_1 + DPCM10 + EXP16  0x2C1:  USER_DEFINED_8_BIT_DATA_TYPE_2 + DPCM10 + EXP16  0x2C2:  USER_DEFINED_8_BIT_DATA_TYPE_3 + DPCM10 + EXP16  0x2C3:  USER_DEFINED_8_BIT_DATA_TYPE_4 + DPCM10 + EXP16  0x2C4:  USER_DEFINED_8_BIT_DATA_TYPE_5 + DPCM10 + EXP16  0x2C5:  USER_DEFINED_8_BIT_DATA_TYPE_6 + DPCM10 + EXP16  0x2C6:  USER_DEFINED_8_BIT_DATA_TYPE_7 + DPCM10 + EXP16  0x2C7:  USER_DEFINED_8_BIT_DATA_TYPE_8 + DPCM10 + EXP16  0x329:  RAW7 + DPCM10 + VP  0x32A:  RAW8 + DPCM10 + VP  0x340:  USER_DEFINED_8_BIT_DATA_TYPE_1 + DPCM10 + VP  0x341:  USER_DEFINED_8_BIT_DATA_TYPE_2 + DPCM10 + VP  0x342:  USER_DEFINED_8_BIT_DATA_TYPE_3 + DPCM10 + VP  0x343:  USER_DEFINED_8_BIT_DATA_TYPE_4 + DPCM10 + VP  0x344:  USER_DEFINED_8_BIT_DATA_TYPE_5 + DPCM10 + VP  0x345:  USER_DEFINED_8_BIT_DATA_TYPE_6 + DPCM10 + VP  0x346:  USER_DEFINED_8_BIT_DATA_TYPE_7 + DPCM10 + VP  0x347:  USER_DEFINED_8_BIT_DATA_TYPE_8 + DPCM10 + VP  0x368:  RAW6 DPCM12 + VP  0x369:  RAW7 DPCM12 + EXP16  0x36A:  RAW8 DPCM12 + EXP16  0x3A8:  RAW6 DPCM12 + EXP16  0x3A9:  RAW7 DPCM12 + VP  0x3AA:  RAW8 DPCM12 + VP  " end="0" id="FORMAT" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX6_DAT_OFST" description="         DATA MEM ADDRESS OFFSET REGISTER - Context   This register sets the offset which is applied on the   destination address after each line is written to memory.   This register applies for both CSI2_CTX_DAT_PING_ADDR and   CSI2_CTX_DAT_PONG_ADDR.  " id="CSI2_CTX6_DAT_OFST" offset="0x138" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="17" id="RES21" rwaccess="R" width="15"></bitfield>
    
  <bitfield begin="16" description="Line offset programmed in bytes (signed value 2's complement). If OFST = 0, the data is written contiguously in memory. Otherwise, OFST sets the destination offset between the first pixel of the previous line and the first pixel of the current line. Valid range: -2^17 ~ (2^17-1) " end="5" id="OFST" rwaccess="RW" width="12"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX6_DAT_PING_ADDR" description="         DATA MEM PING ADDRESS REGISTER - Context   This register sets the 32-bit memory address where the pixel   data are stored. The destination is double buffered: this   register sets the PING address. Double buffering is enabled   when the addresses" id="CSI2_CTX6_DAT_PING_ADDR" offset="0x13C" width="32">
    
  <bitfield begin="31" description="         27 most significant bits of the 32-bit address.    " end="5" id="ADDR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="0" id="RES" rwaccess="R" width="5"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX6_DAT_PONG_ADDR" description="         DATA MEM PONG ADDRESS REGISTER - Context   This register sets the 32-bit memory address where the pixel   data are stored. The destination is double buffered: this   register sets the PONG address. Double buffering is enabled   when the addresses" id="CSI2_CTX6_DAT_PONG_ADDR" offset="0x140" width="32">
    
  <bitfield begin="31" description="         27 most significant bits of the 32-bit address.    " end="5" id="ADDR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="0" id="RES" rwaccess="R" width="5"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX6_IRQENABLE" description="         INTERRUPT ENABLE REGISTER - Context   This register regroups all the events related to Context.   " id="CSI2_CTX6_IRQENABLE" offset="0x144" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="9" id="RES22" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="Context - ECC has been used to correct the only 1-bit error (long packet only). 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="8" id="ECC_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Context - Line number is reached. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="7" id="LINE_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Context - Frame counter reached. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="6" id="FRAME_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Context - Check-Sum of the payload mismatch detection 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="5" id="CS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="4" id="RES23" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Context - Line end sync code detection.  0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="3" id="LE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Context - Line start sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="2" id="LS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Context - Frame end sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="1" id="FE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Context - Frame start sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="0" id="FS_IRQ" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX6_IRQSTATUS" description="         INTERRUPT STATUS REGISTER - Context   This register regroups all the events related to Context.   " id="CSI2_CTX6_IRQSTATUS" offset="0x148" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="9" id="RES24" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="Context - ECC has been used to do the correction of the only 1-bit error status (long packet only). 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  . - (RW W1toClr)   " end="8" id="ECC_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Contexc - Line number reached status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="7" id="LINE_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Context - Frame counter reached status 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.     - (RW W1toClr)   " end="6" id="FRAME_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Context - Check-Sum mismatch status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="5" id="CS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="4" id="RES25" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Context - Line end sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  .   - (RW W1toClr)   " end="3" id="LE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Context - Line start sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW   W1toClr)   " end="2" id="LS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Context - Frame end sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW   W1toClr)   " end="1" id="FE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Context - Frame start sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW   W1toClr)   " end="0" id="FS_IRQ" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX6_CTRL3" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code.   " id="CSI2_CTX6_CTRL3" offset="0x14C" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description="When TRANSCODE=0 Alpha value for RGB888, RGB666 and RBG444. When TRANSCODE=1 and BYS=1 Image width, in pixels, acquired from the BYS port." end="16" id="ALPHA" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="15" description="Line number for the interrupt generation" end="0" id="LINE_NUMBER" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX7_CTRL1" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code.   " id="CSI2_CTX7_CTRL1" offset="0x150" width="32">
    
  <bitfield begin="31" description="Allows swapping bytes two by two in the payload data. It doesn't affect  - short packets - long packet header or footers - CRC calculation The purpose is to by swap data send to the OCP port and/or video port 0:  Disabled  1:  Enabled  " end="31" id="BYTESWAP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Enables the generic mode. 0:  Disabled. Data is received according to CSI2_CTX_CTRL1.FORMAT and the long packet code transmitted in the MIPI stream is used.  1:  Enabled. Data is received according to CSI2_CTX_CTRL1.FORMAT and the long packet code transmitted in the MIPI stream is ignored.  " end="30" id="GENERIC" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="          RESERVE FIELD" end="29" id="RES19" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="28" description="Enable horizontal downscaling by a factor of two. Applies to RAW data when transcoding is enabled. Must be disabled when transcoding is disabled. 0:  Disable  1:  Enable  " end="28" id="HSCALE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Enables image transcoding. When this features is enabled: - the data format from the camera is defined by the FORMAT register - the format after transcode is defined by the TRANSCODE register. The memory storage / video port formats is defined by the TRANSCODE register 0x0:  Feature disabled.  0x1:  Outputs DPCM compressed RAW10 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data  0x2:  Outputs DPCM compressed RAW12 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data  0x3:  Outputs ALAW compressed RAW10 data. After compression, pixels are coded on 8 bits. Data in memory is organized as regular RAW8 data.  0x4:  Outputs uncompressed RAW8 data. Data in memory is organized as regular RAW8 data  0x5:  Outputs uncompressed RAW10 data. Data in memory is organized as regular RAW10+EXP16 data  0x6:  Outputs uncompressed RAW10 data. Data in memory is organized as regular packed RAW10 data  0x7:  Outputs uncompressed RAW12 data. Data in memory is organized as regular RAW12+EXP16 data  0x8:  Outputs uncompressed RAW12 data. Data in memory is organized as regular packed RAW12 data  0x9:  Outputs uncompressed RAW14 data.  " end="24" id="TRANSCODE" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="23" description="Number of FEC to receive between using swap of CSI2_CTX_DAT_PING_ADDR and CSI2_CTX_DAT_PONG_ADDR for the calculation of the address in memory. (shall be used only in interlace mode, otherwise set to '1')" end="16" id="FEC_NUMBER" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Sets the number of frame to acquire. Once the frame acquisition starts, the COUNT value is decremented after every frame. When COUNT reaches 0, the FRAME_NUMBER_IRQ interrupt is triggered and CTX_EN is set to '0'. Writes to this bit field are controlled by the COUNT_UNLOCK bit. During the same OCP write access , the bit-field COUNT_UNLOCK shall be written in addition to COUNT bit-field in order to change the COUNT value.  COUNT can be overwritten dynamically with a new count value.&quot; 0: Infinite number of frames (no count). 1: 1 frame to acquire ... 255: 255 frames to acquire. " end="8" id="COUNT" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Indicates if the end of frame signal shall be asserted at the end of the frame Read 0:  The end of frame signal is not asserted at the end of each frame.  Read 1:  The end of frame signal is asserted at the end of each frame. " end="7" id="EOF_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Indicates if the end of line signal shall be asserted at the end of the line. Read 0:  The end of line signal is not asserted at the end of each frame.  Read 1:  The end of line signal is asserted at the end of each frame. " end="6" id="EOL_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Enables the checksum check for the received payload (long packet only). 0:  Disabled  1:  Enabled  " end="5" id="CS_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Unlock writes to the COUNT bit field.  Write 0:  COUNT bit field is locked. Writes have no effect  Write 1:  COUNT bit field is unlocked. Writes are possible. " end="4" id="COUNT_UNLOCK" rwaccess="W" width="1"></bitfield>
    
  <bitfield begin="3" description="Indicates whether the PING or PONG destination address (CSI2_CTX_DAT_PING_ADDR or CSI2_CTX_DAT_PONG_ADDR) was used to write the last frame.  This bit field toggles after every FEC_NUMBER FEC sync code received for the current context. Read 0:  PING buffer  Read 1:  PONG buffer " end="3" id="PING_PONG" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="RESERVE FIELD" end="2" id="VP_FORCE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Line modulo configuration 0:  CSI2_CTX_CTRL3.LINE_NUMBER is used once per frame for the generation of the LINE_NUMBER_IRQ.  1:  CSI2_CTX_CTRL3.LINE_NUMBER is used as a modulo number for the generation of the LINE_NUMBER_IRQ (multiple times the interrupt can be generated for each frame) " end="1" id="LINE_MODULO" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Enables the Context 0:  Disabled  1:  Enabled  " end="0" id="CTX_EN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX7_CTRL2" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code (except for VIRTUAL_ID and FORMAT   fields). The change of VIRTUIAL_ID and FORMAT ha" id="CSI2_CTX7_CTRL2" offset="0x154" width="32">
    
  <bitfield begin="31" description="Frame number. The CSI-2 protocol engine extracts the frame number from the SOF short packet sent by the camera. " end="16" id="FRAME" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="          RESERVE FIELD" end="15" id="RES20" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="14" description="Selects the pixel format of USER_DEFINED in FORMAT 0x0:  RAW6  0x1:  RAW7  0x2:  RAW8 (not valid if FORMAT is USER_DEFINED_8_BIT_DATA_TYPE_x_EXP8 with x from 1 to 8)  " end="13" id="USER_DEF_MAPPING" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="12" description="Virtual channel ID 0x0:  Virtual Channel ID 0  0x1:  Virtual Channel ID 1  0x2:  Virtual Channel ID 2  0x3:  Virtual Channel ID 3  " end="11" id="VIRTUAL_ID" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="10" description="Selects the DPCM predictor. 0:  The advanced predictor is used. Not supported for 10 – 8 – 10 algorithm. Performance limited to 1 pixel/cycle.  1:  The simple predictor is used.  " end="10" id="DPCM_PRED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Data format selection. 0x000:  OTHERS (except NULL and BLANKING packets)  0x012:  Embedded 8-bit non-image data (e.g. JPEG)  0x018:  YUV420 8bit  0x019:  YUV420 10bit  0x01A:  YUV420 8bit legacy  0x01C:  YUV420 8bit + CSPS  0x01D:  YUV420 10bit + CSPS  0x01E:  YUV422 8bit  0x01F:  YUV422 10bit  0x022:  RGB565  0x024:  RGB888  0x028:  RAW6  0x029:  RAW7  0x02A:  RAW8  0x02B:  RAW10  0x02C:  RAW12  0x02D:  RAW14  0x033:  RGB666 + EXP32_24   0x040:  USER_DEFINED_8_BIT_DATA_TYPE_1  0x041:  USER_DEFINED_8_BIT_DATA_TYPE_2  0x042:  USER_DEFINED_8_BIT_DATA_TYPE_3  0x043:  USER_DEFINED_8_BIT_DATA_TYPE_4  0x044:  USER_DEFINED_8_BIT_DATA_TYPE_5  0x045:  USER_DEFINED_8_BIT_DATA_TYPE_6  0x046:  USER_DEFINED_8_BIT_DATA_TYPE_7  0x047:  USER_DEFINED_8_BIT_DATA_TYPE_8  0x068:  RAW6 + EXP8  0x069:  RAW7 + EXP8  0x080:  USER_DEFINED_8_BIT_DATA_TYPE_1 + EXP8  0x081:  USER_DEFINED_8_BIT_DATA_TYPE_2 + EXP8  0x082:  USER_DEFINED_8_BIT_DATA_TYPE_3 + EXP8  0x083:  USER_DEFINED_8_BIT_DATA_TYPE_4 + EXP8  0x084:  USER_DEFINED_8_BIT_DATA_TYPE_5 + EXP8  0x085:  USER_DEFINED_8_BIT_DATA_TYPE_6 + EXP8  0x086:  USER_DEFINED_8_BIT_DATA_TYPE_7 + EXP8  0x087:  USER_DEFINED_8_BIT_DATA_TYPE_8 + EXP8  0x09E:  YUV422 8bit + VP  0x0A0:  RGB444 + EXP16  0x0A1:  RGB555 + EXP16  0x0AB:  RAW10 + EXP16  0x0AC:  RAW12 + EXP16  0x0AD:  RAW14 + EXP16  0x0DE:  Same as YUV422 8bit + VP but data  is send as 16-bit wide words to video port. Could be used together with the GENERIC and BYTESWAP features  0x0E3:  RGB666 + EXP32  0x0E4:  RGB888 + EXP32  0x0E8:  RAW6 + DPCM10 + VP  0x12A:  RAW8 + VP  0x12C:  RAW12 + VP  0x12D:  RAW14 + VP  0x12F:  RAW10 + VP  0x140:  USER_DEFINED_8_BIT_DATA_TYPE_1_DPCM12_VP  0x141:  USER_DEFINED_8_BIT_DATA_TYPE_2_DPCM12_VP  0x142:  USER_DEFINED_8_BIT_DATA_TYPE_3_DPCM12_VP  0x143:  USER_DEFINED_8_BIT_DATA_TYPE_4_DPCM12_VP  0x144:  USER_DEFINED_8_BIT_DATA_TYPE_5_DPCM12_VP  0x145:  USER_DEFINED_8_BIT_DATA_TYPE_6_DPCM12_VP  0x146:  USER_DEFINED_8_BIT_DATA_TYPE_7_DPCM12_VP  0x147:  USER_DEFINED_8_BIT_DATA_TYPE_8_DPCM12_VP  0x1C0:  USER_DEFINED_8_BIT_DATA_TYPE_1_DPCM12_EXP16  0x1C1:  USER_DEFINED_8_BIT_DATA_TYPE_2_DPCM12_EXP16  0x1C2:  USER_DEFINED_8_BIT_DATA_TYPE_3_DPCM12_EXP16  0x1C3:  USER_DEFINED_8_BIT_DATA_TYPE_4_DPCM12_EXP16  0x1C4:  USER_DEFINED_8_BIT_DATA_TYPE_5_DPCM12_EXP16  0x1C5:  USER_DEFINED_8_BIT_DATA_TYPE_6_DPCM12_EXP16  0x1C6:  USER_DEFINED_8_BIT_DATA_TYPE_7_DPCM12_EXP16  0x1C7:  USER_DEFINED_8_BIT_DATA_TYPE_8_DPCM12_EXP16  0x229:  RAW7 + DPCM10 + EXP16  0x2A8:  RAW6 + DPCM10 + EXP16  0x2AA:  RAW8 + DPCM10 + EXP16  0x2C0:  USER_DEFINED_8_BIT_DATA_TYPE_1 + DPCM10 + EXP16  0x2C1:  USER_DEFINED_8_BIT_DATA_TYPE_2 + DPCM10 + EXP16  0x2C2:  USER_DEFINED_8_BIT_DATA_TYPE_3 + DPCM10 + EXP16  0x2C3:  USER_DEFINED_8_BIT_DATA_TYPE_4 + DPCM10 + EXP16  0x2C4:  USER_DEFINED_8_BIT_DATA_TYPE_5 + DPCM10 + EXP16  0x2C5:  USER_DEFINED_8_BIT_DATA_TYPE_6 + DPCM10 + EXP16  0x2C6:  USER_DEFINED_8_BIT_DATA_TYPE_7 + DPCM10 + EXP16  0x2C7:  USER_DEFINED_8_BIT_DATA_TYPE_8 + DPCM10 + EXP16  0x329:  RAW7 + DPCM10 + VP  0x32A:  RAW8 + DPCM10 + VP  0x340:  USER_DEFINED_8_BIT_DATA_TYPE_1 + DPCM10 + VP  0x341:  USER_DEFINED_8_BIT_DATA_TYPE_2 + DPCM10 + VP  0x342:  USER_DEFINED_8_BIT_DATA_TYPE_3 + DPCM10 + VP  0x343:  USER_DEFINED_8_BIT_DATA_TYPE_4 + DPCM10 + VP  0x344:  USER_DEFINED_8_BIT_DATA_TYPE_5 + DPCM10 + VP  0x345:  USER_DEFINED_8_BIT_DATA_TYPE_6 + DPCM10 + VP  0x346:  USER_DEFINED_8_BIT_DATA_TYPE_7 + DPCM10 + VP  0x347:  USER_DEFINED_8_BIT_DATA_TYPE_8 + DPCM10 + VP  0x368:  RAW6 DPCM12 + VP  0x369:  RAW7 DPCM12 + EXP16  0x36A:  RAW8 DPCM12 + EXP16  0x3A8:  RAW6 DPCM12 + EXP16  0x3A9:  RAW7 DPCM12 + VP  0x3AA:  RAW8 DPCM12 + VP  " end="0" id="FORMAT" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX7_DAT_OFST" description="         DATA MEM ADDRESS OFFSET REGISTER - Context   This register sets the offset which is applied on the   destination address after each line is written to memory.   This register applies for both CSI2_CTX_DAT_PING_ADDR and   CSI2_CTX_DAT_PONG_ADDR.  " id="CSI2_CTX7_DAT_OFST" offset="0x158" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="17" id="RES21" rwaccess="R" width="15"></bitfield>
    
  <bitfield begin="16" description="Line offset programmed in bytes (signed value 2's complement). If OFST = 0, the data is written contiguously in memory. Otherwise, OFST sets the destination offset between the first pixel of the previous line and the first pixel of the current line. Valid range: -2^17 ~ (2^17-1) " end="5" id="OFST" rwaccess="RW" width="12"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX7_DAT_PING_ADDR" description="         DATA MEM PING ADDRESS REGISTER - Context   This register sets the 32-bit memory address where the pixel   data are stored. The destination is double buffered: this   register sets the PING address. Double buffering is enabled   when the addresses" id="CSI2_CTX7_DAT_PING_ADDR" offset="0x15C" width="32">
    
  <bitfield begin="31" description="         27 most significant bits of the 32-bit address.    " end="5" id="ADDR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="0" id="RES" rwaccess="R" width="5"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX7_DAT_PONG_ADDR" description="         DATA MEM PONG ADDRESS REGISTER - Context   This register sets the 32-bit memory address where the pixel   data are stored. The destination is double buffered: this   register sets the PONG address. Double buffering is enabled   when the addresses" id="CSI2_CTX7_DAT_PONG_ADDR" offset="0x160" width="32">
    
  <bitfield begin="31" description="         27 most significant bits of the 32-bit address.    " end="5" id="ADDR" rwaccess="RW" width="27"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="0" id="RES" rwaccess="R" width="5"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX7_IRQENABLE" description="         INTERRUPT ENABLE REGISTER - Context   This register regroups all the events related to Context.   " id="CSI2_CTX7_IRQENABLE" offset="0x164" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="9" id="RES22" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="Context - ECC has been used to correct the only 1-bit error (long packet only). 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="8" id="ECC_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Context - Line number is reached. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="7" id="LINE_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Context - Frame counter reached. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="6" id="FRAME_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Context - Check-Sum of the payload mismatch detection 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="5" id="CS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="4" id="RES23" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Context - Line end sync code detection.  0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="3" id="LE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Context - Line start sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="2" id="LS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Context - Frame end sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="1" id="FE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Context - Frame start sync code detection. 0:  Event is masked  1:  Event generates an interrupt when it occurs  " end="0" id="FS_IRQ" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX7_IRQSTATUS" description="         INTERRUPT STATUS REGISTER - Context   This register regroups all the events related to Context.   " id="CSI2_CTX7_IRQSTATUS" offset="0x168" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="9" id="RES24" rwaccess="R" width="23"></bitfield>
    
  <bitfield begin="8" description="Context - ECC has been used to do the correction of the only 1-bit error status (long packet only). 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  . - (RW W1toClr)   " end="8" id="ECC_CORRECTION_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Contexc - Line number reached status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW W1toClr)   " end="7" id="LINE_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Context - Frame counter reached status 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.     - (RW W1toClr)   " end="6" id="FRAME_NUMBER_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Context - Check-Sum mismatch status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW W1toClr)   " end="5" id="CS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="          RESERVE FIELD" end="4" id="RES25" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Context - Line end sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  .   - (RW W1toClr)   " end="3" id="LE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Context - Line start sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW   W1toClr)   " end="2" id="LS_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Context - Frame end sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.  - (RW   W1toClr)   " end="1" id="FE_IRQ" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Context - Frame start sync code detection status. 0:  READS: Event is false. WRITES: Status bit unchanged.  1:  READS: Event is true (pending). WRITES: Status bit is reset.   - (RW   W1toClr)   " end="0" id="FS_IRQ" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX7_CTRL3" description="         CONTROL REGISTER - Context   This register controls the Context. This register is   shadowed: modifications are taken into account after the   next FSC sync code.   " id="CSI2_CTX7_CTRL3" offset="0x16C" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="Reserved" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description="When TRANSCODE=0 Alpha value for RGB888, RGB666 and RBG444. When TRANSCODE=1 and BYS=1 Image width, in pixels, acquired from the BYS port." end="16" id="ALPHA" rwaccess="RW" width="14"></bitfield>
    
  <bitfield begin="15" description="Line number for the interrupt generation" end="0" id="LINE_NUMBER" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="CSI2_PHY_CFG_REG0" id="CSI2_PHY_CFG_REG0" offset="0x170" width="32">
    
  <bitfield begin="31" description="Disable clock missing detector" end="24" id="HS_CLK_CONFIG" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="RESERVED" end="16" id="RESERVED" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="15" description="Ths-term timing parameter in multiples of DDR clock. Effective time for enabling of termination= synchronizer delay + timer delay + LPRX delay + combinational routing delay  ~ (1-2)* DDRCLK + THS-TERM + ~ (1-15) ns Programmed value = ceil(12.5 / DDR clock period) –1" end="8" id="THS_TERM" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="THS-SETTLE timing parameter in multiples on DDR clock frequency.  Effective Ths-settle seen on line (starting to look for sync pattern) = synchronizer delay + timer delay + LPRX delay + combinational routing delay – pipeline delay in HS data path.  ~ (1-2)* DDRCLK + THS-SETTLE + ~ (1-15) ns -1*DDRCLK Programmed value = ceil(90 ns / DDR clock period) + 3" end="0" id="THS_SETTLE" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="CSI2_PHY_CFG_REG1" id="CSI2_PHY_CFG_REG1" offset="0x174" width="32">
    
  <bitfield begin="31" description="Reserved" end="30" id="RSVD2" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="29" description="RESETDONECTRLCLK" end="29" id="RESETDONECTRLCLK" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="28" description="RESETDONERXBYTECLK" end="28" id="RESETDONERXBYTECLK" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="27" description="Reserved" end="26" id="RSVD1" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="25" description="1: Error in clock missing detector 0: Clock missing detector successful. " end="25" id="CLK_MISS_DET" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="24" description="TCLK_TERM timing parameter in multiples of CTRLCLK Effective time for enabling of termination = synchronizer delay + timer delay + LPRX delay + combinational routing delay ~ (1–2)* CTRLCLK + TCLK_TERM + ~ (1–15) ns Programmed value = ceil(9.5 / CTRLCLK period) – 1" end="18" id="TCLK_TERM" rwaccess="RW" width="7"></bitfield>
    
  <bitfield begin="17" description="DPHY mode HS sync pattern in byte order (reverse of RW 0xB8 received order) D-PHY mode sync pattern. Default : “10111000”" end="10" id="D_PHY_HS_SYNC_PAT" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="9" description="Divide factor for CTRLCLK for CLKMISS detector" end="8" id="CTRLCLK_DIV_FACT" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="7" description="TCLK_SETTLE timing parameter in multiples of CTRLCLK Clock Effective TCLK_SETTLE = synchronizer delay + timer delay + LPRX delay + combinational routing delay ~(1–2)* CTRLCLK + Tclk-settle + ~ (1 –15) ns Programmed value = max[3, ceil(155 ns/CTRLCLK period) –1]" end="0" id="TCLK_SETTLE" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="CSI2_PHY_CFG_REG2" id="CSI2_PHY_CFG_REG2" offset="0x178" width="32">
    
  <bitfield begin="31" description="Mapping of Trigger escape entry command to PPI output RXTRIGGERESC0" end="30" id="RXTRIGGERESC0" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="29" description="Mapping of Trigger escape entry command to PPI output RXTRIGGERESC1" end="28" id="RXTRIGGERESC1" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="27" description="Mapping of Trigger escape entry command to PPI output RXTRIGGERESC2." end="26" id="RXTRIGGERESC2" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="25" description="Mapping of Trigger escape entry command to PPI output RXTRIGGERESC3 " end="24" id="RXTRIGGERESC3" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="23" description="CCP2 mode sync pattern in byte order (reverse of received order)" end="0" id="CCP2_SYNC_PAT" rwaccess="RW" width="24"></bitfield>
  </register>
  
  
  <register acronym="CSI2_PHY_CFG_REG3" id="CSI2_PHY_CFG_REG3" offset="0x17C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="31" id="OVR_ENHSRX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="RESERVE FIELD" end="26" id="ENHSRX" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="25" description="RESERVE FIELD" end="25" id="OVR_ENRXTERM" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="RESERVE FIELD" end="20" id="ENRXTERM" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="19" description="RESERVE FIELD" end="19" id="OVR_ENLPRX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="RESERVE FIELD" end="14" id="ENLPRX" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="13" description="RESERVE FIELD" end="9" id="ENULPRX" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="8" description="RESERVE FIELD" end="8" id="OVR_ENLDO" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="RESERVE FIELD" end="7" id="ENLDO" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="RESERVE FIELD" end="6" id="OVR_ENBIAS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="RESERVE FIELD" end="5" id="ENBIAS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="RESERVE FIELD" end="4" id="OVR_ENCCP_TO_ANAT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="RESERVE FIELD" end="3" id="OVR_ENCCP_TO_HSRX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="RESERVE FIELD" end="2" id="RSVD1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="RESERVE FIELD" end="1" id="RECAL_HS_RX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="RESERVE FIELD" end="0" id="RECAL_BIAS" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_PHY_CFG_REG4" id="CSI2_PHY_CFG_REG4" offset="0x180" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="27" id="TRIM_BIAS_GEN" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="26" description="RESERVE FIELD" end="22" id="TRIM_TERM_LANE4" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="21" description="RESERVE FIELD" end="17" id="TRIM_TERM_LANE3" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="16" description="RESERVE FIELD" end="12" id="TRIM_TERM_LANE2" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="11" description="RESERVE FIELD" end="7" id="TRIM_TERM_LANE1" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="6" description="RESERVE FIELD" end="2" id="TRIM_TERM_LANE0" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="1" description="RESERVE FIELD" end="1" id="BYPASS_EFUSE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="RESERVE FIELD" end="0" id="RSVD1" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_PHY_CFG_REG5" id="CSI2_PHY_CFG_REG5" offset="0x184" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="26" id="TRIM_OFFSET_LANE4_HS_RX" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="25" description="RESERVE FIELD" end="20" id="TRIM_OFFSET_LANE3_HS_RX" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="19" description="RESERVE FIELD" end="14" id="TRIM_OFFSET_LANE2_HS_RX" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="13" description="RESERVE FIELD" end="8" id="TRIM_OFFSET_LANE1_HS_RX" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="7" description="RESERVE FIELD" end="2" id="TRIM_OFFSET_LANE0_HS_RX" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="1" description="RESERVE FIELD" end="1" id="BYPASS_CALIB_OFFSET" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="RESERVE FIELD" end="0" id="RSVD1" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CSI2_PHY_CFG_REG6" id="CSI2_PHY_CFG_REG6" offset="0x188" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="21" id="RSVD2" rwaccess="RW" width="11"></bitfield>
    
  <bitfield begin="20" description="RESERVE FIELD" end="20" id="OVR_AFE_LANE_ADR_POL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="RESERVE FIELD" end="12" id="AFE_LANE_SEL" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="11" description="RESERVE FIELD" end="11" id="AFE_LANE_POL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="RESERVE FIELD" end="10" id="HSCOMOOUT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="RESERVE FIELD" end="9" id="BYPASS_LDO_REG" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="RESERVE FIELD" end="8" id="OBSV_LDO_VOLT_DYA" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="RESERVE FIELD" end="7" id="OBSV_BIAS_CURR_DXA" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="RESERVE FIELD" end="6" id="RSVD1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="RESERVE FIELD" end="5" id="BIASGEN_CAL_OVR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="RESERVE FIELD" end="0" id="BIASGEN_CAL_OVR_VAL" rwaccess="RW" width="5"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX0_TRANSCODEH" description="Transcode configuration register: defines horizontal frame cropping" id="CSI2_CTX0_TRANSCODEH" offset="0x1C0" width="32">
    
  <bitfield begin="31" description="Reserved" end="29" id="RSVD2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description="Pixels to output per line when the values is between 1 and 8191. Pixels HSKIP-WIDTH pixels are output when HCOUNT=0.  WIDTH corresponds to the image width provided by the sensor. " end="16" id="HCOUNT" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="13" id="RSVD1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="12" description="Pixel to skip horizontally. Valid values: 0-8191 " end="0" id="HSKIP" rwaccess="RW" width="13"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX0_TRANSCODEV" description="Transcode configuration register: defines vertical frame cropping" id="CSI2_CTX0_TRANSCODEV" offset="0x1C4" width="32">
    
  <bitfield begin="31" description="Reserved" end="29" id="RSVD2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description="Lines to output per frame when the values is between 1 and 8191. Pixels VSKIP-HEIGHT pixels are output when VCOUNT=0.  HEIGHT corresponds to the image height provided by the sensor. " end="16" id="VCOUNT" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="13" id="RSVD1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="12" description="Pixel to skip vertically Valid values: 0-8191 " end="0" id="VSKIP" rwaccess="RW" width="13"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX1_TRANSCODEH" description="Transcode configuration register: defines horizontal frame cropping" id="CSI2_CTX1_TRANSCODEH" offset="0x1C8" width="32">
    
  <bitfield begin="31" description="Reserved" end="29" id="RSVD2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description="Pixels to output per line when the values is between 1 and 8191. Pixels HSKIP-WIDTH pixels are output when HCOUNT=0.  WIDTH corresponds to the image width provided by the sensor. " end="16" id="HCOUNT" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="13" id="RSVD1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="12" description="Pixel to skip horizontally. Valid values: 0-8191 " end="0" id="HSKIP" rwaccess="RW" width="13"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX1_TRANSCODEV" description="Transcode configuration register: defines vertical frame cropping" id="CSI2_CTX1_TRANSCODEV" offset="0x1CC" width="32">
    
  <bitfield begin="31" description="Reserved" end="29" id="RSVD2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description="Lines to output per frame when the values is between 1 and 8191. Pixels VSKIP-HEIGHT pixels are output when VCOUNT=0.  HEIGHT corresponds to the image height provided by the sensor. " end="16" id="VCOUNT" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="13" id="RSVD1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="12" description="Pixel to skip vertically Valid values: 0-8191 " end="0" id="VSKIP" rwaccess="RW" width="13"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX2_TRANSCODEH" description="Transcode configuration register: defines horizontal frame cropping" id="CSI2_CTX2_TRANSCODEH" offset="0x1D0" width="32">
    
  <bitfield begin="31" description="Reserved" end="29" id="RSVD2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description="Pixels to output per line when the values is between 1 and 8191. Pixels HSKIP-WIDTH pixels are output when HCOUNT=0.  WIDTH corresponds to the image width provided by the sensor. " end="16" id="HCOUNT" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="13" id="RSVD1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="12" description="Pixel to skip horizontally. Valid values: 0-8191 " end="0" id="HSKIP" rwaccess="RW" width="13"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX2_TRANSCODEV" description="Transcode configuration register: defines vertical frame cropping" id="CSI2_CTX2_TRANSCODEV" offset="0x1D4" width="32">
    
  <bitfield begin="31" description="Reserved" end="29" id="RSVD2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description="Lines to output per frame when the values is between 1 and 8191. Pixels VSKIP-HEIGHT pixels are output when VCOUNT=0.  HEIGHT corresponds to the image height provided by the sensor. " end="16" id="VCOUNT" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="13" id="RSVD1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="12" description="Pixel to skip vertically Valid values: 0-8191 " end="0" id="VSKIP" rwaccess="RW" width="13"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX3_TRANSCODEH" description="Transcode configuration register: defines horizontal frame cropping" id="CSI2_CTX3_TRANSCODEH" offset="0x1D8" width="32">
    
  <bitfield begin="31" description="Reserved" end="29" id="RSVD2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description="Pixels to output per line when the values is between 1 and 8191. Pixels HSKIP-WIDTH pixels are output when HCOUNT=0.  WIDTH corresponds to the image width provided by the sensor. " end="16" id="HCOUNT" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="13" id="RSVD1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="12" description="Pixel to skip horizontally. Valid values: 0-8191 " end="0" id="HSKIP" rwaccess="RW" width="13"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX3_TRANSCODEV" description="Transcode configuration register: defines vertical frame cropping" id="CSI2_CTX3_TRANSCODEV" offset="0x1DC" width="32">
    
  <bitfield begin="31" description="Reserved" end="29" id="RSVD2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description="Lines to output per frame when the values is between 1 and 8191. Pixels VSKIP-HEIGHT pixels are output when VCOUNT=0.  HEIGHT corresponds to the image height provided by the sensor. " end="16" id="VCOUNT" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="13" id="RSVD1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="12" description="Pixel to skip vertically Valid values: 0-8191 " end="0" id="VSKIP" rwaccess="RW" width="13"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX4_TRANSCODEH" description="Transcode configuration register: defines horizontal frame cropping" id="CSI2_CTX4_TRANSCODEH" offset="0x1E0" width="32">
    
  <bitfield begin="31" description="Reserved" end="29" id="RSVD2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description="Pixels to output per line when the values is between 1 and 8191. Pixels HSKIP-WIDTH pixels are output when HCOUNT=0.  WIDTH corresponds to the image width provided by the sensor. " end="16" id="HCOUNT" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="13" id="RSVD1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="12" description="Pixel to skip horizontally. Valid values: 0-8191 " end="0" id="HSKIP" rwaccess="RW" width="13"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX4_TRANSCODEV" description="Transcode configuration register: defines vertical frame cropping" id="CSI2_CTX4_TRANSCODEV" offset="0x1E4" width="32">
    
  <bitfield begin="31" description="Reserved" end="29" id="RSVD2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description="Lines to output per frame when the values is between 1 and 8191. Pixels VSKIP-HEIGHT pixels are output when VCOUNT=0.  HEIGHT corresponds to the image height provided by the sensor. " end="16" id="VCOUNT" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="13" id="RSVD1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="12" description="Pixel to skip vertically Valid values: 0-8191 " end="0" id="VSKIP" rwaccess="RW" width="13"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX5_TRANSCODEH" description="Transcode configuration register: defines horizontal frame cropping" id="CSI2_CTX5_TRANSCODEH" offset="0x1E8" width="32">
    
  <bitfield begin="31" description="Reserved" end="29" id="RSVD2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description="Pixels to output per line when the values is between 1 and 8191. Pixels HSKIP-WIDTH pixels are output when HCOUNT=0.  WIDTH corresponds to the image width provided by the sensor. " end="16" id="HCOUNT" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="13" id="RSVD1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="12" description="Pixel to skip horizontally. Valid values: 0-8191 " end="0" id="HSKIP" rwaccess="RW" width="13"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX5_TRANSCODEV" description="Transcode configuration register: defines vertical frame cropping" id="CSI2_CTX5_TRANSCODEV" offset="0x1EC" width="32">
    
  <bitfield begin="31" description="Reserved" end="29" id="RSVD2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description="Lines to output per frame when the values is between 1 and 8191. Pixels VSKIP-HEIGHT pixels are output when VCOUNT=0.  HEIGHT corresponds to the image height provided by the sensor. " end="16" id="VCOUNT" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="13" id="RSVD1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="12" description="Pixel to skip vertically Valid values: 0-8191 " end="0" id="VSKIP" rwaccess="RW" width="13"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX6_TRANSCODEH" description="Transcode configuration register: defines horizontal frame cropping" id="CSI2_CTX6_TRANSCODEH" offset="0x1F0" width="32">
    
  <bitfield begin="31" description="Reserved" end="29" id="RSVD2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description="Pixels to output per line when the values is between 1 and 8191. Pixels HSKIP-WIDTH pixels are output when HCOUNT=0.  WIDTH corresponds to the image width provided by the sensor. " end="16" id="HCOUNT" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="13" id="RSVD1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="12" description="Pixel to skip horizontally. Valid values: 0-8191 " end="0" id="HSKIP" rwaccess="RW" width="13"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX6_TRANSCODEV" description="Transcode configuration register: defines vertical frame cropping" id="CSI2_CTX6_TRANSCODEV" offset="0x1F4" width="32">
    
  <bitfield begin="31" description="Reserved" end="29" id="RSVD2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description="Lines to output per frame when the values is between 1 and 8191. Pixels VSKIP-HEIGHT pixels are output when VCOUNT=0.  HEIGHT corresponds to the image height provided by the sensor. " end="16" id="VCOUNT" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="13" id="RSVD1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="12" description="Pixel to skip vertically Valid values: 0-8191 " end="0" id="VSKIP" rwaccess="RW" width="13"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX7_TRANSCODEH" description="Transcode configuration register: defines horizontal frame cropping" id="CSI2_CTX7_TRANSCODEH" offset="0x1F8" width="32">
    
  <bitfield begin="31" description="Reserved" end="29" id="RSVD2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description="Pixels to output per line when the values is between 1 and 8191. Pixels HSKIP-WIDTH pixels are output when HCOUNT=0.  WIDTH corresponds to the image width provided by the sensor. " end="16" id="HCOUNT" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="13" id="RSVD1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="12" description="Pixel to skip horizontally. Valid values: 0-8191 " end="0" id="HSKIP" rwaccess="RW" width="13"></bitfield>
  </register>
  
  
  <register acronym="CSI2_CTX7_TRANSCODEV" description="Transcode configuration register: defines vertical frame cropping" id="CSI2_CTX7_TRANSCODEV" offset="0x1FC" width="32">
    
  <bitfield begin="31" description="Reserved" end="29" id="RSVD2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description="Lines to output per frame when the values is between 1 and 8191. Pixels VSKIP-HEIGHT pixels are output when VCOUNT=0.  HEIGHT corresponds to the image height provided by the sensor. " end="16" id="VCOUNT" rwaccess="RW" width="13"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="13" id="RSVD1" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="12" description="Pixel to skip vertically Valid values: 0-8191 " end="0" id="VSKIP" rwaccess="RW" width="13"></bitfield>
  </register>
</module>
