<module name="SDTI" acronym="" XML_version="1.0" HW_revision="n/a" description="">
  <register id="SDTI_REVISION" acronym="SDTI_REVISION" offset="0x0" width="32" description="SDTI Identification Register">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x000000" description="Reserved for future use." range="" rwaccess="R"/>
    <bitfield id="SDTI_REV1" width="4" begin="7" end="4" resetval="See" description="High Part of Revision Number of current SDTI module fixed by hardware: it indicates major change." range="" rwaccess="R"/>
    <bitfield id="SDTI_REV0" width="4" begin="3" end="0" resetval="See" description="Low Part of Revision Number of current SDTI module fixed by hardware: it indicates minor change." range="" rwaccess="R"/>
  </register>
  <register id="SDTI_SYSCONFIG" acronym="SDTI_SYSCONFIG" offset="0x10" width="32" description="This register allows controlling various parameters of the OCP interface.Software reset have the same effect as hardware (power on) reset.This register is excluded from erroneous application access lock protection in order to allow standard soft reset OCP write access.">
    <bitfield id="RESERVED" width="30" begin="31" end="2" resetval="0x0000 0000" description="Reserved for future - read returns 0" range="" rwaccess="R"/>
    <bitfield id="SOFTRESET" width="1" begin="1" end="1" resetval="0" description="Read returns 0 / Write 1 to trigger SDTI module reset." range="" rwaccess="RW"/>
    <bitfield id="AUTOIDLE" width="1" begin="0" end="0" resetval="0" description="Internal OCP gating strategyOCP clock is free-runningAutomatic OCP clock gating strategy is appliedbased on OCP interface activity" range="" rwaccess="RW"/>
  </register>
  <register id="SDTI_SYSSTATUS" acronym="SDTI_SYSSTATUS" offset="0x14" width="32" description="This register provides status information about the module, excluding the interrupt status information.">
    <bitfield id="RESERVED" width="23" begin="31" end="9" resetval="0x000000" description="RFU for module specific status information" range="" rwaccess="R"/>
    <bitfield id="FIFOEMPTY" width="1" begin="8" end="8" resetval="1" description="SDTI FIFO not Empty (something to export)SDTI FIFO EmptyWrite access has no effect." range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="7" begin="7" end="1" resetval="0x00" description="RFU for OCP socket status information." range="" rwaccess="R">
      <bitenum value="0" token="RESERVED_0_r" description="Internal module reset in on-going"/>
      <bitenum value="1" token="RESERVED_1_r" description="Reset completed"/>
    </bitfield>
    <bitfield id="RESETDONE" width="1" begin="0" end="0" resetval="1" description="Internal Module reset monitoringInternal reset is on-goingReset completed" range="" rwaccess="R"/>
  </register>
  <register id="SDTI_WINCTRL" acronym="SDTI_WINCTRL" offset="0x24" width="32" description="Window control register.">
    <bitfield id="OWNERSHIP" width="2" begin="31" end="30" resetval="0x0" description="Read to get current ownership status. The claim status encoding is (0=Available, 1=Claimed, 2=Enabled, 3=Reserved)Send command to modify ownership state. See Table 13Note: (1) A successful command would cause these bit values to reflect the new state." range="" rwaccess="RW"/>
    <bitfield id="DEBUGGEROVERRIDE" width="1" begin="29" end="29" resetval="0" description="Reading from the DebuggerOverride bit returns a 1This qualifier bit is used with the debugger's CLAIM request. The DebuggerOverride bit shall not be latched.When written with DebuggerOverride=1, a claim request by the debugger shall be granted regardless of current ownership status of the unit.When written with DebuggerOverride=0, the claim request shall be granted only if the unit is available." range="" rwaccess="RW"/>
    <bitfield id="CURRENTOWNER" width="1" begin="28" end="28" resetval="0" description="This value reflects the SDTI ownership when the register is in a non-Available state.0=Debugger owns resource.1=Application owns resource" range="" rwaccess="RW"/>
    <bitfield id="RESERVED" width="25" begin="27" end="3" resetval="0x0000000" description="RFU" range="" rwaccess="R"/>
    <bitfield id="DEBUGGERTRACEEN" width="1" begin="2" end="2" resetval="0" description="0 Debugger writes to address matching window doesn't generate messages./1 Debugger writes to address matching window will generate messages" range="" rwaccess="RW"/>
    <bitfield id="CPU2TRACEEN" width="1" begin="1" end="1" resetval="0" description="0 Window disabled, no message generation/ 1Window enabled" range="" rwaccess="RW"/>
    <bitfield id="CPU1TRACEEN" width="1" begin="0" end="0" resetval="0" description="0 Window disabled, no message generation/ 1Window enabled" range="" rwaccess="RW"/>
  </register>
  <register id="SDTI_SCONFIG" acronym="SDTI_SCONFIG" offset="0x28" width="32" description="SDTI Serial configuration register.">
    <bitfield id="RESERVED" width="25" begin="31" end="7" resetval="0x0000000" description="RFU" range="" rwaccess="RW"/>
    <bitfield id="TXDSIZE" width="2" begin="6" end="5" resetval="0x2" description="00 1 bit TXD size/01 2-bit TXD size/10 4-bit TXD size/11 Reserved. (if set, interface will behave as 4-bit size)" range="" rwaccess="RW"/>
    <bitfield id="SINGLEEDGE" width="1" begin="4" end="4" resetval="0" description="0 Dual -edge operation mode/1 Single - edge operation mode" range="" rwaccess="RW"/>
    <bitfield id="SDTISCLKRATE" width="4" begin="3" end="0" resetval="0x1" description="0x0: Division by 10x1: Division by 10x2: Division by 20x3: Division by 30x4: Division by 40x5: Division by 50x6: Division by 60x7: Division by 70x8: Division by 80x9: Division by 90xA: Division by 10Others: Division by 1" range="" rwaccess="RW"/>
  </register>
  <register id="SDTI_TESTCTRL" acronym="SDTI_TESTCTRL" offset="0x2C" width="32" description="">
    <bitfield id="RESERVED" width="28" begin="31" end="4" resetval="0x0000000" description="RFU" range="" rwaccess="R"/>
    <bitfield id="SIMPLEPATSEL" width="1" begin="3" end="3" resetval="0" description="0 - simple pattern A1 - simple pattern F" range="" rwaccess="RW"/>
    <bitfield id="TESTPATTERNSEL" width="2" begin="2" end="1" resetval="0x0" description="00 - Simple pattern01 - Walking ones pattern10 - Ramp generation (incremental counter)11 - Pseudo random" range="" rwaccess="RW"/>
    <bitfield id="TESTMODE" width="1" begin="0" end="0" resetval="0" description="0 - SDTI serial interface exports trace messages (functional mode)1 - SDTI serial interface exports selected test patterns (test mode)" range="" rwaccess="RW"/>
  </register>
  <register id="INT_MODE_CTRL_REG" acronym="INT_MODE_CTRL_REG" offset="0xF00" width="32" description="">
    <bitfield id="RESERVED" width="31" begin="31" end="1" resetval="0x0000 0000" description="RFU" range="" rwaccess="R"/>
    <bitfield id="ITM" width="1" begin="0" end="0" resetval="0" description="Functional ModeWhen ITM=1, the SDTI is in Integration Test Mode." range="" rwaccess="RW"/>
  </register>
  <register id="INT_OUTPUT_REG" acronym="INT_OUTPUT_REG" offset="0xF04" width="32" description="This register allows the software to set any one of the output terminal to a high when the ITM signal is high. This register can be used to establish integration connectivity and topology. Refer to the Appendix, 7.1 SDTI Entity Table 17 to determine the OutBit Select number for each terminal.">
    <bitfield id="RESERVED" width="4" begin="31" end="28" resetval="0x0" description="RFU" range="" rwaccess="R"/>
    <bitfield id="NUMOUTPUTS" width="12" begin="27" end="16" resetval="0x005" description="This field shall indicate the number of output terminals on the component" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="3" begin="15" end="13" resetval="0x0" description="RFU" range="" rwaccess="R"/>
    <bitfield id="INTEGEN" width="1" begin="12" end="12" resetval="1" description="When IntegEn=1, the integration output is set to 1" range="" rwaccess="RW"/>
    <bitfield id="OUTBITSELECT" width="12" begin="11" end="0" resetval="0x000" description="This field shall selects the output bit to set high" range="" rwaccess="RW"/>
  </register>
  <register id="INT_INPUT_REG" acronym="INT_INPUT_REG" offset="0xF08" width="32" description="This register allows the software to read any of the input terminals when the ITM signal is high. This register can be used to establish integration connectivity and topology. Refer to the Appendix, 7.1 SDTI Entity Table 17 to determine the InBit Select number for each terminal.">
    <bitfield id="RESERVED" width="4" begin="31" end="28" resetval="0x0" description="RFU" range="" rwaccess="R"/>
    <bitfield id="NUMINPUTS" width="12" begin="27" end="16" resetval="0x002" description="This field shall indicate the number of input terminals on the component" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="3" begin="15" end="13" resetval="0x0" description="RFU" range="" rwaccess="R"/>
    <bitfield id="VALUE" width="1" begin="12" end="12" resetval="0" description="This field shall selects the input bit to read" range="" rwaccess="R"/>
    <bitfield id="INBITSELECT" width="12" begin="11" end="0" resetval="0x000" description="This field shall selects the input bit to read" range="" rwaccess="RW"/>
  </register>
  <register id="CLAIM_TAG_SET_REG" acronym="CLAIM_TAG_SET_REG" offset="0xFA0" width="32" description="The Claim Tag Set register is included for CoreSight compliance. Normally the lower 4 bits are used for claiming and releasing debug components, but SDTI implements a more sophisticated Claim mechanism. These bits can be used for software semaphores to help manage the debug resources, although the claim and enable mechanism of the SDTI resources must still be used. Writing a 1 to one of the set bits will cause the corresponding bit in the Claim Tag Value word to go high.">
    <bitfield id="RESERVED" width="31" begin="31" end="1" resetval="0x0000 0000" description="RFU" range="" rwaccess="R"/>
    <bitfield id="CLAIMTAGSIZE_SET" width="1" begin="0" end="0" resetval="1" description="When read, this field shall indicates the modules supports a 1-bit claim tagWriting a 1 shall: sets the specified Claim Tag Value bit. Writing a 0 shall have no effect." range="" rwaccess="RW"/>
  </register>
  <register id="CLAIM_TAG_CLEAR_REG" acronym="CLAIM_TAG_CLEAR_REG" offset="0xFA4" width="32" description="These bits can be used for software semaphores to help manage the debug resources. Writing a 1 to one of the clear bits will cause the corresponding bit in the Claim Tag Value word to go low. Reading this register returns the Claim Tag Value">
    <bitfield id="RESERVED" width="31" begin="31" end="1" resetval="0x0000 0000" description="" range="" rwaccess="R"/>
    <bitfield id="CLAINTAGVALUE_CLEAR" width="1" begin="0" end="0" resetval="0" description="Reading from this field shall return the Claim Tag ValueWriting a 1 shall: clear the specified Claim Tag Value bit. Writing a 0 shall have no effect." range="" rwaccess="RW"/>
  </register>
  <register id="LOCK_ACCESS_REG" acronym="LOCK_ACCESS_REG" offset="0xFB0" width="32" description="NoteThis 32-bit write only register is used to lockout errant accesses by application software. When written with a value of 0xC5ACCE55, application writes to the other registers within SDTI are enabled. Any other value shall inhibit application writes (write to Lock Access Register is always enabled). Inhibited application writes shall return an error response. Debugger accesses (PIMREQDEBUG = 1) are not affected by the Lock Access Register. This register is reset to zero (locked) when POR occurs. register is excluded from lock access scheme.">
    <bitfield id="LOCK_UNLOCK_KEY" width="32" begin="31" end="0" resetval="0x0000 0000" description="Unlock Key: 0xC5ACCE55" range="" rwaccess="W"/>
  </register>
  <register id="LOCK_STATUS_REG" acronym="LOCK_STATUS_REG" offset="0xFB4" width="32" description="Lock status register - registers provide a mechanism for blocking write access to the SDTI registers">
    <bitfield id="RESERVED" width="29" begin="31" end="3" resetval="0x0000 0000" description="RFU" range="" rwaccess="R"/>
    <bitfield id="EIGTBITLOCK" width="1" begin="2" end="2" resetval="0" description="0 indicates a 32-bit Lock Access Register1 indicates an 8-bit Lock Access Register." range="" rwaccess="R"/>
    <bitfield id="LOCKSTATUS" width="1" begin="1" end="1" resetval="1" description="0 indicates unlocked condition1 indicates a locked condition." range="" rwaccess="R"/>
    <bitfield id="LOCKIMPLEMENTED" width="1" begin="0" end="0" resetval="1" description="0 shall indicate no lock exists.1 indicates a locking mechanism exists," range="" rwaccess="R"/>
  </register>
  <register id="AUTHENTICATION_STATUS" acronym="AUTHENTICATION_STATUS" offset="0xFB8" width="32" description="Authentication status registar">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x000000" description="RFU" range="" rwaccess="R"/>
    <bitfield id="SECURE_NONINVASIVE_DEBUGSTATUS" width="2" begin="7" end="6" resetval="0x0" description="The Secure Non-Invasive Debug Status shall return 00 (functionality not implemented)" range="" rwaccess="R"/>
    <bitfield id="SECURE_INVASIVE_DEBUGSTATUS" width="2" begin="5" end="4" resetval="0x0" description="The Secure Invasive Debug Status shall return 00. (functionality not implemented)" range="" rwaccess="R"/>
    <bitfield id="NONSECURE_NONINVASIVE_DEBUGSTATUS" width="2" begin="3" end="2" resetval="0x0" description="The Non-Secure Non-Invasive Debug Status shall return 00 (functionality not implemented)" range="" rwaccess="R"/>
    <bitfield id="NONSECURE_INVASIVE_DEBUGSTATUS" width="2" begin="1" end="0" resetval="0x0" description="The Non-Secure Invasive Debug Status shall return 00.(functionality not implemented)" range="" rwaccess="R"/>
  </register>
  <register id="DEVICE_ID" acronym="DEVICE_ID" offset="0xFC8" width="32" description="Device identification register.The Device ID register is capability register and is implementation defined according to the CoreSight specification">
    <bitfield id="RESERVED" width="23" begin="31" end="9" resetval="0x000000" description="RFU" range="" rwaccess="R"/>
    <bitfield id="TIMESTAMP" width="1" begin="8" end="8" resetval="0" description="0 - TimeStamping feature not supported in SDTI1 - TimeStamping present in SDTI" range="" rwaccess="R"/>
    <bitfield id="FIFODEPTH" width="8" begin="7" end="0" resetval="0x00" description="SDTI FFIFO depth" range="" rwaccess="R"/>
  </register>
  <register id="DEVICE_TYPE_REG" acronym="DEVICE_TYPE_REG" offset="0xFCC" width="32" description="Device type register">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x000000" description="RFU" range="" rwaccess="R"/>
    <bitfield id="DEVICETYPE" width="8" begin="7" end="0" resetval="0x63" description="The device type shall return 0x63. Enables devices to be identified as to their CoreSight Class." range="" rwaccess="R"/>
  </register>
  <register id="PERIPHERAL_ID4" acronym="PERIPHERAL_ID4" offset="0xFD0" width="32" description="All Peripheral ID registers are implemented as 8-bit registers with the upper 24 bits returning a value of zero.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x000000" description="RFU" range="" rwaccess="R"/>
    <bitfield id="FOURKBCOUNT" width="4" begin="7" end="4" resetval="0x0" description="4KB Count" range="" rwaccess="R"/>
    <bitfield id="JEP106CONTCODE" width="4" begin="3" end="0" resetval="0x0" description="JEP106 Continuation Code" range="" rwaccess="R"/>
  </register>
  <register id="PERIPHERAL_ID5" acronym="PERIPHERAL_ID5" offset="0xFD4" width="32" description="All Peripheral ID registers are implemented as 8-bit registers with the upper 24 bits returning a value of zero.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x000000" description="RFU" range="" rwaccess="RW"/>
    <bitfield id="RESERVED" width="8" begin="7" end="0" resetval="0x00" description="RFU" range="" rwaccess="R"/>
  </register>
  <register id="PERIPHERAL_ID6" acronym="PERIPHERAL_ID6" offset="0xFD8" width="32" description="All Peripheral ID registers are implemented as 8-bit registers with the upper 24 bits returning a value of zero.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x000000" description="RFU" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="8" begin="7" end="0" resetval="0x00" description="RFU" range="" rwaccess="R"/>
  </register>
  <register id="PERIPHERAL_ID7" acronym="PERIPHERAL_ID7" offset="0xFDC" width="32" description="All Peripheral ID registers are implemented as 8-bit registers with the upper 24 bits returning a value of zero.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x000000" description="RFU" range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="8" begin="7" end="0" resetval="0x00" description="RFU" range="" rwaccess="R"/>
  </register>
  <register id="PERIPHERAL_ID0" acronym="PERIPHERAL_ID0" offset="0xFE0" width="32" description="All Peripheral ID registers are implemented as 8-bit registers with the upper 24 bits returning a value of zero.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x000000" description="RFU" range="" rwaccess="R"/>
    <bitfield id="PARTNUMBER0" width="8" begin="7" end="0" resetval="0x20" description="0x20 Part Number 0 (Middle and Lower BCD value of Device Number)" range="" rwaccess="R"/>
  </register>
  <register id="PERIPHERAL_ID1" acronym="PERIPHERAL_ID1" offset="0xFE4" width="32" description="All Peripheral ID registers are implemented as 8-bit registers with the upper 24 bits returning a value of zero.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x000000" description="RFU" range="" rwaccess="R"/>
    <bitfield id="JEP106IDCODE" width="4" begin="7" end="4" resetval="0x7" description="JEP106 identity code [3:0]" range="" rwaccess="R"/>
    <bitfield id="PARTNUMBER1" width="4" begin="3" end="0" resetval="0x1" description="Part number 1 (upper BCD value of device number)" range="" rwaccess="R"/>
  </register>
  <register id="PERIPHERAL_ID2" acronym="PERIPHERAL_ID2" offset="0xFE8" width="32" description="All Peripheral ID registers are implemented as 8-bit registers with the upper 24 bits returning a value of zero.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x000000" description="RFU" range="" rwaccess="R"/>
    <bitfield id="REVISION" width="4" begin="7" end="4" resetval="0x1" description="Revision number of peripheral.Major revision from OCP version register." range="" rwaccess="R"/>
    <bitfield id="JEDEC" width="1" begin="3" end="3" resetval="1" description="Indicates that a JEDEC assigned value is used." range="" rwaccess="R"/>
    <bitfield id="JEP106IDCODE" width="3" begin="2" end="0" resetval="0x1" description="JEP106 identity code [6:4]" range="" rwaccess="R"/>
  </register>
  <register id="PERIPHERAL_ID3" acronym="PERIPHERAL_ID3" offset="0xFEC" width="32" description="All Peripheral ID registers are implemented as 8-bit registers with the upper 24 bits returning a value of zero.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x000000" description="RFU" range="" rwaccess="R"/>
    <bitfield id="REVAND" width="4" begin="7" end="4" resetval="0x0" description="RevAnd (at top level)" range="" rwaccess="R"/>
    <bitfield id="CUSTOMMODIFIED" width="4" begin="3" end="0" resetval="0x0" description="Customer Modified" range="" rwaccess="R"/>
  </register>
  <register id="COMPONENT_ID0" acronym="COMPONENT_ID0" offset="0xFF0" width="32" description="All Component ID registers are implemented as 8-bit registers with the upper 24 bits returning a value of zero. These registers are used to indicate to software the existence of a peripheral. Software will read the last four locations in each 4K block to determine if a Coresight Peripheral exists.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x000000" description="RFU" range="" rwaccess="R"/>
    <bitfield id="COMPONENTID0" width="8" begin="7" end="0" resetval="0x0D" description="This register shall return Preamble value 0x0D" range="" rwaccess="R"/>
  </register>
  <register id="COMPONENT_ID1" acronym="COMPONENT_ID1" offset="0xFF4" width="32" description="All Component ID registers are implemented as 8-bit registers with the upper 24 bits returning a value of zero. These registers are used to indicate to software the existence of a peripheral. Software will read the last four locations in each 4K block to determine if a Coresight Peripheral exists.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x000000" description="RFU" range="" rwaccess="R"/>
    <bitfield id="COMPNONENTID1" width="8" begin="7" end="0" resetval="0x90" description="This register shall return Preamble value 0x90" range="" rwaccess="R"/>
  </register>
  <register id="COMPONENT_ID2" acronym="COMPONENT_ID2" offset="0xFF8" width="32" description="All Component ID registers are implemented as 8-bit registers with the upper 24 bits returning a value of zero. These registers are used to indicate to software the existence of a peripheral. Software will read the last four locations in each 4K block to determine if a Coresight Peripheral exists.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x000000" description="RFU" range="" rwaccess="R"/>
    <bitfield id="COMPONENTID2" width="8" begin="7" end="0" resetval="0x05" description="This register shall return Preamble value 0x05" range="" rwaccess="R"/>
  </register>
  <register id="COMPONENT_ID3" acronym="COMPONENT_ID3" offset="0xFFC" width="32" description="All Component ID registers are implemented as 8-bit registers with the upper 24 bits returning a value of zero. These registers are used to indicate to software the existence of a peripheral. Software will read the last four locations in each 4K block to determine if a Coresight Peripheral exists.">
    <bitfield id="RESERVED" width="24" begin="31" end="8" resetval="0x000000" description="" range="" rwaccess="R"/>
    <bitfield id="COMPONENTID3" width="8" begin="7" end="0" resetval="0xB1" description="This register shall return Preamble value 0xB1" range="" rwaccess="R"/>
  </register>
</module>
