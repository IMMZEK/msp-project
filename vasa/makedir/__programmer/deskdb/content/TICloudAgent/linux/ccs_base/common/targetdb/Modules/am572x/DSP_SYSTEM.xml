<module name="DSP_SYSTEM" acronym="" XML_version="1.0" HW_revision="n/a" description="">
  <register id="DSP_SYS_REVISION" acronym="DSP_SYS_REVISION" offset="0x0" width="32" description="">
    <bitfield id="REVISION" width="32" begin="31" end="0" resetval="0x-" description="IP Revision" range="" rwaccess="R"/>
  </register>
  <register id="DSP_SYS_HWINFO" acronym="DSP_SYS_HWINFO" offset="0x4" width="32" description="">
    <bitfield id="INFO" width="28" begin="31" end="4" resetval="0x0" description="0x0: No configurable options in subsystem." range="" rwaccess="R"/>
    <bitfield id="NUM" width="4" begin="3" end="0" resetval="0x0" description="Instance Number Set by subsystem input. In a multi-DSP system, provides a unique/incrementing values for each DSP." range="" rwaccess="R"/>
  </register>
  <register id="DSP_SYS_SYSCONFIG" acronym="DSP_SYS_SYSCONFIG" offset="0x8" width="32" description="">
    <bitfield id="RESERVED" width="23" begin="31" end="9" resetval="0x00 0000" description="Reserved. Read returns 0." range="" rwaccess="R"/>
    <bitfield id="RESERVED" width="1" begin="8" end="8" resetval="0x0" description="Reserved. User must write 0." range="" rwaccess="RW"/>
    <bitfield id="RESERVED" width="2" begin="7" end="6" resetval="0x0" description="Reserved. Read returns 0." range="" rwaccess="R"/>
    <bitfield id="STANDBYMODE" width="2" begin="5" end="4" resetval="0x2" description="0x0: FORCE_STANDBY This mode is a backup mode intended to be used only if the smart-idle mode is bugged. When in this mode, the SAF asserts with minimal hardware condition the 'STANDBY' status. It is the responsibility of the software to ensure that the SAF is in a correct quiet state before programming this mode. Additionally when in this mode, the SAF is not allowed to generate wakeup request." range="" rwaccess="RW">
      <bitenum value="1" id="NO_STANDBY_SAF_&quot;STANDBY&quot;_1" token="STANDBYMODE_1" description="NO_STANDBY This mode is a backup mode intended to be used only if the smart-idle mode is bugged. When in this mode, the SAF in C66xOSS asserts the 'STANDBY' status."/>
      <bitenum value="2" id="SMART_STANDBY_SAF_2" token="STANDBYMODE_2" description="SMART_STANDBY default. C66xOSS generates the standby status based upon all hardware internal status, namely after having performed all hardware operations necessary to be in a correct quiet state. Additionally when in this mode, the SAF is not allowed to generate wakeup request."/>
      <bitenum value="3" id="SMART_STANDBY_WKUP_SAF_3" token="STANDBYMODE_3" description="SMART_STANDBY_WKUP Same as Smart-Standby. (C66xOSS generates the standby status based upon all hardware internal status, namely after having performed all hardware operations necessary to be in a correct quiet state ). . Additionally when in this mode, the SAF is allowed to generate wakeup request"/>
    </bitfield>
    <bitfield id="IDLEMODE" width="2" begin="3" end="2" resetval="0x2" description="0x0: FORCE_IDLE This mode is a backup mode intended to be used only if the smart-idle mode is bugged. When in this mode, the IAF acknowledges a request to go idle from the power manager with minimal hardware condition. It is the responsibility of the software to ensure that the IAF are in a correct quiet state before requesting a force-idle transition. Additionally when in this mode, the IAF is not allowed to generate any wakeup request." range="" rwaccess="RW">
      <bitenum value="1" id="NO_IDLE_IAF_1" token="IDLEMODE_1" description="NO_IDLE When in this mode, the IAF disregards any request to go idle from the power manager."/>
      <bitenum value="2" id="SMART_IDLE_IAF_IAF_2" token="IDLEMODE_2" description="SMART_IDLE default. When in this mode, the IAF acknowledges a request to go idle from the power manager after having performed all hardware operations necessary to be in a correct quiet state. Additionally when in this mode, the IAF is not allowed to generate any wakeup request"/>
      <bitenum value="3" id="SMARTIDLEWKUP_IAF_IAF_IAF_3" token="IDLEMODE_3" description="SMARTIDLEWKUP When in this mode, the IAF acknowledges a request to go idle from the power manager after having performed all hardware operations necessary for the IAF to be in a correct quiet state. Additionally when in this mode, the IAF is allowed to generate wakeup request."/>
    </bitfield>
    <bitfield id="RESERVED" width="2" begin="1" end="0" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
  </register>
  <register id="DSP_SYS_STAT" acronym="DSP_SYS_STAT" offset="0xC" width="32" description="This register is intended to provide indication to software (including a remote host) as to whether the DSP is able to enter a low power mode.">
    <bitfield id="RESERVED" width="26" begin="31" end="6" resetval="0x000 0000" description="" range="" rwaccess="R"/>
    <bitfield id="OCPI_DISC_STAT" width="2" begin="5" end="4" resetval="0x2" description="L3_MAIN (OCP) Initiator(s) Disconnect Status" range="" rwaccess="R">
      <bitenum value="0" id="OCP_inititiator_ports_are_disconnected" token="OCPI_DISC_STAT_0_r" description="OCP inititiator ports are disconnected"/>
      <bitenum value="1" id="OCP_1" token="OCPI_DISC_STAT_1_r" description="OCP initiator ports are attempting to disconnect."/>
      <bitenum value="2" id="OCP_2" token="OCPI_DISC_STAT_2_r" description="OCP initiator ports are active, no request to disconnect is pending."/>
    </bitfield>
    <bitfield id="RESERVED" width="1" begin="3" end="3" resetval="0" description="" range="" rwaccess="R"/>
    <bitfield id="TC1_STAT" width="1" begin="2" end="2" resetval="1" description="EDMA TC1 Status" range="" rwaccess="R">
      <bitenum value="0" id="IDLE" token="TC1_STAT_0" description="IDLE"/>
      <bitenum value="1" id="ACTIVE" token="TC1_STAT_1" description="ACTIVE - Active, based on inverse of tptc1_mstandby"/>
    </bitfield>
    <bitfield id="TC0_STAT" width="1" begin="1" end="1" resetval="1" description="EDMA TC0 Status" range="" rwaccess="R">
      <bitenum value="0" id="IDLE" token="TC0_STAT_0" description="IDLE"/>
      <bitenum value="1" id="ACTIVE" token="TC0_STAT_1" description="ACTIVE - Active, based on inverse of tptc0_mstandby"/>
    </bitfield>
    <bitfield id="C66X_STAT" width="1" begin="0" end="0" resetval="1" description="C66x Status" range="" rwaccess="R">
      <bitenum value="0" id="IDLE" token="C66X_STAT_0" description="IDLE C66x core is idle"/>
      <bitenum value="1" id="ACTIVE" token="C66X_STAT_1" description="ACTIVE C66x core is active."/>
    </bitfield>
  </register>
  <register id="DSP_SYS_DISC_CONFIG" acronym="DSP_SYS_DISC_CONFIG" offset="0x10" width="32" description="This register is used to manually disconnect the OCP busses.">
    <bitfield id="RESERVED" width="31" begin="31" end="1" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="OCPI_DISC" width="1" begin="0" end="0" resetval="0" description="OCP Initiator (on L3_MAIN) Disconnect request" range="" rwaccess="RW">
      <bitenum value="0" id="0" token="OCPI_DISC_0_r" description="Disconnect not in progress, or has completed."/>
      <bitenum value="0" id="No_effect." token="OCPI_DISC_0_w" description="No effect."/>
      <bitenum value="1" id="Disconnect_request_is_in_progress." token="OCPI_DISC_1_r" description="Disconnect request is in progress."/>
      <bitenum value="1" id="OCP_1" token="OCPI_DISC_1_w" description="Request for OCP Initiator to disconnect and mask write byte enable signals."/>
    </bitfield>
  </register>
  <register id="DSP_SYS_BUS_CONFIG" acronym="DSP_SYS_BUS_CONFIG" offset="0x14" width="32" description="This register controls the burst and priority settings for the internal initiators.">
    <bitfield id="RESERVED" width="1" begin="31" end="31" resetval="0" description="" range="" rwaccess="R"/>
    <bitfield id="SDMA_PRI" width="3" begin="30" end="28" resetval="0x4" description="Sets the CBA/VBusM Priority for the DSP C66x CorePac SDMA port. Can typically be left at default value. 0x0 is highest, ..., 0x7 is lowest priority." range="" rwaccess="RW"/>
    <bitfield id="RESERVED" width="3" begin="27" end="25" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="NOPOSTOVERRIDE" width="1" begin="24" end="24" resetval="1" description="OCP Posted Write vs Non-Posted Write override" range="" rwaccess="RW">
      <bitenum value="0" id="MIX" token="NOPOSTOVERRIDE_0" description="MIX Posted writes are used for cacheable write transactions. Non-posted writes are used for non-cacheable write transactions."/>
      <bitenum value="1" id="NOPOST" token="NOPOSTOVERRIDE_1" description="NOPOST Non-posted writes are used exclusively."/>
    </bitfield>
    <bitfield id="RESERVED" width="2" begin="23" end="22" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="SDMA_L2PRES" width="2" begin="21" end="20" resetval="0x0" description="OCP Target port L2 Interconnect Pressure. Driven on ocp mflag to control arbitration within the L2 interconnect." range="" rwaccess="RW">
      <bitenum value="0" id="LOW_-_Lowest_pressure" token="SDMA_L2PRES_0" description="LOW - Lowest pressure"/>
      <bitenum value="1" id="MED_-_Medium_pressure" token="SDMA_L2PRES_1" description="MED - Medium pressure"/>
      <bitenum value="2" id="Reserved" token="SDMA_L2PRES_2" description="Reserved"/>
      <bitenum value="3" id="HIGH_-_High_pressure" token="SDMA_L2PRES_3" description="HIGH - High pressure"/>
    </bitfield>
    <bitfield id="RESERVED" width="2" begin="19" end="18" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="CFG_L2PRES" width="2" begin="17" end="16" resetval="0x0" description="DSP CFG L2 Interconnect Pressure. Driven on ocp mflag to control arbitration within the L2 interconnect" range="" rwaccess="RW">
      <bitenum value="0" id="LOW_-_Lowest_pressure" token="CFG_L2PRES_0" description="LOW - Lowest pressure"/>
      <bitenum value="1" id="MED_-_Medium_pressure" token="CFG_L2PRES_1" description="MED - Medium pressure"/>
      <bitenum value="2" id="Reserved" token="CFG_L2PRES_2" description="Reserved"/>
      <bitenum value="3" id="HIGH_-_High_pressure" token="CFG_L2PRES_3" description="HIGH - High pressure"/>
    </bitfield>
    <bitfield id="RESERVED" width="2" begin="15" end="14" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="TC1_L2PRES" width="2" begin="13" end="12" resetval="0x0" description="TC1 L2 Interconnect Pressure. Driven on ocp mflag to control arbitration within the L2 interconnect" range="" rwaccess="RW">
      <bitenum value="0" id="LOW_-_Lowest_pressure" token="TC1_L2PRES_0" description="LOW - Lowest pressure"/>
      <bitenum value="1" id="MED_-_Medium_pressure" token="TC1_L2PRES_1" description="MED - Medium pressure"/>
      <bitenum value="2" id="Reserved" token="TC1_L2PRES_2" description="Reserved"/>
      <bitenum value="3" id="HIGH_-_High_pressure" token="TC1_L2PRES_3" description="HIGH - High pressure"/>
    </bitfield>
    <bitfield id="RESERVED" width="2" begin="11" end="10" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="TC0_L2PRES" width="2" begin="9" end="8" resetval="0x0" description="TC0 L2 Interconnect Pressure. Driven on ocp mflag to control arbitration within the L2 interconnect." range="" rwaccess="RW">
      <bitenum value="0" id="LOW_-_Lowest_pressure" token="TC0_L2PRES_0" description="LOW - Lowest pressure"/>
      <bitenum value="1" id="MED_-_Medium_pressure" token="TC0_L2PRES_1" description="MED - Medium pressure"/>
      <bitenum value="2" id="Reserved" token="TC0_L2PRES_2" description="Reserved"/>
      <bitenum value="3" id="HIGH_-_High_pressure" token="TC0_L2PRES_3" description="HIGH - High pressure"/>
    </bitfield>
    <bitfield id="RESERVED" width="2" begin="7" end="6" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="TC1_DBS" width="2" begin="5" end="4" resetval="0x3" description="TC1 Default Burst size." range="" rwaccess="RW">
      <bitenum value="0" id="BYTE_16_-_&quot;16-Byte&quot;_bursts" token="TC1_DBS_0" description="BYTE_16 - '16-Byte' bursts"/>
      <bitenum value="1" id="BYTE_32_-_&quot;32-Byte&quot;_bursts" token="TC1_DBS_1" description="BYTE_32 - '32-Byte' bursts"/>
      <bitenum value="2" id="BYTE_64_-_&quot;64-Byte&quot;_bursts" token="TC1_DBS_2" description="BYTE_64 - '64-Byte' bursts"/>
      <bitenum value="3" id="BYTE_128_-_&quot;128-Byte&quot;_bursts" token="TC1_DBS_3" description="BYTE_128 - '128-Byte' bursts"/>
    </bitfield>
    <bitfield id="RESERVED" width="2" begin="3" end="2" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="TC0_DBS" width="2" begin="1" end="0" resetval="0x3" description="TC0 Default Burst size" range="" rwaccess="RW">
      <bitenum value="0" id="BYTE_16_-_&quot;16-Byte&quot;_bursts" token="TC0_DBS_0" description="BYTE_16 - '16-Byte' bursts"/>
      <bitenum value="1" id="BYTE_32_-_&quot;32-Byte&quot;_bursts" token="TC0_DBS_1" description="BYTE_32 - '32-Byte' bursts"/>
      <bitenum value="2" id="BYTE_64_-_&quot;64-Byte&quot;_bursts" token="TC0_DBS_2" description="BYTE_64 - '64-Byte' bursts"/>
      <bitenum value="3" id="BYTE_128_-_&quot;128-Byte&quot;_bursts" token="TC0_DBS_3" description="BYTE_128 - '128-Byte' bursts"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_MMU_CONFIG" acronym="DSP_SYS_MMU_CONFIG" offset="0x18" width="32" description="This register is used to enable the subsystem MMUs.">
    <bitfield id="RESERVED" width="19" begin="31" end="13" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="MMU1_ABORT" width="1" begin="12" end="12" resetval="0" description="MMU1 Abort" range="" rwaccess="RW">
      <bitenum value="0" id="NOABORT" token="MMU1_ABORT_0" description="NOABORT = Abort not requested."/>
      <bitenum value="1" id="ABORT" token="MMU1_ABORT_1" description="ABORT = MMU abort requested. Can be used in case of page translation failure or lockup."/>
    </bitfield>
    <bitfield id="RESERVED" width="3" begin="11" end="9" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="MMU0_ABORT" width="1" begin="8" end="8" resetval="0" description="MMU0 Abort" range="" rwaccess="RW">
      <bitenum value="0" id="NOABORT" token="MMU0_ABORT_0" description="NOABORT = Abort not requested."/>
      <bitenum value="1" id="ABORT" token="MMU0_ABORT_1" description="ABORT = MMU abort requested. Can be used in case of page translation failure or lockup."/>
    </bitfield>
    <bitfield id="RESERVED" width="3" begin="7" end="5" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="MMU1_EN" width="1" begin="4" end="4" resetval="0" description="MMU1 Enable" range="" rwaccess="RW">
      <bitenum value="0" id="DISABLED" token="MMU1_EN_0" description="DISABLED = MMU is disabled and the MMU IP is bypassed."/>
      <bitenum value="1" id="ENABLED" token="MMU1_EN_1" description="ENABLED = MMU is enabled. (The MMU mmrs (including Enable bit) need to be set in addition to this bit.)"/>
    </bitfield>
    <bitfield id="RESERVED" width="3" begin="3" end="1" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="MMU0_EN" width="1" begin="0" end="0" resetval="0" description="MMU0 Enable" range="" rwaccess="RW">
      <bitenum value="0" id="DISABLED" token="MMU0_EN_0" description="DISABLED = MMU is disabled and the MMU IP is bypassed."/>
      <bitenum value="1" id="ENABLED" token="MMU0_EN_1" description="ENABLED = MMU is enabled. (The MMU mmrs (including Enable bit) need to be set in addition to this bit.)"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_IRQWAKEEN0" acronym="DSP_SYS_IRQWAKEEN0" offset="0x20" width="32" description="The register provides a global interrupt wakeup enable bit vector that defines which input interrupts are used to cause a wake from powerdown state (via the slave idle protocol). IRQWAKEEN0 is for interrupt inputs 63 thru 32, and IRQWAKEEN1 is for interrupt inputs 95 thru 64. Internal interrupts cannot cause a wake condition since in this state there is no guaranteed clock and all sub-modules should be in idle state. Software can write 1 to set and 0 to clear the corresponding bit (i.e., enable the corresponding interrupt for wakeup). Reads of this register return the actual state of the enable register.">
    <bitfield id="ENABLE" width="32" begin="31" end="0" resetval="0x0" description="Wakeup Enable bit vector for interrupt #n+32" range="" rwaccess="RW">
      <bitenum value="0" id="DISABLE" token="ENABLE_0" description="DISABLE = Interrupt #n+32 disabled for wakeup"/>
      <bitenum value="1" id="ENABLE" token="ENABLE_1" description="ENABLE = Interrupt #n+32 enabled for wakeup"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_IRQWAKEEN1" acronym="DSP_SYS_IRQWAKEEN1" offset="0x24" width="32" description="The register provides a global interrupt wakeup enable bit vector that defines which input interrupts are used to cause a wake from powerdown state (via the slave idle protocol). IRQWAKEEN0 is for interrupt inputs 63 thru 32, and IRQWAKEEN1 is for interrupt inputs 95 thru 64. Internal interrupts cannot cause a wake condition since in this state there is no guaranteed clock and all sub-modules should be in idle state. Software can write 1 to set and 0 to clear the corresponding bit (i.e., enable the corresponding interrupt for wakeup). Reads of this register return the actual state of the enable register.">
    <bitfield id="ENABLE" width="32" begin="31" end="0" resetval="0x0" description="Wakeup Enable bit vector for interrupt #n+64" range="" rwaccess="RW">
      <bitenum value="0" id="DISABLE" token="ENABLE_0" description="DISABLE = Interrupt #n+64 disabled for wakeup"/>
      <bitenum value="1" id="ENABLE" token="ENABLE_1" description="ENABLE = Interrupt #n+64 enabled for wakeup"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_DMAWAKEEN0" acronym="DSP_SYS_DMAWAKEEN0" offset="0x30" width="32" description="The register provides a global dma event wakeup enable bit vector that defines which input dma events are used to cause a wake from powerdown state (via the slave idle protocol). DMAWAKEEN0 is for dma event inputs 31 thru 0, and DMAWAKEEN1 is for dma event inputs 63 thru 32. Software can write 1 to set and 0 to clear the corresponding bit (i.e., enable the corresponding dma event for wakeup). Reads of this register return the actual state of the enable register.">
    <bitfield id="ENABLE" width="32" begin="31" end="0" resetval="0x0" description="Wakeup Enable for event #n" range="" rwaccess="RW">
      <bitenum value="0" id="DISABLE" token="ENABLE_0" description="DISABLE = Interrupt #n disabled for wakeup"/>
      <bitenum value="1" id="ENABLE" token="ENABLE_1" description="ENABLE = Interrupt #n enabled for wakeup"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_DMAWAKEEN1" acronym="DSP_SYS_DMAWAKEEN1" offset="0x34" width="32" description="The register provides a global dma event wakeup enable bit vector that defines which input dma events are used to cause a wake from powerdown state (via the slave idle protocol). DMAWAKEEN0 is for dma event inputs 31 thru 0, and DMAWAKEEN1 is for dma event inputs 63 thru 32. Software can write 1 to set and 0 to clear the corresponding bit (i.e., enable the corresponding dma event for wakeup). Reads of this register return the actual state of the enable register.">
    <bitfield id="ENABLE" width="32" begin="31" end="0" resetval="0x0" description="Wakeup Enable for event #n+32" range="" rwaccess="RW">
      <bitenum value="0" id="DISABLE" token="ENABLE_0" description="DISABLE = Interrupt #n+32 disabled for wakeup"/>
      <bitenum value="1" id="ENABLE" token="ENABLE_1" description="ENABLE = Interrupt #n+32 enabled for wakeup"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_EVTOUT_SET" acronym="DSP_SYS_EVTOUT_SET" offset="0x40" width="32" description="These registers can be used to drive event outputs from the DSP subsystem to a desired state.">
    <bitfield id="EVENT" width="32" begin="31" end="0" resetval="0x0" description="Output Event for event #n" range="" rwaccess="RW">
      <bitenum value="1" id="Drive_output_event_#n_high/1." token="EVENT_1_w" description="Drive output event #n high/1."/>
      <bitenum value="0" id="Event_#n_is_low/0." token="EVENT_0_r" description="Event #n is low/0."/>
      <bitenum value="1" id="Event_#n_is_high/1." token="EVENT_1_r" description="Event #n is high/1."/>
      <bitenum value="0" id="No_action." token="EVENT_0_w" description="No action."/>
    </bitfield>
  </register>
  <register id="DSP_SYS_EVTOUT_CLR" acronym="DSP_SYS_EVTOUT_CLR" offset="0x44" width="32" description="These registers can be used to drive event outputs from the DSP subsystem to a desired state.">
    <bitfield id="EVENT" width="32" begin="31" end="0" resetval="0x0" description="Output Event for event #n" range="" rwaccess="RW">
      <bitenum value="0" id="Event_#n_is_low/0." token="EVENT_0_r" description="Event #n is low/0."/>
      <bitenum value="1" id="Drive_output_event_#n_low/0." token="EVENT_1_w" description="Drive output event #n low/0."/>
      <bitenum value="1" id="Event_#n_is_high/1." token="EVENT_1_r" description="Event #n is high/1."/>
      <bitenum value="0" id="No_action." token="EVENT_0_w" description="No action."/>
    </bitfield>
  </register>
  <register id="DSP_SYS_ERRINT_IRQSTATUS_RAW" acronym="DSP_SYS_ERRINT_IRQSTATUS_RAW" offset="0x50" width="32" description="This register provides a per-event raw interrupt status vector">
    <bitfield id="RESERVED" width="13" begin="31" end="19" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="EVENT" width="19" begin="18" end="0" resetval="0x0" description="Settable raw status for event #n" range="" rwaccess="RW">
      <bitenum value="0" id="No_event_pending" token="EVENT_0_r" description="No event pending"/>
      <bitenum value="0" id="No_action" token="EVENT_0_w" description="No action"/>
      <bitenum value="1" id="Event_pending" token="EVENT_1_r" description="Event pending"/>
      <bitenum value="1" id="Set_event_(for_debug)" token="EVENT_1_w" description="Set event (for debug)"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_ERRINT_IRQSTATUS" acronym="DSP_SYS_ERRINT_IRQSTATUS" offset="0x54" width="32" description="This register provides a per-event enabled interrupt status vector.">
    <bitfield id="RESERVED" width="13" begin="31" end="19" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="EVENT" width="19" begin="18" end="0" resetval="0x0" description="Clearable, enabled status for event #n" range="" rwaccess="RW">
      <bitenum value="0" id="No_enabled_event_pending" token="EVENT_0_r" description="No enabled event pending"/>
      <bitenum value="0" id="No_action" token="EVENT_0_w" description="No action"/>
      <bitenum value="1" id="Enabled_Event_pending" token="EVENT_1_r" description="Enabled Event pending"/>
      <bitenum value="1" id="Clear_raw_event" token="EVENT_1_w" description="Clear raw event"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_ERRINT_IRQENABLE_SET" acronym="DSP_SYS_ERRINT_IRQENABLE_SET" offset="0x58" width="32" description="This register provides a per-event interrupt enable bit vector.">
    <bitfield id="RESERVED" width="13" begin="31" end="19" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="ENABLE" width="19" begin="18" end="0" resetval="0x0" description="Enable for event #n" range="" rwaccess="RW">
      <bitenum value="0" id="Interrupt_disabled" token="ENABLE_0_r" description="Interrupt disabled"/>
      <bitenum value="0" id="No_action" token="ENABLE_0_w" description="No action"/>
      <bitenum value="1" id="Interrupt_enabled" token="ENABLE_1_r" description="Interrupt enabled"/>
      <bitenum value="1" id="Enable_interrupt" token="ENABLE_1_w" description="Enable interrupt"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_ERRINT_IRQENABLE_CLR" acronym="DSP_SYS_ERRINT_IRQENABLE_CLR" offset="0x5C" width="32" description="This register provides a per-event interrupt enable bit vector.">
    <bitfield id="RESERVED" width="13" begin="31" end="19" resetval="0x0" description="" range="" rwaccess="R"/>
    <bitfield id="ENABLE" width="19" begin="18" end="0" resetval="0x0" description="Enable for event #n" range="" rwaccess="RW">
      <bitenum value="0" id="Interrupt_disabled" token="ENABLE_0_r" description="Interrupt disabled"/>
      <bitenum value="0" id="No_action" token="ENABLE_0_w" description="No action"/>
      <bitenum value="1" id="Interrupt_enabled" token="ENABLE_1_r" description="Interrupt enabled"/>
      <bitenum value="1" id="1" token="ENABLE_1_w" description="Disable interrupt (i.e., clear ENABLEn bit)"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_EDMAWAKE0_IRQSTATUS_RAW" acronym="DSP_SYS_EDMAWAKE0_IRQSTATUS_RAW" offset="0x60" width="32" description="This register provides a per-event raw interrupt status vector">
    <bitfield id="EVENT" width="32" begin="31" end="0" resetval="0x0" description="Settable raw status for event #n" range="" rwaccess="RW">
      <bitenum value="0" id="No_event_pending" token="EVENT_0_r" description="No event pending"/>
      <bitenum value="1" id="Set_event_(for_debug)" token="EVENT_1_w" description="Set event (for debug)"/>
      <bitenum value="1" id="Event_pending" token="EVENT_1_r" description="Event pending"/>
      <bitenum value="0" id="No_action" token="EVENT_0_w" description="No action"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_EDMAWAKE0_IRQSTATUS" acronym="DSP_SYS_EDMAWAKE0_IRQSTATUS" offset="0x64" width="32" description="This register provides a per-event enabled interrupt status vector.">
    <bitfield id="EVENT" width="32" begin="31" end="0" resetval="0x0" description="Clearable, enabled status for event #n" range="" rwaccess="RW">
      <bitenum value="0" id="No_enabled_event_pending" token="EVENT_0_r" description="No enabled event pending"/>
      <bitenum value="1" id="Clear_raw_event" token="EVENT_1_w" description="Clear raw event"/>
      <bitenum value="1" id="Enabled_Event_pending" token="EVENT_1_r" description="Enabled Event pending"/>
      <bitenum value="0" id="No_action" token="EVENT_0_w" description="No action"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_EDMAWAKE0_IRQENABLE_SET" acronym="DSP_SYS_EDMAWAKE0_IRQENABLE_SET" offset="0x68" width="32" description="This register provides a per-event interrupt enable bit vector.">
    <bitfield id="ENABLE" width="32" begin="31" end="0" resetval="0x0000 0000" description="Enable for event #n" range="" rwaccess="RW">
      <bitenum value="0" id="Interrupt_disabled" token="ENABLE_0_r" description="Interrupt disabled"/>
      <bitenum value="1" id="Enable_interrupt" token="ENABLE_1_w" description="Enable interrupt"/>
      <bitenum value="1" id="Interrupt_enabled" token="ENABLE_1_r" description="Interrupt enabled"/>
      <bitenum value="0" id="No_action" token="ENABLE_0_w" description="No action"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_EDMAWAKE0_IRQENABLE_CLR" acronym="DSP_SYS_EDMAWAKE0_IRQENABLE_CLR" offset="0x6C" width="32" description="This register provides a per-event interrupt enable bit vector.">
    <bitfield id="ENABLE" width="32" begin="31" end="0" resetval="0x0" description="Enable for event #n" range="" rwaccess="RW">
      <bitenum value="0" id="Interrupt_disabled" token="ENABLE_0_r" description="Interrupt disabled"/>
      <bitenum value="1" id="1" token="ENABLE_1_w" description="Disable interrupt (i.e., clear ENABLEn bit)"/>
      <bitenum value="1" id="Interrupt_enabled" token="ENABLE_1_r" description="Interrupt enabled"/>
      <bitenum value="0" id="No_action" token="ENABLE_0_w" description="No action"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_EDMAWAKE1_IRQSTATUS_RAW" acronym="DSP_SYS_EDMAWAKE1_IRQSTATUS_RAW" offset="0x70" width="32" description="This register provides a per-event raw interrupt status vector">
    <bitfield id="EVENT" width="32" begin="31" end="0" resetval="0x0" description="Settable raw status for event #n+32" range="" rwaccess="RW">
      <bitenum value="0" id="No_event_pending" token="EVENT_0_r" description="No event pending"/>
      <bitenum value="1" id="Set_event_(for_debug)" token="EVENT_1_w" description="Set event (for debug)"/>
      <bitenum value="1" id="Event_pending" token="EVENT_1_r" description="Event pending"/>
      <bitenum value="0" id="No_action" token="EVENT_0_w" description="No action"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_EDMAWAKE1_IRQSTATUS" acronym="DSP_SYS_EDMAWAKE1_IRQSTATUS" offset="0x74" width="32" description="This register provides a per-event enabled interrupt status vector.">
    <bitfield id="EVENT" width="32" begin="31" end="0" resetval="0x0" description="Clearable, enabled status for event #n+32" range="" rwaccess="RW">
      <bitenum value="0" id="No_enabled_event_pending" token="EVENT_0_r" description="No enabled event pending"/>
      <bitenum value="1" id="Clear_raw_event" token="EVENT_1_w" description="Clear raw event"/>
      <bitenum value="1" id="Enabled_Event_pending" token="EVENT_1_r" description="Enabled Event pending"/>
      <bitenum value="0" id="No_action" token="EVENT_0_w" description="No action"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_EDMAWAKE1_IRQENABLE_SET" acronym="DSP_SYS_EDMAWAKE1_IRQENABLE_SET" offset="0x78" width="32" description="This register provides a per-event interrupt enable bit vector.">
    <bitfield id="ENABLE" width="32" begin="31" end="0" resetval="0x0" description="Enable for event #n+32" range="" rwaccess="RW">
      <bitenum value="0" id="Interrupt_disabled" token="ENABLE_0_r" description="Interrupt disabled"/>
      <bitenum value="1" id="Enable_interrupt" token="ENABLE_1_w" description="Enable interrupt"/>
      <bitenum value="1" id="Interrupt_enabled" token="ENABLE_1_r" description="Interrupt enabled"/>
      <bitenum value="0" id="No_action" token="ENABLE_0_w" description="No action"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_EDMAWAKE1_IRQENABLE_CLR" acronym="DSP_SYS_EDMAWAKE1_IRQENABLE_CLR" offset="0x7C" width="32" description="This register provides a per-event interrupt enable bit vector.">
    <bitfield id="ENABLE" width="32" begin="31" end="0" resetval="0x0" description="Enable for event #n+32" range="" rwaccess="RW">
      <bitenum value="0" id="Interrupt_disabled" token="ENABLE_0_r" description="Interrupt disabled"/>
      <bitenum value="1" id="1" token="ENABLE_1_w" description="Disable interrupt (i.e., clear ENABLEn bit)"/>
      <bitenum value="1" id="Interrupt_enabled" token="ENABLE_1_r" description="Interrupt enabled"/>
      <bitenum value="0" id="No_action" token="ENABLE_0_w" description="No action"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_HW_DBGOUT_SEL" acronym="DSP_SYS_HW_DBGOUT_SEL" offset="0xF8" width="32" description="THis register is used to select which group of internal signals are mapped to the hw_dbgout output bus.">
    <bitfield id="RESERVED" width="28" begin="31" end="4" resetval="0x0000000" description="" range="" rwaccess="R"/>
    <bitfield id="GROUP" width="4" begin="3" end="0" resetval="0x0" description="Debug Group output control mux selectN: GN = select output group N ." range="" rwaccess="RW">
      <bitenum value="0" id="Disabled,_debug_outputs_driven_to_0x0." token="GROUP_0" description="Disabled, debug outputs driven to 0x0."/>
      <bitenum value="1" id="G1_=_select_output_group_1" token="GROUP_1" description="G1 = select output group 1"/>
      <bitenum value="2" id="G2_=_select_output_group_2" token="GROUP_2" description="G2 = select output group 2"/>
    </bitfield>
  </register>
  <register id="DSP_SYS_HW_DBGOUT_VAL" acronym="DSP_SYS_HW_DBGOUT_VAL" offset="0xFC" width="32" description="This register is used to read the value of the currently selected debug output group.">
    <bitfield id="VALUE" width="32" begin="31" end="0" resetval="0x0" description="Read returns state of hw_dbgout bus" range="" rwaccess="R"/>
  </register>
</module>
