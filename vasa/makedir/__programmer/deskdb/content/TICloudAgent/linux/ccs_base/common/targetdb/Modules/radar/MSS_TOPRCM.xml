<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="MSS_TOPRCM" id="MSS_TOPRCM">
  
  
  <register acronym="BSSCTL" description="Control Signals to BSS" id="BSSCTL" offset="0x8" width="32">
    
  <bitfield begin="31" description="Halt BSS CR4, To halt : either 3:0 should be 0xD or 7:4 should be 0xA One should Halt the processor before releasing BSS reset." end="24" id="BSSCPUHALT" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="DSSCTL" description="Control Signals to DSS" id="DSSCTL" offset="0xC" width="32">
    
  <bitfield begin="26" description="DSP Local Reset value that will be propagated to the DSP when the DSP Power FSM has switched the DSP on.  0x0 : Reset is asserted 0x1 : Reset is deasserted This value is to be set by SW to 0x1 once initially before the DSP is powered on and is not expected to be changed. All Reset toggling for the DSP is exepcted to be done via the DSP Power FSM and the DSP STC FSM" end="26" id="GEMLRSTN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="DSP Global Reset value that will be propagated to the DSP when the DSP Power FSM has switched the DSP on.  0x0 : Reset is asserted 0x1 : Reset is deasserted This value is to be set by SW to 0x1 once initially before the DSP is powered on and is not expected to be changed. All Reset toggling for the DSP is exepcted to be done via the DSP Power FSM and the DSP STC FSM" end="25" id="GEMGRSTN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="DSP Por Reset value that will be propagated to the DSP when the DSP Power FSM has switched the DSP on.  0x0 : Reset is asserted 0x1 : Reset is deasserted This value is to be set by SW to 0x1 once initially before the DSP is powered on and is not expected to be changed. All Reset toggling for the DSP is exepcted to be done via the DSP Power FSM and the DSP STC FSM" end="24" id="GEMPORZ" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="EXTCLKDIV" description="Clock divide value for MCU_CLKOUT and PMIC_CLKOUT" id="EXTCLKDIV" offset="0x10" width="32">
    
  <bitfield begin="15" description="Divide value for clock source ( selected by field EXTCLKSRCSEL in register CLKSRCSEL.) to PMIC_CLKOUT generation logic “0000_0000” => div1 “0000_0001” => div2 | | “1111_1111” => div256 One Should change the divide value before switching to New clock. Switching to New clock is done by progrmming EXTCLK2SRCSEL." end="8" id="EXTCLK2DIV" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Divide value for MCU_CLKOUT (the one going out of chip) source clock selected by field EXTCLKSRCSEL in register CLKSRCSEL. “0000_0000” => div1 “0000_0001” => div2 | | “1111_1111” => div256 One Should change the divide value before switching to New clock. Switching to New clock is done by progrmming EXTCLK1SRCSEL." end="0" id="EXTCLK1DIV" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="EXTCLKSRCSEL" description="Clock source select value for MCU_CLKOUT and PMIC_CLKOUT" id="EXTCLKSRCSEL" offset="0x14" width="32">
    
  <bitfield begin="11" description="Select clock source for PMIC_CLKOUT generation “000” => CPUCLK  from ANA(XTAL 40Mhz or 50 Mhz or 80Mh or 100Mhz/ RCCLK in WU limp mode) “001” => RCCLK (10Mhz) “010” => 600Mhz PLL divided clock “011” => 240Mhz PLL divided clock “100” => RCCLK (10Mhz) “101” => RCCLK (10Mhz) “110” => REFCLK from ANA (40Mhz or 50 Mhz or 80Mh or 100Mhz) “111” => RCCLK" end="8" id="EXTCLK2SRCSEL" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="3" description="Select clock source for MCU_CLKOUT “000” =>CPUCLK  from ANA(XTAL 40Mhz or 50 Mhz or 80Mh or 100Mhz/ RCCLK in WU limp mode) “001” => RCCLK (10Mhz) “010” => 600Mhz PLL divided clock “011” => 240Mhz PLL divided clock “100” => RCCLK (10Mhz) “101” => RCCLK (10Mhz) “110” => REFCLK from ANA (40Mhz or 50 Mhz or 80Mh or 100Mhz) “111” => RCCLK" end="0" id="EXTCLK1SRCSEL" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="EXTCLKCTL" description="Clock gate control for MCU_CLKOUT and PMIC_CLKOUT" id="EXTCLKCTL" offset="0x18" width="32">
    
  <bitfield begin="15" description="Pre clock divider gate for PMIC_CLKOUT. Gates the clock before divider. to gate the clock either 3:0 should be 0xD or 7:4 should be 0xA" end="8" id="EXTCLK2GATE" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Pre clock divider gate for MCU_CLKOUT. Gates the clock before divider. to gate the clock either 3:0 should be 0xD or 7:4 should be 0xA" end="0" id="EXTCLK1GATE" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="SOFTSYSRST" description="Software triggered Warm Reset" id="SOFTSYSRST" offset="0x1C" width="32">
    
  <bitfield begin="7" description="Write 0xAD to trigger warm reset to the chip." end="0" id="SOFTSYSRST" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="WDRSTEN" description="Issue Warm reset upon MSS Watch dog reset" id="WDRSTEN" offset="0x20" width="32">
    
  <bitfield begin="7" description="Write 0xAD to trigger warm reset to the chip upon MSS wdog reset." end="0" id="WDRSTEN" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="SYSRSTCAUSE" description="Reset cause register" id="SYSRSTCAUSE" offset="0x24" width="32">
    
  <bitfield begin="3" description="Gives cause of chip reset “1001” :  System out of NRESET “1010” : Warm reset because of MSS Wdog. “1100” : Warm reset because of  Software trigger- SOFTSYSRST “1000” : External Warm Reset" end="0" id="SYSRSTCAUSE" rwaccess="R" width="4"></bitfield>
  </register>
  
  
  <register acronym="SYSRSTCAUSECLR" description="Clear Reset Cause register" id="SYSRSTCAUSECLR" offset="0x28" width="32">
    
  <bitfield begin="7" description="Write 0xAD to clear SYSRSTCAUSE..Self clearing" end="0" id="SYSRSTCAUSECLR" rwaccess="" width="8"></bitfield>
  </register>
  
  
  <register acronym="MISCCAPT" description="Capture required Status values across the chip." id="MISCCAPT" offset="0x34" width="32">
    
  <bitfield begin="31" description="4:0 :TI_EFC_ERR.         00000 : No Error        00001 Time-out        00010 Autoload: Not enough FuseROM data        00011 Autoload: Wrong scan chain signature        00100 Autoload: Interrupted        10100 Program: Dumpword: Test ROM: Interrupted        00101 Autoload: Two-bit error detected        00110 program: Write protect set        00111 Program: Too many data write iterations        01000 Program: Too many control bit iterations        01001 Test unprogrammed FuseROM: Bit set        01010 Redundant repair row        01011 Program: Too many CRA write iterations        01100 Program: Program done        01101 Program: Compare skip        01110 Program: Abort        01111 Program with incorrect key register value        10000 Autoload: FuseROM LASTROW stuck        10010 FuseROM LASTROW stuck        10101 Autoload: one-bit errorDetected        10110 Dump Word: two-bit error Detected        10111 Dump Word: one-bit error Detected        11000 Self-test error detected        11111 - 11001 Not assigned    5: BSS reset got asserted upon setting BSSPRST/BSSRST. 6: DSS reset got asserted upon setting DSSPRST/DSSRST [11:7] : CUST_EFC_ERR.Description same as TI_EFC_ERR" end="0" id="MISCCAPT" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="DCDCCTL0" description="PMIC_CLKOUT dethering control" id="DCDCCTL0" offset="0x38" width="32">
    
  <bitfield begin="31" description="[26:0] PMIC_CLKOUT Frequency slope value.Unsigned" end="0" id="DCDCCTL0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="DCDCCTL1" description="PMIC_CLKOUT dethering control" id="DCDCCTL1" offset="0x3C" width="32">
    
  <bitfield begin="31" description="PMIC_CLKOUT dithering control [8]         : Frequency accumulation Mode .               ‘0’ : Continous mode.’1’ : Staircase mode [9]         : ‘1’ Enables dither           [23:16] : Minimum frequency threshold [31:24] : Maximum frequency threshold " end="2" id="DCDCCTL1" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="PMIC_CLKOUT Enable – Multi Bit" end="1" id="DCDCLKEN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="PMIC_CLKOUT dithering control block reset (active high) – Multi Bit" end="0" id="DCDCRST" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="USERMODEEN" id="USERMODEEN" offset="0x48" width="32">
    
  <bitfield begin="31" description="Write 0XADADADAD to enable user mode write access to TOP RCM space from 0x00 to 0XFF" end="0" id="USERMODEEN" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="LVDSPADCTL0" description="LVDS pad control" id="LVDSPADCTL0" offset="0x4C" width="32">
    
  <bitfield begin="31" description=" 0  :  pwrdn        Control for i_LVDSclk_io_cell  1  :  lopwra       Control for i_LVDSclk_io_cell  2  :  lopwrb       Control for i_LVDSclk_io_cell  3  :  lpsel        Control for i_LVDSclk_io_cell  4  :  sub_lvds_en  Control for i_LVDSclk_io_cell  5  :  hiz_disable  Control for i_LVDSclk_io_cell  6  :  ext_res_en   Control for i_LVDSclk_io_cell  7  :  Reserved  8  :  pwrdn        Control for i_LVDS_tx0_io_cell  9  :  lopwra       Control for i_LVDS_tx0_io_cell  10 :  lopwrb       Control for i_LVDS_tx0_io_cell  11 :  lpsel        Control for i_LVDS_tx0_io_cell  12 :  sub_lvds_en  Control for i_LVDS_tx0_io_cell  13 :  hiz_disable  Control for i_LVDS_tx0_io_cell  14 :  ext_res_en   Control for i_LVDS_tx0_io_cell  15 :  Reserved  16 :  pwrdn        Control for i_LVDS_tx1_io_cell  17 :  lopwra       Control for i_LVDS_tx1_io_cell  18 :  lopwrb       Control for i_LVDS_tx1_io_cell  19 :  lpsel        Control for i_LVDS_tx1_io_cell  20 :  sub_lvds_en  Control for i_LVDS_tx1_io_cell  21 :  hiz_disable  Control for i_LVDS_tx1_io_cell  22 :  ext_res_en   Control for i_LVDS_tx1_io_cell  23 -31 :  Reserved" end="0" id="LVDSPADCTL0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="LVDSPADCTL1" description="LVDS pad control" id="LVDSPADCTL1" offset="0x50" width="32">
    
  <bitfield begin="31" description="0- 7  :  Reserved  8  :  pwrdn             Control for i_LVDSfrclk_io_cell  9  :  lopwra             Control for i_LVDSfrclk_io_cell  10 :  lopwrb            Control for i_LVDSfrclk_io_cell  11 :  lpsel               Control for i_LVDSfrclk_io_cell  12 :  sub_lvds_en  Control for i_LVDSfrclk_io_cell  13 :  hiz_disable     Control for i_LVDSfrclk_io_cell  14 :  ext_res_en     Control for i_LVDSfrclk_io_cell  15-23:  Reserved  24 :  pwrdn             Control for lvds_bias_cell  25 :  set       Control for lvds_bias_cell" end="0" id="LVDSPADCTL1" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="DFTREG0" id="DFTREG0" offset="0x60" width="32">
    
  <bitfield begin="31" description="TRM Description: [3:0] : MSS PBIST SELFTEST KEY = 4'b1010 [4] : Reserved [5] : PBIST IP reset control. 1 = reset, 0 = out of reset. The PBIST_SELFTEST_KEY has to enabled in order to program this bit. [31:6] : Write 1'b1 to a bit  to configure a particular memory group for Self-Test, and 1'b0 to disable a particular memory group  16XX Description: [3:0] : MSS PBIST SELFTEST KEY = 4'b1010 [4] : Reserved [5] : PBIST IP reset control. 1 = reset, 0 = out of reset. The PBIST_SELFTEST_KEY has to enabled in order to program this bit. [6] : MSS DCAN and CANFD RAMs - Write 1'b1 to configure this memory group for self-test [7] : MSS DMA RAMs  - Write 1'b1 to configure this memory group for self-test [8] : MSS VIM RAMs - Write 1'b1 to configure this memory group for self-test [9] : MSS SWBUF RAM - Write 1'b1 to configure this memory group for self-test [10] : MSS TCMAROMs - Write 1'b1 to configure this memory group for self-test [11] : MSS TCMA RAMs - Write 1'b1 to configure this memory group for self-test [12] : MSS TCMB RAMs - Write 1'b1 to configure this memory group for self-test [13] : Reserved  [14] : MSS L3SHARED RAMs BANK2 and BANK3  - Write 1'b1 to configure this memory group for self-test [15] : MSS L3SHARED RAMs BANK4 and BANK5 - Write 1'b1 to configure this memory group for self-test [16] : MSS SPIA RAMs - Write 1'b1 to configure this memory group for self-test [17] : MSS SPIB RAMs - Write 1'b1 to configure this memory group for self-test [18] : MSS MBOX RAMs - Write 1'b1 to configure this memory group for self-test [19] : MSS CR4 STC ROM - Write 1'b1 to configure this memory group for self-test  [20] : Reserved  [21] : Reserved  [22] : Reserved  [23] : Reserved  [24] : DSS ADCBUF RAMs - Write 1'b1 to configure this memory group for self-test [25] : DSS FFTACC RAMs - Write 1'b1 to configure this memory group for self-test [26] : DSS TPCC RAMs - Write 1'b1 to configure this memory group for self-test [27] : DSS CBUF DATA and ECC RAMs - Write 1'b1 to configure this memory group for self-test [28] : Reserved [29] : DSS CQ RAMs- Write 1'b1 to configure this memory group for self-test  [30] : BSS TCMAROMs - Write 1'b1 to configure this memory group for self-test [31] : BSS TCMA and TCMB RAMs - Write 1'b1 to configure this memory group for self-test" end="0" id="DFTREG0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="DFTREG1" id="DFTREG1" offset="0x64" width="32">
    
  <bitfield begin="31" description="TRM Description: [31:0] : Write 1'b1 to a bit  to configure a particular memory group for Self-Test, and 1'b0 to disable a particular memory group  16XX Description: [0] : BSS FFT RAMs and ROM - Write 1'b1 to configure this memory group for self-test [1] : BSS VIM RAMs - Write 1'b1 to configure this memory group for self-test [2] : BSS DFE RAMs - Write 1'b1 to configure this memory group for self-test [3] : BSS CR4 STC ROM - Write 1'b1 to configure this memory group for self-test [4] : BSS DFE STC ROM - Write 1'b1 to configure this memory group for self-test [5] : BSS GPADC RAMs - Write 1'b1 to configure this memory group for self-test    [12:6] : Reserved  [13] : DSS HS and DATA_TR RAMs - Write 1'b1 to configure this memory group for self-test   [14] : DSS FIR RAM - Write 1'b1 to configure this memory group for self-test   [15] : GEM STC ROM - Write 1'b1 to configure this memory group for self-test   [16] : GEM PBIST ROM - Write 1'b1 to configure this memory group for self-test    [17] : GEM CPBPM RAMs - Write 1'b1 to configure this memory group for self-test    [18] : Reserved    [19] : Reserved    [19] : MSS SECUREKEY RAM - Write 1'b1 to configure this memory group for self-test    [21] : MSS TRACEBUF RAM - Write 1'b1 to configure this memory group for self-test    [31:22] : Reserved " end="0" id="DFTREG1" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="DFTREG2" id="DFTREG2" offset="0x68" width="32">
    
  <bitfield begin="31" description="TI Internal Register.Reserved for HW RnD" end="0" id="DFTREG2" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="DFTREG5" id="DFTREG5" offset="0x74" width="32">
    
  <bitfield begin="31" description="TRM Description: [0] : Reserved [4:1] DSP PBIST SELFTEST KEY = 4'b1010 [8:5]: Sub-system level memory Self-Test power clock gate enable controls [31:9] : Reserved  16XX Description: [0] : Reserved [4:1] DSP PBIST SELFTEST KEY = 4'b1010 [5]: Write 1'b1 to enable BSS Memory Self-Test Power Clock gate [6]: Write 1'b1 to enable MSS Memory Self-Test Power Clock gate [7]: Write 1'b1 to enable DSS Memory Self-Test Power Clock gate [8]: Write 1'b1 to enable GEM-L2 Memory Self-Test Power Clock gate [31:9] : Reserved" end="0" id="DFTREG5" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="DSSIOCTL" description="DSS Tie offs" id="DSSIOCTL" offset="0xD0" width="32">
    
  <bitfield begin="27" description="Static register for DSP.Should be programmed before DSP powerup. When DSP clock =600Mhz, program EMCDMACLK=1 When DSP clock =400Mhz, program EMCDMACLK=0" end="26" id="EMCDMACLK" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="25" description="Static register for DSP.Should be programmed before DSP powerup. When DSP clock =600Mhz, program EMCCFGCLK=1 When DSP clock =400Mhz, program EMCCFGCLK=0" end="24" id="EMCCFGCLK" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="21" description="ISTP reset value.  Used as the 22 MSBs of the 32-bit initial fetch address.  Can be be set to any GEM-accessible address in the memory map.  Tyipcally set to L1P RAM or ROM, L2 RAM or ROM, or chip-level RAM or ROM, including EMIF address range. " end="0" id="LSPRSTVAL" rwaccess="RW" width="22"></bitfield>
  </register>
  
  
  <register acronym="SPARE0" description="Spare Register" id="SPARE0" offset="0xEC" width="32">
    
  <bitfield begin="31" description="Spare register for FW use" end="0" id="SPARE0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SPARE1" description="Spare Register" id="SPARE1" offset="0xF0" width="32">
    
  <bitfield begin="31" description="Spare register for FW use" end="0" id="SPARE1" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SPARE2" description="Spare Register" id="SPARE2" offset="0xF4" width="32">
    
  <bitfield begin="31" description="Spare register for FW use" end="0" id="SPARE2" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SPARE3" description="Spare Register" id="SPARE3" offset="0xF8" width="32">
    
  <bitfield begin="31" description="Spare register for FW use" end="0" id="SPARE3" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="MSS_SIGNATURE" description="Spare Register" id="MSS_SIGNATURE" offset="0xFC" width="32">
    
  <bitfield begin="31" description="" end="0" id="MSS_SIGNATURE" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="DEVICE_SPECIFIC_REG00" description="Device Specific information" id="REG00" offset="0x114" width="32">
    
  <bitfield begin="25" description="Device Specific information - see errata" end="0" id="Device_Specific_REG00" rwaccess="R" width="26"></bitfield>
  </register>
  
  
  <register acronym="GEMBOOTSTCEN" id="GEMBOOTSTCEN" offset="0x158" width="32">
    
  <bitfield begin="0" description="‘1’ : Enable GEM STC during GEM power UP" end="0" id="GEMBOOTSTCEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="USERMODEEN2" id="USERMODEEN2" offset="0x180" width="32">
    
  <bitfield begin="31" description="Write 0XADADADAD to enable user mode write access to TOP RCM space which are resettable only by Power on reset. i.e. from offset address 0x100 to 0x1FF" end="0" id="USERMODEEN2" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SYSTICK" id="SYSTICK" offset="0x18C" width="32">
    
  <bitfield begin="31" description="Continuous counter running on 32Khz derived from RC clock." end="0" id="SYSTICK" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="SECURECFGREG1" id="SECURECFGREG1" offset="0x1C4" width="32">
    
  <bitfield begin="30" description="JTAG Firewall.Firewall Disabled for value &quot;111&quot; and enabled for rest" end="28" id="JTAGFIREWALLEN" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="22" description="Set Secure RAM Firewall.Firewall Disabled for value &quot;111&quot; and enabled for rest" end="20" id="SECURERAMFIREWALLEN" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="18" description="Set Logger Firewall.Firewall Disabled for value &quot;111&quot; and enabled for rest" end="16" id="LOGGERFIREWALLEN" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="14" description="Set Trace Firewall. Firewall Disabled for value &quot;111&quot; and enabled for rest" end="12" id="TRACEFIREWALLEN" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="10" description="Set Crypto Firewall. Firewall Disabled for value &quot;111&quot; and enabled for rest" end="8" id="CRYPTOFIREWALLEN" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="6" description="Set CEK1,CEK2 firewall.Firewall Disabled for value &quot;111&quot; and enabled for rest" end="4" id="CUSTCEKFIREWALLEN" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="SECURECFGREG2" id="SECURECFGREG2" offset="0x1C8" width="32">
    
  <bitfield begin="10" description="Erase CEK1 ,CEK2,CPK Keys  when value &quot;111&quot; is written" end="8" id="CUSTKEYERASE" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="2" description="DMM Firewall.Firewall Disabled for value &quot;111&quot; and enabled for rest" end="0" id="DMMFIREWALLEN" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="SECURECFGREG3" id="SECURECFGREG3" offset="0x1CC" width="32">
    
  <bitfield begin="30" description="JTAG Sticky Reg. Sticky reg is set when value &quot;111 is written" end="28" id="JTAGSTICKYBIT" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="22" description="Secure RAM Sticky Reg. Sticky reg is set when value &quot;111 is written" end="20" id="SECURERAMSTICKYBIT" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="18" description="Trace Sticky Reg. Sticky reg is set when value &quot;111 is written" end="16" id="TRACESTICKYBIT" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="14" description="Crypto Sticky Reg. Sticky reg is set when value &quot;111 is written" end="12" id="CRYPTOSTICKYBIT" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="10" description="CEK1,CEK2 Sticky Reg for firewall. Sticky reg is set when value &quot;111 is written" end="8" id="CUSTCEKSTICKYBIT" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="2" description="Logger Sticky Reg. Sticky reg is set when value &quot;111 is written" end="0" id="LOGGERSTICKYBIT" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="SECURECFGREG4" id="SECURECFGREG4" offset="0x1D0" width="32">
    
  <bitfield begin="2" description="DMM Sticky Reg. Sticky reg is set when value &quot;111 is written" end="0" id="DMMSTICKYBIT" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="SECURERAMREG" id="SECURERAMREG" offset="0x1D4" width="32">
    
  <bitfield begin="24" description="1: Secure RAM key bitwidth = 255 0:Secure RAM key bitwidth = 128" end="24" id="SECURERAMKEY255" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="Index to Secure RAM" end="16" id="SECURERAMKEYIDX" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="8" description="1: Load key from secure RAM  into register to be used by AES engine.Self clearing" end="8" id="SECURERAMKEYRD" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="0" description="Secure RAM key loaded into register" end="0" id="SECURERAMRDDONE" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPAREMULTIBIT" description="Spare Register" id="SPAREMULTIBIT" offset="0x1E4" width="32">
    
  <bitfield begin="11" description="MIBSPIB : when set the TRIGGER’s are un-gated only when chip-select is active" end="11" id="SPAREMULTIBIT11" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="SPIB trigger source polarity select.’0’ - Polarity 0,’1’-Polarity 1" end="10" id="SPAREMULTIBIT10" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="SPIA trigger source polarity select.’0’ - Polarity 0,’1’-Polarity 1" end="9" id="SPAREMULTIBIT9" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="‘1’:  MIBSPIB External chip select is overridden with the value of MIBSPIB CS polarity-slave mode" end="8" id="SPAREMULTIBIT8" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="‘1’: MIBSPIA External chip select is overridden with the value of MIBSPIA CS polarity-slave mode" end="7" id="SPAREMULTIBIT7" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="MIBSPIB CS Trigger SRC enable ‘1’: Use CS as trigger source" end="6" id="SPAREMULTIBIT6" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="MIBSPIB CS polarity-slave mode 1: Active high 0:Active low" end="5" id="SPAREMULTIBIT5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="MIBSPIB MISO OE_N Control based on Chip select(CS)-applicable in slave mode 1:MISO OEN controlled based on CS.When CS is inactive OE_N=1 0:MISO OEN controlled by IP" end="4" id="SPAREMULTIBIT4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="MIBSPIA :When set the TRIGGER’s are un-gated only when chip-select is active. " end="3" id="SPAREMULTIBIT3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="MIBSPIA CS Trigger SRC enable-slave mode ‘1’: Use CS as trigger source" end="2" id="SPAREMULTIBIT2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="MIBSPIA CS polarity-slave mode 1: Active high 0:Active low" end="1" id="SPAREMULTIBIT1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="MIBSPIA MISO OE_N Control based on Chip select(CS)-applicable in slave mode 1:MISO OEN controlled based on CS.When CS is inactive OE_N=1,else controlled by IP 0:MISO OEN controlled by IP" end="0" id="SPAREMULTIBIT0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPARE4" description="Spare Register" id="SPARE4" offset="0x1E8" width="32">
    
  <bitfield begin="31" description="Spare register for FW use" end="0" id="SPARE4" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SPARE5" description="Spare Register" id="SPARE5" offset="0x1EC" width="32">
    
  <bitfield begin="31" description="Spare register for FW use" end="0" id="SPARE5" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SPARE6" description="Spare Register" id="SPARE6" offset="0x1F0" width="32">
    
  <bitfield begin="31" description="Spare register for FW use" end="0" id="SPARE6" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SPARE7" description="Spare Register" id="SPARE7" offset="0x1F4" width="32">
    
  <bitfield begin="31" description="Spare register for FW use" end="0" id="SPARE7" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SPARE8" description="Spare Register" id="SPARE8" offset="0x1F8" width="32">
    
  <bitfield begin="31" description="Spare register for FW use" end="0" id="SPARE8" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SPARE9" description="Spare Register" id="SPARE9" offset="0x1FC" width="32">
    
  <bitfield begin="31" description="Spare register for FW use" end="0" id="SPARE9" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="UID31TO0" description="Device Specific Implementation" id="UID31TO0" offset="0x200" width="32">
    
  <bitfield begin="31" description="Device Specific Implementation " end="0" id="UID31TO0" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="UID63TO32" description="Device Specific Implementation" id="UID63TO32" offset="0x204" width="32">
    
  <bitfield begin="31" description="Device Specific Implementation" end="0" id="UID63TO32" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="UID95TO64" description="Device Specific Implementation" id="UID95TO64" offset="0x208" width="32">
    
  <bitfield begin="31" description="Device Specific Implementation " end="0" id="UID95TO64" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="UID119TO96" description="Device Specific Implementation" id="UID119TO96" offset="0x20C" width="32">
    
  <bitfield begin="31" description="Device Specific Implementation" end="0" id="UID119TO96" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="MEMINITSTARTSHMEM" description="Shared memory initialization start" id="MEMINITSTARTSHMEM" offset="0x2A8" width="32">
    
  <bitfield begin="7" description="Writing '1' will trigger Shared memory initialization for bank 7.Self clearing" end="7" id="MEMINITSTARTBANK7" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="6" description="Writing '1' will trigger Shared memory initialization for bank 6.Self clearing" end="6" id="MEMINITSTARTBANK6" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="5" description="Writing '1' will trigger Shared memory initialization for bank 5.Self clearing" end="5" id="MEMINITSTARTBANK5" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="4" description="Writing '1' will trigger Shared memory initialization for bank 4.Self clearing" end="4" id="MEMINITSTARTBANK4" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="3" description="Writing '1' will trigger Shared memory initialization for bank 3.Self clearing" end="3" id="MEMINITSTARTBANK3" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="2" description="Writing '1' will trigger Shared memory initialization for bank 2.Self clearing" end="2" id="MEMINITSTARTBANK2" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="1" description="Writing '1' will trigger Shared memory initialization for bank 1.Self clearing" end="1" id="MEMINITSTARTBANK1" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="0" description="Writing '1' will trigger Shared memory initialization for bank 0.Self clearing" end="0" id="MEMINITSTARTBANK0" rwaccess="" width="1"></bitfield>
  </register>
  
  
  <register acronym="MEMINITDONESHMEM" description="Shared memory intialization end" id="MEMINITDONESHMEM" offset="0x2AC" width="32">
    
  <bitfield begin="7" description="Memory Initialization done status for Shared memory for bank 7" end="7" id="MEMINITDONEBANK7" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="6" description="Memory Initialization done status for Shared memory for bank 6" end="6" id="MEMINITDONEBANK6" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="5" description="Memory Initialization done status for Shared memory for bank 5" end="5" id="MEMINITDONEBANK5" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="4" description="Memory Initialization done status for Shared memory for bank 4" end="4" id="MEMINITDONEBANK4" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Memory Initialization done status for Shared memory for bank 3" end="3" id="MEMINITDONEBANK3" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="Memory Initialization done status for Shared memory for bank 2" end="2" id="MEMINITDONEBANK2" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="1" description="Memory Initialization done status for Shared memory for bank 1" end="1" id="MEMINITDONEBANK1" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="Memory Initialization done status for Shared memory for bank 0" end="0" id="MEMINITDONEBANK0" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="DSSMEMTAB0" description="Controls ordering of banks in shared memory associated with DSS" id="DSSMEMTAB0" offset="0x2B0" width="32">
    
  <bitfield begin="31" description="DSS L3RAM memory table for shared memory. Ordering of address in shared memory.  0th 128KB address goes to bank number programmed in [3:0] of this register(default is bank 0), 1st 128KB address goes to bank number programmed in [7:4] of this register(default is bank 1),  2nd 128KB address goes to bank number programmed in [11:8] of this register(default is bank 2), 3rd 128KB address goes to bank number programmed in [15:12] of this register(default is bank 3). 4th 128KB address goes to bank number programmed in [19:16] of this register(default is bank 4), 5th 128KB address goes to bank number programmed in [23:20] of this register(default is bank 5),  6th 128KB address goes to bank number programmed in [27:24] of this register(default is bank 6), 7th 128KB address goes to bank number programmed in [31:28] of this register(default is bank 7).  Corresponding banks need to be selected for DSS in SHMEMBANKSEL regsiter" end="0" id="DSSMEMTAB0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="TCMAMEMTAB" description="Controls ordering of banks in shared memory associated with MSS TCMA" id="TCMAMEMTAB" offset="0x2BC" width="32">
    
  <bitfield begin="15" description="MSS TCMA memory table for shared memory. Ordering of address in shared memory.  0th 128KB address goes to bank number programmed in [3:0] of this register(default is bank 4), 1st 128KB address goes to bank number programmed in [7:4] of this register(default is bank 5),  2nd 128KB address goes to bank number programmed in [11:8] of this register(default is bank 6), 3rd 128KB address goes to bank number programmed in [15:12] of this register(default is bank 7).  Corresponding banks need to be selected for MSS TCMA in SHMEMBANKSEL regsiter" end="0" id="TCMAMEMTAB" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="TCMBMEMTAB" description="Controls ordering of banks in shared memory associated with MSS TCMB" id="TCMBMEMTAB" offset="0x2C0" width="32">
    
  <bitfield begin="15" description="MSS TCMB memory table for shared memory. Ordering of address in shared memory.  0th 128KB address goes to bank number programmed in [3:0] of this register(default is bank 4), 1st 128KB address goes to bank number programmed in [7:4] of this register(default is bank 5),  2nd 128KB address goes to bank number programmed in [11:8] of this register(default is bank 6), 3rd 128KB address goes to bank number programmed in [15:12] of this register(default is bank 7).  Corresponding banks need to be selected for MSS TCMB in SHMEMBANKSEL regsiter" end="0" id="TCMBMEMTAB" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="SHMEMBANKSEL3TO0" description="Shared memory master allocation.Writing to each 8 bit field indicates the bank allocated to which master. 0x1 : DSS  0x2 : MSS TCMA 0x4 : MSS TCMB 0x8 : OCLA 0x10: BSS TCMA" id="SHMEMBANKSEL3TO0" offset="0x2C8" width="32">
    
  <bitfield begin="31" description="only valid value is 0x1 else memory is not used. (Allocation only to DSS L3RAM)" end="24" id="BANK3" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="only valid value is 0x1 else memory is not used. (Allocation only to DSS L3RAM)" end="16" id="BANK2" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="only valid value is 0x1 else memory is not used. (Allocation only to DSS L3RAM)" end="8" id="BANK1" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="only valid value is 0x1 else memory is not used. (Allocation only to DSS L3RAM)" end="0" id="BANK0" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="SHMEMBANKSEL7TO4" description="Shared memory master allocation.Writing to each 8 bit field indicates the bank allocated to which master. 0x1 : DSS  0x2 : MSS TCMA 0x4 : MSS TCMB 0x8 : OCLA 0x10: BSS TCMA" id="SHMEMBANKSEL7TO4" offset="0x2CC" width="32">
    
  <bitfield begin="31" description="only valid value is 0x1/0x2/0x4/0x8/0X10 else memory is not used. (Allocation to DSS L3RAM, MSS TCMA/B, OCLA,BSS TCMA)" end="24" id="BANK7" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="only valid value is 0x1/0x2/0x4/0x8/0X10 else memory is not used. (Allocation to DSS L3RAM, MSS TCMA/B, OCLA,BSS TCMA)" end="16" id="BANK6" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="only valid value is 0x1/0x2/0x4/0x8 else memory is not used. (Allocation to DSS L3RAM, MSS TCMA/B, OCLA)" end="8" id="BANK5" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="only valid value is 0x1/0x2/0x4/0x8 else memory is not used. (Allocation to DSS L3RAM, MSS TCMA/B, OCLA)" end="0" id="BANK4" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="PBISTCLKCTL" description="PBIST clock control register" id="PBISTCLKCTL" offset="0x2D0" width="32">
    
  <bitfield begin="15" description="Pre clock divider gate for PBIST300M clock. Gates the clock before divider. to gate the clock either 3:0 should be 0xD or 7:4 should be 0xA" end="8" id="PBIST300MCLKGATE" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Select clock source for DSP PBIST Clock source “000” => CPUCLK  from ANA(XTAL 40Mhz or 50 Mhz or 80Mh or 100Mhz/ RCCLK in WU limp mode) “001” => RCCLK (10Mhz) “010” => 600Mhz PLL divided clock “011” => 240Mhz PLL divided clock “100” => RCCLK (10Mhz) “101” => RCCLK (10Mhz) “110” => REFCLK from ANA (40Mhz or 50 Mhz or 80Mh or 100Mhz) “111” => RCCLK" end="4" id="PBIST300MCLKSRCSEL" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="3" description="Divide value for DSP PBIST source clock selected by field PBIST300MCLKSRCSEL in register CLKSRCSEL. “0000” => div1 “0001” => div2 | | “1111” => div15 One Should change the divide value before switching to New clock. Switching to New clock is done by progrmming PBIST300MCLKSRCSEL" end="0" id="PBIST300MCLKDIV" rwaccess="RW" width="4"></bitfield>
  </register>
</module>
