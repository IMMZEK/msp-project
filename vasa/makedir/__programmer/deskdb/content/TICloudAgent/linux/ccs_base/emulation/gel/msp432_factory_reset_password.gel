// SYSCTL registers
#define SYS_BASE                    (0xE0044000)
#define SYS_MASTER_UNLOCK           (SYS_BASE + 0x00)
#define SYS_BOOTOVER_REQ0           (SYS_BASE + 0x04)
#define SYS_BOOTOVER_REQ1           (SYS_BASE + 0x08)
#define SYS_BOOTOVER_ACK            (SYS_BASE + 0x0C)
#define SYS_RESET_REQ               (SYS_BASE + 0x10)
#define SYS_RESET_STATOVER          (SYS_BASE + 0x14)
#define SYS_SYSTEM_STAT             (SYS_BASE + 0x20)

// Boot override commands
#define FACTORY_RESET                0x00000001
#define CMD_PASSWORD0                0x00000100
#define CMD_PASSWORD1                0x00000200
#define CMD_PASSWORD2                0x00000400
#define CMD_PASSWORD3                0x00000800

// Value of ACKS for password as defined in Technical Reference Manual
#define WAIT_FOR_PASSWD              0x00000002
#define PASSWD_PARTIAL0              0x00010004
#define PASSWD_PARTIAL1              0x00020004
#define PASSWD_PARTIAL2              0x00040004
#define PASSWD_PARTIAL3              0x00080004

// States of this GEL file
#define RESET_NOT_TRIGGERED          0x00000000
#define RESET_COMMAND_SENT           0x00000001
#define RESET_WAIT_FOR_PWD           0x00000002

/***************************************************/
// Value of PASSWORD INPUT to be provided by USER
#define PASSWORD0                    0xFFFFFFFF
#define PASSWORD1                    0xFFFFFFFF
#define PASSWORD2                    0xFFFFFFFF
#define PASSWORD3                    0xFFFFFFFF
/***************************************************/

int gGEL_resetTriggered = 0;
int gGEL_passwordCount = 0;
int gGEL_passwordSent = 0;
int gGEL_passwordTimeOut = 0;

UNLOCK_SYS()
{
    // Open SYS for boot override attempts
    *(unsigned int *) SYS_MASTER_UNLOCK = 0x695A;
}

hotmenu MSP432_FACTORY_RESET_PASSWORD()
{
    GEL_SetTimer(100, 2, "SendAndCheckPasswordCallback()");
}

hotmenu MSP432_REBOOT_RESET()
{
    UNLOCK_SYS();
    *(unsigned int *) SYS_BOOTOVER_REQ0 = 0;
    *(unsigned int *) SYS_BOOTOVER_REQ1 = 0;
    *(unsigned int *) SYS_BOOTOVER_ACK = 0;
    
    *(unsigned int *) SYS_RESET_REQ = 0x6902;
}

SendAndCheckPasswordCallback()
{
    if (gGEL_resetTriggered == RESET_NOT_TRIGGERED)
    {
        Send_FactoryReset();
        gGEL_resetTriggered = RESET_COMMAND_SENT;
    }
    if((*(unsigned int *) SYS_BOOTOVER_ACK == WAIT_FOR_PASSWD) || (gGEL_resetTriggered = RESET_WAIT_FOR_PWD))
    {
        gGEL_resetTriggered = RESET_WAIT_FOR_PWD;
        if (gGEL_passwordCount == 0)
        {
            if (gGEL_passwordSent == 0)
            {
                Send_PASSWORD0();
                gGEL_passwordSent = 1;
            }
            else
            {
                if (*(unsigned int *) SYS_BOOTOVER_ACK == PASSWD_PARTIAL0)
                {
                    gGEL_passwordCount++;
                    gGEL_passwordTimeOut = 0;
                    gGEL_passwordSent = 0;
                    GEL_TextOut("First password acknowledged.\n");
                }
            }
        }
        if (gGEL_passwordCount == 1)
        {
            if (gGEL_passwordSent == 0)
            {
                Send_PASSWORD1();
                gGEL_passwordSent = 1;
            }
            else
            {
                if (*(unsigned int *) SYS_BOOTOVER_ACK == PASSWD_PARTIAL1)
                {
                    gGEL_passwordCount++;
                    gGEL_passwordTimeOut = 0;
                    gGEL_passwordSent = 0;
                    GEL_TextOut("Second password acknowledged.\n");
                }
            }
        }
        if (gGEL_passwordCount == 2)
        {
            if (gGEL_passwordSent == 0)
            {
                Send_PASSWORD2();
                gGEL_passwordSent = 1;
            }
            else
            {
                if (*(unsigned int *) SYS_BOOTOVER_ACK == PASSWD_PARTIAL2)
                {
                    gGEL_passwordCount++;
                    gGEL_passwordTimeOut = 0;
                    gGEL_passwordSent = 0;
                    GEL_TextOut("Third password acknowledged.\n");
                }
            }
        }
        if (gGEL_passwordCount == 3)
        {
            if (gGEL_passwordSent == 0)
            {
                Send_PASSWORD3();
                gGEL_passwordSent = 1;
            }
            else
            {
                if (*(unsigned int *) SYS_BOOTOVER_ACK == PASSWD_PARTIAL3)
                {
                    gGEL_passwordCount++;
                    gGEL_passwordTimeOut = 0;
                    gGEL_passwordSent = 0;
                    GEL_TextOut("Fourth password acknowledged.\n");
                }
            }
        }
    }
    if (*(unsigned int *) SYS_BOOTOVER_ACK == 0x00000ACE)
    {
        GEL_TextOut("MSP432_FACTORY_RESET command passed.\n");
        GEL_CancelTimer(2);
    }
    if (*(unsigned int *) SYS_BOOTOVER_ACK == 0xDEAD0000)
    {
        GEL_TextOut("MSP432_FACTORY_RESET command failed.\n", "* ERROR *");
        GEL_CancelTimer(2);
    }
    if (gGEL_passwordTimeOut > 20)
    {
        GEL_TextOut("MSP432_FACTORY_RESET_PASSWORD timeout error.\n", "* ERROR *");
        GEL_CancelTimer(2);
    }
    gGEL_passwordTimeOut++;
}

Send_FactoryReset()
{
    GEL_TextOut ("Initiating Factory Reset...\n");

    UNLOCK_SYS();

    // Program the factory reset command into BOOT_OVERREQ_REG1
    *(unsigned int *) SYS_BOOTOVER_REQ0 = FACTORY_RESET;
    
    *(unsigned int *) SYS_BOOTOVER_REQ1 = 0;
    *(unsigned int *) SYS_BOOTOVER_ACK = 0;
    
    *(unsigned int *) SYS_RESET_REQ = 0x6902;
}

Send_PASSWORD0()
{
    GEL_TextOut ("Sending PASSWORD0...\n");

    UNLOCK_SYS();
    *(unsigned int *) SYS_BOOTOVER_ACK = 0;

    // Program the PASSWORD0 into BOOT_OVERREQ_REG1
    *(unsigned int *) SYS_BOOTOVER_REQ1 = PASSWORD0;
    
    // Program the CMD_PASSWORD0 into BOOT_OVERREQ_REG0
    *(unsigned int *) SYS_BOOTOVER_REQ0 = CMD_PASSWORD0;
}

Send_PASSWORD1()
{
    GEL_TextOut ("Sending PASSWORD1...\n");

    UNLOCK_SYS();
    *(unsigned int *) SYS_BOOTOVER_ACK = 0;

    // Program the PASSWORD0 into BOOT_OVERREQ_REG1
    *(unsigned int *) SYS_BOOTOVER_REQ1 = PASSWORD1;

    // Program the CMD_PASSWORD0 into BOOT_OVERREQ_REG0
    *(unsigned int *) SYS_BOOTOVER_REQ0 = CMD_PASSWORD1;
}

Send_PASSWORD2()
{
    GEL_TextOut ("Sending PASSWORD2...\n");

    UNLOCK_SYS();
    *(unsigned int *) SYS_BOOTOVER_ACK = 0;
    
    // Program the PASSWORD0 into BOOT_OVERREQ_REG
    *(unsigned int *) SYS_BOOTOVER_REQ1 = PASSWORD2;

    // Program the CMD_PASSWORD0 into BOOT_OVERREQ_REG0
    *(unsigned int *) SYS_BOOTOVER_REQ0 = CMD_PASSWORD2;
}

Send_PASSWORD3()
{
    GEL_TextOut ("Sending PASSWORD3...\n");

    UNLOCK_SYS();
    *(unsigned int *) SYS_BOOTOVER_ACK = 0;

    // Program the PASSWORD0 into BOOT_OVERREQ_REG1
    *(unsigned int *) SYS_BOOTOVER_REQ1 = PASSWORD3;

    // Program the CMD_PASSWORD0 into BOOT_OVERREQ_REG0
    *(unsigned int *) SYS_BOOTOVER_REQ0 = CMD_PASSWORD3;
}
