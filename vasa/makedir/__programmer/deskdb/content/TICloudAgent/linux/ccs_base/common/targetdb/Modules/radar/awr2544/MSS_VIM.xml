<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="MSS_VIM" id="MSS_VIM">
  
  
  <register acronym="PID" description="         The Revision Register contains the major and minor revisions  for the module.   " id="PID" offset="0x0" width="32">
    
  <bitfield begin="31" description="         PID register scheme     " end="30" id="SCHEME" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description="         Business Unit: 10 = Processors     " end="28" id="BU" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="27" description="         Module ID     " end="16" id="FUNC" rwaccess="R" width="12"></bitfield>
    
  <bitfield begin="15" description="         RTL revision. Will vary depending on release.     " end="11" id="RTL" rwaccess="R" width="5"></bitfield>
    
  <bitfield begin="10" description="         Major revision     " end="8" id="MAJOR" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="7" description="         Custom     " end="6" id="CUSTOM" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="5" description="         Minor revision     " end="0" id="MINOR" rwaccess="R" width="6"></bitfield>
  </register>
  
  
  <register acronym="INFO" description="         The Info Register gives the configuration Inforrmation of  this VIM.   " id="INFO" offset="0x4" width="32">
    
  <bitfield begin="31" description="          RESERVE FIELD" end="11" id="RES1" rwaccess="R" width="21"></bitfield>
    
  <bitfield begin="10" description="         Total number of Interrupts     " end="0" id="INTERRUPTS" rwaccess="R" width="11"></bitfield>
  </register>
  
  
  <register acronym="PRIIRQ" description="         The Prioritized IRQ Register shows the number of the highest  priority pending IRQ.   " id="PRIIRQ" offset="0x8" width="32">
    
  <bitfield begin="31" description="         Indicates that the num field is valid.     " end="31" id="VALID" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="30" description="          RESERVE FIELD" end="20" id="RES2" rwaccess="R" width="11"></bitfield>
    
  <bitfield begin="19" description="         Priority of the highest priority pending IRQ.  valid only if  the valid flag is set.    " end="16" id="PRI" rwaccess="R" width="4"></bitfield>
    
  <bitfield begin="15" description="          RESERVE FIELD" end="10" id="RES3" rwaccess="R" width="6"></bitfield>
    
  <bitfield begin="9" description="         Number of the highest priority pending IRQ.  valid only if  the valid flag is set.    " end="0" id="NUM" rwaccess="R" width="10"></bitfield>
  </register>
  
  
  <register acronym="PRIFIQ" description="         The Prioritized FIQ Register shows the number of the highest  priority pending FIQ.   " id="PRIFIQ" offset="0xC" width="32">
    
  <bitfield begin="31" description="         Indicates that the num field is valid.     " end="31" id="VALID" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="30" description="          RESERVE FIELD" end="20" id="RES4" rwaccess="R" width="11"></bitfield>
    
  <bitfield begin="19" description="         Priority of the highest priority pending FIQ.  valid only if  the valid flag is set.    " end="16" id="PRI" rwaccess="R" width="4"></bitfield>
    
  <bitfield begin="15" description="          RESERVE FIELD" end="10" id="RES5" rwaccess="R" width="6"></bitfield>
    
  <bitfield begin="9" description="         Number of the highest priority pending FIQ.  valid only if  the valid flag is set.    " end="0" id="NUM" rwaccess="R" width="10"></bitfield>
  </register>
  
  
  <register acronym="IRQGSTS" description="         The IRQ Group Status Register indicates which groups have  pending IRQ interrupts.   " id="IRQGSTS" offset="0x10" width="32">
    
  <bitfield begin="31" description="         Indicates that the num field is valid.     " end="0" id="STS" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="FIQGSTS" description="         The FIQ Group Status Register indicates which groups have  pending FIQ interrupts.   " id="FIQGSTS" offset="0x14" width="32">
    
  <bitfield begin="31" description="         Indicates that the num field is valid.     " end="0" id="STS" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="IRQVEC" description="         The IRQ Vector Address Register contains the 32-bit address  of the interrupt vector for the current pendind IRQ.   " id="IRQVEC" offset="0x18" width="32">
    
  <bitfield begin="31" description="         Upper 30 bits of the 32-bit vector address.  Only valid if  the Prioritized IRQ Register valid flag is true.    " end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="          RESERVE FIELD" end="0" id="RES21" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="FIQVEC" description="         The FIQ Vector Address Register contains the 32-bit address  of the interrupt vector for the current pendind FIQ.   " id="FIQVEC" offset="0x1C" width="32">
    
  <bitfield begin="31" description="         Upper 30 bits of the 32-bit vector address.  Only valid if  the Prioritized FIQ Register valid flag is true.    " end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="          RESERVE FIELD" end="0" id="RES22" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="ACTIRQ" description="         The Active IRQ Register shows the number of the currently  active IRQ.   " id="ACTIRQ" offset="0x20" width="32">
    
  <bitfield begin="31" description="         Indicates that the num field is valid. Set when the IRQ  Vector Address Register is read and cleared whenever the IRQ  Vector Address Register is written.    " end="31" id="VALID" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="30" description="          RESERVE FIELD" end="20" id="RES6" rwaccess="R" width="11"></bitfield>
    
  <bitfield begin="19" description="         Priority of the highest priority pending IRQ.  valid only if  the valid flag is set.    " end="16" id="PRI" rwaccess="R" width="4"></bitfield>
    
  <bitfield begin="15" description="          RESERVE FIELD" end="10" id="RES7" rwaccess="R" width="6"></bitfield>
    
  <bitfield begin="9" description="         Number of the currently active IRQ. Loaded from teh  Prioritized IRQ Register whenever the IRQ Vector Address is  read. Valid only if the valid flag is set.    " end="0" id="NUM" rwaccess="R" width="10"></bitfield>
  </register>
  
  
  <register acronym="ACTFIQ" description="         The Active FIQ Register shows the number of the currently  active FIQ.   " id="ACTFIQ" offset="0x24" width="32">
    
  <bitfield begin="31" description="         Indicates that the num field is valid. Set when the FIQ  Vector Address Register is read and cleared whenever the FIQ  Vector Address Register is written.    " end="31" id="VALID" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="30" description="          RESERVE FIELD" end="20" id="RES8" rwaccess="R" width="11"></bitfield>
    
  <bitfield begin="19" description="         Priority of the highest priority pending IRQ.  valid only if  the valid flag is set.    " end="16" id="PRI" rwaccess="R" width="4"></bitfield>
    
  <bitfield begin="15" description="          RESERVE FIELD" end="10" id="RES9" rwaccess="R" width="6"></bitfield>
    
  <bitfield begin="9" description="         Number of the currently active FIQ. Loaded from teh  Prioritized FIQ Register whenever the FIQ Vector Address is  read. Valid only if the valid flag is set.    " end="0" id="NUM" rwaccess="R" width="10"></bitfield>
  </register>
  
  
  <register acronym="DEDVEC" description="         The DED Vector Address contains a default vector address for  when an uncorrectable error is detected for an active IRQ or  FIQ.   " id="DEDVEC" offset="0x30" width="32">
    
  <bitfield begin="31" description="         Upper 30 bits of the 32-bit vector address." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="          RESERVE FIELD" end="0" id="RES23" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="RAW" description="         Group M Interrupt Raw Status/Set Register (M is 0 to 7) h400 + M x h20 + h00" id="RAW" offset="0x400" width="32">
    
  <bitfield begin="31" description="This is the raw status of the events in Group M Each bit corresponds to event Q where Q = Mx32+Bit  Read 0  Inactive Read 1  Active/Pending Write 0  No effect Write 1  Set to Interrupt Raw Status" end="0" id="STS" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="STS" description="         Group M Interrupt Enabled Status/Clear Register (M is 0 to 7)  h400 + M x h20 + h04" id="STS" offset="0x404" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in Group M  Each bit corresponds to event Q where Q = Mx32+Bit  Read 0  Inactive or Disabled Read 1  Active/Pending and Enabled Write  0 No effect Write 1 Clear Interrupt Raw Status" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTR_EN_SET" description="         Group M Interrupt Enabled Set Register (M is 0 to 7)   h400 + M x h20 + h08" id="INTR_EN_SET" offset="0x408" width="32">
    
  <bitfield begin="31" description="This field is used to enable the mask of events in Group M  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Disabled Read 1 Enabled Write  0 No effect Write  1 Set Enable" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTER_EN_CLR" description="         Group M Interrupt Enabled Clear Register (M is 0 to 7)    h400 + M x h20 + h0C" id="INTER_EN_CLR" offset="0x40C" width="32">
    
  <bitfield begin="31" description="This field is used to disable the mask of events in Group M Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Disabled Read 1 Enabled Write 0 No effect Write 1 Clear Enable" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="IRQSTS" description="         Group M Interrupt IRQ Enabled Status/Clear Register (M is 0 to 7)    h400 + M x h20 + h10" id="IRQSTS" offset="0x410" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in group M that are mapped to IRQ  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Inactive, Disabled, or not an IRQ Read 1 Active/Pending, Enabled, and IRQ Write  0 No effect Write  1 Clear Interrupt Raw Status (if IRQ)" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="FIQSTS" description="         Group M Interrupt FIQ Enabled Status/Clear Register (M is 0 to 7)    h400 + M x h20 + h14" id="FIQSTS" offset="0x414" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in group M that are mapped to FIQ  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Inactive, Disabled, or not an FIQ Read 1 Active/Pending, Enabled, and FIQ Write  0 No effect Write  1 Clear Interrupt Raw Status (if FIQ)" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTMAP" description="         Group M Interrupt Map Register (M is 0 to 7)   h400 + M x h20 + h18" id="INTMAP" offset="0x418" width="32">
    
  <bitfield begin="31" description="This field is used to indicate which interrupt the corresponding event influences (if enabled) for event group M.  Each bit corresponds to event Q where Q = Mx32+Bit    0 IRQ Interrupt (default) 1 FIQ Interrupt" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTTYPE" description="         Group M Type Map Register (M is 0 to 7)   h400 + M x h20 + 0x1C" id="INTTYPE" offset="0x41C" width="32">
    
  <bitfield begin="31" description="This field is used to indicate whether the source of an interrupt is a level (default) or a pulse for event group M.  This is informational so that an ISR may query this register and know whether it has to clear a pulse event or a level event (see 3.4 Interrupt Handling).  The value has no effect on how the VIM hardware functions.  The input interrupts are agnostic as to whether they are pulse or level.  Each bit corresponds to event Q where Q = Mx32+Bit 0  Level (default) 1  Pulse" end="0" id="VAL" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RAW_1" description="         Group M Interrupt Raw Status/Set Register (M is 0 to 7) h400 + M x h20 + h00" id="RAW_1" offset="0x420" width="32">
    
  <bitfield begin="31" description="This is the raw status of the events in Group M Each bit corresponds to event Q where Q = Mx32+Bit  Read 0  Inactive Read 1  Active/Pending Write 0  No effect Write 1  Set to Interrupt Raw Status" end="0" id="STS" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="STS_1" description="         Group M Interrupt Enabled Status/Clear Register (M is 0 to 7)  h400 + M x h20 + h04" id="STS_1" offset="0x424" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in Group M  Each bit corresponds to event Q where Q = Mx32+Bit  Read 0  Inactive or Disabled Read 1  Active/Pending and Enabled Write  0 No effect Write 1 Clear Interrupt Raw Status" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTR_EN_SET_1" description="         Group M Interrupt Enabled Set Register (M is 0 to 7)   h400 + M x h20 + h08" id="INTR_EN_SET_1" offset="0x428" width="32">
    
  <bitfield begin="31" description="This field is used to enable the mask of events in Group M  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Disabled Read 1 Enabled Write  0 No effect Write  1 Set Enable" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTER_EN_CLR_1" description="         Group M Interrupt Enabled Clear Register (M is 0 to 7)    h400 + M x h20 + h0C" id="INTER_EN_CLR_1" offset="0x42C" width="32">
    
  <bitfield begin="31" description="This field is used to disable the mask of events in Group M Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Disabled Read 1 Enabled Write 0 No effect Write 1 Clear Enable" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="IRQSTS_1" description="         Group M Interrupt IRQ Enabled Status/Clear Register (M is 0 to 7)    h400 + M x h20 + h10" id="IRQSTS_1" offset="0x430" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in group M that are mapped to IRQ  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Inactive, Disabled, or not an IRQ Read 1 Active/Pending, Enabled, and IRQ Write  0 No effect Write  1 Clear Interrupt Raw Status (if IRQ)" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="FIQSTS_1" description="         Group M Interrupt FIQ Enabled Status/Clear Register (M is 0 to 7)    h400 + M x h20 + h14" id="FIQSTS_1" offset="0x434" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in group M that are mapped to FIQ  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Inactive, Disabled, or not an FIQ Read 1 Active/Pending, Enabled, and FIQ Write  0 No effect Write  1 Clear Interrupt Raw Status (if FIQ)" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTMAP_1" description="         Group M Interrupt Map Register (M is 0 to 7)   h400 + M x h20 + h18" id="INTMAP_1" offset="0x438" width="32">
    
  <bitfield begin="31" description="This field is used to indicate which interrupt the corresponding event influences (if enabled) for event group M.  Each bit corresponds to event Q where Q = Mx32+Bit    0 IRQ Interrupt (default) 1 FIQ Interrupt" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTTYPE_1" description="         Group M Type Map Register (M is 0 to 7)   h400 + M x h20 + 0x1C" id="INTTYPE_1" offset="0x43C" width="32">
    
  <bitfield begin="31" description="This field is used to indicate whether the source of an interrupt is a level (default) or a pulse for event group M.  This is informational so that an ISR may query this register and know whether it has to clear a pulse event or a level event (see 3.4 Interrupt Handling).  The value has no effect on how the VIM hardware functions.  The input interrupts are agnostic as to whether they are pulse or level.  Each bit corresponds to event Q where Q = Mx32+Bit 0  Level (default) 1  Pulse" end="0" id="VAL" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RAW_2" description="         Group M Interrupt Raw Status/Set Register (M is 0 to 7) h400 + M x h20 + h00" id="RAW_2" offset="0x440" width="32">
    
  <bitfield begin="31" description="This is the raw status of the events in Group M Each bit corresponds to event Q where Q = Mx32+Bit  Read 0  Inactive Read 1  Active/Pending Write 0  No effect Write 1  Set to Interrupt Raw Status" end="0" id="STS" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="STS_2" description="         Group M Interrupt Enabled Status/Clear Register (M is 0 to 7)  h400 + M x h20 + h04" id="STS_2" offset="0x444" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in Group M  Each bit corresponds to event Q where Q = Mx32+Bit  Read 0  Inactive or Disabled Read 1  Active/Pending and Enabled Write  0 No effect Write 1 Clear Interrupt Raw Status" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTR_EN_SET_2" description="         Group M Interrupt Enabled Set Register (M is 0 to 7)   h400 + M x h20 + h08" id="INTR_EN_SET_2" offset="0x448" width="32">
    
  <bitfield begin="31" description="This field is used to enable the mask of events in Group M  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Disabled Read 1 Enabled Write  0 No effect Write  1 Set Enable" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTER_EN_CLR_2" description="         Group M Interrupt Enabled Clear Register (M is 0 to 7)    h400 + M x h20 + h0C" id="INTER_EN_CLR_2" offset="0x44C" width="32">
    
  <bitfield begin="31" description="This field is used to disable the mask of events in Group M Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Disabled Read 1 Enabled Write 0 No effect Write 1 Clear Enable" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="IRQSTS_2" description="         Group M Interrupt IRQ Enabled Status/Clear Register (M is 0 to 7)    h400 + M x h20 + h10" id="IRQSTS_2" offset="0x450" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in group M that are mapped to IRQ  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Inactive, Disabled, or not an IRQ Read 1 Active/Pending, Enabled, and IRQ Write  0 No effect Write  1 Clear Interrupt Raw Status (if IRQ)" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="FIQSTS_2" description="         Group M Interrupt FIQ Enabled Status/Clear Register (M is 0 to 7)    h400 + M x h20 + h14" id="FIQSTS_2" offset="0x454" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in group M that are mapped to FIQ  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Inactive, Disabled, or not an FIQ Read 1 Active/Pending, Enabled, and FIQ Write  0 No effect Write  1 Clear Interrupt Raw Status (if FIQ)" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTMAP_2" description="         Group M Interrupt Map Register (M is 0 to 7)   h400 + M x h20 + h18" id="INTMAP_2" offset="0x458" width="32">
    
  <bitfield begin="31" description="This field is used to indicate which interrupt the corresponding event influences (if enabled) for event group M.  Each bit corresponds to event Q where Q = Mx32+Bit    0 IRQ Interrupt (default) 1 FIQ Interrupt" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTTYPE_2" description="         Group M Type Map Register (M is 0 to 7)   h400 + M x h20 + 0x1C" id="INTTYPE_2" offset="0x45C" width="32">
    
  <bitfield begin="31" description="This field is used to indicate whether the source of an interrupt is a level (default) or a pulse for event group M.  This is informational so that an ISR may query this register and know whether it has to clear a pulse event or a level event (see 3.4 Interrupt Handling).  The value has no effect on how the VIM hardware functions.  The input interrupts are agnostic as to whether they are pulse or level.  Each bit corresponds to event Q where Q = Mx32+Bit 0  Level (default) 1  Pulse" end="0" id="VAL" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RAW_3" description="         Group M Interrupt Raw Status/Set Register (M is 0 to 7) h400 + M x h20 + h00" id="RAW_3" offset="0x460" width="32">
    
  <bitfield begin="31" description="This is the raw status of the events in Group M Each bit corresponds to event Q where Q = Mx32+Bit  Read 0  Inactive Read 1  Active/Pending Write 0  No effect Write 1  Set to Interrupt Raw Status" end="0" id="STS" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="STS_3" description="         Group M Interrupt Enabled Status/Clear Register (M is 0 to 7)  h400 + M x h20 + h04" id="STS_3" offset="0x464" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in Group M  Each bit corresponds to event Q where Q = Mx32+Bit  Read 0  Inactive or Disabled Read 1  Active/Pending and Enabled Write  0 No effect Write 1 Clear Interrupt Raw Status" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTR_EN_SET_3" description="         Group M Interrupt Enabled Set Register (M is 0 to 7)   h400 + M x h20 + h08" id="INTR_EN_SET_3" offset="0x468" width="32">
    
  <bitfield begin="31" description="This field is used to enable the mask of events in Group M  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Disabled Read 1 Enabled Write  0 No effect Write  1 Set Enable" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTER_EN_CLR_3" description="         Group M Interrupt Enabled Clear Register (M is 0 to 7)    h400 + M x h20 + h0C" id="INTER_EN_CLR_3" offset="0x46C" width="32">
    
  <bitfield begin="31" description="This field is used to disable the mask of events in Group M Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Disabled Read 1 Enabled Write 0 No effect Write 1 Clear Enable" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="IRQSTS_3" description="         Group M Interrupt IRQ Enabled Status/Clear Register (M is 0 to 7)    h400 + M x h20 + h10" id="IRQSTS_3" offset="0x470" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in group M that are mapped to IRQ  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Inactive, Disabled, or not an IRQ Read 1 Active/Pending, Enabled, and IRQ Write  0 No effect Write  1 Clear Interrupt Raw Status (if IRQ)" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="FIQSTS_3" description="         Group M Interrupt FIQ Enabled Status/Clear Register (M is 0 to 7)    h400 + M x h20 + h14" id="FIQSTS_3" offset="0x474" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in group M that are mapped to FIQ  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Inactive, Disabled, or not an FIQ Read 1 Active/Pending, Enabled, and FIQ Write  0 No effect Write  1 Clear Interrupt Raw Status (if FIQ)" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTMAP_3" description="         Group M Interrupt Map Register (M is 0 to 7)   h400 + M x h20 + h18" id="INTMAP_3" offset="0x478" width="32">
    
  <bitfield begin="31" description="This field is used to indicate which interrupt the corresponding event influences (if enabled) for event group M.  Each bit corresponds to event Q where Q = Mx32+Bit    0 IRQ Interrupt (default) 1 FIQ Interrupt" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTTYPE_3" description="         Group M Type Map Register (M is 0 to 7)   h400 + M x h20 + 0x1C" id="INTTYPE_3" offset="0x47C" width="32">
    
  <bitfield begin="31" description="This field is used to indicate whether the source of an interrupt is a level (default) or a pulse for event group M.  This is informational so that an ISR may query this register and know whether it has to clear a pulse event or a level event (see 3.4 Interrupt Handling).  The value has no effect on how the VIM hardware functions.  The input interrupts are agnostic as to whether they are pulse or level.  Each bit corresponds to event Q where Q = Mx32+Bit 0  Level (default) 1  Pulse" end="0" id="VAL" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RAW_4" description="         Group M Interrupt Raw Status/Set Register (M is 0 to 7) h400 + M x h20 + h00" id="RAW_4" offset="0x480" width="32">
    
  <bitfield begin="31" description="This is the raw status of the events in Group M Each bit corresponds to event Q where Q = Mx32+Bit  Read 0  Inactive Read 1  Active/Pending Write 0  No effect Write 1  Set to Interrupt Raw Status" end="0" id="STS" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="STS_4" description="         Group M Interrupt Enabled Status/Clear Register (M is 0 to 7)  h400 + M x h20 + h04" id="STS_4" offset="0x484" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in Group M  Each bit corresponds to event Q where Q = Mx32+Bit  Read 0  Inactive or Disabled Read 1  Active/Pending and Enabled Write  0 No effect Write 1 Clear Interrupt Raw Status" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTR_EN_SET_4" description="         Group M Interrupt Enabled Set Register (M is 0 to 7)   h400 + M x h20 + h08" id="INTR_EN_SET_4" offset="0x488" width="32">
    
  <bitfield begin="31" description="This field is used to enable the mask of events in Group M  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Disabled Read 1 Enabled Write  0 No effect Write  1 Set Enable" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTER_EN_CLR_4" description="         Group M Interrupt Enabled Clear Register (M is 0 to 7)    h400 + M x h20 + h0C" id="INTER_EN_CLR_4" offset="0x48C" width="32">
    
  <bitfield begin="31" description="This field is used to disable the mask of events in Group M Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Disabled Read 1 Enabled Write 0 No effect Write 1 Clear Enable" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="IRQSTS_4" description="         Group M Interrupt IRQ Enabled Status/Clear Register (M is 0 to 7)    h400 + M x h20 + h10" id="IRQSTS_4" offset="0x490" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in group M that are mapped to IRQ  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Inactive, Disabled, or not an IRQ Read 1 Active/Pending, Enabled, and IRQ Write  0 No effect Write  1 Clear Interrupt Raw Status (if IRQ)" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="FIQSTS_4" description="         Group M Interrupt FIQ Enabled Status/Clear Register (M is 0 to 7)    h400 + M x h20 + h14" id="FIQSTS_4" offset="0x494" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in group M that are mapped to FIQ  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Inactive, Disabled, or not an FIQ Read 1 Active/Pending, Enabled, and FIQ Write  0 No effect Write  1 Clear Interrupt Raw Status (if FIQ)" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTMAP_4" description="         Group M Interrupt Map Register (M is 0 to 7)   h400 + M x h20 + h18" id="INTMAP_4" offset="0x498" width="32">
    
  <bitfield begin="31" description="This field is used to indicate which interrupt the corresponding event influences (if enabled) for event group M.  Each bit corresponds to event Q where Q = Mx32+Bit    0 IRQ Interrupt (default) 1 FIQ Interrupt" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTTYPE_4" description="         Group M Type Map Register (M is 0 to 7)   h400 + M x h20 + 0x1C" id="INTTYPE_4" offset="0x49C" width="32">
    
  <bitfield begin="31" description="This field is used to indicate whether the source of an interrupt is a level (default) or a pulse for event group M.  This is informational so that an ISR may query this register and know whether it has to clear a pulse event or a level event (see 3.4 Interrupt Handling).  The value has no effect on how the VIM hardware functions.  The input interrupts are agnostic as to whether they are pulse or level.  Each bit corresponds to event Q where Q = Mx32+Bit 0  Level (default) 1  Pulse" end="0" id="VAL" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RAW_5" description="         Group M Interrupt Raw Status/Set Register (M is 0 to 7) h400 + M x h20 + h00" id="RAW_5" offset="0x4A0" width="32">
    
  <bitfield begin="31" description="This is the raw status of the events in Group M Each bit corresponds to event Q where Q = Mx32+Bit  Read 0  Inactive Read 1  Active/Pending Write 0  No effect Write 1  Set to Interrupt Raw Status" end="0" id="STS" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="STS_5" description="         Group M Interrupt Enabled Status/Clear Register (M is 0 to 7)  h400 + M x h20 + h04" id="STS_5" offset="0x4A4" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in Group M  Each bit corresponds to event Q where Q = Mx32+Bit  Read 0  Inactive or Disabled Read 1  Active/Pending and Enabled Write  0 No effect Write 1 Clear Interrupt Raw Status" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTR_EN_SET_5" description="         Group M Interrupt Enabled Set Register (M is 0 to 7)   h400 + M x h20 + h08" id="INTR_EN_SET_5" offset="0x4A8" width="32">
    
  <bitfield begin="31" description="This field is used to enable the mask of events in Group M  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Disabled Read 1 Enabled Write  0 No effect Write  1 Set Enable" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTER_EN_CLR_5" description="         Group M Interrupt Enabled Clear Register (M is 0 to 7)    h400 + M x h20 + h0C" id="INTER_EN_CLR_5" offset="0x4AC" width="32">
    
  <bitfield begin="31" description="This field is used to disable the mask of events in Group M Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Disabled Read 1 Enabled Write 0 No effect Write 1 Clear Enable" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="IRQSTS_5" description="         Group M Interrupt IRQ Enabled Status/Clear Register (M is 0 to 7)    h400 + M x h20 + h10" id="IRQSTS_5" offset="0x4B0" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in group M that are mapped to IRQ  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Inactive, Disabled, or not an IRQ Read 1 Active/Pending, Enabled, and IRQ Write  0 No effect Write  1 Clear Interrupt Raw Status (if IRQ)" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="FIQSTS_5" description="         Group M Interrupt FIQ Enabled Status/Clear Register (M is 0 to 7)    h400 + M x h20 + h14" id="FIQSTS_5" offset="0x4B4" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in group M that are mapped to FIQ  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Inactive, Disabled, or not an FIQ Read 1 Active/Pending, Enabled, and FIQ Write  0 No effect Write  1 Clear Interrupt Raw Status (if FIQ)" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTMAP_5" description="         Group M Interrupt Map Register (M is 0 to 7)   h400 + M x h20 + h18" id="INTMAP_5" offset="0x4B8" width="32">
    
  <bitfield begin="31" description="This field is used to indicate which interrupt the corresponding event influences (if enabled) for event group M.  Each bit corresponds to event Q where Q = Mx32+Bit    0 IRQ Interrupt (default) 1 FIQ Interrupt" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTTYPE_5" description="         Group M Type Map Register (M is 0 to 7)   h400 + M x h20 + 0x1C" id="INTTYPE_5" offset="0x4BC" width="32">
    
  <bitfield begin="31" description="This field is used to indicate whether the source of an interrupt is a level (default) or a pulse for event group M.  This is informational so that an ISR may query this register and know whether it has to clear a pulse event or a level event (see 3.4 Interrupt Handling).  The value has no effect on how the VIM hardware functions.  The input interrupts are agnostic as to whether they are pulse or level.  Each bit corresponds to event Q where Q = Mx32+Bit 0  Level (default) 1  Pulse" end="0" id="VAL" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RAW_6" description="         Group M Interrupt Raw Status/Set Register (M is 0 to 7) h400 + M x h20 + h00" id="RAW_6" offset="0x4C0" width="32">
    
  <bitfield begin="31" description="This is the raw status of the events in Group M Each bit corresponds to event Q where Q = Mx32+Bit  Read 0  Inactive Read 1  Active/Pending Write 0  No effect Write 1  Set to Interrupt Raw Status" end="0" id="STS" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="STS_6" description="         Group M Interrupt Enabled Status/Clear Register (M is 0 to 7)  h400 + M x h20 + h04" id="STS_6" offset="0x4C4" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in Group M  Each bit corresponds to event Q where Q = Mx32+Bit  Read 0  Inactive or Disabled Read 1  Active/Pending and Enabled Write  0 No effect Write 1 Clear Interrupt Raw Status" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTR_EN_SET_6" description="         Group M Interrupt Enabled Set Register (M is 0 to 7)   h400 + M x h20 + h08" id="INTR_EN_SET_6" offset="0x4C8" width="32">
    
  <bitfield begin="31" description="This field is used to enable the mask of events in Group M  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Disabled Read 1 Enabled Write  0 No effect Write  1 Set Enable" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTER_EN_CLR_6" description="         Group M Interrupt Enabled Clear Register (M is 0 to 7)    h400 + M x h20 + h0C" id="INTER_EN_CLR_6" offset="0x4CC" width="32">
    
  <bitfield begin="31" description="This field is used to disable the mask of events in Group M Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Disabled Read 1 Enabled Write 0 No effect Write 1 Clear Enable" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="IRQSTS_6" description="         Group M Interrupt IRQ Enabled Status/Clear Register (M is 0 to 7)    h400 + M x h20 + h10" id="IRQSTS_6" offset="0x4D0" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in group M that are mapped to IRQ  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Inactive, Disabled, or not an IRQ Read 1 Active/Pending, Enabled, and IRQ Write  0 No effect Write  1 Clear Interrupt Raw Status (if IRQ)" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="FIQSTS_6" description="         Group M Interrupt FIQ Enabled Status/Clear Register (M is 0 to 7)    h400 + M x h20 + h14" id="FIQSTS_6" offset="0x4D4" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in group M that are mapped to FIQ  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Inactive, Disabled, or not an FIQ Read 1 Active/Pending, Enabled, and FIQ Write  0 No effect Write  1 Clear Interrupt Raw Status (if FIQ)" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTMAP_6" description="         Group M Interrupt Map Register (M is 0 to 7)   h400 + M x h20 + h18" id="INTMAP_6" offset="0x4D8" width="32">
    
  <bitfield begin="31" description="This field is used to indicate which interrupt the corresponding event influences (if enabled) for event group M.  Each bit corresponds to event Q where Q = Mx32+Bit    0 IRQ Interrupt (default) 1 FIQ Interrupt" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTTYPE_6" description="         Group M Type Map Register (M is 0 to 7)   h400 + M x h20 + 0x1C" id="INTTYPE_6" offset="0x4DC" width="32">
    
  <bitfield begin="31" description="This field is used to indicate whether the source of an interrupt is a level (default) or a pulse for event group M.  This is informational so that an ISR may query this register and know whether it has to clear a pulse event or a level event (see 3.4 Interrupt Handling).  The value has no effect on how the VIM hardware functions.  The input interrupts are agnostic as to whether they are pulse or level.  Each bit corresponds to event Q where Q = Mx32+Bit 0  Level (default) 1  Pulse" end="0" id="VAL" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RAW_7" description="         Group M Interrupt Raw Status/Set Register (M is 0 to 7) h400 + M x h20 + h00" id="RAW_7" offset="0x4E0" width="32">
    
  <bitfield begin="31" description="This is the raw status of the events in Group M Each bit corresponds to event Q where Q = Mx32+Bit  Read 0  Inactive Read 1  Active/Pending Write 0  No effect Write 1  Set to Interrupt Raw Status" end="0" id="STS" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="STS_7" description="         Group M Interrupt Enabled Status/Clear Register (M is 0 to 7)  h400 + M x h20 + h04" id="STS_7" offset="0x4E4" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in Group M  Each bit corresponds to event Q where Q = Mx32+Bit  Read 0  Inactive or Disabled Read 1  Active/Pending and Enabled Write  0 No effect Write 1 Clear Interrupt Raw Status" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTR_EN_SET_7" description="         Group M Interrupt Enabled Set Register (M is 0 to 7)   h400 + M x h20 + h08" id="INTR_EN_SET_7" offset="0x4E8" width="32">
    
  <bitfield begin="31" description="This field is used to enable the mask of events in Group M  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Disabled Read 1 Enabled Write  0 No effect Write  1 Set Enable" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTER_EN_CLR_7" description="         Group M Interrupt Enabled Clear Register (M is 0 to 7)    h400 + M x h20 + h0C" id="INTER_EN_CLR_7" offset="0x4EC" width="32">
    
  <bitfield begin="31" description="This field is used to disable the mask of events in Group M Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Disabled Read 1 Enabled Write 0 No effect Write 1 Clear Enable" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="IRQSTS_7" description="         Group M Interrupt IRQ Enabled Status/Clear Register (M is 0 to 7)    h400 + M x h20 + h10" id="IRQSTS_7" offset="0x4F0" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in group M that are mapped to IRQ  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Inactive, Disabled, or not an IRQ Read 1 Active/Pending, Enabled, and IRQ Write  0 No effect Write  1 Clear Interrupt Raw Status (if IRQ)" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="FIQSTS_7" description="         Group M Interrupt FIQ Enabled Status/Clear Register (M is 0 to 7)    h400 + M x h20 + h14" id="FIQSTS_7" offset="0x4F4" width="32">
    
  <bitfield begin="31" description="This is the masked status of the events in group M that are mapped to FIQ  Each bit corresponds to event Q where Q = Mx32+Bit Read 0 Inactive, Disabled, or not an FIQ Read 1 Active/Pending, Enabled, and FIQ Write  0 No effect Write  1 Clear Interrupt Raw Status (if FIQ)" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTMAP_7" description="         Group M Interrupt Map Register (M is 0 to 7)   h400 + M x h20 + h18" id="INTMAP_7" offset="0x4F8" width="32">
    
  <bitfield begin="31" description="This field is used to indicate which interrupt the corresponding event influences (if enabled) for event group M.  Each bit corresponds to event Q where Q = Mx32+Bit    0 IRQ Interrupt (default) 1 FIQ Interrupt" end="0" id="MASK" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTTYPE_7" description="         Group M Type Map Register (M is 0 to 7)   h400 + M x h20 + 0x1C" id="INTTYPE_7" offset="0x4FC" width="32">
    
  <bitfield begin="31" description="This field is used to indicate whether the source of an interrupt is a level (default) or a pulse for event group M.  This is informational so that an ISR may query this register and know whether it has to clear a pulse event or a level event (see 3.4 Interrupt Handling).  The value has no effect on how the VIM hardware functions.  The input interrupts are agnostic as to whether they are pulse or level.  Each bit corresponds to event Q where Q = Mx32+Bit 0  Level (default) 1  Pulse" end="0" id="VAL" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h4" id="INTPRIORITY" offset="0x1000" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_1" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h5" id="INTPRIORITY_1" offset="0x1004" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_2" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h6" id="INTPRIORITY_2" offset="0x1008" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_3" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h7" id="INTPRIORITY_3" offset="0x100C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_4" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h8" id="INTPRIORITY_4" offset="0x1010" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_5" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h9" id="INTPRIORITY_5" offset="0x1014" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_6" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h10" id="INTPRIORITY_6" offset="0x1018" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_7" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h11" id="INTPRIORITY_7" offset="0x101C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_8" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h12" id="INTPRIORITY_8" offset="0x1020" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_9" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h13" id="INTPRIORITY_9" offset="0x1024" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_10" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h14" id="INTPRIORITY_10" offset="0x1028" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_11" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h15" id="INTPRIORITY_11" offset="0x102C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_12" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h16" id="INTPRIORITY_12" offset="0x1030" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_13" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h17" id="INTPRIORITY_13" offset="0x1034" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_14" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h18" id="INTPRIORITY_14" offset="0x1038" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_15" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h19" id="INTPRIORITY_15" offset="0x103C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_16" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h20" id="INTPRIORITY_16" offset="0x1040" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_17" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h21" id="INTPRIORITY_17" offset="0x1044" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_18" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h22" id="INTPRIORITY_18" offset="0x1048" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_19" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h23" id="INTPRIORITY_19" offset="0x104C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_20" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h24" id="INTPRIORITY_20" offset="0x1050" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_21" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h25" id="INTPRIORITY_21" offset="0x1054" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_22" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h26" id="INTPRIORITY_22" offset="0x1058" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_23" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h27" id="INTPRIORITY_23" offset="0x105C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_24" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h28" id="INTPRIORITY_24" offset="0x1060" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_25" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h29" id="INTPRIORITY_25" offset="0x1064" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_26" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h30" id="INTPRIORITY_26" offset="0x1068" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_27" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h31" id="INTPRIORITY_27" offset="0x106C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_28" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h32" id="INTPRIORITY_28" offset="0x1070" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_29" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h33" id="INTPRIORITY_29" offset="0x1074" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_30" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h34" id="INTPRIORITY_30" offset="0x1078" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_31" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h35" id="INTPRIORITY_31" offset="0x107C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_32" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h36" id="INTPRIORITY_32" offset="0x1080" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_33" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h37" id="INTPRIORITY_33" offset="0x1084" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_34" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h38" id="INTPRIORITY_34" offset="0x1088" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_35" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h39" id="INTPRIORITY_35" offset="0x108C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_36" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h40" id="INTPRIORITY_36" offset="0x1090" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_37" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h41" id="INTPRIORITY_37" offset="0x1094" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_38" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h42" id="INTPRIORITY_38" offset="0x1098" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_39" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h43" id="INTPRIORITY_39" offset="0x109C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_40" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h44" id="INTPRIORITY_40" offset="0x10A0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_41" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h45" id="INTPRIORITY_41" offset="0x10A4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_42" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h46" id="INTPRIORITY_42" offset="0x10A8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_43" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h47" id="INTPRIORITY_43" offset="0x10AC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_44" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h48" id="INTPRIORITY_44" offset="0x10B0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_45" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h49" id="INTPRIORITY_45" offset="0x10B4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_46" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h50" id="INTPRIORITY_46" offset="0x10B8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_47" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h51" id="INTPRIORITY_47" offset="0x10BC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_48" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h52" id="INTPRIORITY_48" offset="0x10C0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_49" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h53" id="INTPRIORITY_49" offset="0x10C4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_50" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h54" id="INTPRIORITY_50" offset="0x10C8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_51" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h55" id="INTPRIORITY_51" offset="0x10CC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_52" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h56" id="INTPRIORITY_52" offset="0x10D0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_53" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h57" id="INTPRIORITY_53" offset="0x10D4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_54" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h58" id="INTPRIORITY_54" offset="0x10D8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_55" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h59" id="INTPRIORITY_55" offset="0x10DC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_56" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h60" id="INTPRIORITY_56" offset="0x10E0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_57" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h61" id="INTPRIORITY_57" offset="0x10E4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_58" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h62" id="INTPRIORITY_58" offset="0x10E8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_59" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h63" id="INTPRIORITY_59" offset="0x10EC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_60" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h64" id="INTPRIORITY_60" offset="0x10F0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_61" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h65" id="INTPRIORITY_61" offset="0x10F4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_62" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h66" id="INTPRIORITY_62" offset="0x10F8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_63" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h67" id="INTPRIORITY_63" offset="0x10FC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_64" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h68" id="INTPRIORITY_64" offset="0x1100" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_65" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h69" id="INTPRIORITY_65" offset="0x1104" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_66" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h70" id="INTPRIORITY_66" offset="0x1108" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_67" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h71" id="INTPRIORITY_67" offset="0x110C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_68" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h72" id="INTPRIORITY_68" offset="0x1110" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_69" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h73" id="INTPRIORITY_69" offset="0x1114" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_70" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h74" id="INTPRIORITY_70" offset="0x1118" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_71" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h75" id="INTPRIORITY_71" offset="0x111C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_72" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h76" id="INTPRIORITY_72" offset="0x1120" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_73" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h77" id="INTPRIORITY_73" offset="0x1124" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_74" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h78" id="INTPRIORITY_74" offset="0x1128" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_75" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h79" id="INTPRIORITY_75" offset="0x112C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_76" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h80" id="INTPRIORITY_76" offset="0x1130" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_77" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h81" id="INTPRIORITY_77" offset="0x1134" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_78" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h82" id="INTPRIORITY_78" offset="0x1138" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_79" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h83" id="INTPRIORITY_79" offset="0x113C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_80" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h84" id="INTPRIORITY_80" offset="0x1140" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_81" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h85" id="INTPRIORITY_81" offset="0x1144" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_82" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h86" id="INTPRIORITY_82" offset="0x1148" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_83" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h87" id="INTPRIORITY_83" offset="0x114C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_84" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h88" id="INTPRIORITY_84" offset="0x1150" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_85" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h89" id="INTPRIORITY_85" offset="0x1154" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_86" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h90" id="INTPRIORITY_86" offset="0x1158" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_87" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h91" id="INTPRIORITY_87" offset="0x115C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_88" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h92" id="INTPRIORITY_88" offset="0x1160" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_89" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h93" id="INTPRIORITY_89" offset="0x1164" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_90" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h94" id="INTPRIORITY_90" offset="0x1168" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_91" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h95" id="INTPRIORITY_91" offset="0x116C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_92" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h96" id="INTPRIORITY_92" offset="0x1170" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_93" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h97" id="INTPRIORITY_93" offset="0x1174" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_94" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h98" id="INTPRIORITY_94" offset="0x1178" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_95" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h99" id="INTPRIORITY_95" offset="0x117C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_96" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h100" id="INTPRIORITY_96" offset="0x1180" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_97" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h101" id="INTPRIORITY_97" offset="0x1184" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_98" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h102" id="INTPRIORITY_98" offset="0x1188" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_99" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h103" id="INTPRIORITY_99" offset="0x118C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_100" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h104" id="INTPRIORITY_100" offset="0x1190" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_101" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h105" id="INTPRIORITY_101" offset="0x1194" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_102" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h106" id="INTPRIORITY_102" offset="0x1198" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_103" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h107" id="INTPRIORITY_103" offset="0x119C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_104" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h108" id="INTPRIORITY_104" offset="0x11A0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_105" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h109" id="INTPRIORITY_105" offset="0x11A4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_106" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h110" id="INTPRIORITY_106" offset="0x11A8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_107" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h111" id="INTPRIORITY_107" offset="0x11AC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_108" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h112" id="INTPRIORITY_108" offset="0x11B0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_109" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h113" id="INTPRIORITY_109" offset="0x11B4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_110" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h114" id="INTPRIORITY_110" offset="0x11B8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_111" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h115" id="INTPRIORITY_111" offset="0x11BC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_112" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h116" id="INTPRIORITY_112" offset="0x11C0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_113" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h117" id="INTPRIORITY_113" offset="0x11C4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_114" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h118" id="INTPRIORITY_114" offset="0x11C8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_115" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h119" id="INTPRIORITY_115" offset="0x11CC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_116" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h120" id="INTPRIORITY_116" offset="0x11D0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_117" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h121" id="INTPRIORITY_117" offset="0x11D4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_118" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h122" id="INTPRIORITY_118" offset="0x11D8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_119" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h123" id="INTPRIORITY_119" offset="0x11DC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_120" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h124" id="INTPRIORITY_120" offset="0x11E0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_121" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h125" id="INTPRIORITY_121" offset="0x11E4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_122" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h126" id="INTPRIORITY_122" offset="0x11E8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_123" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h127" id="INTPRIORITY_123" offset="0x11EC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_124" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h128" id="INTPRIORITY_124" offset="0x11F0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_125" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h129" id="INTPRIORITY_125" offset="0x11F4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_126" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h130" id="INTPRIORITY_126" offset="0x11F8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_127" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h131" id="INTPRIORITY_127" offset="0x11FC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_128" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h132" id="INTPRIORITY_128" offset="0x1200" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_129" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h133" id="INTPRIORITY_129" offset="0x1204" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_130" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h134" id="INTPRIORITY_130" offset="0x1208" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_131" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h135" id="INTPRIORITY_131" offset="0x120C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_132" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h136" id="INTPRIORITY_132" offset="0x1210" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_133" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h137" id="INTPRIORITY_133" offset="0x1214" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_134" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h138" id="INTPRIORITY_134" offset="0x1218" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_135" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h139" id="INTPRIORITY_135" offset="0x121C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_136" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h140" id="INTPRIORITY_136" offset="0x1220" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_137" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h141" id="INTPRIORITY_137" offset="0x1224" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_138" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h142" id="INTPRIORITY_138" offset="0x1228" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_139" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h143" id="INTPRIORITY_139" offset="0x122C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_140" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h144" id="INTPRIORITY_140" offset="0x1230" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_141" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h145" id="INTPRIORITY_141" offset="0x1234" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_142" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h146" id="INTPRIORITY_142" offset="0x1238" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_143" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h147" id="INTPRIORITY_143" offset="0x123C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_144" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h148" id="INTPRIORITY_144" offset="0x1240" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_145" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h149" id="INTPRIORITY_145" offset="0x1244" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_146" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h150" id="INTPRIORITY_146" offset="0x1248" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_147" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h151" id="INTPRIORITY_147" offset="0x124C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_148" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h152" id="INTPRIORITY_148" offset="0x1250" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_149" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h153" id="INTPRIORITY_149" offset="0x1254" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_150" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h154" id="INTPRIORITY_150" offset="0x1258" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_151" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h155" id="INTPRIORITY_151" offset="0x125C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_152" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h156" id="INTPRIORITY_152" offset="0x1260" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_153" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h157" id="INTPRIORITY_153" offset="0x1264" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_154" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h158" id="INTPRIORITY_154" offset="0x1268" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_155" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h159" id="INTPRIORITY_155" offset="0x126C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_156" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h160" id="INTPRIORITY_156" offset="0x1270" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_157" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h161" id="INTPRIORITY_157" offset="0x1274" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_158" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h162" id="INTPRIORITY_158" offset="0x1278" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_159" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h163" id="INTPRIORITY_159" offset="0x127C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_160" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h164" id="INTPRIORITY_160" offset="0x1280" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_161" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h165" id="INTPRIORITY_161" offset="0x1284" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_162" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h166" id="INTPRIORITY_162" offset="0x1288" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_163" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h167" id="INTPRIORITY_163" offset="0x128C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_164" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h168" id="INTPRIORITY_164" offset="0x1290" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_165" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h169" id="INTPRIORITY_165" offset="0x1294" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_166" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h170" id="INTPRIORITY_166" offset="0x1298" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_167" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h171" id="INTPRIORITY_167" offset="0x129C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_168" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h172" id="INTPRIORITY_168" offset="0x12A0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_169" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h173" id="INTPRIORITY_169" offset="0x12A4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_170" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h174" id="INTPRIORITY_170" offset="0x12A8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_171" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h175" id="INTPRIORITY_171" offset="0x12AC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_172" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h176" id="INTPRIORITY_172" offset="0x12B0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_173" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h177" id="INTPRIORITY_173" offset="0x12B4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_174" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h178" id="INTPRIORITY_174" offset="0x12B8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_175" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h179" id="INTPRIORITY_175" offset="0x12BC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_176" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h180" id="INTPRIORITY_176" offset="0x12C0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_177" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h181" id="INTPRIORITY_177" offset="0x12C4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_178" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h182" id="INTPRIORITY_178" offset="0x12C8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_179" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h183" id="INTPRIORITY_179" offset="0x12CC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_180" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h184" id="INTPRIORITY_180" offset="0x12D0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_181" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h185" id="INTPRIORITY_181" offset="0x12D4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_182" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h186" id="INTPRIORITY_182" offset="0x12D8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_183" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h187" id="INTPRIORITY_183" offset="0x12DC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_184" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h188" id="INTPRIORITY_184" offset="0x12E0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_185" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h189" id="INTPRIORITY_185" offset="0x12E4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_186" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h190" id="INTPRIORITY_186" offset="0x12E8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_187" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h191" id="INTPRIORITY_187" offset="0x12EC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_188" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h192" id="INTPRIORITY_188" offset="0x12F0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_189" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h193" id="INTPRIORITY_189" offset="0x12F4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_190" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h194" id="INTPRIORITY_190" offset="0x12F8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_191" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h195" id="INTPRIORITY_191" offset="0x12FC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_192" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h196" id="INTPRIORITY_192" offset="0x1300" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_193" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h197" id="INTPRIORITY_193" offset="0x1304" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_194" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h198" id="INTPRIORITY_194" offset="0x1308" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_195" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h199" id="INTPRIORITY_195" offset="0x130C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_196" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h200" id="INTPRIORITY_196" offset="0x1310" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_197" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h201" id="INTPRIORITY_197" offset="0x1314" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_198" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h202" id="INTPRIORITY_198" offset="0x1318" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_199" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h203" id="INTPRIORITY_199" offset="0x131C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_200" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h204" id="INTPRIORITY_200" offset="0x1320" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_201" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h205" id="INTPRIORITY_201" offset="0x1324" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_202" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h206" id="INTPRIORITY_202" offset="0x1328" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_203" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h207" id="INTPRIORITY_203" offset="0x132C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_204" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h208" id="INTPRIORITY_204" offset="0x1330" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_205" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h209" id="INTPRIORITY_205" offset="0x1334" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_206" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h210" id="INTPRIORITY_206" offset="0x1338" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_207" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h211" id="INTPRIORITY_207" offset="0x133C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_208" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h212" id="INTPRIORITY_208" offset="0x1340" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_209" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h213" id="INTPRIORITY_209" offset="0x1344" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_210" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h214" id="INTPRIORITY_210" offset="0x1348" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_211" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h215" id="INTPRIORITY_211" offset="0x134C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_212" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h216" id="INTPRIORITY_212" offset="0x1350" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_213" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h217" id="INTPRIORITY_213" offset="0x1354" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_214" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h218" id="INTPRIORITY_214" offset="0x1358" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_215" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h219" id="INTPRIORITY_215" offset="0x135C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_216" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h220" id="INTPRIORITY_216" offset="0x1360" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_217" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h221" id="INTPRIORITY_217" offset="0x1364" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_218" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h222" id="INTPRIORITY_218" offset="0x1368" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_219" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h223" id="INTPRIORITY_219" offset="0x136C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_220" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h224" id="INTPRIORITY_220" offset="0x1370" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_221" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h225" id="INTPRIORITY_221" offset="0x1374" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_222" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h226" id="INTPRIORITY_222" offset="0x1378" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_223" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h227" id="INTPRIORITY_223" offset="0x137C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_224" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h228" id="INTPRIORITY_224" offset="0x1380" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_225" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h229" id="INTPRIORITY_225" offset="0x1384" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_226" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h230" id="INTPRIORITY_226" offset="0x1388" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_227" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h231" id="INTPRIORITY_227" offset="0x138C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_228" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h232" id="INTPRIORITY_228" offset="0x1390" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_229" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h233" id="INTPRIORITY_229" offset="0x1394" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_230" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h234" id="INTPRIORITY_230" offset="0x1398" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_231" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h235" id="INTPRIORITY_231" offset="0x139C" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_232" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h236" id="INTPRIORITY_232" offset="0x13A0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_233" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h237" id="INTPRIORITY_233" offset="0x13A4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_234" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h238" id="INTPRIORITY_234" offset="0x13A8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_235" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h239" id="INTPRIORITY_235" offset="0x13AC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_236" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h240" id="INTPRIORITY_236" offset="0x13B0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_237" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h241" id="INTPRIORITY_237" offset="0x13B4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_238" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h242" id="INTPRIORITY_238" offset="0x13B8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_239" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h243" id="INTPRIORITY_239" offset="0x13BC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_240" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h244" id="INTPRIORITY_240" offset="0x13C0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_241" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h245" id="INTPRIORITY_241" offset="0x13C4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_242" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h246" id="INTPRIORITY_242" offset="0x13C8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_243" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h247" id="INTPRIORITY_243" offset="0x13CC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_244" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h248" id="INTPRIORITY_244" offset="0x13D0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_245" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h249" id="INTPRIORITY_245" offset="0x13D4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_246" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h250" id="INTPRIORITY_246" offset="0x13D8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_247" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h251" id="INTPRIORITY_247" offset="0x13DC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_248" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h252" id="INTPRIORITY_248" offset="0x13E0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_249" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h253" id="INTPRIORITY_249" offset="0x13E4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_250" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h254" id="INTPRIORITY_250" offset="0x13E8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_251" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h255" id="INTPRIORITY_251" offset="0x13EC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_252" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h256" id="INTPRIORITY_252" offset="0x13F0" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_253" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h257" id="INTPRIORITY_253" offset="0x13F4" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_254" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h258" id="INTPRIORITY_254" offset="0x13F8" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTPRIORITY_255" description="         Interrupt Q Priority Register (Q is 0 to 255 , Q= M+1  x 32) h1000 + Q x h259" id="INTPRIORITY_255" offset="0x13FC" width="32">
    
  <bitfield begin="31" description="RESERVE FIELD" end="4" id="RES19" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This is the priority for interrupt Q.  If two interrupts have the same priority, then whichever interrupt has the lower number Q wins arbitration   0  Highest Priority   15  Lowest Priority (Default)" end="0" id="PRI" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h4" id="INTVECTOR" offset="0x2000" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_1" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h5" id="INTVECTOR_1" offset="0x2004" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_2" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h6" id="INTVECTOR_2" offset="0x2008" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_3" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h7" id="INTVECTOR_3" offset="0x200C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_4" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h8" id="INTVECTOR_4" offset="0x2010" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_5" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h9" id="INTVECTOR_5" offset="0x2014" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_6" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h10" id="INTVECTOR_6" offset="0x2018" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_7" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h11" id="INTVECTOR_7" offset="0x201C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_8" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h12" id="INTVECTOR_8" offset="0x2020" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_9" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h13" id="INTVECTOR_9" offset="0x2024" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_10" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h14" id="INTVECTOR_10" offset="0x2028" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_11" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h15" id="INTVECTOR_11" offset="0x202C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_12" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h16" id="INTVECTOR_12" offset="0x2030" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_13" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h17" id="INTVECTOR_13" offset="0x2034" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_14" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h18" id="INTVECTOR_14" offset="0x2038" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_15" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h19" id="INTVECTOR_15" offset="0x203C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_16" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h20" id="INTVECTOR_16" offset="0x2040" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_17" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h21" id="INTVECTOR_17" offset="0x2044" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_18" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h22" id="INTVECTOR_18" offset="0x2048" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_19" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h23" id="INTVECTOR_19" offset="0x204C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_20" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h24" id="INTVECTOR_20" offset="0x2050" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_21" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h25" id="INTVECTOR_21" offset="0x2054" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_22" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h26" id="INTVECTOR_22" offset="0x2058" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_23" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h27" id="INTVECTOR_23" offset="0x205C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_24" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h28" id="INTVECTOR_24" offset="0x2060" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_25" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h29" id="INTVECTOR_25" offset="0x2064" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_26" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h30" id="INTVECTOR_26" offset="0x2068" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_27" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h31" id="INTVECTOR_27" offset="0x206C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_28" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h32" id="INTVECTOR_28" offset="0x2070" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_29" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h33" id="INTVECTOR_29" offset="0x2074" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_30" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h34" id="INTVECTOR_30" offset="0x2078" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_31" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h35" id="INTVECTOR_31" offset="0x207C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_32" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h36" id="INTVECTOR_32" offset="0x2080" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_33" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h37" id="INTVECTOR_33" offset="0x2084" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_34" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h38" id="INTVECTOR_34" offset="0x2088" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_35" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h39" id="INTVECTOR_35" offset="0x208C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_36" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h40" id="INTVECTOR_36" offset="0x2090" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_37" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h41" id="INTVECTOR_37" offset="0x2094" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_38" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h42" id="INTVECTOR_38" offset="0x2098" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_39" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h43" id="INTVECTOR_39" offset="0x209C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_40" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h44" id="INTVECTOR_40" offset="0x20A0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_41" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h45" id="INTVECTOR_41" offset="0x20A4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_42" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h46" id="INTVECTOR_42" offset="0x20A8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_43" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h47" id="INTVECTOR_43" offset="0x20AC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_44" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h48" id="INTVECTOR_44" offset="0x20B0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_45" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h49" id="INTVECTOR_45" offset="0x20B4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_46" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h50" id="INTVECTOR_46" offset="0x20B8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_47" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h51" id="INTVECTOR_47" offset="0x20BC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_48" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h52" id="INTVECTOR_48" offset="0x20C0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_49" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h53" id="INTVECTOR_49" offset="0x20C4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_50" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h54" id="INTVECTOR_50" offset="0x20C8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_51" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h55" id="INTVECTOR_51" offset="0x20CC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_52" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h56" id="INTVECTOR_52" offset="0x20D0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_53" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h57" id="INTVECTOR_53" offset="0x20D4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_54" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h58" id="INTVECTOR_54" offset="0x20D8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_55" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h59" id="INTVECTOR_55" offset="0x20DC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_56" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h60" id="INTVECTOR_56" offset="0x20E0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_57" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h61" id="INTVECTOR_57" offset="0x20E4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_58" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h62" id="INTVECTOR_58" offset="0x20E8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_59" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h63" id="INTVECTOR_59" offset="0x20EC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_60" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h64" id="INTVECTOR_60" offset="0x20F0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_61" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h65" id="INTVECTOR_61" offset="0x20F4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_62" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h66" id="INTVECTOR_62" offset="0x20F8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_63" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h67" id="INTVECTOR_63" offset="0x20FC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_64" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h68" id="INTVECTOR_64" offset="0x2100" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_65" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h69" id="INTVECTOR_65" offset="0x2104" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_66" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h70" id="INTVECTOR_66" offset="0x2108" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_67" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h71" id="INTVECTOR_67" offset="0x210C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_68" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h72" id="INTVECTOR_68" offset="0x2110" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_69" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h73" id="INTVECTOR_69" offset="0x2114" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_70" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h74" id="INTVECTOR_70" offset="0x2118" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_71" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h75" id="INTVECTOR_71" offset="0x211C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_72" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h76" id="INTVECTOR_72" offset="0x2120" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_73" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h77" id="INTVECTOR_73" offset="0x2124" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_74" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h78" id="INTVECTOR_74" offset="0x2128" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_75" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h79" id="INTVECTOR_75" offset="0x212C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_76" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h80" id="INTVECTOR_76" offset="0x2130" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_77" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h81" id="INTVECTOR_77" offset="0x2134" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_78" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h82" id="INTVECTOR_78" offset="0x2138" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_79" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h83" id="INTVECTOR_79" offset="0x213C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_80" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h84" id="INTVECTOR_80" offset="0x2140" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_81" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h85" id="INTVECTOR_81" offset="0x2144" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_82" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h86" id="INTVECTOR_82" offset="0x2148" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_83" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h87" id="INTVECTOR_83" offset="0x214C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_84" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h88" id="INTVECTOR_84" offset="0x2150" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_85" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h89" id="INTVECTOR_85" offset="0x2154" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_86" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h90" id="INTVECTOR_86" offset="0x2158" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_87" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h91" id="INTVECTOR_87" offset="0x215C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_88" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h92" id="INTVECTOR_88" offset="0x2160" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_89" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h93" id="INTVECTOR_89" offset="0x2164" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_90" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h94" id="INTVECTOR_90" offset="0x2168" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_91" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h95" id="INTVECTOR_91" offset="0x216C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_92" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h96" id="INTVECTOR_92" offset="0x2170" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_93" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h97" id="INTVECTOR_93" offset="0x2174" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_94" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h98" id="INTVECTOR_94" offset="0x2178" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_95" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h99" id="INTVECTOR_95" offset="0x217C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_96" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h100" id="INTVECTOR_96" offset="0x2180" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_97" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h101" id="INTVECTOR_97" offset="0x2184" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_98" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h102" id="INTVECTOR_98" offset="0x2188" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_99" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h103" id="INTVECTOR_99" offset="0x218C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_100" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h104" id="INTVECTOR_100" offset="0x2190" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_101" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h105" id="INTVECTOR_101" offset="0x2194" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_102" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h106" id="INTVECTOR_102" offset="0x2198" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_103" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h107" id="INTVECTOR_103" offset="0x219C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_104" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h108" id="INTVECTOR_104" offset="0x21A0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_105" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h109" id="INTVECTOR_105" offset="0x21A4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_106" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h110" id="INTVECTOR_106" offset="0x21A8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_107" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h111" id="INTVECTOR_107" offset="0x21AC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_108" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h112" id="INTVECTOR_108" offset="0x21B0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_109" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h113" id="INTVECTOR_109" offset="0x21B4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_110" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h114" id="INTVECTOR_110" offset="0x21B8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_111" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h115" id="INTVECTOR_111" offset="0x21BC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_112" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h116" id="INTVECTOR_112" offset="0x21C0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_113" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h117" id="INTVECTOR_113" offset="0x21C4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_114" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h118" id="INTVECTOR_114" offset="0x21C8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_115" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h119" id="INTVECTOR_115" offset="0x21CC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_116" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h120" id="INTVECTOR_116" offset="0x21D0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_117" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h121" id="INTVECTOR_117" offset="0x21D4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_118" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h122" id="INTVECTOR_118" offset="0x21D8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_119" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h123" id="INTVECTOR_119" offset="0x21DC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_120" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h124" id="INTVECTOR_120" offset="0x21E0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_121" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h125" id="INTVECTOR_121" offset="0x21E4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_122" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h126" id="INTVECTOR_122" offset="0x21E8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_123" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h127" id="INTVECTOR_123" offset="0x21EC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_124" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h128" id="INTVECTOR_124" offset="0x21F0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_125" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h129" id="INTVECTOR_125" offset="0x21F4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_126" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h130" id="INTVECTOR_126" offset="0x21F8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_127" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h131" id="INTVECTOR_127" offset="0x21FC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_128" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h132" id="INTVECTOR_128" offset="0x2200" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_129" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h133" id="INTVECTOR_129" offset="0x2204" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_130" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h134" id="INTVECTOR_130" offset="0x2208" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_131" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h135" id="INTVECTOR_131" offset="0x220C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_132" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h136" id="INTVECTOR_132" offset="0x2210" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_133" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h137" id="INTVECTOR_133" offset="0x2214" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_134" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h138" id="INTVECTOR_134" offset="0x2218" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_135" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h139" id="INTVECTOR_135" offset="0x221C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_136" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h140" id="INTVECTOR_136" offset="0x2220" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_137" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h141" id="INTVECTOR_137" offset="0x2224" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_138" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h142" id="INTVECTOR_138" offset="0x2228" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_139" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h143" id="INTVECTOR_139" offset="0x222C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_140" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h144" id="INTVECTOR_140" offset="0x2230" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_141" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h145" id="INTVECTOR_141" offset="0x2234" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_142" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h146" id="INTVECTOR_142" offset="0x2238" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_143" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h147" id="INTVECTOR_143" offset="0x223C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_144" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h148" id="INTVECTOR_144" offset="0x2240" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_145" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h149" id="INTVECTOR_145" offset="0x2244" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_146" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h150" id="INTVECTOR_146" offset="0x2248" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_147" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h151" id="INTVECTOR_147" offset="0x224C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_148" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h152" id="INTVECTOR_148" offset="0x2250" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_149" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h153" id="INTVECTOR_149" offset="0x2254" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_150" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h154" id="INTVECTOR_150" offset="0x2258" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_151" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h155" id="INTVECTOR_151" offset="0x225C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_152" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h156" id="INTVECTOR_152" offset="0x2260" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_153" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h157" id="INTVECTOR_153" offset="0x2264" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_154" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h158" id="INTVECTOR_154" offset="0x2268" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_155" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h159" id="INTVECTOR_155" offset="0x226C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_156" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h160" id="INTVECTOR_156" offset="0x2270" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_157" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h161" id="INTVECTOR_157" offset="0x2274" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_158" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h162" id="INTVECTOR_158" offset="0x2278" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_159" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h163" id="INTVECTOR_159" offset="0x227C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_160" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h164" id="INTVECTOR_160" offset="0x2280" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_161" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h165" id="INTVECTOR_161" offset="0x2284" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_162" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h166" id="INTVECTOR_162" offset="0x2288" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_163" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h167" id="INTVECTOR_163" offset="0x228C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_164" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h168" id="INTVECTOR_164" offset="0x2290" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_165" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h169" id="INTVECTOR_165" offset="0x2294" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_166" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h170" id="INTVECTOR_166" offset="0x2298" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_167" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h171" id="INTVECTOR_167" offset="0x229C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_168" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h172" id="INTVECTOR_168" offset="0x22A0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_169" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h173" id="INTVECTOR_169" offset="0x22A4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_170" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h174" id="INTVECTOR_170" offset="0x22A8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_171" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h175" id="INTVECTOR_171" offset="0x22AC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_172" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h176" id="INTVECTOR_172" offset="0x22B0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_173" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h177" id="INTVECTOR_173" offset="0x22B4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_174" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h178" id="INTVECTOR_174" offset="0x22B8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_175" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h179" id="INTVECTOR_175" offset="0x22BC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_176" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h180" id="INTVECTOR_176" offset="0x22C0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_177" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h181" id="INTVECTOR_177" offset="0x22C4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_178" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h182" id="INTVECTOR_178" offset="0x22C8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_179" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h183" id="INTVECTOR_179" offset="0x22CC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_180" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h184" id="INTVECTOR_180" offset="0x22D0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_181" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h185" id="INTVECTOR_181" offset="0x22D4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_182" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h186" id="INTVECTOR_182" offset="0x22D8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_183" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h187" id="INTVECTOR_183" offset="0x22DC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_184" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h188" id="INTVECTOR_184" offset="0x22E0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_185" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h189" id="INTVECTOR_185" offset="0x22E4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_186" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h190" id="INTVECTOR_186" offset="0x22E8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_187" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h191" id="INTVECTOR_187" offset="0x22EC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_188" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h192" id="INTVECTOR_188" offset="0x22F0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_189" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h193" id="INTVECTOR_189" offset="0x22F4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_190" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h194" id="INTVECTOR_190" offset="0x22F8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_191" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h195" id="INTVECTOR_191" offset="0x22FC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_192" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h196" id="INTVECTOR_192" offset="0x2300" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_193" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h197" id="INTVECTOR_193" offset="0x2304" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_194" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h198" id="INTVECTOR_194" offset="0x2308" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_195" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h199" id="INTVECTOR_195" offset="0x230C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_196" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h200" id="INTVECTOR_196" offset="0x2310" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_197" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h201" id="INTVECTOR_197" offset="0x2314" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_198" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h202" id="INTVECTOR_198" offset="0x2318" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_199" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h203" id="INTVECTOR_199" offset="0x231C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_200" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h204" id="INTVECTOR_200" offset="0x2320" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_201" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h205" id="INTVECTOR_201" offset="0x2324" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_202" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h206" id="INTVECTOR_202" offset="0x2328" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_203" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h207" id="INTVECTOR_203" offset="0x232C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_204" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h208" id="INTVECTOR_204" offset="0x2330" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_205" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h209" id="INTVECTOR_205" offset="0x2334" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_206" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h210" id="INTVECTOR_206" offset="0x2338" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_207" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h211" id="INTVECTOR_207" offset="0x233C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_208" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h212" id="INTVECTOR_208" offset="0x2340" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_209" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h213" id="INTVECTOR_209" offset="0x2344" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_210" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h214" id="INTVECTOR_210" offset="0x2348" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_211" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h215" id="INTVECTOR_211" offset="0x234C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_212" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h216" id="INTVECTOR_212" offset="0x2350" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_213" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h217" id="INTVECTOR_213" offset="0x2354" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_214" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h218" id="INTVECTOR_214" offset="0x2358" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_215" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h219" id="INTVECTOR_215" offset="0x235C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_216" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h220" id="INTVECTOR_216" offset="0x2360" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_217" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h221" id="INTVECTOR_217" offset="0x2364" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_218" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h222" id="INTVECTOR_218" offset="0x2368" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_219" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h223" id="INTVECTOR_219" offset="0x236C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_220" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h224" id="INTVECTOR_220" offset="0x2370" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_221" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h225" id="INTVECTOR_221" offset="0x2374" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_222" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h226" id="INTVECTOR_222" offset="0x2378" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_223" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h227" id="INTVECTOR_223" offset="0x237C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_224" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h228" id="INTVECTOR_224" offset="0x2380" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_225" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h229" id="INTVECTOR_225" offset="0x2384" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_226" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h230" id="INTVECTOR_226" offset="0x2388" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_227" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h231" id="INTVECTOR_227" offset="0x238C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_228" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h232" id="INTVECTOR_228" offset="0x2390" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_229" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h233" id="INTVECTOR_229" offset="0x2394" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_230" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h234" id="INTVECTOR_230" offset="0x2398" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_231" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h235" id="INTVECTOR_231" offset="0x239C" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_232" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h236" id="INTVECTOR_232" offset="0x23A0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_233" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h237" id="INTVECTOR_233" offset="0x23A4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_234" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h238" id="INTVECTOR_234" offset="0x23A8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_235" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h239" id="INTVECTOR_235" offset="0x23AC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_236" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h240" id="INTVECTOR_236" offset="0x23B0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_237" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h241" id="INTVECTOR_237" offset="0x23B4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_238" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h242" id="INTVECTOR_238" offset="0x23B8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_239" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h243" id="INTVECTOR_239" offset="0x23BC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_240" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h244" id="INTVECTOR_240" offset="0x23C0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_241" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h245" id="INTVECTOR_241" offset="0x23C4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_242" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h246" id="INTVECTOR_242" offset="0x23C8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_243" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h247" id="INTVECTOR_243" offset="0x23CC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_244" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h248" id="INTVECTOR_244" offset="0x23D0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_245" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h249" id="INTVECTOR_245" offset="0x23D4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_246" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h250" id="INTVECTOR_246" offset="0x23D8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_247" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h251" id="INTVECTOR_247" offset="0x23DC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_248" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h252" id="INTVECTOR_248" offset="0x23E0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_249" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h253" id="INTVECTOR_249" offset="0x23E4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_250" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h254" id="INTVECTOR_250" offset="0x23E8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_251" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h255" id="INTVECTOR_251" offset="0x23EC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_252" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h256" id="INTVECTOR_252" offset="0x23F0" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_253" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h257" id="INTVECTOR_253" offset="0x23F4" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_254" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h258" id="INTVECTOR_254" offset="0x23F8" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="INTVECTOR_255" description="         Interrupt Q Vector Register (Q is 0 to 255 , Q= M+1  x 32) h2000 + Q x h259" id="INTVECTOR_255" offset="0x23FC" width="32">
    
  <bitfield begin="31" description="This is the 32-bit Vector Address associated with interrupt Q.  It is the address that will be reflected in the IRQ Vector Address (Base Address + 0x18) or FIQ Vector Address (Base Address + 0x1C) and the VECADDR pin when interrupt Q is the active interrupt.  Internally, these values are kept in a RAM.  The FIQ and IRQ state machines have priority access to this RAM.    Writes to this register will be piped internally, but further writes to the MMR interface may be stalled until this write has a chance to complete in the RAM.  The new Vector Address will not take effect until this write completes to the RAM.  In order to tell if this write has completed, software may read this register back.  That read will not be able to complete unless the write has landed.  Reads to this register will stall the MMR interface until the read is able to be completed at the RAM." end="2" id="ADDR" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="Reserved.  Read as 0.  The lower 2 bits of the 32-bit vector address are always 0.  Vector addresses must be 32-bit aligned." end="0" id="RES20" rwaccess="R" width="2"></bitfield>
  </register>
</module>
