<?xml version="1.0" encoding="UTF-8"?>
<module id="stackdie_ctrl" HW_revision="">
    <register id="STK_UP_RESET" width="32" offset="0x0" description="Can be written only by Base Processor. Writing to this register will reset the stack processor reset will be de-asserted upon clearing this register.">
    </register>
    <register id="SR_MASTER_PRIORITY" width="32" offset="0x4" description="This register defines who among base processor and stack processor have highest priority for Sram Access. Can be written only by Base Processor.">
        <bitfield id="PRIORITY" description="00 : Equal Priority 01 : Stack Processor have priority 10 : Base Processor have priority 11 : Unused" begin="1" end="0" width="2" rwaccess="R/W">
        </bitfield>
    </register>
    <register id="STK_SR_ACC_CTL_BK2" width="32" offset="0x8" description="In Spinlock mode this Register defines who among base processor and stack processor have access to Sram Bank2 right now. In Handshake mode this Register defines who among base processor and stack processor have access to Sram Bank2 and Bank3 right now. Its Clear only register and is set by hardware. Lower bit can be cleared only by Base Processor and Upper bit Cleared only by the Stack processor.">
    </register>
    <register id="BASE_UP_ACC_REQ_BK2" width="32" offset="0xC" description="In Spinlock mode whenever Base processor wants the access to Sram Bank2 it should request for it by writing into this register. It'll get interrupt whenever it is granted. In Handshake mode this bit will be set by Stack processor. Its a set only bit and is cleared by HW when the request is granted.">
    </register>
    <register id="STK_UP_ACC_REQ_BK2" width="32" offset="0x10" description="In Spinlock mode Whenever Stack processor wants the access to Sram Bank2 it should request for it by writing into this register. It'll get interrupt whenever it is granted. In Handshake mode this bit will be set by the Base processor. Its a set only bit and is cleared by HW when the request is granted.">
    </register>
    <register id="STK_SR_ACC_CTL_BK3" width="32" offset="0x14" description="Register defines who among base processor and stack processor have access to Sram Bank3 right now. Its Clear only register and is set by hardware. Lower bit can be cleared only by Base Processor and Upper bit Cleared only by the Stack processor.">
    </register>
    <register id="BASE_UP_ACC_REQ_BK3" width="32" offset="0x18" description="In Spinlock mode whenever Base processor wants the access to Sram Bank3 it should request for it by writing into this register. It'll get interrupt whenever it is granted. In Handshake mode this bit will be set by Stack processor. Its a set only bit and is cleared by HW when the request is granted.">
    </register>
    <register id="STK_UP_ACC_REQ_BK3" width="32" offset="0x1C" description="In Spinlock mode Whenever Stack processor wants the access to Sram Bank3 it should request for it by writing into this register. It'll get interrupt whenever it is granted. In Handshake mode this bit will be set by the Base processor. Its a set only bit and is cleared by HW when the request is granted.">
    </register>
    <register id="RDSM_CFG_CPU" width="32" offset="0x20" description="Read State Machine timing configuration register. Generally Bit 4 and 3 will be identical. For stacked die always 43 are 0 and 6:5 == 1 for 120Mhz.">
        <bitfield id="FLCLK_PULSE_WIDTH" description="Bank Clock Hi Time 00 : HCLK pulse 01 : 1 cycle of HCLK 10 : 1.5 cycles of HCLK 11 : 2 cycles of HCLK" begin="7" end="6" width="2" rwaccess="R/W">
        </bitfield>
        <bitfield id="READ_WAIT_STATE" description="Number of wait states inserted" begin="3" end="0" width="4" rwaccess="R/W">
        </bitfield>
    </register>
    <register id="RDSM_CFG_EE" width="32" offset="0x24" description="Read State Machine timing configuration register. Generally Bit 4 and 3 will be identical. For stacked die always 43 are 0 and 6:5 == 1 for 120Mhz.">
        <bitfield id="FLCLK_PULSE_WIDTH" description="Bank Clock Hi Time 00 : HCLK pulse 01 : 1 cycle of HCLK 10 : 1.5 cycles of HCLK 11 : 2 cycles of HCLK" begin="7" end="6" width="2" rwaccess="R/W">
        </bitfield>
        <bitfield id="READ_WAIT_STATE" description="Number of wait states inserted" begin="3" end="0" width="4" rwaccess="R/W">
        </bitfield>
    </register>
    <register id="BASE_UP_IRQ_LOG" width="32" offset="0x28" description="Reading this register Base procesor will able to know the reason for the interrupt. This is clear only register - set by HW upon an interrupt to Base processor and can be cleared only by BASE processor.">
    </register>
    <register id="STK_UP_IRQ_LOG" width="32" offset="0x2C" description="Reading this register Stack procesor will able to know the reason for the interrupt. This is clear only register - set by HW upon an interrupt to Stack processor and can be cleared only by Stack processor.">
    </register>
    <register id="STK_CLK_EN" width="32" offset="0x30" description="Can be written only by base processor. Controls the enable pin of the cgcs for the clocks going to CM3 dft ctrl block and Sram.">
    </register>
    <register id="SPIN_LOCK_MODE" width="32" offset="0x34" description="Can be written only by the base processor. Decides the ram sharing mode :: handshake or Spinlock mode.">
    </register>
    <register id="BUS_FAULT_ADDR" width="32" offset="0x38" description="Stores the last bus fault address.">
    </register>
    <register id="BUS_FAULT_CLR" width="32" offset="0x3C" description="write only registers on read returns 0.W Write 1 to clear the bust fault to store the new bus fault address">
    </register>
    <register id="RESET_CAUSE" width="32" offset="0x40" description="Reset cause value captured from the ICR_CLKRST block.">
    </register>
    <register id="WDOG_TIMER_EVENT" width="32" offset="0x44" description="Watchdog timer event value captured from the ICR_CLKRST block">
    </register>
    <register id="DMA_REQ" width="32" offset="0x48" description="To send Dma Request to bottom die.">
    </register>
    <register id="SRAM_JUMP_OFFSET_ADDR" width="32" offset="0x4C" description="Address offset within SRAM to which CM3 should jump after reset.">
    </register>
    <register id="SW_REG1" width="32" offset="0x50" description="These are sw registers for topdie processor and bottom die processor to communicate. Both can set and read these registers. In case of write clash bottom die's processor wins and top die processor access is ignored.">
    </register>
    <register id="SW_REG2" width="32" offset="0x54" description="These are sw registers for topdie processor and bottom die processor to communicate. Both can set and read these registers. In case of write clash bottom die's processor wins and top die processor access is ignored.">
    </register>
    <register id="FMC_SLEEP_CTL" width="32" offset="0x58" description="By posting the request Flash can be put into low-power mode (Sleep) without powering down the Flash. Earlier (in Garnet) this was fully h/w controlled and the control for this was coming from SysCtl while entering into Cortex Deep-sleep mode. But for our device the D2D i/f doesnt support this. The Firmware has to program the register in the top-die for entering into this mode and wait for an interrupt.">
    </register>
    <register id="MISC_CTL" width="32" offset="0x5C" description="Miscellanious control register.">
    </register>
    <register id="SW_DFT_CTL" width="32" offset="0xFC" description="DFT control and status bits">
    </register>
    <register id="PADN_CTL_0" width="32" offset="0x100" description="Mainly for For controlling the pads OEN pins. There are total 60 pads and hence 60 control registe i.e n value varies from 0 to 59. Here is the mapping for the pad_ctl register number and the functionality : 0 D2DPAD_DMAREQ1 1 D2DPAD_DMAREQ0 2 D2DPAD_INT2BASE 3 D2DPAD_PIOSC 4 D2DPAD_RST_N 5 D2DPAD_POR_RST_N 6 D2DPAD_HCLK 7 D2DPAD_JTAG_TDO 8 D2DPAD_JTAG_TCK 9 D2DPAD_JTAG_TMS 10 D2DPAD_JTAG_TDI 11-27 D2DPAD_FROMSTACK[D2D_FROMSTACK_SIZE -1:0] 28-56 D2DPAD_TOSTACK [D2D_TOSTACK_SIZE -1:0] 57-59 D2DPAD_SPARE [D2D_SPARE_PAD_SIZE -1:0] 0:00 ****************************************************************************">
    </register>
</module>
