<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="" id="TOP_MDO_INFRA">
  
  
  <register acronym="PID" description=" PID register " id="PID" offset="0x0" width="32">
    
  <bitfield begin="31" description="" end="16" id="" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="" end="11" id="" rwaccess="R" width="5"></bitfield>
    
  <bitfield begin="10" description="" end="8" id="" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="7" description="" end="6" id="" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="5" description="" end="0" id="" rwaccess="R" width="6"></bitfield>
  </register>
  
  
  <register acronym="HW_REG0" description="" id="HW_REG0" offset="0x4" width="32">
    
  <bitfield begin="31" description="HW Reserved regiser" end="0" id="hwreg" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_REG1" description="" id="HW_REG1" offset="0x8" width="32">
    
  <bitfield begin="31" description="HW Reserved regiser" end="0" id="hwreg" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_REG2" description="" id="HW_REG2" offset="0xC" width="32">
    
  <bitfield begin="31" description="HW Reserved regiser" end="0" id="hwreg" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_REG3" description="" id="HW_REG3" offset="0x10" width="32">
    
  <bitfield begin="31" description="HW Reserved regiser" end="0" id="hwreg" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC0_CTRL" description="" id="SRC0_CTRL" offset="0x14" width="32">
    
  <bitfield begin="20" description="Write 0x1 to generate a marker on Flush trigger" end="20" id="gen_marker_on_flush" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="Enable the corresponding range for data capture.  Bit 0 :  0: Range 0 is disabled  1 : Range 0 is enableld" end="16" id="range_en" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="15" description="Write 0x1 to enable HW Marker trigger to generate a Flush" end="12" id="hw_flush_en" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="11" description="Write 0x1 to enable HW Marker trigger to generate a Marker" end="8" id="hw_marker_en" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="2" description="Chop of the sign extension bits [15:12] for every 16 bits of data. 0 : Send all 16 bits 1 : Send lower 12 of 16 bits" end="2" id="crop_en" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Select which bus to capture.  0 : Read Bus   1 : Write Bus" end="1" id="snif_mode" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Indicates is the sniffer block is active or inactive. 0 : Captuere is Disabled  1 : Sniffer Enabled" end="0" id="enable" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC0_RANGE_START0" description="" id="SRC0_RANGE_START0" offset="0x18" width="32">
    
  <bitfield begin="31" description="Range 0 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC0_RANGE_END0" description="" id="SRC0_RANGE_END0" offset="0x1C" width="32">
    
  <bitfield begin="31" description="Range 0 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC0_RANGE_START1" description="" id="SRC0_RANGE_START1" offset="0x20" width="32">
    
  <bitfield begin="31" description="Range 1 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC0_RANGE_END1" description="" id="SRC0_RANGE_END1" offset="0x24" width="32">
    
  <bitfield begin="31" description="Range 1 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC0_RANGE_START2" description="" id="SRC0_RANGE_START2" offset="0x28" width="32">
    
  <bitfield begin="31" description="Range 2 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC0_RANGE_END2" description="" id="SRC0_RANGE_END2" offset="0x2C" width="32">
    
  <bitfield begin="31" description="Range 2 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC0_RANGE_START3" description="" id="SRC0_RANGE_START3" offset="0x30" width="32">
    
  <bitfield begin="31" description="Range 3 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC0_RANGE_END3" description="" id="SRC0_RANGE_END3" offset="0x34" width="32">
    
  <bitfield begin="31" description="Range 3 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC0_SW_TRIGGER" description="" id="SRC0_SW_TRIGGER" offset="0x38" width="32">
    
  <bitfield begin="4" description="Write 0x1 to trigger a Flush. A marker packet will also be inserted" end="4" id="flush" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Write 0x1 to insert a Marker" end="0" id="marker" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC0_THRESHOLD" description="" id="SRC0_THRESHOLD" offset="0x3C" width="32">
    
  <bitfield begin="9" description="The FIFO threshold to trigger writes from the Source FIFO. This value is in multiples of 32 bytes. If SRCx_BW_CTRL_WRITE_MODE is 0x0, then the bits [9:5] of this field need to be programmed to 0x0" end="0" id="threshold" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="SRC0_BW_CTRL" description="" id="SRC0_BW_CTRL" offset="0x40" width="32">
    
  <bitfield begin="30" description="0 : Highest Dynamic Priority 7 : Lowest Dynamic Priority" end="28" id="priority" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="20" description="The burst_size is the minimum size for which the SRC will keep arbitration once it wins . The value in multiples of  32 bytes" end="16" id="burst_size" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="11" description="The FIFO threshold to trigger writes from the Source FIFO. Value to be aligned to 32 bytes  [4:0] should be 0x0" end="4" id="burst_num" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="0" description="0 : Send data equivalent to burst_count * burst_size 1 : Send data equivalent to threshold size. This can be set only if threshold is less than 1024 bytes" end="0" id="write_mode" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC0_CHANNEL" description="" id="SRC0_CHANNEL" offset="0x44" width="32">
    
  <bitfield begin="31" description="Configure the STM Channel Number" end="0" id="addr" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC0_CHANNEL_CFG" description="" id="SRC0_CHANNEL_CFG" offset="0x48" width="32">
    
  <bitfield begin="4" description="Selects whether the Non Data access for the Source is timestamped  0 : No Timestamp 1 : Timestamped" end="4" id="NONDATA_TIMESTAMPED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Selects whether the Non Data access for the Source is Guaranteed or Invariant Timing 0 : Time Invariant 1 : Guaranteed" end="3" id="NONDATA_GUARANTEED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Selects whether the Data access for the Source is timestamped  0 : No Timestamp 1 : Timestamped" end="2" id="DATA_TIMESTAMPED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Selects whether the Data access for the Source is marked 0 : Un-Marked 1 : Marked" end="1" id="DATA_MARKED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Selects whether the Data access for the Source is Guaranteed or Invariant Timing 0 : Time Invariant 1 : Guaranteed" end="0" id="DATA_GUARANTEED" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC1_CTRL" description="" id="SRC1_CTRL" offset="0x4C" width="32">
    
  <bitfield begin="20" description="Write 0x1 to generate a marker on Flush trigger" end="20" id="gen_marker_on_flush" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="Enable the corresponding range for data capture.  Bit 0 :  0: Range 0 is disabled  1 : Range 0 is enableld" end="16" id="range_en" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="15" description="Write 0x1 to enable HW Marker trigger to generate a Flush" end="12" id="hw_flush_en" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="11" description="Write 0x1 to enable HW Marker trigger to generate a Marker" end="8" id="hw_marker_en" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="2" description="Chop of the sign extension bits [15:12] for every 16 bits of data. 0 : Send all 16 bits 1 : Send lower 12 of 16 bits" end="2" id="crop_en" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Select which bus to capture.  0 : Read Bus   1 : Write Bus" end="1" id="snif_mode" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Indicates is the sniffer block is active or inactive. 0 : Captuere is Disabled  1 : Sniffer Enabled" end="0" id="enable" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC1_RANGE_START0" description="" id="SRC1_RANGE_START0" offset="0x50" width="32">
    
  <bitfield begin="31" description="Range 0 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC1_RANGE_END0" description="" id="SRC1_RANGE_END0" offset="0x54" width="32">
    
  <bitfield begin="31" description="Range 0 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC1_RANGE_START1" description="" id="SRC1_RANGE_START1" offset="0x58" width="32">
    
  <bitfield begin="31" description="Range 1 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC1_RANGE_END1" description="" id="SRC1_RANGE_END1" offset="0x5C" width="32">
    
  <bitfield begin="31" description="Range 1 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC1_RANGE_START2" description="" id="SRC1_RANGE_START2" offset="0x60" width="32">
    
  <bitfield begin="31" description="Range 2 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC1_RANGE_END2" description="" id="SRC1_RANGE_END2" offset="0x64" width="32">
    
  <bitfield begin="31" description="Range 2 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC1_RANGE_START3" description="" id="SRC1_RANGE_START3" offset="0x68" width="32">
    
  <bitfield begin="31" description="Range 3 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC1_RANGE_END3" description="" id="SRC1_RANGE_END3" offset="0x6C" width="32">
    
  <bitfield begin="31" description="Range 3 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC1_SW_TRIGGER" description="" id="SRC1_SW_TRIGGER" offset="0x70" width="32">
    
  <bitfield begin="4" description="Write 0x1 to trigger a Flush. A marker packet will also be inserted" end="4" id="flush" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Write 0x1 to insert a Marker" end="0" id="marker" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC1_THRESHOLD" description="" id="SRC1_THRESHOLD" offset="0x74" width="32">
    
  <bitfield begin="9" description="The FIFO threshold to trigger writes from the Source FIFO. This value is in multiples of 32 bytes. If SRCx_BW_CTRL_WRITE_MODE is 0x0, then the bits [9:5] of this field need to be programmed to 0x0" end="0" id="threshold" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="SRC1_BW_CTRL" description="" id="SRC1_BW_CTRL" offset="0x78" width="32">
    
  <bitfield begin="30" description="0 : Highest Dynamic Priority 7 : Lowest Dynamic Priority" end="28" id="priority" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="20" description="The burst_size is the minimum size for which the SRC will keep arbitration once it wins . The value in multiples of  32 bytes" end="16" id="burst_size" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="11" description="The FIFO threshold to trigger writes from the Source FIFO. Value to be aligned to 32 bytes  [4:0] should be 0x0" end="4" id="burst_num" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="0" description="0 : Send data equivalent to burst_count * burst_size 1 : Send data equivalent to threshold size. This can be set only if threshold is less than 1024 bytes" end="0" id="write_mode" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC1_CHANNEL" description="" id="SRC1_CHANNEL" offset="0x7C" width="32">
    
  <bitfield begin="31" description="Configure the STM Channel Number" end="0" id="addr" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC1_CHANNEL_CFG" description="" id="SRC1_CHANNEL_CFG" offset="0x80" width="32">
    
  <bitfield begin="4" description="Selects whether the Non Data access for the Source is timestamped  0 : No Timestamp 1 : Timestamped" end="4" id="NONDATA_TIMESTAMPED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Selects whether the Non Data access for the Source is Guaranteed or Invariant Timing 0 : Time Invariant 1 : Guaranteed" end="3" id="NONDATA_GUARANTEED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Selects whether the Data access for the Source is timestamped  0 : No Timestamp 1 : Timestamped" end="2" id="DATA_TIMESTAMPED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Selects whether the Data access for the Source is marked 0 : Un-Marked 1 : Marked" end="1" id="DATA_MARKED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Selects whether the Data access for the Source is Guaranteed or Invariant Timing 0 : Time Invariant 1 : Guaranteed" end="0" id="DATA_GUARANTEED" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC2_CTRL" description="" id="SRC2_CTRL" offset="0x84" width="32">
    
  <bitfield begin="20" description="Write 0x1 to generate a marker on Flush trigger" end="20" id="gen_marker_on_flush" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="Enable the corresponding range for data capture.  Bit 0 :  0: Range 0 is disabled  1 : Range 0 is enableld" end="16" id="range_en" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="15" description="Write 0x1 to enable HW Marker trigger to generate a Flush" end="12" id="hw_flush_en" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="11" description="Write 0x1 to enable HW Marker trigger to generate a Marker" end="8" id="hw_marker_en" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="2" description="Chop of the sign extension bits [15:12] for every 16 bits of data. 0 : Send all 16 bits 1 : Send lower 12 of 16 bits" end="2" id="crop_en" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Select which bus to capture.  0 : Read Bus   1 : Write Bus" end="1" id="snif_mode" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Indicates is the sniffer block is active or inactive. 0 : Captuere is Disabled  1 : Sniffer Enabled" end="0" id="enable" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC2_RANGE_START0" description="" id="SRC2_RANGE_START0" offset="0x88" width="32">
    
  <bitfield begin="31" description="Range 0 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC2_RANGE_END0" description="" id="SRC2_RANGE_END0" offset="0x8C" width="32">
    
  <bitfield begin="31" description="Range 0 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC2_RANGE_START1" description="" id="SRC2_RANGE_START1" offset="0x90" width="32">
    
  <bitfield begin="31" description="Range 1 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC2_RANGE_END1" description="" id="SRC2_RANGE_END1" offset="0x94" width="32">
    
  <bitfield begin="31" description="Range 1 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC2_RANGE_START2" description="" id="SRC2_RANGE_START2" offset="0x98" width="32">
    
  <bitfield begin="31" description="Range 2 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC2_RANGE_END2" description="" id="SRC2_RANGE_END2" offset="0x9C" width="32">
    
  <bitfield begin="31" description="Range 2 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC2_RANGE_START3" description="" id="SRC2_RANGE_START3" offset="0xA0" width="32">
    
  <bitfield begin="31" description="Range 3 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC2_RANGE_END3" description="" id="SRC2_RANGE_END3" offset="0xA4" width="32">
    
  <bitfield begin="31" description="Range 3 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC2_SW_TRIGGER" description="" id="SRC2_SW_TRIGGER" offset="0xA8" width="32">
    
  <bitfield begin="4" description="Write 0x1 to trigger a Flush. A marker packet will also be inserted" end="4" id="flush" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Write 0x1 to insert a Marker" end="0" id="marker" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC2_THRESHOLD" description="" id="SRC2_THRESHOLD" offset="0xAC" width="32">
    
  <bitfield begin="9" description="The FIFO threshold to trigger writes from the Source FIFO. This value is in multiples of 32 bytes. If SRCx_BW_CTRL_WRITE_MODE is 0x0, then the bits [9:5] of this field need to be programmed to 0x0" end="0" id="threshold" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="SRC2_BW_CTRL" description="" id="SRC2_BW_CTRL" offset="0xB0" width="32">
    
  <bitfield begin="30" description="0 : Highest Dynamic Priority 7 : Lowest Dynamic Priority" end="28" id="priority" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="20" description="The burst_size is the minimum size for which the SRC will keep arbitration once it wins . The value in multiples of  32 bytes" end="16" id="burst_size" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="11" description="The FIFO threshold to trigger writes from the Source FIFO. Value to be aligned to 32 bytes  [4:0] should be 0x0" end="4" id="burst_num" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="0" description="0 : Send data equivalent to burst_count * burst_size 1 : Send data equivalent to threshold size. This can be set only if threshold is less than 1024 bytes" end="0" id="write_mode" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC2_CHANNEL" description="" id="SRC2_CHANNEL" offset="0xB4" width="32">
    
  <bitfield begin="31" description="Configure the STM Channel Number" end="0" id="addr" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC2_CHANNEL_CFG" description="" id="SRC2_CHANNEL_CFG" offset="0xB8" width="32">
    
  <bitfield begin="4" description="Selects whether the Non Data access for the Source is timestamped  0 : No Timestamp 1 : Timestamped" end="4" id="NONDATA_TIMESTAMPED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Selects whether the Non Data access for the Source is Guaranteed or Invariant Timing 0 : Time Invariant 1 : Guaranteed" end="3" id="NONDATA_GUARANTEED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Selects whether the Data access for the Source is timestamped  0 : No Timestamp 1 : Timestamped" end="2" id="DATA_TIMESTAMPED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Selects whether the Data access for the Source is marked 0 : Un-Marked 1 : Marked" end="1" id="DATA_MARKED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Selects whether the Data access for the Source is Guaranteed or Invariant Timing 0 : Time Invariant 1 : Guaranteed" end="0" id="DATA_GUARANTEED" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC3_CTRL" description="" id="SRC3_CTRL" offset="0xBC" width="32">
    
  <bitfield begin="20" description="Write 0x1 to generate a marker on Flush trigger" end="20" id="gen_marker_on_flush" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="Enable the corresponding range for data capture.  Bit 0 :  0: Range 0 is disabled  1 : Range 0 is enableld" end="16" id="range_en" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="15" description="Write 0x1 to enable HW Marker trigger to generate a Flush" end="12" id="hw_flush_en" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="11" description="Write 0x1 to enable HW Marker trigger to generate a Marker" end="8" id="hw_marker_en" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="2" description="Chop of the sign extension bits [15:12] for every 16 bits of data. 0 : Send all 16 bits 1 : Send lower 12 of 16 bits" end="2" id="crop_en" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Select which bus to capture.  0 : Read Bus   1 : Write Bus" end="1" id="snif_mode" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Indicates is the sniffer block is active or inactive. 0 : Captuere is Disabled  1 : Sniffer Enabled" end="0" id="enable" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC3_RANGE_START0" description="" id="SRC3_RANGE_START0" offset="0xC0" width="32">
    
  <bitfield begin="31" description="Range 0 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC3_RANGE_END0" description="" id="SRC3_RANGE_END0" offset="0xC4" width="32">
    
  <bitfield begin="31" description="Range 0 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC3_RANGE_START1" description="" id="SRC3_RANGE_START1" offset="0xC8" width="32">
    
  <bitfield begin="31" description="Range 1 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC3_RANGE_END1" description="" id="SRC3_RANGE_END1" offset="0xCC" width="32">
    
  <bitfield begin="31" description="Range 1 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC3_RANGE_START2" description="" id="SRC3_RANGE_START2" offset="0xD0" width="32">
    
  <bitfield begin="31" description="Range 2 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC3_RANGE_END2" description="" id="SRC3_RANGE_END2" offset="0xD4" width="32">
    
  <bitfield begin="31" description="Range 2 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC3_RANGE_START3" description="" id="SRC3_RANGE_START3" offset="0xD8" width="32">
    
  <bitfield begin="31" description="Range 3 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC3_RANGE_END3" description="" id="SRC3_RANGE_END3" offset="0xDC" width="32">
    
  <bitfield begin="31" description="Range 3 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC3_SW_TRIGGER" description="" id="SRC3_SW_TRIGGER" offset="0xE0" width="32">
    
  <bitfield begin="4" description="Write 0x1 to trigger a Flush. A marker packet will also be inserted" end="4" id="flush" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Write 0x1 to insert a Marker" end="0" id="marker" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC3_THRESHOLD" description="" id="SRC3_THRESHOLD" offset="0xE4" width="32">
    
  <bitfield begin="9" description="The FIFO threshold to trigger writes from the Source FIFO. This value is in multiples of 32 bytes. If SRCx_BW_CTRL_WRITE_MODE is 0x0, then the bits [9:5] of this field need to be programmed to 0x0" end="0" id="threshold" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="SRC3_BW_CTRL" description="" id="SRC3_BW_CTRL" offset="0xE8" width="32">
    
  <bitfield begin="30" description="0 : Highest Dynamic Priority 7 : Lowest Dynamic Priority" end="28" id="priority" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="20" description="The burst_size is the minimum size for which the SRC will keep arbitration once it wins . The value in multiples of  32 bytes" end="16" id="burst_size" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="11" description="The FIFO threshold to trigger writes from the Source FIFO. Value to be aligned to 32 bytes  [4:0] should be 0x0" end="4" id="burst_num" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="0" description="0 : Send data equivalent to burst_count * burst_size 1 : Send data equivalent to threshold size. This can be set only if threshold is less than 1024 bytes" end="0" id="write_mode" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC3_CHANNEL" description="" id="SRC3_CHANNEL" offset="0xEC" width="32">
    
  <bitfield begin="31" description="Configure the STM Channel Number" end="0" id="addr" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC3_CHANNEL_CFG" description="" id="SRC3_CHANNEL_CFG" offset="0xF0" width="32">
    
  <bitfield begin="4" description="Selects whether the Non Data access for the Source is timestamped  0 : No Timestamp 1 : Timestamped" end="4" id="NONDATA_TIMESTAMPED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Selects whether the Non Data access for the Source is Guaranteed or Invariant Timing 0 : Time Invariant 1 : Guaranteed" end="3" id="NONDATA_GUARANTEED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Selects whether the Data access for the Source is timestamped  0 : No Timestamp 1 : Timestamped" end="2" id="DATA_TIMESTAMPED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Selects whether the Data access for the Source is marked 0 : Un-Marked 1 : Marked" end="1" id="DATA_MARKED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Selects whether the Data access for the Source is Guaranteed or Invariant Timing 0 : Time Invariant 1 : Guaranteed" end="0" id="DATA_GUARANTEED" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC4_CTRL" description="" id="SRC4_CTRL" offset="0xF4" width="32">
    
  <bitfield begin="20" description="Write 0x1 to generate a marker on Flush trigger" end="20" id="gen_marker_on_flush" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="Enable the corresponding range for data capture.  Bit 0 :  0: Range 0 is disabled  1 : Range 0 is enableld" end="16" id="range_en" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="15" description="Write 0x1 to enable HW Marker trigger to generate a Flush" end="12" id="hw_flush_en" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="11" description="Write 0x1 to enable HW Marker trigger to generate a Marker" end="8" id="hw_marker_en" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="4" description="Select which bus to capture.  0 : DSS_HWA_DMA0    1 : DSS_HWA_DMA1" end="4" id="port_sel" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Chop of the sign extension bits [15:12] for every 16 bits of data. 0 : Send all 16 bits 1 : Send lower 12 of 16 bits" end="2" id="crop_en" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Select which bus to capture.  0 : Read Bus   1 : Write Bus" end="1" id="snif_mode" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Indicates is the sniffer block is active or inactive. 0 : Captuere is Disabled  1 : Sniffer Enabled" end="0" id="enable" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC4_RANGE_START0" description="" id="SRC4_RANGE_START0" offset="0xF8" width="32">
    
  <bitfield begin="31" description="Range 0 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC4_RANGE_END0" description="" id="SRC4_RANGE_END0" offset="0xFC" width="32">
    
  <bitfield begin="31" description="Range 0 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC4_RANGE_START1" description="" id="SRC4_RANGE_START1" offset="0x100" width="32">
    
  <bitfield begin="31" description="Range 1 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC4_RANGE_END1" description="" id="SRC4_RANGE_END1" offset="0x104" width="32">
    
  <bitfield begin="31" description="Range 1 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC4_RANGE_START2" description="" id="SRC4_RANGE_START2" offset="0x108" width="32">
    
  <bitfield begin="31" description="Range 2 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC4_RANGE_END2" description="" id="SRC4_RANGE_END2" offset="0x10C" width="32">
    
  <bitfield begin="31" description="Range 2 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC4_RANGE_START3" description="" id="SRC4_RANGE_START3" offset="0x110" width="32">
    
  <bitfield begin="31" description="Range 3 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC4_RANGE_END3" description="" id="SRC4_RANGE_END3" offset="0x114" width="32">
    
  <bitfield begin="31" description="Range 3 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC4_SW_TRIGGER" description="" id="SRC4_SW_TRIGGER" offset="0x118" width="32">
    
  <bitfield begin="4" description="Write 0x1 to trigger a Flush. A marker packet will also be inserted" end="4" id="flush" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Write 0x1 to insert a Marker" end="0" id="marker" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC4_THRESHOLD" description="" id="SRC4_THRESHOLD" offset="0x11C" width="32">
    
  <bitfield begin="9" description="The FIFO threshold to trigger writes from the Source FIFO. This value is in multiples of 32 bytes. If SRCx_BW_CTRL_WRITE_MODE is 0x0, then the bits [9:5] of this field need to be programmed to 0x0" end="0" id="threshold" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="SRC4_BW_CTRL" description="" id="SRC4_BW_CTRL" offset="0x120" width="32">
    
  <bitfield begin="30" description="0 : Highest Dynamic Priority 7 : Lowest Dynamic Priority" end="28" id="priority" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="20" description="The burst_size is the minimum size for which the SRC will keep arbitration once it wins . The value in multiples of  32 bytes" end="16" id="burst_size" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="11" description="The FIFO threshold to trigger writes from the Source FIFO. Value to be aligned to 32 bytes  [4:0] should be 0x0" end="4" id="burst_num" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="0" description="0 : Send data equivalent to burst_count * burst_size 1 : Send data equivalent to threshold size. This can be set only if threshold is less than 1024 bytes" end="0" id="write_mode" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC4_CHANNEL" description="" id="SRC4_CHANNEL" offset="0x124" width="32">
    
  <bitfield begin="31" description="Configure the STM Channel Number" end="0" id="addr" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC4_CHANNEL_CFG" description="" id="SRC4_CHANNEL_CFG" offset="0x128" width="32">
    
  <bitfield begin="4" description="Selects whether the Non Data access for the Source is timestamped  0 : No Timestamp 1 : Timestamped" end="4" id="NONDATA_TIMESTAMPED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Selects whether the Non Data access for the Source is Guaranteed or Invariant Timing 0 : Time Invariant 1 : Guaranteed" end="3" id="NONDATA_GUARANTEED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Selects whether the Data access for the Source is timestamped  0 : No Timestamp 1 : Timestamped" end="2" id="DATA_TIMESTAMPED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Selects whether the Data access for the Source is marked 0 : Un-Marked 1 : Marked" end="1" id="DATA_MARKED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Selects whether the Data access for the Source is Guaranteed or Invariant Timing 0 : Time Invariant 1 : Guaranteed" end="0" id="DATA_GUARANTEED" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC5_CTRL" description="" id="SRC5_CTRL" offset="0x12C" width="32">
    
  <bitfield begin="20" description="Write 0x1 to generate a marker on Flush trigger" end="20" id="gen_marker_on_flush" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="Enable the corresponding range for data capture.  Bit 0 :  0: Range 0 is disabled  1 : Range 0 is enableld" end="16" id="range_en" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="15" description="Write 0x1 to enable HW Marker trigger to generate a Flush" end="12" id="hw_flush_en" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="11" description="Write 0x1 to enable HW Marker trigger to generate a Marker" end="8" id="hw_marker_en" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="2" description="Chop of the sign extension bits [15:12] for every 16 bits of data. 0 : Send all 16 bits 1 : Send lower 12 of 16 bits" end="2" id="crop_en" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Select which bus to capture.  0 : Read Bus   1 : Write Bus" end="1" id="snif_mode" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Indicates is the sniffer block is active or inactive. 0 : Captuere is Disabled  1 : Sniffer Enabled" end="0" id="enable" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC5_RANGE_START0" description="" id="SRC5_RANGE_START0" offset="0x130" width="32">
    
  <bitfield begin="31" description="Range 0 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC5_RANGE_END0" description="" id="SRC5_RANGE_END0" offset="0x134" width="32">
    
  <bitfield begin="31" description="Range 0 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC5_RANGE_START1" description="" id="SRC5_RANGE_START1" offset="0x138" width="32">
    
  <bitfield begin="31" description="Range 1 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC5_RANGE_END1" description="" id="SRC5_RANGE_END1" offset="0x13C" width="32">
    
  <bitfield begin="31" description="Range 1 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC5_RANGE_START2" description="" id="SRC5_RANGE_START2" offset="0x140" width="32">
    
  <bitfield begin="31" description="Range 2 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC5_RANGE_END2" description="" id="SRC5_RANGE_END2" offset="0x144" width="32">
    
  <bitfield begin="31" description="Range 2 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC5_RANGE_START3" description="" id="SRC5_RANGE_START3" offset="0x148" width="32">
    
  <bitfield begin="31" description="Range 3 Start address OR Start param number for HWA , which needs to be captured" end="0" id="start" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC5_RANGE_END3" description="" id="SRC5_RANGE_END3" offset="0x14C" width="32">
    
  <bitfield begin="31" description="Range 3 End address OR End param number for HWA , which needs to be captured" end="0" id="end" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC5_SW_TRIGGER" description="" id="SRC5_SW_TRIGGER" offset="0x150" width="32">
    
  <bitfield begin="4" description="Write 0x1 to trigger a Flush. A marker packet will also be inserted" end="4" id="flush" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Write 0x1 to insert a Marker" end="0" id="marker" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC5_THRESHOLD" description="" id="SRC5_THRESHOLD" offset="0x154" width="32">
    
  <bitfield begin="9" description="The FIFO threshold to trigger writes from the Source FIFO. This value is in multiples of 32 bytes. If SRCx_BW_CTRL_WRITE_MODE is 0x0, then the bits [9:5] of this field need to be programmed to 0x0" end="0" id="threshold" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="SRC5_BW_CTRL" description="" id="SRC5_BW_CTRL" offset="0x158" width="32">
    
  <bitfield begin="30" description="0 : Highest Dynamic Priority 7 : Lowest Dynamic Priority" end="28" id="priority" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="20" description="The burst_size is the minimum size for which the SRC will keep arbitration once it wins . The value in multiples of  32 bytes" end="16" id="burst_size" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="11" description="The FIFO threshold to trigger writes from the Source FIFO. Value to be aligned to 32 bytes  [4:0] should be 0x0" end="4" id="burst_num" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="0" description="0 : Send data equivalent to burst_count * burst_size 1 : Send data equivalent to threshold size. This can be set only if threshold is less than 1024 bytes" end="0" id="write_mode" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC5_CHANNEL" description="" id="SRC5_CHANNEL" offset="0x15C" width="32">
    
  <bitfield begin="31" description="Configure the STM Channel Number" end="0" id="addr" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SRC5_CHANNEL_CFG" description="" id="SRC5_CHANNEL_CFG" offset="0x160" width="32">
    
  <bitfield begin="4" description="Selects whether the Non Data access for the Source is timestamped  0 : No Timestamp 1 : Timestamped" end="4" id="NONDATA_TIMESTAMPED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Selects whether the Non Data access for the Source is Guaranteed or Invariant Timing 0 : Time Invariant 1 : Guaranteed" end="3" id="NONDATA_GUARANTEED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Selects whether the Data access for the Source is timestamped  0 : No Timestamp 1 : Timestamped" end="2" id="DATA_TIMESTAMPED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Selects whether the Data access for the Source is marked 0 : Un-Marked 1 : Marked" end="1" id="DATA_MARKED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Selects whether the Data access for the Source is Guaranteed or Invariant Timing 0 : Time Invariant 1 : Guaranteed" end="0" id="DATA_GUARANTEED" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC0_STATUS" description="" id="SRC0_STATUS" offset="0x1D4" width="32">
    
  <bitfield begin="31" description="Status of the Sniffer for Source 0" end="16" id="status" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="3" description="Source Overflow Error is generated with the Source FIFO is full and there is no space to write the sniffed data" end="3" id="overflow_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Flush Err is generated on Multiple Flush requests" end="2" id="flush_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Data Miss Erro is generated when a Flush or Marker Requested causes Miss in the Sniffer data" end="1" id="data_miss" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Flush Done is generated on completion of a flush request" end="0" id="flush_done" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC1_STATUS" description="" id="SRC1_STATUS" offset="0x1D8" width="32">
    
  <bitfield begin="31" description="Status of the Sniffer for Source 1" end="16" id="status" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="3" description="Source Overflow Error is generated with the Source FIFO is full and there is no space to write the sniffed data" end="3" id="overflow_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Flush Err is generated on Multiple Flush requests" end="2" id="flush_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Data Miss Erro is generated when a Flush or Marker Requested causes Miss in the Sniffer data" end="1" id="data_miss" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Flush Done is generated on completion of a flush request" end="0" id="flush_done" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC2_STATUS" description="" id="SRC2_STATUS" offset="0x1DC" width="32">
    
  <bitfield begin="31" description="Status of the Sniffer for Source 2" end="16" id="status" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="3" description="Source Overflow Error is generated with the Source FIFO is full and there is no space to write the sniffed data" end="3" id="overflow_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Flush Err is generated on Multiple Flush requests" end="2" id="flush_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Data Miss Erro is generated when a Flush or Marker Requested causes Miss in the Sniffer data" end="1" id="data_miss" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Flush Done is generated on completion of a flush request" end="0" id="flush_done" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC3_STATUS" description="" id="SRC3_STATUS" offset="0x1E0" width="32">
    
  <bitfield begin="31" description="Status of the Sniffer for Source 3" end="16" id="status" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="3" description="Source Overflow Error is generated with the Source FIFO is full and there is no space to write the sniffed data" end="3" id="overflow_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Flush Err is generated on Multiple Flush requests" end="2" id="flush_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Data Miss Erro is generated when a Flush or Marker Requested causes Miss in the Sniffer data" end="1" id="data_miss" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Flush Done is generated on completion of a flush request" end="0" id="flush_done" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC4_STATUS" description="" id="SRC4_STATUS" offset="0x1E4" width="32">
    
  <bitfield begin="31" description="Status of the Sniffer for Source 4" end="16" id="status" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="3" description="Source Overflow Error is generated with the Source FIFO is full and there is no space to write the sniffed data" end="3" id="overflow_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Flush Err is generated on Multiple Flush requests" end="2" id="flush_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Data Miss Erro is generated when a Flush or Marker Requested causes Miss in the Sniffer data" end="1" id="data_miss" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Flush Done is generated on completion of a flush request" end="0" id="flush_done" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SRC5_STATUS" description="" id="SRC5_STATUS" offset="0x1E8" width="32">
    
  <bitfield begin="31" description="Status of the Sniffer for Source 5" end="16" id="status" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="3" description="Source Overflow Error is generated with the Source FIFO is full and there is no space to write the sniffed data" end="3" id="overflow_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Flush Err is generated on Multiple Flush requests" end="2" id="flush_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Data Miss Erro is generated when a Flush or Marker Requested causes Miss in the Sniffer data" end="1" id="data_miss" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Flush Done is generated on completion of a flush request" end="0" id="flush_done" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="INTERRUPT_MASK" description="" id="INTERRUPT_MASK" offset="0x1EC" width="32">
    
  <bitfield begin="31" description="MDO Infra Interrupt Mask" end="0" id="mask" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RW0" description="" id="HW_SPARE_RW0" offset="0xFD0" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rw0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RW1" description="" id="HW_SPARE_RW1" offset="0xFD4" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rw1" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RW2" description="" id="HW_SPARE_RW2" offset="0xFD8" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rw2" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RW3" description="" id="HW_SPARE_RW3" offset="0xFDC" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rw3" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RO0" description="" id="HW_SPARE_RO0" offset="0xFE0" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_ro0" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RO1" description="" id="HW_SPARE_RO1" offset="0xFE4" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_ro1" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RO2" description="" id="HW_SPARE_RO2" offset="0xFE8" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_ro2" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RO3" description="" id="HW_SPARE_RO3" offset="0xFEC" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_ro3" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_WPH" description="" id="HW_SPARE_WPH" offset="0xFF0" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_wph" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_REC" description="" id="HW_SPARE_REC" offset="0xFF4" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="31" id="hw_spare_rec31" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Reserved for HW R&amp;D" end="30" id="hw_spare_rec30" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="Reserved for HW R&amp;D" end="29" id="hw_spare_rec29" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="28" description="Reserved for HW R&amp;D" end="28" id="hw_spare_rec28" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Reserved for HW R&amp;D" end="27" id="hw_spare_rec27" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="26" description="Reserved for HW R&amp;D" end="26" id="hw_spare_rec26" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Reserved for HW R&amp;D" end="25" id="hw_spare_rec25" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Reserved for HW R&amp;D" end="24" id="hw_spare_rec24" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="Reserved for HW R&amp;D" end="23" id="hw_spare_rec23" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="22" description="Reserved for HW R&amp;D" end="22" id="hw_spare_rec22" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="21" description="Reserved for HW R&amp;D" end="21" id="hw_spare_rec21" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="20" description="Reserved for HW R&amp;D" end="20" id="hw_spare_rec20" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="Reserved for HW R&amp;D" end="19" id="hw_spare_rec19" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="Reserved for HW R&amp;D" end="18" id="hw_spare_rec18" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="Reserved for HW R&amp;D" end="17" id="hw_spare_rec17" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Reserved for HW R&amp;D" end="16" id="hw_spare_rec16" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="Reserved for HW R&amp;D" end="15" id="hw_spare_rec15" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Reserved for HW R&amp;D" end="14" id="hw_spare_rec14" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Reserved for HW R&amp;D" end="13" id="hw_spare_rec13" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Reserved for HW R&amp;D" end="12" id="hw_spare_rec12" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Reserved for HW R&amp;D" end="11" id="hw_spare_rec11" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Reserved for HW R&amp;D" end="10" id="hw_spare_rec10" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Reserved for HW R&amp;D" end="9" id="hw_spare_rec9" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Reserved for HW R&amp;D" end="8" id="hw_spare_rec8" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Reserved for HW R&amp;D" end="7" id="hw_spare_rec7" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Reserved for HW R&amp;D" end="6" id="hw_spare_rec6" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Reserved for HW R&amp;D" end="5" id="hw_spare_rec5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Reserved for HW R&amp;D" end="4" id="hw_spare_rec4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Reserved for HW R&amp;D" end="3" id="hw_spare_rec3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Reserved for HW R&amp;D" end="2" id="hw_spare_rec2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Reserved for HW R&amp;D" end="1" id="hw_spare_rec1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rec0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="LOCK0_KICK0" description="  - KICK0 component " id="LOCK0_KICK0" offset="0x1008" width="32">
    
  <bitfield begin="31" description=" - KICK0 component" end="0" id="" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="LOCK0_KICK1" description="  - KICK1 component " id="LOCK0_KICK1" offset="0x100C" width="32">
    
  <bitfield begin="31" description=" - KICK1 component" end="0" id="" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="intr_raw_status" description=" Interrupt Raw Status/Set Register " id="intr_raw_status" offset="0x1010" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="intr_enabled_status_clear" description=" Interrupt Enabled Status/Clear register " id="intr_enabled_status_clear" offset="0x1014" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="intr_enable" description=" Interrupt Enable register " id="intr_enable" offset="0x1018" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="intr_enable_clear" description=" Interrupt Enable Clear register " id="intr_enable_clear" offset="0x101C" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="eoi" description=" EOI register " id="eoi" offset="0x1020" width="32">
    
  <bitfield begin="7" description="EOI vector value. Write this with interrupt distribution value in the chip." end="0" id="" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="fault_address" description=" Fault Address register " id="fault_address" offset="0x1024" width="32">
    
  <bitfield begin="31" description="Fault Address." end="0" id="" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="fault_type_status" description=" Fault Type Status register " id="fault_type_status" offset="0x1028" width="32">
    
  <bitfield begin="6" description="Non-secure access." end="6" id="" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="5" description="Fault Type   10_0000 = Supervisor read  fault  - priv = 1 dir = 1 dtype != 1    01_0000 = Supervisor write fault  - priv = 1 dir = 0   00_1000 = Supervisor execute fault - priv = 1 dir = 1 dtype = 1   00_0100 = User read  fault - priv = 0 dir = 1 dtype = 1   00_0010 = User write fault - priv = 0 dir = 0   00_0001 = User execute fault - priv = 0 dir = 1 dtype = 1   00_0000 = No fault" end="0" id="" rwaccess="R" width="6"></bitfield>
  </register>
  
  
  <register acronym="fault_attr_status" description=" Fault Attribute Status register " id="fault_attr_status" offset="0x102C" width="32">
    
  <bitfield begin="31" description="XID." end="20" id="" rwaccess="R" width="12"></bitfield>
    
  <bitfield begin="19" description="Route ID." end="8" id="" rwaccess="R" width="12"></bitfield>
    
  <bitfield begin="7" description="Privilege ID." end="0" id="" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="fault_clear" description=" Fault Clear register " id="fault_clear" offset="0x1030" width="32">
    
  <bitfield begin="0" description="Fault clear. Writing a 1 clears the current fault. Writing a 0 has no effect." end="0" id="" rwaccess="W" width="1"></bitfield>
  </register>
</module>
