<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="" id="APP_HWA_ADCBUF_CTRL">
  
  
  <register acronym="PID" description=" PID register " id="PID" offset="0x0" width="32">
    
  <bitfield begin="31" description="" end="16" id="" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="" end="11" id="" rwaccess="R" width="5"></bitfield>
    
  <bitfield begin="10" description="" end="8" id="" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="7" description="" end="6" id="" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="5" description="" end="0" id="" rwaccess="R" width="6"></bitfield>
  </register>
  
  
  <register acronym="HW_REG0" description="" id="HW_REG0" offset="0x4" width="32">
    
  <bitfield begin="31" description="Reserved" end="0" id="HW_REG0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="ADCBUFCFG1" description="" id="ADCBUFCFG1" offset="0x8" width="32">
    
  <bitfield begin="17" description="Writing 1'b1  : Resets ADC BUFFER  Control logic. Writing 1'b0:  Releases the reset for ADC BUFFER control logic." end="17" id="ADCBUF_RST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="TI Internal Feature Ping-pong select value from ADC Buffer Packing logic. Even in SW override mode, this register will indicate the ping-pong select signal generated from the ADC Buffer Packing logic and not the override value." end="16" id="ADCBUFPIPOSEL" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="15" description="Stop Pulse for Continuous mode. The data capture will stop once this register is set. Continous mode is expected to be only used for CZ and ADC Buffer Testpattern mode : Its a wspecial access type, write to this field will generate a pulse" end="15" id="ADCBUFCONTSTOPPL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Start Pulse for Continuous mode. The data capture will start from Address 0 once this register is set. All the other configurations like Enable, Sample Count are expected to be programmed before this pulse. Continous mode is expected to be only used for CZ and ADC Buffer Testpattern mode : Its a wspecial access type, write to this field will generate a pulse" end="14" id="ADCBUFCONTSTRTPL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Continuous mode enable for ADC Buffer.  This is set when a fixed number of samples have to be stored in Ping/Pong and not depend on Chirp time-lines (Eg: Analog Lab characterization to stream out continuous data from DFE). Continous mode is expected to be only used for CZ and ADC Buffer Testpattern mode" end="13" id="ADCBUFCONTMODEEN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="TI Internal Feature SW override value for ADC Buffer Ping Pong select" end="11" id="ADCBUFPIPOOVRVAL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="TI Internal Feature Override control for ADC Buffer Ping Pong select" end="10" id="ADCBUFPIPOOVRCNT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="TI Reserved" end="9" id="RX3EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Enable for Rx2 write" end="8" id="RX2EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Enable for Rx1 write" end="7" id="RX1EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Enable for Rx0 write" end="6" id="RX0EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="TI Internal Feature Inversion control for ADC Buffer Ping-pong select. By default ADC Buffer write starts with Pong write. By setting this bit to 1, it will start from Ping write after reset." end="1" id="ADCBUFPIPOSELINV" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="TI Internal Feature Write source for ADC Buffer. 0 --> DFE, 1 --> HWASS Interconnect" end="0" id="ADCBUFWRSOURCE" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="ADCBUFCFG1_EXTD" description="" id="ADCBUFCFG1_EXTD" offset="0xC" width="32">
    
  <bitfield begin="31" description="TI Intenal Feature. No of clocks to delay the ping-pong switch and interrupt generation w.r.t ADC Valid fall pulse.  This will enable dithering the DSP activity for successive ping-pong switch cycles. This will not delay the ping pong toggle which will happen immediately after ADC Valid fall." end="0" id="ADCBUFINTGENDLY" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="ADCBUFCFG2" description="" id="ADCBUFCFG2" offset="0x10" width="32">
    
  <bitfield begin="26" description="128 bit Address offset to be added to the internal address pointer for Rx1 writes in Non-interleaved mode." end="16" id="ADCBUFADDRX1" rwaccess="RW" width="11"></bitfield>
    
  <bitfield begin="10" description="128 bit Address offset to be added to the internal address pointer for Rx0 writes in Non-interleaved mode." end="0" id="ADCBUFADDRX0" rwaccess="RW" width="11"></bitfield>
  </register>
  
  
  <register acronym="ADCBUFCFG3" description="" id="ADCBUFCFG3" offset="0x14" width="32">
    
  <bitfield begin="26" description="TI   Reserved" end="16" id="ADCBUFADDRX3" rwaccess="RW" width="11"></bitfield>
    
  <bitfield begin="10" description="128 bit Address offset to be added to the internal address pointer for Rx2 writes in Non-interleaved mode." end="0" id="ADCBUFADDRX2" rwaccess="RW" width="11"></bitfield>
  </register>
  
  
  <register acronym="ADCBUFCFG4" description="" id="ADCBUFCFG4" offset="0x18" width="32">
    
  <bitfield begin="30" description="TI Internal Feature 0 --> Delay Interrupt Gen and Ping/Pong toggle together based on cfg_interrupt_gen_delay,  1 --> Delay only Interrupt Gen based on cfg_interrupt_gen_delay. But toggle Ping/Pong select signal as soon as the write is complete." end="30" id="ADCBUFPNGSELTGLDIS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="20" description="Number of chirps to be stored in Ping / Pong buffer. This register should be programmed with one less than the actual number needed." end="16" id="ADCBUFNUMCHRPPING" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="15" description="No of samples to store in each Ping and Pong register in continuous mode of ADC Buffer. In real only mode this refers to the number of real samples and in complex mode, this refers to number of complex samples.  This refers to the number of samples per channel. This counter increments once for every new sample from DFE (as long as 1 or more channels are enabled). The max allowed value varies depending on other configurations (No of channels enabled and real/complex data). Continous mode is expected to be only used for CZ and ADC Buffer Testpattern mode" end="0" id="ADCBUFSAMPCNT" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="ADCBUFINTGENDITHERDLY" description="" id="ADCBUFINTGENDITHERDLY" offset="0x1C" width="32">
    
  <bitfield begin="31" description="TI Internal Feature. Additional dithering delay added on the Chirp Avilable interrupt" end="0" id="ADCBUFINTGENDITHERDLY" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="ADCBUFF_PING_MEM_INIT" description="" id="ADCBUFF_PING_MEM_INIT" offset="0x20" width="32">
    
  <bitfield begin="0" description="Write_pulse bit field: Writing 1'b1 will start initialization of ADCBUFF PING Memory . Value in each row is initialized to 0x00_0000_0000" end="0" id="mem_init" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="ADCBUFF_PING_MEM_DONE" description="" id="ADCBUFF_PING_MEM_DONE" offset="0x24" width="32">
    
  <bitfield begin="0" description="This field will be high once initialization of ADCBUFF PING Memory is finished. Writing '1' would clear the bit." end="0" id="mem_init_done" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="ADCBUFF_PING_MEM_STATUS" description="" id="ADCBUFF_PING_MEM_STATUS" offset="0x28" width="32">
    
  <bitfield begin="0" description="1'b0: No initialization is happening for ADCBUF PING Memory 1'b1: Initialization is in progress for ADCBUF PING Memory" end="0" id="mem_init_status" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="ADCBUFF_PONG_MEM_INIT" description="" id="ADCBUFF_PONG_MEM_INIT" offset="0x2C" width="32">
    
  <bitfield begin="0" description="Write_pulse bit field: Writing 1'b1 will start initialization of ADCBUF PONG Memory . Value in each row is initialized to 0x00_0000_0000" end="0" id="mem_init" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="ADCBUFF_PONG_MEM_DONE" description="" id="ADCBUFF_PONG_MEM_DONE" offset="0x30" width="32">
    
  <bitfield begin="0" description="This field will be high once initialization of ADCBUF PONG Memory is finished. Writing '1' would clear the bit." end="0" id="mem_init_done" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="ADCBUFF_PONG_MEM_STATUS" description="" id="ADCBUFF_PONG_MEM_STATUS" offset="0x34" width="32">
    
  <bitfield begin="0" description="1'b0: No initialization is happening for ADCBUF PONG Memory 1'b1: Initialization is in progress for ADCBUF PONG Memory" end="0" id="mem_init_status" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="HWASS_SHRD_RAM_MEM_INIT" description="" id="HWASS_SHRD_RAM_MEM_INIT" offset="0x38" width="32">
    
  <bitfield begin="0" description="Write_pulse bit field: Writing 1'b1 will start initialization of HWASS 160 kb shared memory bank . Value in each row is initialized to 0x00_0000_0000" end="0" id="mem_init" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="HWASS_SHRD_RAM_MEM_DONE" description="" id="HWASS_SHRD_RAM_MEM_DONE" offset="0x3C" width="32">
    
  <bitfield begin="0" description="This field will be high once initialization of HWASS 160 kb shared memory bank is finished. Writing '1' would clear the bit." end="0" id="mem_init_done" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="HWASS_SHRD_RAM_MEM_STATUS" description="" id="HWASS_SHRD_RAM_MEM_STATUS" offset="0x40" width="32">
    
  <bitfield begin="0" description="1'b0: No initialization is happening for HWASS 160kb shared memory bank 1'b1: Initialization is in progress for HWASS 160kb shared  memory bank" end="0" id="mem_init_status" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="HWASS_SHRD_RAM_ACCESS_ERROR_MASK" description="" id="HWASS_SHRD_RAM_ACCESS_ERROR_MASK" offset="0x44" width="32">
    
  <bitfield begin="0" description="When 1'b1 : shared ram access error is masked. 1'b0 : shared ram access error is not masked." end="0" id="shmem_access_error_mask" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="HWASS_SHRD_RAM_ACCESS_ERROR_STATUS" description="" id="HWASS_SHRD_RAM_ACCESS_ERROR_STATUS" offset="0x48" width="32">
    
  <bitfield begin="0" description="This field will be high whenever the invalid address of shared memory is accessed and the interrupt is not masked." end="0" id="shmem_access_error_status" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="HWASS_SHRD_RAM_ACCESS_ERROR_STATUS_RAW" description="" id="HWASS_SHRD_RAM_ACCESS_ERROR_STATUS_RAW" offset="0x4C" width="32">
    
  <bitfield begin="0" description="Indicates the shared ram access error (raw status). Set irrespective of HWASS_SHRD_RAM_ACCESS_ERROR_MASK bit" end="0" id="shmem_access_errror_status_raw" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="HWASS_EDMA_CLOCK_GATE_CONTROL" description="" id="HWASS_EDMA_CLOCK_GATE_CONTROL" offset="0x50" width="32">
    
  <bitfield begin="2" description="Writing 3'b111 will gate the clock to HWA EDMA.Writing 3'b000 will ungate the clock" end="0" id="hwa_edma_clock_gating_en" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="HWASS_RAM_160KB_CLOCK_GATE" description="" id="HWASS_RAM_160KB_CLOCK_GATE" offset="0x54" width="32">
    
  <bitfield begin="2" description="3'b000 : Ungate clock to 160KB RAM 3'b111 : Gate Clock to 160KB RAM" end="0" id="enable" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="LOCK0_KICK0" description="  - KICK0 component " id="LOCK0_KICK0" offset="0x1008" width="32">
    
  <bitfield begin="31" description=" - KICK0 component" end="0" id="" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="LOCK0_KICK1" description="  - KICK1 component " id="LOCK0_KICK1" offset="0x100C" width="32">
    
  <bitfield begin="31" description=" - KICK1 component" end="0" id="" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="intr_raw_status" description=" Interrupt Raw Status/Set Register " id="intr_raw_status" offset="0x1010" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="intr_enabled_status_clear" description=" Interrupt Enabled Status/Clear register " id="intr_enabled_status_clear" offset="0x1014" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="intr_enable" description=" Interrupt Enable register " id="intr_enable" offset="0x1018" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="intr_enable_clear" description=" Interrupt Enable Clear register " id="intr_enable_clear" offset="0x101C" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="eoi" description=" EOI register " id="eoi" offset="0x1020" width="32">
    
  <bitfield begin="7" description="EOI vector value. Write this with interrupt distribution value in the chip." end="0" id="" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="fault_address" description=" Fault Address register " id="fault_address" offset="0x1024" width="32">
    
  <bitfield begin="31" description="Fault Address." end="0" id="" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="fault_type_status" description=" Fault Type Status register " id="fault_type_status" offset="0x1028" width="32">
    
  <bitfield begin="6" description="Non-secure access." end="6" id="" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="5" description="Fault Type   10_0000 = Supervisor read  fault  - priv = 1 dir = 1 dtype != 1    01_0000 = Supervisor write fault  - priv = 1 dir = 0   00_1000 = Supervisor execute fault - priv = 1 dir = 1 dtype = 1   00_0100 = User read  fault - priv = 0 dir = 1 dtype = 1   00_0010 = User write fault - priv = 0 dir = 0   00_0001 = User execute fault - priv = 0 dir = 1 dtype = 1   00_0000 = No fault" end="0" id="" rwaccess="R" width="6"></bitfield>
  </register>
  
  
  <register acronym="fault_attr_status" description=" Fault Attribute Status register " id="fault_attr_status" offset="0x102C" width="32">
    
  <bitfield begin="31" description="XID." end="20" id="" rwaccess="R" width="12"></bitfield>
    
  <bitfield begin="19" description="Route ID." end="8" id="" rwaccess="R" width="12"></bitfield>
    
  <bitfield begin="7" description="Privilege ID." end="0" id="" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="fault_clear" description=" Fault Clear register " id="fault_clear" offset="0x1030" width="32">
    
  <bitfield begin="0" description="Fault clear. Writing a 1 clears the current fault. Writing a 0 has no effect." end="0" id="" rwaccess="W" width="1"></bitfield>
  </register>
</module>
