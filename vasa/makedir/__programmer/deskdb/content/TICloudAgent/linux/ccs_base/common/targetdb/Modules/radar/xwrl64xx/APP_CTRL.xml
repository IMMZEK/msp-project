<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="" id="APP_CTRL">
  
  
  <register acronym="PID" description=" PID register " id="PID" offset="0x0" width="32">
    
  <bitfield begin="31" description="" end="16" id="" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="" end="11" id="" rwaccess="R" width="5"></bitfield>
    
  <bitfield begin="10" description="" end="8" id="" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="7" description="" end="6" id="" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="5" description="" end="0" id="" rwaccess="R" width="6"></bitfield>
  </register>
  
  
  <register acronym="HW_REG0" description="" id="HW_REG0" offset="0x4" width="32">
    
  <bitfield begin="31" description="HW reserved Regsiter" end="0" id="hwreg0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_REG1" description="" id="HW_REG1" offset="0x8" width="32">
    
  <bitfield begin="31" description="HW reserved Regsiter" end="0" id="hwreg1" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="PREVIOUS_NAME" description="" id="PREVIOUS_NAME" offset="0xC" width="32">
    
  <bitfield begin="31" description="HW reserved Regsiter" end="0" id="hwreg2" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_REG3" description="" id="HW_REG3" offset="0x10" width="32">
    
  <bitfield begin="31" description="HW reserved Regsiter" end="0" id="hwreg3" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_REG4" description="" id="HW_REG4" offset="0x14" width="32">
    
  <bitfield begin="31" description="HW reserved Regsiter" end="0" id="hwreg4" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_REG5" description="" id="HW_REG5" offset="0x18" width="32">
    
  <bitfield begin="31" description="HW reserved Regsiter" end="0" id="hwreg5" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_REG6" description="" id="HW_REG6" offset="0x1C" width="32">
    
  <bitfield begin="31" description="HW reserved Regsiter" end="0" id="hwreg6" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_REG7" description="" id="HW_REG7" offset="0x20" width="32">
    
  <bitfield begin="31" description="HW reserved Regsiter" end="0" id="hwreg7" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_SW_INT" description="" id="APPSS_SW_INT" offset="0x24" width="32">
    
  <bitfield begin="3" description="Write_pulse bit field: writing 1'b1 to each bit will trigger SW_INT&lt;0-3> respectively to CM4." end="0" id="pulse" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="APPSS_IPC_RFS" description="" id="APPSS_IPC_RFS" offset="0x28" width="32">
    
  <bitfield begin="31" description="Used by software to communicate commands and response. It is 7-bits per interrupt." end="4" id="command" rwaccess="RW" width="28"></bitfield>
    
  <bitfield begin="3" description="Write_pulse bit field: Writing 1'b1 to each bit will trigger HOST_INTR &lt;0-3> respectively to CM3." end="0" id="host_intr" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="APPSS_CAPEVNT_SEL" description="" id="APPSS_CAPEVNT_SEL" offset="0x2C" width="32">
    
  <bitfield begin="23" description="5:0 : Selects the interrupt to route to RTI Capture event 1        6'd0  : MUXED_FECSS_CHIRPTIMER_CHIRP_START_AND_CHIRP_END        6'd1  : MUXED_FECSS_CHIRPTIMER_BURST_START_AND_BURST_END        6'd2  : FECSS_CHIRPTIMER_FRAME_END        6'd3  : FECSS_FRAMETIMER_FRAME_START        6'd4  : MUXED_FECSS_CHIRP_AVAIL_IRQ_AND_ADC_VALID_START_AND_SYNC_IN        6'd5  : MUXED_FECSS_FRAME_START_OFFSET_INTR_TIME1        6'd6  : FECSS_FRAME_START_OFFSET_INTR_TIME2        6'd7  : FECSS_FRAME_START_OFFSET_INTR_TIME3        6'd8  : FECSS_BURST_START_OFFSET_TIME 11:6: Selects the interrupt to route to WDT Capture event 1        6'd0  : MUXED_FECSS_CHIRPTIMER_CHIRP_START_AND_CHIRP_END        6'd1  : MUXED_FECSS_CHIRPTIMER_BURST_START_AND_BURST_END        6'd2  : FECSS_CHIRPTIMER_FRAME_END        6'd3  : FECSS_FRAMETIMER_FRAME_START        6'd4  : MUXED_FECSS_CHIRP_AVAIL_IRQ_AND_ADC_VALID_START_AND_SYNC_IN        6'd5  : MUXED_FECSS_FRAME_START_OFFSET_INTR_TIME1         6'd6  : FECSS_FRAME_START_OFFSET_INTR_TIME2        6'd7  : FECSS_FRAME_START_OFFSET_INTR_TIME3        6'd8  : FECSS_BURST_START_OFFSET_TIME        6'd9  : FECSS_IPC_RFS_FEC_INTR 1" end="12" id="src1" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="11" description="5:0 : Selects the interrupt to route to RTI Capture event 0        6'd0  : FECSS_FRAME_START_OFFSET_INTR_TIME3        6'd1  : FECSS_FRAME_START_OFFSET_INTR_TIME2        6'd2  : FECSS_FRAME_START_OFFSET_INTR_TIME1        6'd3  : FECSS_FRAMETIMER_FRAME_START        6'd4  : LIN_INT1        6'd5  : LIN_INT0        6'd6  : MCAN_FE_INT7        6'd7  : MCAN_FE_INT1        6'd8  : MCAN_FE_INT2        6'd9  : MCAN_FE_INT3        6'd10 : MCAN_FE_INT4        6'd11 : MCAN_FE_INT5        6'd12 : MCAN_FE_INT6        6'd13 : MCAN_INT0        6'd14 : MCAN_INT1        6'd15 : SYNC_IN 11:6: Selects the interrupt to route to WDT Capture event 0        6'd0  : MUXED_FECSS_CHIRPTIMER_CHIRP_START_AND_CHIRP_END        6'd1  : MUXED_FECSS_CHIRPTIMER_BURST_START_AND_BURST_END        6'd2  : FECSS_CHIRPTIMER_FRAME_END        6'd3  : FECSS_FRAMETIMER_FRAME_START        6'd4  : MUXED_FECSS_CHIRP_AVAIL_IRQ_AND_ADC_VALID_START_AND_SYNC_IN        6'd5  : MUXED_FECSS_FRAME_START_OFFSET_INTR_TIME1        6'd6  : FECSS_FRAME_START_OFFSET_INTR_TIME2        6'd7  : FECSS_FRAME_START_OFFSET_INTR_TIME3        6'd8  : FECSS_BURST_START_OFFSET_TIME        6'd9  : FECSS_IPC_RFS_FEC_INTR 0" end="0" id="src0" rwaccess="RW" width="12"></bitfield>
  </register>
  
  
  <register acronym="APPSS_DMA_REQ_SEL" description="" id="APPSS_DMA_REQ_SEL" offset="0x30" width="32">
    
  <bitfield begin="31" description="Reserved for R&amp;D. Do not touch" end="0" id="select" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_DMA1_REQ_SEL" description="" id="APPSS_DMA1_REQ_SEL" offset="0x34" width="32">
    
  <bitfield begin="31" description="Reserved for R&amp;D. Do not touch" end="0" id="select" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_IRQ_REQ_SEL" description="" id="APPSS_IRQ_REQ_SEL" offset="0x38" width="32">
    
  <bitfield begin="31" description="Configuration register APPSS_IRQ_REQ_SEL is used to select the interrupt for CM4. Below are the bit definitions  0    :   0x0 =  Map 0th IRQ from compare block of RTI (RTI1) to IRQ43      :   0x1 =  Map 0th IRQ from compare block of WDT (RTI2) to IRQ43 1    :   0x0 =  Map 1st IRQ from compare block of RTI (RTI1) to IRQ44      :   0x1 =  Map 1st IRQ from compare block of WDT (RTI2) to IRQ44 2    :   0x0 =  Map 2nd IRQ from compare block of RTI (RTI1) to IRQ45      :   0x1 =  Map 2nd IRQ from compare block of WDT (RTI2) to IRQ45 3    :   0x0 =  Map 3rd IRQ from compare block of RTI (RTI1) to IRQ46      :   0x1 =  Map 3rd IRQ from compare block of WDT (RTI2) to IRQ46 5:4  :  0x00 =  Selects time base IRQ from RTI (RTI1) to IRQ47       :  0x01 =  Selects time base IRQ from WDT (RTI2) to IRQ47      :  0x10 =  Selects gpadc_ifm_done to IRQ47      :  0x11 =  Reserved 7:6  :  0x00 =  Selects capture event 0 of RTI to IRQ48 and  Selects capture event 1 of IRQ from RTI to IRQ49      :  0x01 =  Selects capture event 0 of WDT to IRQ48 and  Selects capture event 1 of IRQ from WDT to IRQ49      :  0x10 =  Selects PWM Interrupt 0 to IRQ48 and PWM Interrupt 1 to IRQ49      :  0x11 =  Selects OVL_REQ of RTI (RTI1) to IRQ48 and OVL_REQ of WDT to IRQ49 8    :   0x0 =  mcan_fe_int7 connected to IRQ29      :   0x1 =  debugss txdata_available interrupt connected to IRQ29. 9    :   0x0 =  Used for TPPCA trigger. Dma read interrupt of SPI1/A channel routed to TPCCA (DMA) trigger 62      :   0x1 =  Used for TPPCA trigger. dma read interrupt of SPI2/B channel routed to TPCCA (DMA) trigger 62 10   :   0x0 =  Used for TPPCA trigger. dma write interrupt of SPI1/A channel routed to TPCCA (DMA) trigger 63      :   0x1 =  Used for TPPCA trigger. dma write interrupt of SPI2/B channel routed to TPCCA (DMA) trigger 63 11   :   0x0 = Timing Engine Chirptimer_chirp_start to IRQ30      :   0x1 = Timing Engine Chirptimer_chirp_end to IRQ30 12   :   0x0 = Timing Engine Chirptimer_burst_start to IRQ31      :   0x1 = Timing Engine Chirptimer_burst_end to IRQ31 14:13:  0x00 = chirp_avail_irq to IRQ34      :  0x01 = adc_valid_start to IRQ34      :  0x10 = SYNC_in to IRQ34 15   :   Reserved 16   :   0x0 = mcan_fe_int6 connected to IRQ28      :   0x1 = spi2_int_req connected to IRQ28 18:17:  0x00 = DCC_DONE  Interrupt connected to IRQ12      :  0x01 = CM4 LBIST Interrupt connected to IRQ12      :  0x10 = CM3 LBIST Interrupt connected to IRQ12      :  0x11 = TOP PBIST Interrupt connected to IRQ12 20:19:  0x00 = I2C_INT   Interrupt connected to IRQ19      :  0x01 = CM4 LBIST Interrupt connected to IRQ19      :  0x10 = CM3 LBIST Interrupt connected to IRQ19      :  0x11 = TOP PBIST Interrupt connected to IRQ19 21   :   0x0 = APPSS_TPCC1_ERRAGG  connected to IRQ16      :   0x1 = CTI_TRIGOUT2  connected to IRQ16 22   :   0x0 = APPSS_TPCC2_ERRAGG connected to IRQ18      :   0x1 = CTI_TRIGOUT3  connected to IRQ18" end="0" id="select" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_SPI_TRIG_SRC" description="" id="APPSS_SPI_TRIG_SRC" offset="0x3C" width="32">
    
  <bitfield begin="26" description="RESERVED" end="16" id="trig_spib" rwaccess="RW" width="11"></bitfield>
    
  <bitfield begin="1" description="RESERVED" end="0" id="trig_spia" rwaccess="RW" width="2"></bitfield>
  </register>
  
  
  <register acronym="APPSS_RAM1A_MEM_INIT" description="" id="APPSS_RAM1A_MEM_INIT" offset="0x40" width="32">
    
  <bitfield begin="0" description="Write_pulse bit field: Writing 1'b1 will start initialization of APPSS_RAM1 partion0  bank. Value in each row is initialized to 0x0C_0000_0000" end="0" id="mem_init" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_RAM1A_MEM_INIT_DONE" description="" id="APPSS_RAM1A_MEM_INIT_DONE" offset="0x44" width="32">
    
  <bitfield begin="0" description="This field will be high once initialization of APPSS_RAM1 partion0  banks is finished. Writing '1' would clear the bit." end="0" id="mem_init_done" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_RAM1A_MEM_INIT_STATUS" description="" id="APPSS_RAM1A_MEM_INIT_STATUS" offset="0x48" width="32">
    
  <bitfield begin="0" description="1'b0: No initialization is happening for APPSS_RAM1 partion0  bank 1'b1: Initialization is in progress for APPSS_RAM1 partion0  bank" end="0" id="mem_status" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_RAM2A_MEM_INIT" description="" id="APPSS_RAM2A_MEM_INIT" offset="0x4C" width="32">
    
  <bitfield begin="0" description="Write_pulse bit field: Writing 1'b1 will start initialization of APPSS_RAM2 partion0  bank. Value in each row is initialized to 0x0C_0000_0000" end="0" id="mem_init" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_RAM2A_MEM_INIT_DONE" description="" id="APPSS_RAM2A_MEM_INIT_DONE" offset="0x50" width="32">
    
  <bitfield begin="0" description="This field will be high once initialization of APPSS_RAM2 partion0  banks is finished. Writing '1' would clear the bit." end="0" id="mem_init_done" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_RAM2A_MEM_INIT_STATUS" description="" id="APPSS_RAM2A_MEM_INIT_STATUS" offset="0x54" width="32">
    
  <bitfield begin="0" description="1'b0: No initialization is happening for APPSS_RAM2 partion0  bank 1'b1: Initialization is in progress for APPSS_RAM2 partion0  bank" end="0" id="mem_status" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_RAM3A_MEM_INIT" description="" id="APPSS_RAM3A_MEM_INIT" offset="0x58" width="32">
    
  <bitfield begin="0" description="Write_pulse bit field: Writing 1'b1 will start initialization of APPSS_RAM3 partion0  bank. Value in each row is initialized to 0x0C_0000_0000" end="0" id="mem_init" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_RAM3A_MEM_INIT_DONE" description="" id="APPSS_RAM3A_MEM_INIT_DONE" offset="0x5C" width="32">
    
  <bitfield begin="0" description="This field will be high once initialization of APPSS_RAM3 partion0  banks is finished. Writing '1' would clear the bit." end="0" id="mem_init_done" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_RAM3A_MEM_INIT_STATUS" description="" id="APPSS_RAM3A_MEM_INIT_STATUS" offset="0x60" width="32">
    
  <bitfield begin="0" description="1'b0: No initialization is happening for APPSS_RAM3 partion0  bank 1'b1: Initialization is in progress for APPSS_RAM3 partion0  bank" end="0" id="mem_status" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="HWASS_SHRD_RAM0_MEM_INIT" description="" id="HWASS_SHRD_RAM0_MEM_INIT" offset="0x64" width="32">
    
  <bitfield begin="0" description="Write_pulse bit field: Writing 1'b1 will start initializing the HWASS Shared RAM parition0. Value in each row is initialized to 0x0" end="0" id="mem_init" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="HWASS_SHRD_RAM0_MEM_INIT_DONE" description="" id="HWASS_SHRD_RAM0_MEM_INIT_DONE" offset="0x68" width="32">
    
  <bitfield begin="0" description="This field will be high once intialization of HWASS Shared RAM parition0 is finished. Writing '1' would clear the bit" end="0" id="mem_init_done" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="HWASS_SHRD_RAM0_MEM_INIT_STATUS" description="" id="HWASS_SHRD_RAM0_MEM_INIT_STATUS" offset="0x6C" width="32">
    
  <bitfield begin="0" description="1'b0: No initialization is happening for HWASS Shared RAM parition0 1'b1: Initialization is in progress for HWASS Shared RAM parition0" end="0" id="mem_status" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="HWASS_SHRD_RAM1_MEM_INIT" description="" id="HWASS_SHRD_RAM1_MEM_INIT" offset="0x70" width="32">
    
  <bitfield begin="0" description="Write_pulse bit field: Writing 1'b1 will start initializing the HWASS Shared RAM parition1. Value in each row is initialized to 0x0" end="0" id="mem_init" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="HWASS_SHRD_RAM1_MEM_INIT_DONE" description="" id="HWASS_SHRD_RAM1_MEM_INIT_DONE" offset="0x74" width="32">
    
  <bitfield begin="0" description="This field will be high once intialization of HWASS Shared RAM parition1 is finished. Writing '1' would clear the bit" end="0" id="mem_init_done" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="HWASS_SHRD_RAM1_MEM_INIT_STATUS" description="" id="HWASS_SHRD_RAM1_MEM_INIT_STATUS" offset="0x78" width="32">
    
  <bitfield begin="0" description="1'b0: No initialization is happening for HWASS Shared RAM parition1 1'b1: Initialization is in progress for HWASS Shared RAM parition1" end="0" id="mem_status" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_TPCC_MEMINIT_START" description="" id="APPSS_TPCC_MEMINIT_START" offset="0x7C" width="32">
    
  <bitfield begin="16" description="Write_pulse bit field: Writing 1'b1 will start initializing the TPCCB" end="16" id="tpcc_b_meminit_start" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Write_pulse bit field: Writing 1'b1 will start initializing the TPCCA" end="0" id="tpcc_a_meminit_start" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_TPCC_MEMINIT_DONE" description="" id="APPSS_TPCC_MEMINIT_DONE" offset="0x80" width="32">
    
  <bitfield begin="16" description="This field will be high once intialization of TPCCB is finished. Writing '1' would clear the bit" end="16" id="tpcc_b_meminit_done" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="This field will be high once intialization of TPCCA is finished. Writing '1' would clear the bit" end="0" id="tpcc_a_meminit_done" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_TPCC_MEMINIT_STATUS" description="" id="APPSS_TPCC_MEMINIT_STATUS" offset="0x84" width="32">
    
  <bitfield begin="16" description="1'b0: No initialization is happening for TPCCA 1'b1: Initialization is in progress for TPCCB" end="16" id="tpcc_b_meminit_status" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="1'b0: No initialization is happening for TPCCA 1'b1: Initialization is in progress for TPCCB" end="0" id="tpcc_a_meminit_status" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_SPIA_CFG" description="" id="APPSS_SPIA_CFG" offset="0x88" width="32">
    
  <bitfield begin="28" description="1: Enable loop back of MOSI to MISO - Master mode Enable loop back of MISO to MOSI - Slave mode" end="28" id="spia_iodft_en" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="SPIA trigger source polarity select.   0    - Polarity 0,   1   -Polarity 1" end="24" id="spia_int_trig_polarity" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="When set the TRIGGER   s are un-gated only when chip-select is active" end="16" id="spia_trig_gate_en" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="MIBSPIB CS Trigger SRC enable    1   : Use CS as trigger source" end="8" id="spia_cs_trigsrc_en" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Donot touch the field. Used as Tie-off for IP-config." end="0" id="spiasync2sen" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_SPIB_CFG" description="" id="APPSS_SPIB_CFG" offset="0x8C" width="32">
    
  <bitfield begin="28" description="1: Enable loop back of MOSI to MISO - Master mode Enable loop back of MISO to MOSI - Slave mode" end="28" id="spib_iodft_en" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="SPIB trigger source polarity select.   0    - Polarity 0,   1   -Polarity 1" end="24" id="spib_int_trig_polarity" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="When set the TRIGGER   s are un-gated only when chip-select is active" end="16" id="spib_trig_gate_en" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="MIBSPIB CS Trigger SRC enable    1   : Use CS as trigger source" end="8" id="spib_cs_trigsrc_en" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Donot touch the field. Used as Tie-off for IP-config." end="0" id="spibsync2sen" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_EPWM_CFG" description="" id="APPSS_EPWM_CFG" offset="0x90" width="32">
    
  <bitfield begin="31" description="bit0: SW syncin for EPWM1  bit1: SW syncin for EPWM2 bit2: SW syncin for EPWM3 bit8:9 :  select bits for EPWM1       '0' :  external syncin       '1' :  reserved       '2' :  sw syncin         '3' :  reserved bit10:11 : select bits for EPWM2       '0' :  external syncin       '1' :  chained from EPWM1       '2' :  sw syncin         '3' :  reserved bit12:13 : select bits for EPWM3       '0' :  external syncin       '1' :  chained from EPWM2       '2' :  sw syncin         '3' :  reserved bit24:TBCLKEN for EPWM1 bit25:TBCLKEN for EPWM2 bit26:TBCLKEN for EPWM3" end="0" id="epwm_config" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RESERVED" description="" id="RESERVED" offset="0x94" width="32">
    
  <bitfield begin="31" description="bit0 : writing '1'  will slect negedge for pulse generation of GIO_PAD_INT0 to IRQ bit1 : writing '1'  will slect negedge for pulse generation of GIO_PAD_INT1to IRQ bit2: writing '1'  will slect negedge for pulse generation of GIO_PAD_INT2 to IRQ bit3 : writing '1'  will slect negedge for pulse generation of GIO_PAD_INT3 to IRQ bit4 : writing '1'  will slect negedge for pulse generation of GIO_PAD_INT4 to IRQ bit5 : writing '1'  will slect negedge for pulse generation of GIO_PAD_INT5 to IRQ bit6 : writing '1'  will slect negedge for pulse generation of GIO_PAD_INT6 to IRQ bit7 : writing '1'  will slect negedge for pulse generation of GIO_PAD_INT7 to IRQ" end="0" id="gio_config" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_MCAN_FE_AND_LIN_INTR_SEL" description="" id="APPSS_MCAN_FE_AND_LIN_INTR_SEL" offset="0x98" width="32">
    
  <bitfield begin="3" description="Writing a value would select the LIN interrupt in combination with HW_SYNC_IN and CAN filter events  for Frame timer 0 : 0th   interrupt bit is selected 1 : 1st interrupt bit is selected" end="3" id="lin_intr_sel" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Writing a value 'N' would select Nth filter interrupt combination with SYNC_IN(IO) for triggering timing engine Example: writing 3'd&lt;1-7> selects MCAN_FE_INT&lt;1-7> respectively" end="0" id="mcan_fe_sel" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="APPSS_MCANA_INT_CLR" description="" id="APPSS_MCANA_INT_CLR" offset="0x9C" width="32">
    
  <bitfield begin="31" description="Interrupt Clear for 32 MCANSS TX DMA interrupts. Writing 1'b1 to bit&lt;0-31> clears interrupt source &lt;0-31> respectively in MCANA" end="0" id="mcan_int_clr" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_MCANA_INT_MASK" description="" id="APPSS_MCANA_INT_MASK" offset="0xA0" width="32">
    
  <bitfield begin="31" description="Interrupt Mask for 32 MCANSS TX DMA interrupts. Writing 1'b1 to bit&lt;0-31> masks interrupt source &lt;0-31> respectively in MCANA" end="0" id="mcan_int_mask" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_MCANA_INT_STAT" description="" id="APPSS_MCANA_INT_STAT" offset="0xA4" width="32">
    
  <bitfield begin="31" description="Interrupt status for 32 MCANSS TX DMA interrupts. 1'b1 in bit&lt;0-31> gives pending status for interrupt &lt;0-31> respectively in MCANA" end="0" id="mcan_int_status" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_CM4_GLOBAL_CONFIG" description="" id="APPSS_CM4_GLOBAL_CONFIG" offset="0xA8" width="32">
    
  <bitfield begin="0" description="Reserved" end="0" id="teinit" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="RESERVED1" description="" id="RESERVED1" offset="0xAC" width="32">
    
  <bitfield begin="31" description="reserved" end="0" id="res" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_CM4_ROM_ECLIPSE" description="" id="APPSS_CM4_ROM_ECLIPSE" offset="0xB0" width="32">
    
  <bitfield begin="10" description="writing 3'b111 ensures ROM-Eclipsing happens only after CPU sys reset. Orelse it will be a immediate change." end="8" id="memswap_wait" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="2" description="writing '111' ensures eclipsing of CPU_ROM immediately if memswap_wait is not set. If memswap_wait is set then ROM is eclipsed after CPU sys reset assertion." end="0" id="memswap" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="APPSS_CM4_STATUS_REG" description="" id="APPSS_CM4_STATUS_REG" offset="0xB4" width="32">
    
  <bitfield begin="0" description="reading 1: confirms ROM is Eclipsed from with RAM for the CPU." end="0" id="memswap" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_AHB_CTRL" description="" id="APPSS_AHB_CTRL" offset="0xB8" width="32">
    
  <bitfield begin="0" description="Ti internal Register. Modifying this register is not recommended Signal decides whehter ahb interface is enabled or not." end="0" id="cpu0_ahb_init" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="ESM_GATING0" description="" id="ESM_GATING0" offset="0xBC" width="32">
    
  <bitfield begin="31" description="bit3:0 : writing '000' will ungate the ESM_GRP2_ERROR_0 bit7:4 : writing '000' will ungate the ESM_GRP2_ERROR_1        bit31:28 : writing '000' will ungate the ESM_GRP2_ERROR_7" end="0" id="esm_gating" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="ESM_GATING1" description="" id="ESM_GATING1" offset="0xC0" width="32">
    
  <bitfield begin="31" description="bit3:0 : writing '000' will ungate the ESM_GRP2_ERROR_8 bit7:4 : writing '000' will ungate the ESM_GRP2_ERROR_9        bit31:28 : writing '000' will ungate the ESM_GRP2_ERROR_15" end="0" id="esm_gating" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="ESM_GATING2" description="" id="ESM_GATING2" offset="0xC4" width="32">
    
  <bitfield begin="31" description="bit3:0 : writing '000' will ungate the ESM_GRP2_ERROR_16 bit7:4 : writing '000' will ungate the ESM_GRP2_ERROR_17        bit31:28 : writing '000' will ungate the ESM_GRP2_ERROR_23" end="0" id="esm_gating" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="ESM_GATING3" description="" id="ESM_GATING3" offset="0xC8" width="32">
    
  <bitfield begin="31" description="bit3:0 : writing '000' will ungate the ESM_GRP2_ERROR_24 bit7:4 : writing '000' will ungate the ESM_GRP2_ERROR_25        bit31:28 : writing '000' will ungate the ESM_GRP2_ERROR_31" end="0" id="esm_gating" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="ESM_GATING4" description="" id="ESM_GATING4" offset="0xCC" width="32">
    
  <bitfield begin="31" description="bit3:0 : writing '000' will ungate the ESM_GRP3_ERROR_0 bit7:4 : writing '000' will ungate the ESM_GRP3_ERROR_1        bit31:28 : writing '000' will ungate the ESM_GRP3_ERROR_7" end="0" id="esm_gating" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="ESM_GATING5" description="" id="ESM_GATING5" offset="0xD0" width="32">
    
  <bitfield begin="31" description="bit3:0 : writing '000' will ungate the ESM_GRP3_ERROR_8 bit7:4 : writing '000' will ungate the ESM_GRP3_ERROR_9        bit31:28 : writing '000' will ungate the ESM_GRP3_ERROR_15" end="0" id="esm_gating" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="ESM_GATING6" description="" id="ESM_GATING6" offset="0xD4" width="32">
    
  <bitfield begin="31" description="bit3:0 : writing '000' will ungate the ESM_GRP3_ERROR_16 bit7:4 : writing '000' will ungate the ESM_GRP3_ERROR_17        bit31:28 : writing '000' will ungate the ESM_GRP3_ERROR_23" end="0" id="esm_gating" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="ESM_GATING7" description="" id="ESM_GATING7" offset="0xD8" width="32">
    
  <bitfield begin="31" description="bit3:0 : writing '000' will ungate the ESM_GRP3_ERROR_24 bit7:4 : writing '000' will ungate the ESM_GRP3_ERROR_25        bit31:28 : writing '000' will ungate the ESM_GRP3_ERROR_31" end="0" id="esm_gating" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_CM4_HALT" description="" id="APPSS_CM4_HALT" offset="0xDC" width="32">
    
  <bitfield begin="2" description="RESERVED" end="0" id="halt" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="APPSS_CM4_EVENT" description="" id="APPSS_CM4_EVENT" offset="0xE0" width="32">
    
  <bitfield begin="2" description="Reserved Register for R  &amp; D" end="0" id="cpu0_event" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="SPIA_IO_CFG" description="" id="SPIA_IO_CFG" offset="0xE4" width="32">
    
  <bitfield begin="16" description="RESERVED" end="16" id="miso_oen_by_cs" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="RESERVED" end="8" id="cs_pol" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="RESERVED" end="0" id="cs_deact" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPIB_IO_CFG" description="" id="SPIB_IO_CFG" offset="0xE8" width="32">
    
  <bitfield begin="16" description="RESERVED" end="16" id="miso_oen_by_cs" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="RESERVED" end="8" id="cs_pol" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="RESERVED" end="0" id="cs_deact" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPI_HOST_IRQ" description="" id="SPI_HOST_IRQ" offset="0xEC" width="32">
    
  <bitfield begin="0" description="RESERVED" end="0" id="host_irq" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="TPTC_DBS_CONFIG" description="" id="TPTC_DBS_CONFIG" offset="0xF0" width="32">
    
  <bitfield begin="13" description="Default burst size tieoff value for TPTC_B1" end="12" id="tptc_b1" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="9" description="Default burst size tieoff value for TPTC_B0" end="8" id="tptc_b0" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="5" description="Default burst size tieoff value for TPTC_A1" end="4" id="tptc_a1" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="1" description="Default burst size tieoff value for TPTC_A0" end="0" id="tptc_a0" rwaccess="RW" width="2"></bitfield>
  </register>
  
  
  <register acronym="TPCC_PARITY_CTRL" description="" id="TPCC_PARITY_CTRL" offset="0xF4" width="32">
    
  <bitfield begin="20" description="Write pulse bit field: parity clear bit. Writing 1'b1 will clear the tpcc_b_parity_addr" end="20" id="tpcc_b_parity_err_clr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Write pulse bit field: parity clear bit. Writing 1'b1 will clear the tpcc_a_parity_addr" end="16" id="tpcc_a_parity_err_clr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="parity test enable for tpcc b" end="12" id="tpcc_b_parity_testen" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="parity en for tpcc b" end="8" id="tpcc_b_parity_en" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="parity test enable for tpcc a" end="4" id="tpcc_a_parity_testen" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="writing 1'b1 enables parity for TPCC_A" end="0" id="tpcc_a_parity_en" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="TPCC_PARITY_STATUS" description="" id="TPCC_PARITY_STATUS" offset="0xF8" width="32">
    
  <bitfield begin="23" description="address where parity error happened for tpccb" end="16" id="tpcc_b_parity_addr" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="7" description="address where parity error happened for tpcca" end="0" id="tpcc_a_parity_addr" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="APPSS_DBG_ACK_CTL0" description="" id="APPSS_DBG_ACK_CTL0" offset="0xFC" width="32">
    
  <bitfield begin="28" description="Enable Suspend control for the peripheral.  0 :Peripheral not suspended along with processor 1: Peripehal Suspended along with procesor" end="28" id="lin" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Enable Suspend control for the peripheral.  0 :Peripheral not suspended along with processor 1: Peripehal Suspended along with procesor" end="24" id="scib" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="20" description="Enable Suspend control for the peripheral.  0 :Peripheral not suspended along with processor 1: Peripehal Suspended along with procesor" end="20" id="scia" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Enable Suspend control for the peripheral.  0 :Peripheral not suspended along with processor 1: Peripehal Suspended along with procesor" end="16" id="i2c" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Enable Suspend control for the peripheral.  0 :Peripheral not suspended along with processor 1: Peripehal Suspended along with procesor" end="12" id="mcrc" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Enable Suspend control for the peripheral.  0 :Peripheral not suspended along with processor 1: Peripehal Suspended along with procesor" end="8" id="wdt" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Enable Suspend control for the peripheral.  0 :Peripheral not suspended along with processor 1: Peripehal Suspended along with procesor" end="4" id="rti" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Enable Suspend control for the peripheral.  0 :Peripheral not suspended along with processor 1: Peripehal Suspended along with procesor" end="0" id="can" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="DEBUGSS_CSETB_FLUSH" description="" id="DEBUGSS_CSETB_FLUSH" offset="0x100" width="32">
    
  <bitfield begin="10" description="RESERVED" end="10" id="CSETB_FULL" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="9" description="RESERVED" end="9" id="CSETB_ACQ_COMPLETE" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="8" description="RESERVED" end="8" id="CSETB_FLUSHINACK" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="RESERVED" end="0" id="CSETB_FLUSHIN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CPSW_CONTROL" description="" id="CPSW_CONTROL" offset="0x104" width="32">
    
  <bitfield begin="16" description="Reserved" end="16" id="rgmii1_id_mode" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Reserved" end="8" id="rmii_ref_clk_oe_n" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Reserved" end="0" id="port1_mode_sel" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_ERRAGG_MASK0" description="" id="APPSS_ERRAGG_MASK0" offset="0x108" width="32">
    
  <bitfield begin="25" description="Mask Interrupt from AHB slaves to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="25" id="app_ahb_slv_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Mask Interrupt from AHB slaves to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="24" id="app_ahb_slv_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="Mask Interrupt from FEC_ERRORAGG to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="23" id="fec_erroragg" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="22" description="Mask Interrupt from APP_SHARED_MEM to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="22" id="app_shared_mem" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="21" description="Mask Interrupt from APP_AHB to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="21" id="app_ahb" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="20" description="Mask Interrupt from APP_MPU to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="20" id="app_mpu" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="Mask Interrupt from TOP_EFUSE_CTRL to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="19" id="top_efuse_ctrl_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="Mask Interrupt from FEC_ERRORAGG to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="18" id="top_efuse_ctrl_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="Mask Interrupt from TOP_PRCM to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="17" id="top_prcm_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Mask Interrupt from TOP_PRCM to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="16" id="top_prcm_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="Mask Interrupt from FRAME_TIMER to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="15" id="frame_timer_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Mask Interrupt from FRAME_TIMER to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="14" id="frame_timer_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Mask Interrupt from APLL_CTRL to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="13" id="apll_ctrl_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Mask Interrupt from APLL_CTRL to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="12" id="apll_ctrl_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Mask Interrupt from TOPSS_CTRL to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="11" id="topss_ctrl_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Mask Interrupt from TOPSS_CTRL to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="10" id="topss_ctrl_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Mask Interrupt from PLLDIG_CTRL to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="9" id="plldig_ctrl_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Mask Interrupt from PLLDIG_CTRL to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="8" id="plldig_ctrl_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Mask Interrupt from ADCBUFF_CTRL to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="7" id="adcbuff_ctrl_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Mask Interrupt from ADCBUFF_CTRL to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="6" id="adcbuff_ctrl_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Mask Interrupt from APP_IDALLOC to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="5" id="app_idalloc_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Mask Interrupt from APP_IDALLOC to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="4" id="app_idalloc_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Mask Interrupt from APP_CTRL to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="3" id="app_ctrl_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Mask Interrupt from APP_CTRL to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="2" id="app_ctrl_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Mask Interrupt from APP_RCM to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="1" id="app_rcm_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Mask Interrupt from APP_RCM to aggregated Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="0" id="app_rcm_rd" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_ERRAGG_STATUS0" description="" id="APPSS_ERRAGG_STATUS0" offset="0x10C" width="32">
    
  <bitfield begin="25" description="Status of Interrupt from AHB_SLAVE Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="25" id="app_ahb_slv_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Status of Interrupt from AHB_SLAVE Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="24" id="app_ahb_slv_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="Status of Interrupt from FEC_ERRORAGG Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="23" id="fec_erroragg" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="22" description="Status of Interrupt from APP_SHARED_MEM Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="22" id="app_shared_mem_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="21" description="Status of Interrupt from APP_AHB Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="21" id="app_ahb_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="20" description="Status of Interrupt from APP_MPU Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="20" id="app_mpu_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="Status of Interrupt from TOP_EFUSE_CTRL Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="19" id="top_efuse_ctrl_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="Status of Interrupt from TOP_EFUSE_CTRL Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="18" id="top_efuse_ctrl_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="Status of Interrupt from TOP_PRCM Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="17" id="top_prcm_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Status of Interrupt from TOP_PRCM Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="16" id="top_prcm_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="Status of Interrupt from FRAME_TIMER Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="15" id="frame_timer_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Status of Interrupt from FRAME_TIMER Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="14" id="frame_timer_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Status of Interrupt from APLL_CTRL Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="13" id="apll_ctrl_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Status of Interrupt from APLL_CTRL Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="12" id="apll_ctrl_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Status of Interrupt from TOPSS_CTRL Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="11" id="topss_ctrl_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Status of Interrupt from TOPSS_CTRL Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="10" id="topss_ctrl_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Status of Interrupt from PLLDIG_CTRL Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="9" id="plldig_ctrl_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Status of Interrupt from PLLDIG_CTRL Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="8" id="plldig_ctrl_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Status of Interrupt from ADCBUFF_CTRL Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="7" id="adcbuff_ctrl_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Status of Interrupt from ADCBUFF_CTRL Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="6" id="adcbuff_ctrl_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Status of Interrupt from APP_IDALLOC Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="5" id="app_idalloc_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Status of Interrupt from APP_IDALLOC Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="4" id="app_idalloc_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Status of Interrupt from APP_CTRL Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="3" id="app_ctrl_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Status of Interrupt from APP_CTRL Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="2" id="app_ctrl_rd" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Status of Interrupt from APP_RCM Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="1" id="app_rcm_wr" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Status of Interrupt from APP_RCM Set only if Interupt is unmasked in APPSS_ERRAGG_MASK0 Wrie 0x1 to clear this interrupt." end="0" id="app_rcm_rd" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_TPCC_A_ERRAGG_MASK" description="" id="APPSS_TPCC_A_ERRAGG_MASK" offset="0x190" width="32">
    
  <bitfield begin="26" description="Mask Error from TPTC_A1 to aggregated Error TPCC_A_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="26" id="tptc_a1_read_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Mask Error from TPTC_A0 to aggregated Error TPCC_A_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="25" id="tptc_a0_read_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Mask Error from TPCC_A to aggregated Error TPCC_A_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="24" id="tpcc_a_read_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="Mask Error from TPTC_A1 to aggregated Error TPCC_A_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="18" id="tptc_a1_write_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="Mask Error from TPTC_A0 to aggregated Error TPCC_A_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="17" id="tptc_a0_write_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Mask Error from TPCC_A to aggregated Error TPCC_A_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="16" id="tpcc_a_write_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Mask Error from TPCC_A to aggregated Error TPCC_A_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="4" id="tpcc_a_par_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Mask Error from TPTC_A1 to aggregated Error TPCC_A_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="3" id="tptc_a1_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Mask Error from TPTC_A0 to aggregated Error TPCC_A_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="2" id="tptc_a0_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Mask Error from TPCC_A to aggregated Error TPCC_A_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="1" id="tpcc_a_mpint" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Mask Error from TPCC_A to aggregated Error TPCC_A_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="0" id="tpcc_a_errint" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_TPCC_A_ERRAGG_STATUS" description="" id="APPSS_TPCC_A_ERRAGG_STATUS" offset="0x194" width="32">
    
  <bitfield begin="26" description="Status of Error from TPTC_A1.  Set only if Interupt is unmasked in TPCC_A_ERRAGG_MASK Wrie 0x1 to clear this Error." end="26" id="tptc_a1_read_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Status of Error from TPTC_A0.  Set only if Interupt is unmasked in TPCC_A_ERRAGG_MASK Wrie 0x1 to clear this Error." end="25" id="tptc_a0_read_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Status of Error from TPCC_A.  Set only if Interupt is unmasked in TPCC_A_ERRAGG_MASK Wrie 0x1 to clear this Error." end="24" id="tpcc_a_read_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="Status of Error from TPTC_A1.  Set only if Interupt is unmasked in TPCC_A_ERRAGG_MASK Wrie 0x1 to clear this Error." end="18" id="tptc_a1_write_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="Status of Error from TPTC_A0.  Set only if Interupt is unmasked in TPCC_A_ERRAGG_MASK Wrie 0x1 to clear this Error." end="17" id="tptc_a0_write_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Status of Error from TPCC_A.  Set only if Interupt is unmasked in TPCC_A_ERRAGG_MASK Wrie 0x1 to clear this Error." end="16" id="tpcc_a_write_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Status of Error from TPCC_A.  Set only if Interupt is unmasked in TPCC_A_ERRAGG_MASK Wrie 0x1 to clear this Error." end="4" id="tpcc_a_par_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Status of Error from TPTC_A1.  Set only if Interupt is unmasked in TPCC_A_ERRAGG_MASK Wrie 0x1 to clear this Error." end="3" id="tptc_a1_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Status of Error from TPTC_A0.  Set only if Interupt is unmasked in TPCC_A_ERRAGG_MASK Wrie 0x1 to clear this Error." end="2" id="tptc_a0_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Status of Error from TPCC_A.  Set only if Interupt is unmasked in TPCC_A_ERRAGG_MASK Wrie 0x1 to clear this Error." end="1" id="tpcc_a_mpint" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Status of Error from TPCC_A.  Set only if Interupt is unmasked in TPCC_A_ERRAGG_MASK Wrie 0x1 to clear this Error." end="0" id="tpcc_a_errint" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_TPCC_A_ERRAGG_STATUS_RAW" description="" id="APPSS_TPCC_A_ERRAGG_STATUS_RAW" offset="0x198" width="32">
    
  <bitfield begin="26" description="Raw Status of Error from TPTC_A1.  Set irrespective if the Interupt is masked or unmasked in TPCC_A_ERRAGG_MASK" end="26" id="tptc_a1_read_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Raw Status of Error from TPTC_A0.  Set irrespective if the Interupt is masked or unmasked in TPCC_A_ERRAGG_MASK" end="25" id="tptc_a0_read_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Raw Status of Error from TPCC_A.  Set irrespective if the Interupt is masked or unmasked in TPCC_A_ERRAGG_MASK" end="24" id="tpcc_a_read_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="Raw Status of Error from TPTC_A1.  Set irrespective if the Interupt is masked or unmasked in TPCC_A_ERRAGG_MASK" end="18" id="tptc_a1_write_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="Raw Status of Error from TPTC_A0.  Set irrespective if the Interupt is masked or unmasked in TPCC_A_ERRAGG_MASK" end="17" id="tptc_a0_write_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Raw Status of Error from TPCC_A.  Set irrespective if the Interupt is masked or unmasked in TPCC_A_ERRAGG_MASK" end="16" id="tpcc_a_write_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Raw Status of Error from TPCC_A.  Set irrespective if the Interupt is masked or unmasked in TPCC_A_ERRAGG_MASK" end="4" id="tpcc_a_par_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Raw Status of Error from TPTC_A1.  Set irrespective if the Interupt is masked or unmasked in TPCC_A_ERRAGG_MASK" end="3" id="tptc_a1_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Raw Status of Error from TPTC_A0.  Set irrespective if the Interupt is masked or unmasked in TPCC_A_ERRAGG_MASK" end="2" id="tptc_a0_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Raw Status of Error from TPCC_A.  Set irrespective if the Interupt is masked or unmasked in TPCC_A_ERRAGG_MASK" end="1" id="tpcc_a_mpint" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Raw Status of Error from TPCC_A.  Set irrespective if the Interupt is masked or unmasked in TPCC_A_ERRAGG_MASK" end="0" id="tpcc_a_errint" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_TPCC_A_INTAGG_MASK" description="" id="APPSS_TPCC_A_INTAGG_MASK" offset="0x214" width="32">
    
  <bitfield begin="17" description="Mask Interrupt from TPTC A1 to aggregated Interrupt TPCC_A_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="17" id="tptc_a1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Mask Interrupt from TPTC A0 to aggregated Interrupt TPCC_A_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="16" id="tptc_a0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Mask Interrupt from TPCC_A to aggregated Interrupt TPCC_A_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="8" id="tpcc_a_int7" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Mask Interrupt from TPCC_A to aggregated Interrupt TPCC_A_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="7" id="tpcc_a_int6" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Mask Interrupt from TPCC_A to aggregated Interrupt TPCC_A_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="6" id="tpcc_a_int5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Mask Interrupt from TPCC_A to aggregated Interrupt TPCC_A_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="5" id="tpcc_a_int4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Mask Interrupt from TPCC_A to aggregated Interrupt TPCC_A_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="4" id="tpcc_a_int3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Mask Interrupt from TPCC_A to aggregated Interrupt TPCC_A_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="3" id="tpcc_a_int2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Mask Interrupt from TPCC_A to aggregated Interrupt TPCC_A_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="2" id="tpcc_a_int1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Mask Interrupt from TPCC A to aggregated Interrupt TPCC_A_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="1" id="tpcc_a_int0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Mask Interrupt from TPCC_A to aggregated Interrupt TPCC_A_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="0" id="tpcc_a_intg" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_WPH" description="" id="HW_SPARE_WPH" offset="0x218" width="32">
    
  <bitfield begin="17" description="Status of Interrupt from TPTC A1.  Set only if Interupt is unmasked in TPCC_A_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="17" id="tptc_a1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Status of Interrupt from TPTC A0.  Set only if Interupt is unmasked in TPCC_A_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="16" id="tptc_a0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Status of Interrupt from TPCC_A.  Set only if Interupt is unmasked in TPCC_A_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="8" id="tpcc_a_int7" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Status of Interrupt from TPCC_A.  Set only if Interupt is unmasked in TPCC_A_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="7" id="tpcc_a_int6" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Status of Interrupt from TPCC_A.  Set only if Interupt is unmasked in TPCC_A_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="6" id="tpcc_a_int5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Status of Interrupt from TPCC_A.  Set only if Interupt is unmasked in TPCC_A_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="5" id="tpcc_a_int4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Status of Interrupt from TPCC_A.  Set only if Interupt is unmasked in TPCC_A_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="4" id="tpcc_a_int3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Status of Interrupt from TPCC_A.  Set only if Interupt is unmasked in TPCC_A_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="3" id="tpcc_a_int2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Status of Interrupt from TPCC_A.  Set only if Interupt is unmasked in TPCC_A_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="2" id="tpcc_a_int1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Status of Interrupt from TPCC A  Set only if Interupt is unmasked in TPCC_A_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="1" id="tpcc_a_int0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Status of Interrupt from TPCC_A.  Set only if Interupt is unmasked in TPCC_A_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="0" id="tpcc_a_intg" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_TPCC_A_INTAGG_STATUS_RAW" description="" id="APPSS_TPCC_A_INTAGG_STATUS_RAW" offset="0x21C" width="32">
    
  <bitfield begin="17" description="Raw Status of Interrupt from TPTC A1.  Set irrespective if the Interupt is masked or unmasked in TPCC_A_INTAGG_MASK" end="17" id="tptc_a1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Raw Status of Interrupt from TPTC A0.  Set irrespective if the Interupt is masked or unmasked in TPCC_A_INTAGG_MASK" end="16" id="tptc_a0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Raw Status of Interrupt from TPCC_A.  Set irrespective if the Interupt is masked or unmasked in TPCC_C_INTAGG_MASK" end="8" id="tpcc_a_int7" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Raw Status of Interrupt from TPCC_A.  Set irrespective if the Interupt is masked or unmasked in TPCC_C_INTAGG_MASK" end="7" id="tpcc_a_int6" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Raw Status of Interrupt from TPCC_A.  Set irrespective if the Interupt is masked or unmasked in TPCC_C_INTAGG_MASK" end="6" id="tpcc_a_int5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Raw Status of Interrupt from TPCC_A.  Set irrespective if the Interupt is masked or unmasked in TPCC_C_INTAGG_MASK" end="5" id="tpcc_a_int4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Raw Status of Interrupt from TPCC_A.  Set irrespective if the Interupt is masked or unmasked in TPCC_C_INTAGG_MASK" end="4" id="tpcc_a_int3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Raw Status of Interrupt from TPCC_A.  Set irrespective if the Interupt is masked or unmasked in TPCC_C_INTAGG_MASK" end="3" id="tpcc_a_int2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Raw Status of Interrupt from TPCC_A.  Set irrespective if the Interupt is masked or unmasked in TPCC_C_INTAGG_MASK" end="2" id="tpcc_a_int1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Raw Status of Interrupt from TPCC A.  Set irrespective if the Interupt is masked or unmasked in TPCC_A_INTAGG_MASK" end="1" id="tpcc_a_int0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Raw Status of Interrupt from TPCC_A.  Set irrespective if the Interupt is masked or unmasked in TPCC_C_INTAGG_MASK" end="0" id="tpcc_a_intg" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_TPCC_B_ERRAGG_MASK" description="" id="APPSS_TPCC_B_ERRAGG_MASK" offset="0x274" width="32">
    
  <bitfield begin="26" description="Mask Error from TPTC_B0 to aggregated Error TPCC_B_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="26" id="tptc_b1_read_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Mask Error from TPTC_B0 to aggregated Error TPCC_B_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="25" id="tptc_b0_read_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Mask Error from TPCC_B to aggregated Error TPCC_B_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="24" id="tpcc_b_read_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="Mask Error from TPTC_B0 to aggregated Error TPCC_B_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="17" id="tptc_b0_write_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Mask Error from TPCC_B to aggregated Error TPCC_B_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="16" id="tpcc_b_write_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Mask Error from TPTC_B0 to aggregated Error TPCC_B_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="14" id="tptc_b1_write_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Mask Error from TPCC_B to aggregated Error TPCC_B_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="4" id="tpcc_b_par_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Mask Error from TPTC_B0 to aggregated Error TPCC_B_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="3" id="tptc_b1_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Mask Error from TPTC_B0 to aggregated Error TPCC_B_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="2" id="tptc_b0_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Mask Error from TPCC_B to aggregated Error TPCC_B_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="1" id="tpcc_b_mpint" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Mask Error from TPCC_B to aggregated Error TPCC_B_ERRAGG 1 : Error is Masked 0 : Error is Unmasked" end="0" id="tpcc_b_errint" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_TPCC_B_ERRAGG_STATUS" description="" id="APPSS_TPCC_B_ERRAGG_STATUS" offset="0x278" width="32">
    
  <bitfield begin="26" description="Status of Error from TPTC_B0.  Set only if Interupt is unmasked in TPCC_B_ERRAGG_MASK Wrie 0x1 to clear this Error." end="26" id="tptc_b1_read_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Status of Error from TPTC_B0.  Set only if Interupt is unmasked in TPCC_B_ERRAGG_MASK Wrie 0x1 to clear this Error." end="25" id="tptc_b0_read_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Status of Error from TPCC_B.  Set only if Interupt is unmasked in TPCC_B_ERRAGG_MASK Wrie 0x1 to clear this Error." end="24" id="tpcc_b_read_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="Status of Error from TPTC_B0.  Set only if Interupt is unmasked in TPCC_B_ERRAGG_MASK Wrie 0x1 to clear this Error." end="17" id="tptc_b0_write_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Status of Error from TPCC_B.  Set only if Interupt is unmasked in TPCC_B_ERRAGG_MASK Wrie 0x1 to clear this Error." end="16" id="tpcc_b_write_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Status of Error from TPTC_B0.  Set only if Interupt is unmasked in TPCC_B_ERRAGG_MASK Wrie 0x1 to clear this Error." end="14" id="tptc_b1_write_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Status of Error from TPCC_B.  Set only if Interupt is unmasked in TPCC_B_ERRAGG_MASK Wrie 0x1 to clear this Error." end="4" id="tpcc_b_par_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Status of Error from TPTC_B0.  Set only if Interupt is unmasked in TPCC_B_ERRAGG_MASK Wrie 0x1 to clear this Error." end="3" id="tptc_b1_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Status of Error from TPTC_B0.  Set only if Interupt is unmasked in TPCC_B_ERRAGG_MASK Wrie 0x1 to clear this Error." end="2" id="tptc_b0_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Status of Error from TPCC_B.  Set only if Interupt is unmasked in TPCC_B_ERRAGG_MASK Wrie 0x1 to clear this Error." end="1" id="tpcc_b_mpint" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Status of Error from TPCC_B.  Set only if Interupt is unmasked in TPCC_B_ERRAGG_MASK Wrie 0x1 to clear this Error." end="0" id="tpcc_b_errint" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_TPCC_B_ERRAGG_STATUS_RAW" description="" id="APPSS_TPCC_B_ERRAGG_STATUS_RAW" offset="0x27C" width="32">
    
  <bitfield begin="26" description="Raw Status of Error from TPTC_B0.  Set irrespective if the Interupt is masked or unmasked in TPCC_B_ERRAGG_MASK" end="26" id="tptc_b1_read_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Raw Status of Error from TPTC_B0.  Set irrespective if the Interupt is masked or unmasked in TPCC_B_ERRAGG_MASK" end="25" id="tptc_b0_read_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Raw Status of Error from TPCC_B.  Set irrespective if the Interupt is masked or unmasked in TPCC_B_ERRAGG_MASK" end="24" id="tpcc_b_read_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="Raw Status of Error from TPTC_B0.  Set irrespective if the Interupt is masked or unmasked in TPCC_B_ERRAGG_MASK" end="17" id="tptc_b0_write_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Raw Status of Error from TPCC_B.  Set irrespective if the Interupt is masked or unmasked in TPCC_B_ERRAGG_MASK" end="16" id="tpcc_b_write_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Raw Status of Error from TPTC_B0.  Set irrespective if the Interupt is masked or unmasked in TPCC_B_ERRAGG_MASK" end="14" id="tptc_b1_write_access_error" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Raw Status of Error from TPCC_B.  Set irrespective if the Interupt is masked or unmasked in TPCC_B_ERRAGG_MASK" end="4" id="tpcc_b_par_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Raw Status of Error from TPTC_B0.  Set irrespective if the Interupt is masked or unmasked in TPCC_B_ERRAGG_MASK" end="3" id="tptc_b1_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Raw Status of Error from TPTC_B0.  Set irrespective if the Interupt is masked or unmasked in TPCC_B_ERRAGG_MASK" end="2" id="tptc_b0_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Raw Status of Error from TPCC_B.  Set irrespective if the Interupt is masked or unmasked in TPCC_B_ERRAGG_MASK" end="1" id="tpcc_b_mpint" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Raw Status of Error from TPCC_B.  Set irrespective if the Interupt is masked or unmasked in TPCC_B_ERRAGG_MASK" end="0" id="tpcc_b_errint" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_TPCC_B_INTAGG_MASK" description="" id="APPSS_TPCC_B_INTAGG_MASK" offset="0x2EC" width="32">
    
  <bitfield begin="17" description="Mask Interrupt from TPTC A0 to aggregated Interrupt TPCC_A_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="17" id="tptc_b1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Mask Interrupt from TPTC A0 to aggregated Interrupt TPCC_A_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="16" id="tptc_b0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Mask Interrupt from TPCC_B to aggregated Interrupt TPCC_B_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="8" id="tpcc_b_int7" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Mask Interrupt from TPCC_B to aggregated Interrupt TPCC_B_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="7" id="tpcc_b_int6" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Mask Interrupt from TPCC_B to aggregated Interrupt TPCC_B_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="6" id="tpcc_b_int5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Mask Interrupt from TPCC_B to aggregated Interrupt TPCC_B_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="5" id="tpcc_b_int4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Mask Interrupt from TPCC_B to aggregated Interrupt TPCC_B_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="4" id="tpcc_b_int3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Mask Interrupt from TPCC_B to aggregated Interrupt TPCC_B_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="3" id="tpcc_b_int2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Mask Interrupt from TPCC_B to aggregated Interrupt TPCC_B_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="2" id="tpcc_b_int1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Mask Interrupt from TPCC_B to aggregated Interrupt TPCC_B_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="1" id="tpcc_b_int0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Mask Interrupt from TPCC_B to aggregated Interrupt TPCC_B_INTAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="0" id="tpcc_b_intg" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_TPCC_B_INTAGG_STATUS" description="" id="APPSS_TPCC_B_INTAGG_STATUS" offset="0x2F0" width="32">
    
  <bitfield begin="17" description="Status of Interrupt from TPTC A0.  Set only if Interupt is unmasked in TPCC_A_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="17" id="tptc_b1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Status of Interrupt from TPTC A0.  Set only if Interupt is unmasked in TPCC_A_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="16" id="tptc_b0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Status of Interrupt from TPCC_B.  Set only if Interupt is unmasked in TPCC_B_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="8" id="tpcc_b_int7" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Status of Interrupt from TPCC_B.  Set only if Interupt is unmasked in TPCC_B_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="7" id="tpcc_b_int6" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Status of Interrupt from TPCC_B.  Set only if Interupt is unmasked in TPCC_B_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="6" id="tpcc_b_int5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Status of Interrupt from TPCC_B.  Set only if Interupt is unmasked in TPCC_B_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="5" id="tpcc_b_int4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Status of Interrupt from TPCC_B.  Set only if Interupt is unmasked in TPCC_B_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="4" id="tpcc_b_int3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Status of Interrupt from TPCC_B.  Set only if Interupt is unmasked in TPCC_B_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="3" id="tpcc_b_int2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Status of Interrupt from TPCC_B.  Set only if Interupt is unmasked in TPCC_B_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="2" id="tpcc_b_int1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Status of Interrupt from TPCC_B.  Set only if Interupt is unmasked in TPCC_B_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="1" id="tpcc_b_int0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Status of Interrupt from TPCC_B.  Set only if Interupt is unmasked in TPCC_B_INTAGG_MASK Wrie 0x1 to clear this interrupt." end="0" id="tpcc_b_intg" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_TPCC_B_INTAGG_STATUS_RAW" description="" id="APPSS_TPCC_B_INTAGG_STATUS_RAW" offset="0x2F4" width="32">
    
  <bitfield begin="17" description="Raw Status of Interrupt from TPTC A0.  Set irrespective if the Interupt is masked or unmasked in TPCC_A_INTAGG_MASK" end="17" id="tptc_b1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Raw Status of Interrupt from TPTC A0.  Set irrespective if the Interupt is masked or unmasked in TPCC_A_INTAGG_MASK" end="16" id="tptc_b0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Raw Status of Interrupt from TPCC_B.  Set irrespective if the Interupt is masked or unmasked in TPCC_C_INTAGG_MASK" end="8" id="tpcc_b_int7" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Raw Status of Interrupt from TPCC_B.  Set irrespective if the Interupt is masked or unmasked in TPCC_C_INTAGG_MASK" end="7" id="tpcc_b_int6" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Raw Status of Interrupt from TPCC_B.  Set irrespective if the Interupt is masked or unmasked in TPCC_C_INTAGG_MASK" end="6" id="tpcc_b_int5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Raw Status of Interrupt from TPCC_B.  Set irrespective if the Interupt is masked or unmasked in TPCC_C_INTAGG_MASK" end="5" id="tpcc_b_int4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Raw Status of Interrupt from TPCC_B.  Set irrespective if the Interupt is masked or unmasked in TPCC_C_INTAGG_MASK" end="4" id="tpcc_b_int3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Raw Status of Interrupt from TPCC_B.  Set irrespective if the Interupt is masked or unmasked in TPCC_C_INTAGG_MASK" end="3" id="tpcc_b_int2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Raw Status of Interrupt from TPCC_B.  Set irrespective if the Interupt is masked or unmasked in TPCC_C_INTAGG_MASK" end="2" id="tpcc_b_int1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Raw Status of Interrupt from TPCC_B.  Set irrespective if the Interupt is masked or unmasked in TPCC_C_INTAGG_MASK" end="1" id="tpcc_b_int0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Raw Status of Interrupt from TPCC_B.  Set irrespective if the Interupt is masked or unmasked in TPCC_C_INTAGG_MASK" end="0" id="tpcc_b_intg" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_MPU_ERRAGG_MASK" description="" id="APPSS_MPU_ERRAGG_MASK" offset="0x2F8" width="32">
    
  <bitfield begin="16" description="Mask Interrupt from FECSS MPU to aggregated Interrupt MPU_PROT_AGG_ERR 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="16" id="fecss_mpu" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Mask Interrupt from APSS MPU to aggregated Interrupt MPU_PROT_AGG_ERR 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="0" id="appss_mpu" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_MPU_ERRAGG_STATUS" description="" id="APPSS_MPU_ERRAGG_STATUS" offset="0x2FC" width="32">
    
  <bitfield begin="16" description="Status of Interrupt from FECSS MPU.  Set only if Interupt is unmasked in APPSS_MPU_ERRAGG_MASK Wrie 0x1 to clear this interrupt." end="16" id="fecss_mpu" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Status of Interrupt from APSS MPU.  Set only if Interupt is unmasked in APPSS_MPU_ERRAGG_MASK Wrie 0x1 to clear this interrupt." end="0" id="appss_mpu" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_MPU_ERRAGG_STATUS_RAW" description="" id="APPSS_MPU_ERRAGG_STATUS_RAW" offset="0x300" width="32">
    
  <bitfield begin="16" description="Raw Status of FECSS MPU PROT ERR.  Set irrespective if the Interupt is masked or unmasked in APPSS_MPU_ERRAGG_MASK" end="16" id="fecss_mpu" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Raw Status of Interrupt from APSS MPU PROT ERR  Set irrespective if the Interupt is masked or unmasked in APPSS_MPU_ERRAGG_MASK" end="0" id="appss_mpu" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_QSPI_CONFIG" description="" id="APPSS_QSPI_CONFIG" offset="0x304" width="32">
    
  <bitfield begin="8" description="Reserved" end="8" id="clk_loopback" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Reserved" end="0" id="ext_clk" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_CTI_TRIG_SEL" description="" id="APPSS_CTI_TRIG_SEL" offset="0x308" width="32">
    
  <bitfield begin="7" description="Used for selecting the trigger source for 8th trigger of CTI" end="0" id="trig8_sel" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="APPSS_DBGSS_CTI_TRIG_SEL" description="" id="APPSS_DBGSS_CTI_TRIG_SEL" offset="0x30C" width="32">
    
  <bitfield begin="23" description="Reserved" end="16" id="trig3" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="8" id="trig2" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Reserved" end="0" id="trig1" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="APPSS_BOOT_INFO_REG0" description="" id="APPSS_BOOT_INFO_REG0" offset="0x310" width="32">
    
  <bitfield begin="31" description="Reserved Register for Software use" end="0" id="config" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_BOOT_INFO_REG1" description="" id="APPSS_BOOT_INFO_REG1" offset="0x314" width="32">
    
  <bitfield begin="31" description="Reserved Register for Software use" end="0" id="config" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_BOOT_INFO_REG2" description="" id="APPSS_BOOT_INFO_REG2" offset="0x318" width="32">
    
  <bitfield begin="31" description="Reserved Register for Software use" end="0" id="config" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_BOOT_INFO_REG3" description="" id="APPSS_BOOT_INFO_REG3" offset="0x31C" width="32">
    
  <bitfield begin="31" description="Reserved Register for Software use" end="0" id="config" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_BOOT_INFO_REG4" description="" id="APPSS_BOOT_INFO_REG4" offset="0x320" width="32">
    
  <bitfield begin="31" description="Reserved Register for Software use" end="0" id="config" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_BOOT_INFO_REG5" description="" id="APPSS_BOOT_INFO_REG5" offset="0x324" width="32">
    
  <bitfield begin="31" description="Reserved Register for Software use" end="0" id="config" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_BOOT_INFO_REG6" description="" id="APPSS_BOOT_INFO_REG6" offset="0x328" width="32">
    
  <bitfield begin="31" description="Reserved Register for Software use" end="0" id="config" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_BOOT_INFO_REG7" description="" id="APPSS_BOOT_INFO_REG7" offset="0x32C" width="32">
    
  <bitfield begin="31" description="Reserved Register for Software use" end="0" id="config" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_TPTC_ECCAGGR_CLK_CNTRL" description="" id="APPSS_TPTC_ECCAGGR_CLK_CNTRL" offset="0x330" width="32">
    
  <bitfield begin="2" description="Writing  '0' will gate the clock to TPTC_B0-FIFO during  ECC-AGGR interaction(fault injection)" end="2" id="tptc_B0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Writing  '0' will gate the clock to TPTC_A1-FIFO during  ECC-AGGR interaction(fault injection)" end="1" id="tptc_A1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Writing  '0' will gate the clock to TPTC_A0-FIFO during  ECC-AGGR interaction(fault injection)" end="0" id="tptc_A0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_TPTC_BOUNDARY_CFG" description="" id="APPSS_TPTC_BOUNDARY_CFG" offset="0x334" width="32">
    
  <bitfield begin="29" description="6 bit signal used for deciding the boundary crossing size for CID-RID-SID reordering of TPTC_B1 Example: writing 6'd19 decidies boundary to be 2^19  i.e. 512 KB" end="24" id="tptc_b1_size" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="21" description="6 bit signal used for deciding the boundary crossing size for CID-RID-SID reordering of TPTC_B0 Example: writing 6'd19 decidies boundary to be 2^19  i.e. 512 KB" end="16" id="tptc_b0_size" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="13" description="6 bit signal used for deciding the boundary crossing size for CID-RID-SID reordering of TPTC_A1 Example: writing 6'd19 decidies boundary to be 2^19  i.e. 512 KB" end="8" id="tptc_a1_size" rwaccess="RW" width="6"></bitfield>
    
  <bitfield begin="5" description="6 bit signal used for deciding the boundary crossing size for CID-RID-SID reordering of TPTC_A0 Example: writing 6'd19 decidies boundary to be 2^19  i.e. 512 KB" end="0" id="tptc_a0_size" rwaccess="RW" width="6"></bitfield>
  </register>
  
  
  <register acronym="APPSS_TPTC_XID_REORDER_CFG" description="" id="APPSS_TPTC_XID_REORDER_CFG" offset="0x338" width="32">
    
  <bitfield begin="24" description="writing 1'b1 will disable the CID-RID-SID reodering feature for TPTC_B1" end="24" id="tptc_b1_disable" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="writing 1'b1 will disable the CID-RID-SID reodering feature for TPTC_B0" end="16" id="tptc_b0_disable" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="writing 1'b1 will disable the CID-RID-SID reodering feature for TPTC_A1" end="8" id="tptc_a1_disable" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="writing 1'b1 will disable the CID-RID-SID reodering feature for TPTC_A0" end="0" id="tptc_a0_disable" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="HW_Sync_FE_CTRL" description="" id="HW_Sync_FE_CTRL" offset="0x33C" width="32">
    
  <bitfield begin="8" description="RESERVED" end="8" id="fe2_sel" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="RESERVED" end="0" id="fe1_sel" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_REG1" description="" id="HW_SPARE_REG1" offset="0x340" width="32">
    
  <bitfield begin="31" description="Resereved for R&amp;D" end="0" id="NU" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_REG2" description="" id="HW_SPARE_REG2" offset="0x344" width="32">
    
  <bitfield begin="31" description="Resereved for R&amp;D" end="0" id="NU" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_REG3" description="" id="HW_SPARE_REG3" offset="0x348" width="32">
    
  <bitfield begin="31" description="Resereved for R&amp;D" end="0" id="NU" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="NERROR_MASK" description="" id="NERROR_MASK" offset="0x34C" width="32">
    
  <bitfield begin="0" description="writing 1'b1 will mask the Nerror propagation to pad Writing 1'b0 will unmask the Nerror propagation to pad" end="0" id="mask" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RW0" description="" id="HW_SPARE_RW0" offset="0x350" width="32">
    
  <bitfield begin="31" description="Bit 0:  Writing 1'b1 will mask the hwa local ram agg serr propagation to ESM             Writing 1'b0 will unmask the hwa local ram agg serr propagation to ESM Bit 1 :  Writing 1'b1 will mask the hwa local ram agg uerr propagation to ESM              Writing 1'b0 will unmask the hwa local ram agg uerr propagation to ESM    Bit 2 to 31  Reserved" end="0" id="hw_spare_rw0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RW1" description="" id="HW_SPARE_RW1" offset="0x354" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rw1" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RW2" description="" id="HW_SPARE_RW2" offset="0x358" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rw2" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RW3" description="" id="HW_SPARE_RW3" offset="0x35C" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rw3" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RW4" description="" id="HW_SPARE_RW4" offset="0x360" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rw4" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RW5" description="" id="HW_SPARE_RW5" offset="0x364" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rw5" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RO0" description="" id="HW_SPARE_RO0" offset="0x368" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_ro0" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RO1" description="" id="HW_SPARE_RO1" offset="0x36C" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_ro1" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RO2" description="" id="HW_SPARE_RO2" offset="0x370" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_ro2" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RO3" description="" id="HW_SPARE_RO3" offset="0x374" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_ro3" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_REC" description="" id="HW_SPARE_REC" offset="0x378" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="31" id="hw_spare_rec31" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="30" description="Reserved for HW R&amp;D" end="30" id="hw_spare_rec30" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="29" description="Reserved for HW R&amp;D" end="29" id="hw_spare_rec29" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="28" description="Reserved for HW R&amp;D" end="28" id="hw_spare_rec28" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="Reserved for HW R&amp;D" end="27" id="hw_spare_rec27" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="26" description="Reserved for HW R&amp;D" end="26" id="hw_spare_rec26" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="Reserved for HW R&amp;D" end="25" id="hw_spare_rec25" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="Reserved for HW R&amp;D" end="24" id="hw_spare_rec24" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="Reserved for HW R&amp;D" end="23" id="hw_spare_rec23" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="22" description="Reserved for HW R&amp;D" end="22" id="hw_spare_rec22" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="21" description="Reserved for HW R&amp;D" end="21" id="hw_spare_rec21" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="20" description="Reserved for HW R&amp;D" end="20" id="hw_spare_rec20" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="19" description="Reserved for HW R&amp;D" end="19" id="hw_spare_rec19" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="18" description="Reserved for HW R&amp;D" end="18" id="hw_spare_rec18" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="17" description="Reserved for HW R&amp;D" end="17" id="hw_spare_rec17" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="16" description="Reserved for HW R&amp;D" end="16" id="hw_spare_rec16" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="15" description="Reserved for HW R&amp;D" end="15" id="hw_spare_rec15" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="Reserved for HW R&amp;D" end="14" id="hw_spare_rec14" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="Reserved for HW R&amp;D" end="13" id="hw_spare_rec13" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="Reserved for HW R&amp;D" end="12" id="hw_spare_rec12" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="Reserved for HW R&amp;D" end="11" id="hw_spare_rec11" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Reserved for HW R&amp;D" end="10" id="hw_spare_rec10" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Reserved for HW R&amp;D" end="9" id="hw_spare_rec9" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Reserved for HW R&amp;D" end="8" id="hw_spare_rec8" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Reserved for HW R&amp;D" end="7" id="hw_spare_rec7" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Reserved for HW R&amp;D" end="6" id="hw_spare_rec6" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Reserved for HW R&amp;D" end="5" id="hw_spare_rec5" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Reserved for HW R&amp;D" end="4" id="hw_spare_rec4" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Reserved for HW R&amp;D" end="3" id="hw_spare_rec3" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Reserved for HW R&amp;D" end="2" id="hw_spare_rec2" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Reserved for HW R&amp;D" end="1" id="hw_spare_rec1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rec0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APP_CTRL" description="" id="APP_CTRL" offset="0x37C" width="32">
    
  <bitfield begin="0" description="Reserved" end="0" id="ecc_disable_2k_ram" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="WIC_CTRL" description="" id="WIC_CTRL" offset="0x380" width="32">
    
  <bitfield begin="31" description="1 => The corresponding interrupt is Masked (interrupt will not be generated) 0 => The corresponding interrupt is UnMasked (interrupt will  be generated) 0 : ESM_HI_IRQ (NMI)  1 : ESM_LO_IRQ (INT#1)  2 : FECSS_FRAMETIMER_FRAME_START (INT#33)  3 : MUXED_FECSS_FRAME_START_OFFSET_INTR_TIME1 (INT#35)   4 : FECSS_FRAME_START_OFFSET_INTR_TIME2 (INT#36)   5 : FECSS_FRAME_START_OFFSET_INTR_TIME3 (INT#37)   6 : FECSS_BURST_START_OFFSET_TIME(INT#38)   7 : MUXED_APPSS_RTI1_RTI2_INT_REQ0(INT#43)   8 : MUXED_APPSS_RTI1_RTI2_INT_REQ1(INT#44)   9 : MUXED_APPSS_RTI1_RTI2_INT_REQ2(INT#45)   10 : MUXED_APPSS_RTI1_RTI2_INT_REQ3(INT#46)   11 : APPSS_SPI_IRQ_REQ(INT#14)  12 : SPI2_IRQ_REQ (part of INT#28)   13 : APPSS_LIN_INT0 (INT#10)  14 : APPSS_LIN_INT0 (INT#11)   15 : APPSS_MCAN_INT0(INT#21)  16 : APPSS_MCAN_INT1(INT#22)   17 : APPSS_SCI2_INT0(INT#62)   18 : APPSS_SCI2_INT0(INT#63)  19 : APPSS_SPI_IRQ_REQ(INT#14)  20 : SPI2_IRQ_REQ (part of INT#28)   21 : APPSS_LIN_INT0 (INT#10)  22 : APPSS_LIN_INT0 (INT#11)   23 : APPSS_MCAN_INT0(INT#21)  24 : APPSS_MCAN_INT1(INT#22)   25 : APPSS_SCI2_INT0(INT#62)   26 : APPSS_SCI2_INT0(INT#63)  27 : SYNC_IN 28  : RADAR_DEVICESLEEP_WAKEUP_INTERRUPT 29 to 31 : Reserved" end="0" id="wicmask" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="WIC_STAT_CLR" description="" id="WIC_STAT_CLR" offset="0x384" width="32">
    
  <bitfield begin="31" description="1 => Writing 1 to this bit, will clear the WIC_STAT status register of the corresponding bit. Self-clearing 0 => Writing 0 to this bit, leavesWIC_STAT status register unchanged for the corresponding bit." end="0" id="wicstatclr" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="WIC_STAT" description="" id="WIC_STAT" offset="0x388" width="32">
    
  <bitfield begin="31" description="1 => Interrupt bit set. The interupt bit is sticky bit. Should be cleared using WIC_STAT_CLR register or subsystem reset. 0 -> Interrupt bit not set. Sticky bits keep their value when they changed to logical 1 and is cleared only by writing 1 to WIC_STAT_CLR register." end="0" id="wicstat" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="WICEN" description="" id="WICEN" offset="0x38C" width="32">
    
  <bitfield begin="0" description="1 :> Wakeup Interrupt Controller (WIC) of CM4 is Enabled 0 :> Disabled" end="0" id="wicen" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="FORCEFCLKACTIVE" description="" id="FORCEFCLKACTIVE" offset="0x390" width="32">
    
  <bitfield begin="0" description="1 :> Forces FCLK to be active and inhibits CM4 Entering CPU DeepSleep mode 0 :> Allows gating of FCLK based on CPU DEEPSLEEP entry mechanism" end="0" id="forcefclkactive" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="FECSS_CLK_GATE" description="" id="FECSS_CLK_GATE" offset="0x394" width="32">
    
  <bitfield begin="5" description="Multibit: Writing 3'b111 will gate ADC_CLK going to DFE and Timing Engine" end="3" id="grp2" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="2" description="Multibit: Writing 3'b111 will gate FEC_SYS_CLK and FECSS peripheral clocks except DFE and Timing Engine" end="0" id="grp1" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="APPSS_SHARED_MEM_CLK_GATE" description="" id="APPSS_SHARED_MEM_CLK_GATE" offset="0x398" width="32">
    
  <bitfield begin="3" description="1'b1 : Enable APP CLK ICG for second 128KB of shared mem 1'b0 : Disable APP CLK ICG for second 128 KB of shared mem" end="3" id="mem1_app_enable" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="1'b1 : Enable HWA CLK ICG for second 128 KB of shared mem 1'b0 : Disable HWA CLK ICG for second 128 KB of shared mem" end="2" id="mem1_hwa_enable" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="1'b1 : Enable APP CLK ICG for first 128KB of shared mem 1'b0 : Disable APP CLK ICG for first 128 KB of shared mem" end="1" id="mem0_app_enable" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="1'b1 : Enable HWA CLK ICG for first 128 KB of shared mem 1'b0 : Disable HWA CLK ICG for first 128 KB of shared mem" end="0" id="mem0_hwa_enable" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_MEM_INIT_SLICE_SEL" description="" id="APPSS_MEM_INIT_SLICE_SEL" offset="0x39C" width="32">
    
  <bitfield begin="4" description="Selects the APPSS RAM2 partition that needs to be initialized. More than 1 partitions can be selected for mem_init. Bit#0 : Selects RAM_2A (16KB) Bit#1 : Selects RAM_2B (112KB) 1 => RAM partition selected for mem_init operation 0 => RAM partition not selected for mem_init operation." end="3" id="cfg_bank2" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="2" description="Selects the APPSS RAM1 partition that needs to be initialized. More than 1 partitions can be selected for mem_init. Bit#0 : Selects RAM_1A (64KB) Bit#1 : Selects RAM_1B (64KB) Bit#2 : Selects RAM_1C (128KB) 1 => RAM selected for mem_init operation 0 => RAM not selected for mem_init operation." end="0" id="cfg_bank1" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="APPSS_QSPI_CHAR_EXT_CLK_EN" description="" id="APPSS_QSPI_CHAR_EXT_CLK_EN" offset="0x3A0" width="32">
    
  <bitfield begin="0" description="Selects the QSPI system clock. Only for DFT purposes. This should not be changed for functional operation. 0 => QSPI_CLK from APPSS RCM 1 => SPI1_CLK from APPSS RCM" end="0" id="enable" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_QSPI_EXT_CLK_EN" description="" id="APPSS_QSPI_EXT_CLK_EN" offset="0x3A4" width="32">
    
  <bitfield begin="0" description="Selects the QSPI interface clock. This register bit is used only for AC CHAR operation and not for functional usage.  0 => default QSPI IP clock return from PAD 1 => SPI1 IF CLK. (McSPI IF clock)." end="0" id="enable" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPI1_SMART_IDLE" description="" id="SPI1_SMART_IDLE" offset="0x3A8" width="32">
    
  <bitfield begin="5" description="Description: RAW status of CLKSTOP_WAKEUP from SPI1 module. This should be interpreted along with SPI1_SMART_IDLE_WAKEUP SPI1_SMART_IDLE_WAKEUP_RAW, SPI1_SMART_IDLE_WAKEUP         0    ,                0             => WAKEUP is LOW from IP,  and No pending WAKEUP status         0    ,                1             => WAKEUP is LOW from IP,  and    pending WAKEUP status         1    ,                0             => WAKEUP is HIGH from IP, and No pending WAKEUP status         1    ,                1             => WAKEUP is HIGH from IP, and    pending WAKEUP status" end="5" id="wakeup_raw" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="4" description="Description: RAW status of CLKSTOP_ACK from McSPI (SPI1) module. This should be interpreted along with SPI1_SMART_IDLE_ACK SPI1_SMART_IDLE_ACK_RAW, SPI1_SMART_IDLE_ACK         0    ,                0             => ACK is LOW from IP,  and No pending ACK status         0    ,                1             => ACK is LOW from IP,  and    pending ACK status         1    ,                0             => ACK is HIGH from IP, and No pending ACK status         1    ,                1             => ACK is HIGH from IP, and    pending ACK status" end="4" id="ack_raw" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="This register reflects the Wakeup Status of the IP. The bit is sticky bit and the user is should clear once the status is read by write-1-to-clear." end="3" id="wakeup" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="It is used to select smart idle mode.  1 => Automatic mode - Entry to smart idle mode  Is manual by setting SMART_IDLE_ENABLE = 1.  When the wakeup  Signal  is asserted (based on the activity), The clkstop_req is pulled low automatically. 0 => Manual mode - The entry and exit to  Smart Idle is user controlled based on polling  SMART_IDLE_ACK and SMART_IDLE_WAKEUP" end="2" id="auto_en" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="1 => SPI1 in smart idle mode  0 => SPI1 not in smart idle mode The bit is sticky bit and the user is should clear once the status is read by write-1-to-clear." end="1" id="ack" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="1 => Smart IDLE mode enabled. When set, request the clock gating of SPI1 module. 0 => Disable Smart IDLE mode for SPI1" end="0" id="enable" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="SPI2_SMART_IDLE" description="" id="SPI2_SMART_IDLE" offset="0x3AC" width="32">
    
  <bitfield begin="5" description="Description: RAW status of CLKSTOP_WAKEUP from SPI2 module. This should be interpreted along with SPI2_SMART_IDLE_WAKEUP SPI2_SMART_IDLE_WAKEUP_RAW, SPI2_SMART_IDLE_WAKEUP         0    ,                0             => WAKEUP is LOW from IP,  and No pending WAKEUP status         0    ,                1             => WAKEUP is LOW from IP,  and    pending WAKEUP status         1    ,                0             => WAKEUP is HIGH from IP, and No pending WAKEUP status         1    ,                1             => WAKEUP is HIGH from IP, and    pending WAKEUP status" end="5" id="wakeup_raw" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="4" description="Description: RAW status of CLKSTOP_ACK from McSPI (SPI2) module. This should be interpreted along with SPI2_SMART_IDLE_ACK SPI2_SMART_IDLE_ACK_RAW, SPI2_SMART_IDLE_ACK         0    ,                0             => ACK is LOW from IP,  and No pending ACK status         0    ,                1             => ACK is LOW from IP,  and    pending ACK status         1    ,                0             => ACK is HIGH from IP, and No pending ACK status         1    ,                1             => ACK is HIGH from IP, and    pending ACK status" end="4" id="ack_raw" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="This register reflects the Wakeup Status of the IP. The bit is sticky bit and the user is should clear once the status is read by write-1-to-clear." end="3" id="wakeup" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="It is used to select smart idle mode.  1 => Automatic mode - In this mode, entry to  smart idle mode is manual by setting  SMART_IDLE_ENABLE = 1. When the wakeup  Signal  is asserted (based on the activity),  The clkstop_req is pulled low automatically. 0 => Manual mode - The entry and exit to  Smart Idle is user controlled based on polling  SMART_IDLE_ACK and SMART_IDLE_WAKEUP" end="2" id="auto_en" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="1 => SPI2 in smart idle mode  0 => SPI2 not in smart idle mode The bit is sticky bit and the user is should clear once the status is read by write-1-to-clear." end="1" id="ack" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="1 => Smart IDLE mode enabled. When set, request the clock gating of SPI2 module. 0 => Disable Smart IDLE mode for SPI2" end="0" id="enable" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CAN_SMART_IDLE" description="" id="CAN_SMART_IDLE" offset="0x3B0" width="32">
    
  <bitfield begin="5" description="Description: RAW status of CLKSTOP_WAKEUP from CANFD module. This should be interpreted along with CAN_SMART_IDLE_WAKEUP CAN_SMART_IDLE_WAKEUP_RAW, CAN_SMART_IDLE_WAKEUP         0    ,                0             => WAKEUP is LOW from IP,  and No pending WAKEUP status         0    ,                1             => WAKEUP is LOW from IP,  and    pending WAKEUP status         1    ,                0             => WAKEUP is HIGH from IP, and No pending WAKEUP status         1    ,                1             => WAKEUP is HIGH from IP, and    pending WAKEUP status" end="5" id="wakeup_raw" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="4" description="Description: RAW status of CLKSTOP_ACK from CANFD module. This should be interpreted along with CAN_SMART_IDLE_ACK CAN_SMART_IDLE_ACK_RAW, CAN_SMART_IDLE_ACK         0    ,                0             => ACK is LOW from IP,  and No pending ACK status         0    ,                1             => ACK is LOW from IP,  and    pending ACK status         1    ,                0             => ACK is HIGH from IP, and No pending ACK status         1    ,                1             => ACK is HIGH from IP, and    pending ACK status" end="4" id="ack_raw" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="This register reflects the Wakeup Status of the IP. The bit is sticky bit and the user is should clear once the status is read by write-1-to-clear." end="3" id="wakeup" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="It is used to select smart idle mode.  1 => Automatic mode - In this mode, entry to  smart idle mode is manual by setting  SMART_IDLE_ENABLE = 1. When the wakeup  Signal  is asserted (based on the activity),  The clkstop_req is pulled low automatically. 0 => Manual mode - The entry and exit to  Smart Idle is user controlled based on polling  SMART_IDLE_ACK and SMART_IDLE_WAKEUP" end="2" id="auto_en" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="1 => CAN in smart idle mode0 => CAN not in smart idle mode The bit is sticky bit and the user is should clear once the status is read by write-1-to-clear." end="1" id="ack" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="1 => Smart IDLE mode enabled. When set,  Request the clock gating of CAN module.0 => Disable Smart IDLE mode for CAN" end="0" id="enable" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="LIN_SMART_IDLE" description="" id="LIN_SMART_IDLE" offset="0x3B4" width="32">
    
  <bitfield begin="1" description="1 => LIN in smart idle mode0 => LIN not in smart idle mode" end="1" id="ack" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="1 => Smart IDLE mode enabled. When set,  Request the clock gating of LIN module.0 => Disable Smart IDLE mode for LIN" end="0" id="enable" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="HWASS_CLK_GATE" description="" id="HWASS_CLK_GATE" offset="0x3B8" width="32">
    
  <bitfield begin="2" description="RESERVED" end="0" id="enable" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="CFG_TIMEOUT_PCR3" description="" id="CFG_TIMEOUT_PCR3" offset="0x3BC" width="32">
    
  <bitfield begin="31" description="PCR3Timeout Value" end="0" id="value" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="RESERVED0" description="" id="RESERVED0" offset="0x3C0" width="32">
    
  <bitfield begin="15" description="RESERVED - POR Reset" end="0" id="reserved" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="APPSS_ERRAGG_MASK1" description="" id="APPSS_ERRAGG_MASK1" offset="0x3C4" width="32">
    
  <bitfield begin="11" description="Mask Interrupt from cluster12_power_down_access_err Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="11" id="cluster12_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Mask Interrupt from cluster11_power_down_access_err Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="10" id="cluster11_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Mask Interrupt from cluster10_power_down_access_err Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="9" id="cluster10_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Mask Interrupt from cluster9_power_down_access_err Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="8" id="cluster9_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Mask Interrupt from cluster8_power_down_access_err Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="7" id="cluster8_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Mask Interrupt from cluster7_power_down_access_err Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="6" id="cluster7_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Mask Interrupt from cluster6_power_down_access_err Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="5" id="cluster6_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Mask Interrupt from cluster5_power_down_access_err Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="4" id="cluster5_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Mask Interrupt from cluster4_power_down_access_err Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="3" id="cluster4_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Mask Interrupt from cluster3_power_down_access_err Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="2" id="cluster3_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Mask Interrupt from cluster2_power_down_access_err Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="1" id="cluster2_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Mask Interrupt from cluster1_power_down_access_err Interrupt APPSS_ACCESS_ERRAGG 1 : Interrupt is Masked 0 : Interrupt is Unmasked" end="0" id="cluster1_power_down_access_err" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_ERRAGG_STATUS1" description="" id="APPSS_ERRAGG_STATUS1" offset="0x3C8" width="32">
    
  <bitfield begin="11" description="Status of Interrupt from cluster12_power_down_access_err Set only if Interupt is unmasked in APPSS_ERRAGG_MASK1 Wrie 0x1 to clear this interrupt." end="11" id="cluster12_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="Status of Interrupt from cluster11_power_down_access_err Set only if Interupt is unmasked in APPSS_ERRAGG_MASK1 Wrie 0x1 to clear this interrupt." end="10" id="cluster11_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="Status of Interrupt from cluster10_power_down_access_err Set only if Interupt is unmasked in APPSS_ERRAGG_MASK1 Wrie 0x1 to clear this interrupt." end="9" id="cluster10_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Status of Interrupt from cluster9_power_down_access_err Set only if Interupt is unmasked in APPSS_ERRAGG_MASK1 Wrie 0x1 to clear this interrupt." end="8" id="cluster9_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Status of Interrupt from cluster8_power_down_access_err Set only if Interupt is unmasked in APPSS_ERRAGG_MASK1 Wrie 0x1 to clear this interrupt." end="7" id="cluster8_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Status of Interrupt from cluster7_power_down_access_err Set only if Interupt is unmasked in APPSS_ERRAGG_MASK1 Wrie 0x1 to clear this interrupt." end="6" id="cluster7_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Status of Interrupt from cluster6_power_down_access_err Set only if Interupt is unmasked in APPSS_ERRAGG_MASK1 Wrie 0x1 to clear this interrupt." end="5" id="cluster6_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Status of Interrupt from cluster5_power_down_access_err Set only if Interupt is unmasked in APPSS_ERRAGG_MASK1 Wrie 0x1 to clear this interrupt." end="4" id="cluster5_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Status of Interrupt from cluster4_power_down_access_err Set only if Interupt is unmasked in APPSS_ERRAGG_MASK1 Wrie 0x1 to clear this interrupt." end="3" id="cluster4_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Status of Interrupt from cluster3_power_down_access_err Set only if Interupt is unmasked in APPSS_ERRAGG_MASK1 Wrie 0x1 to clear this interrupt." end="2" id="cluster3_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Status of Interrupt from cluster2_power_down_access_err Set only if Interupt is unmasked in APPSS_ERRAGG_MASK1 Wrie 0x1 to clear this interrupt." end="1" id="cluster2_power_down_access_err" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Status of Interrupt from cluster1_power_down_access_err Set only if Interupt is unmasked in APPSS_ERRAGG_MASK1 Wrie 0x1 to clear this interrupt." end="0" id="cluster1_power_down_access_err" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="FORCEHCLKACTIVE" description="" id="FORCEHCLKACTIVE" offset="0x3CC" width="32">
    
  <bitfield begin="0" description="1 :> Gate HCLK 0 :> UnGate HCLK" end="0" id="forcehclkactive" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_RAM1_OWRITE_ERR" description="" id="APPSS_RAM1_OWRITE_ERR" offset="0x3D0" width="32">
    
  <bitfield begin="0" description="RAM1 ahb2sram write error - Sticky Bit" end="0" id="err" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_RAM1_OWRITE_ERR_ADDR" description="" id="APPSS_RAM1_OWRITE_ERR_ADDR" offset="0x3D4" width="32">
    
  <bitfield begin="31" description="RAM1 ahb2sram write error Address" end="0" id="address" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_RAM2_OWRITE_ERR" description="" id="APPSS_RAM2_OWRITE_ERR" offset="0x3D8" width="32">
    
  <bitfield begin="0" description="RAM2 ahb2sram write error - Sticky Bit" end="0" id="err" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_RAM2_OWRITE_ERR_ADDR" description="" id="APPSS_RAM2_OWRITE_ERR_ADDR" offset="0x3DC" width="32">
    
  <bitfield begin="31" description="RAM2 ahb2sram write error Address" end="0" id="address" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_RAM3_OWRITE_ERR" description="" id="APPSS_RAM3_OWRITE_ERR" offset="0x3E0" width="32">
    
  <bitfield begin="0" description="RAM3 ahb2sram write error - Sticky Bit" end="0" id="err" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_RAM3_OWRITE_ERR_ADDR" description="" id="APPSS_RAM3_OWRITE_ERR_ADDR" offset="0x3E4" width="32">
    
  <bitfield begin="31" description="RAM3 ahb2sram write error Address" end="0" id="address" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_SHRD_RAM_OWRITE_ERR" description="" id="APPSS_SHRD_RAM_OWRITE_ERR" offset="0x3E8" width="32">
    
  <bitfield begin="0" description="SHARED RAM ahb2sram write error - Sticky Bit" end="0" id="err" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="APPSS_SHRD_RAM_OWRITE_ERR_ADDR" description="" id="APPSS_SHRD_RAM_OWRITE_ERR_ADDR" offset="0x3EC" width="32">
    
  <bitfield begin="31" description="SHARED RAM ahb2sram write error Address" end="0" id="address" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="APPSS_OWRITE_ERR_AGGR" description="" id="APPSS_OWRITE_ERR_AGGR" offset="0x3F0" width="32">
    
  <bitfield begin="0" description="Ored  error of all write error signals -Sticky Bit" end="0" id="err" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RW6" description="" id="HW_SPARE_RW6" offset="0x3F4" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rw6" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RW7" description="" id="HW_SPARE_RW7" offset="0x3F8" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rw7" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RW8" description="" id="HW_SPARE_RW8" offset="0x3FC" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rw8" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_RW9" description="" id="HW_SPARE_RW9" offset="0x400" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_rw9" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="HW_SPARE_HWA_RW0" description="" id="HW_SPARE_HWA_RW0" offset="0x404" width="32">
    
  <bitfield begin="31" description="Reserved for HW R&amp;D" end="0" id="hw_spare_hwa_rw0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="LOCK0_KICK0" description="  - KICK0 component " id="LOCK0_KICK0" offset="0x1008" width="32">
    
  <bitfield begin="31" description=" - KICK0 component" end="0" id="" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="LOCK0_KICK1" description="  - KICK1 component " id="LOCK0_KICK1" offset="0x100C" width="32">
    
  <bitfield begin="31" description=" - KICK1 component" end="0" id="" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="intr_raw_status" description=" Interrupt Raw Status/Set Register " id="intr_raw_status" offset="0x1010" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="intr_enabled_status_clear" description=" Interrupt Enabled Status/Clear register " id="intr_enabled_status_clear" offset="0x1014" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="intr_enable" description=" Interrupt Enable register " id="intr_enable" offset="0x1018" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="intr_enable_clear" description=" Interrupt Enable Clear register " id="intr_enable_clear" offset="0x101C" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="eoi" description=" EOI register " id="eoi" offset="0x1020" width="32">
    
  <bitfield begin="7" description="EOI vector value. Write this with interrupt distribution value in the chip." end="0" id="" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="fault_address" description=" Fault Address register " id="fault_address" offset="0x1024" width="32">
    
  <bitfield begin="31" description="Fault Address." end="0" id="" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="fault_type_status" description=" Fault Type Status register " id="fault_type_status" offset="0x1028" width="32">
    
  <bitfield begin="6" description="Non-secure access." end="6" id="" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="5" description="Fault Type   10_0000 = Supervisor read  fault  - priv = 1 dir = 1 dtype != 1    01_0000 = Supervisor write fault  - priv = 1 dir = 0   00_1000 = Supervisor execute fault - priv = 1 dir = 1 dtype = 1   00_0100 = User read  fault - priv = 0 dir = 1 dtype = 1   00_0010 = User write fault - priv = 0 dir = 0   00_0001 = User execute fault - priv = 0 dir = 1 dtype = 1   00_0000 = No fault" end="0" id="" rwaccess="R" width="6"></bitfield>
  </register>
  
  
  <register acronym="fault_attr_status" description=" Fault Attribute Status register " id="fault_attr_status" offset="0x102C" width="32">
    
  <bitfield begin="31" description="XID." end="20" id="" rwaccess="R" width="12"></bitfield>
    
  <bitfield begin="19" description="Route ID." end="8" id="" rwaccess="R" width="12"></bitfield>
    
  <bitfield begin="7" description="Privilege ID." end="0" id="" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="fault_clear" description=" Fault Clear register " id="fault_clear" offset="0x1030" width="32">
    
  <bitfield begin="0" description="Fault clear. Writing a 1 clears the current fault. Writing a 0 has no effect." end="0" id="" rwaccess="W" width="1"></bitfield>
  </register>
</module>
