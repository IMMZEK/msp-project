<module name="SATAMAC_wrapper" acronym="" XML_version="1.0" HW_revision="n/a" description="">
  <register id="SATA_SYSCONFIG" acronym="SATA_SYSCONFIG" offset="0x0" width="32" description="This register controls the idle and standby modes of Highlander 08 modules.">
    <bitfield id="RESERVED" width="15" begin="31" end="17" resetval="0x0000" description="" range="" rwaccess="R"/>
    <bitfield id="OVERRIDE0" width="1" begin="16" end="16" resetval="0" description="Override for clock stopping. Normally the functional clock can be stopped only if the link is put into PARTIAL or SLUMBER power state. However, if there is no device attached (such as in a removable media situation) or the device is not started, the user can stop the functional clocks but not be able to enter a low-power state. In this case, software can set the OVERRIDE bit to 1, removing the requirement for a low-power state WARNING: If there is a device attached, the OVERRIDE bit is used, and the functional clock is stopped when the link is not in a low-power state it ruins the link and causes undetermined behavior. A port reset or full SATASS reset might be required to recover." range="" rwaccess="RW">
      <bitenum value="0" id="normal" token="OVERRIDE0_0" description="Normal mode"/>
      <bitenum value="1" id="override" token="OVERRIDE0_1" description="Override mode"/>
    </bitfield>
    <bitfield id="RESERVED" width="10" begin="15" end="6" resetval="0x000" description="" range="" rwaccess="R"/>
    <bitfield id="STANDBYMODE" width="2" begin="5" end="4" resetval="0x2" description="Configuration of the local initiator-state management mode. By definition, the initiator can generate a read/write transaction as long as it is out of STANDBY state." range="" rwaccess="RW">
      <bitenum value="0" id="force" token="STANDBYMODE_0" description="Force-standby mode: Local initiator is unconditionally placed in STANDBY state. Backup mode, for debug only"/>
      <bitenum value="1" id="no" token="STANDBYMODE_1" description="No-standby mode: local initiator is unconditionally placed out of STANDBY state. Backup mode, for debug only."/>
      <bitenum value="3" id="smart_wakeup" token="STANDBYMODE_3" description="Smart-Standby wakeup-capable mode: Local initiator standby status depends on local conditions, that is, the module's functional requirement from the initiator. The IP module can generate (master related) wakeup events when in STANDBY state. Mode is relevant only if the appropriate IP module mwakeup output is implemented."/>
      <bitenum value="2" id="smart" token="STANDBYMODE_2" description="Smart-standby mode: Local initiator standby status depends on local conditions, that is, the module's functional requirement from the initiator. The IP module does not generate (initiated-related) wakeup events."/>
    </bitfield>
    <bitfield id="IDLEMODE" width="2" begin="3" end="2" resetval="0x2" description="Configuration of the local target state management mode. By definition, the target can handle read/write transaction as long as it is out of IDLE state." range="" rwaccess="RW">
      <bitenum value="0" id="force" token="IDLEMODE_0" description="Force-idle mode: The local target IDLE state follows (acknowledges) the system idle requests unconditionally, that is, regardless of the internal requirements of th e IP module. Backup mode, for debug only."/>
      <bitenum value="1" id="no" token="IDLEMODE_1" description="No-idle mode: The local target never enters IDLE state. Backup mode, for debug only."/>
      <bitenum value="3" id="smartwakeup" token="IDLEMODE_3" description="Smart-idle wakeup-capable mode: The local target IDLE state eventually follows (acknowledges) the system idle requests, depending on the internal requirements of the IP module. IP module can generate (IRQ- or DMA-request-related) wakeup events when in IDLE state. Mode is only relevant if the appropriate IP module swakeup output(s) is (are) implemented."/>
      <bitenum value="2" id="smart" token="IDLEMODE_2" description="Smart-idle mode: The local target IDLE state eventually follows (acknowledges) the system idle requests, depending on the internal requirements of the IP module. IP module does not generate (IRQ- or DMA-request-related) wakeup events."/>
    </bitfield>
    <bitfield id="RESERVED" width="2" begin="1" end="0" resetval="0x0" description="" range="" rwaccess="R"/>
  </register>
  <register id="SATA_CDRLOCK" acronym="SATA_CDRLOCK" offset="0x4" width="32" description="Programmable delay for CDR lock indication">
    <bitfield id="RESERVED" width="20" begin="31" end="12" resetval="0x0 0000" description="" range="" rwaccess="R"/>
    <bitfield id="CDR_LOCK_DELAY" width="12" begin="11" end="0" resetval="0x7D0" description="CDR lock delay, in parallel (10-bit) serdes interface clock cycles. Parallel clock is 300 MHz (3.3 ns period) for SATA-3 Gbps, 150 MHz (6.7 ns) for SATA-1.5 Gbps." range="" rwaccess="RW">
      <bitenum value="0" id="off" token="CDR_LOCK_DELAY_0" description="No CDR lock delay"/>
      <bitenum value="2000" id="nominal" token="CDR_LOCK_DELAY_2000" description="Default CDR lock delay: 13.33 us (1.5 Gbps mode) or 6.67 us (3 Gbps mode)"/>
    </bitfield>
  </register>
</module>
