//********************************************************************************
//				AM43xx PLL Configuration
//8/25/14 - optimized PLL values
//		  - fixed DDR PLL values
//        - added all four inputs clock frequencies
//        - works for all EVMs (EVM selection in AM43xx_EVMs.gel)
//        - only includes OPP100 since other OPPs require voltage change//********************************************************************************
//********************************************************************************



ARM_OPP100_Config(int EVM)
{
UWORD32 CLKIN;
CLKIN = GetInputClockFrequency();
if(CLKIN==24)  
{
	GEL_TextOut("****  AM43xx OPP100 with CLKIN=24MHz is in progress ......... \n");
	MPU_PLL_Config(  CLKIN, 0, 25, 1);	//600MHz
	CORE_PLL_Config( CLKIN, 2, 125, 10, 8, 4); //L3=200MHz
	PER_PLL_Config(  CLKIN, 9, 400, 5);
	EXT_PLL_Config(  CLKIN, 9, 375, 18);  //50MHz output
	DISP_PLL_Config( CLKIN, 1, 50, 6);  //example, 100MHz CLKOUT
   
	//DDR Configuration for CLKIN=24MHz
	if((EVM==0) || (EVM == 2) || EVM==3) //for GP EVM, Starter Kit and IDK_EVM with DDR3
	{
		DDR_PLL_Config(  CLKIN, 2, 50, 1,2);
		GEL_TextOut("****  Setting DDR3  = 400MHz\n");
	}
	else if (EVM==1)   //for LPDDR2 EVM
	{
		DDR_PLL_Config(  CLKIN, 11, 133, 1,4); //for 266MHz LPDDR2 (must enable half delay mode  in EMIFconfig.gel as well)
		GEL_TextOut("****  Using LPDDR2 = 266MHz\n");

		//DDR_PLL_Config(  CLKIN, 11, 133, 2,4);	//for 133MHz LPDDR2 (must disable half delay mode in EMIFconfig.gel as well)
		//GEL_TextOut("****  Using LPDDR2 = 133MHz\n");
	}
}
else if(CLKIN==25)  
{
	GEL_TextOut("****  AM43xx OPP100 with CLKIN=25MHz is in progress ......... \n");
	MPU_PLL_Config(  CLKIN, 0, 24, 1);  //600MHz
	CORE_PLL_Config( CLKIN, 0, 40, 10, 8, 4);
	PER_PLL_Config(  CLKIN, 9, 384, 5);
	EXT_PLL_Config(  CLKIN, 9, 200, 10);  //50MHz output
	DISP_PLL_Config( CLKIN, 0, 32, 8);  //example, 100MHz CLKOUT
   
	//DDR Configuration for CLKIN=25MHz
	if((EVM==0) || (EVM == 2) || EVM==3) //for GP EVM or SK EVM or IDK_EVM with DDR3
	{
		DDR_PLL_Config(  CLKIN, 0, 16, 1,2);
		GEL_TextOut("****  Setting DDR3  = 400MHz\n");
    }
    else if (EVM==1)   //for LPDDR2 EVM
    {
		DDR_PLL_Config(  CLKIN, 24, 266, 1,4); //for 266MHz LPDDR2 (must enable half delay mode  in EMIFconfig.gel as well)
		GEL_TextOut("****  Using LPDDR2 = 266MHz\n");

        //DDR_PLL_Config(  CLKIN, 24, 266, 2,4);	//for 133MHz LPDDR2 (must disable half delay mode in EMIFconfig.gel as well)
        //GEL_TextOut("****  Using LPDDR2 = 133MHz\n");
    }
}
else if(CLKIN==26) 
{
	GEL_TextOut("****  AM43xx OPP100 with CLKIN=26MHz is in progress ......... \n");
	MPU_PLL_Config(  CLKIN, 12, 300, 1);  //600MHz
	CORE_PLL_Config( CLKIN, 12, 500, 10, 8, 4);
	PER_PLL_Config(  CLKIN, 12, 480, 5);
	EXT_PLL_Config(  CLKIN, 12, 300, 4);  //50MHz output
	DISP_PLL_Config( CLKIN, 12, 200, 4);  //example, 100MHz CLKOUT
   
   	//DDR Configuration for CLKIN=26MHz
	if((EVM==0) || (EVM == 2) || EVM==3) //for GP EVM or SK EVM or IDK_EVM with DDR3
	{
		DDR_PLL_Config(  CLKIN, 12, 200, 1,2);
		GEL_TextOut("****  Setting DDR3  = 400MHz\n");
    }
    else if (EVM==1)   //for LPDDR2 EVM
    {
		DDR_PLL_Config(  CLKIN, 12, 133, 1,4); //for 266MHz LPDDR2 (must enable half delay mode  in EMIFconfig.gel as well)
		GEL_TextOut("****  Using LPDDR2 = 266MHz\n");

        //DDR_PLL_Config(  CLKIN, 12, 133, 2,4);	//for 133MHz LPDDR2 (must disable half delay mode in EMIFconfig.gel as well)
        //GEL_TextOut("****  Using LPDDR2 = 133MHz\n");
    }
}
else if(CLKIN==96) //19.2 MHz
{
	GEL_TextOut("****  AM43xx OPP100 with CLKIN=19.2MHz is in progress ......... \n");

	MPU_PLL_Config(  CLKIN,  3, 125, 1);  //600MHz
	CORE_PLL_Config( CLKIN, 11, 625, 10, 8, 4);
	PER_PLL_Config(  CLKIN,  7, 400, 5);
	EXT_PLL_Config(  CLKIN,  7, 375, 18);  //50MHz output
	DISP_PLL_Config( CLKIN,  5, 250, 8);  //example, 100MHz CLKOUT

   	//DDR Configuration for CLKIN=19.2MHz
	if((EVM==0) || (EVM == 2) || EVM==3) //for GP EVM or SK EVM or IDK_EVM with DDR3
	{
		DDR_PLL_Config(  CLKIN, 5, 125, 1,2);
		GEL_TextOut("****  Setting DDR3  = 400MHz\n");
    }
    else if (EVM==1)   //for LPDDR2 EVM
    {
		DDR_PLL_Config(  CLKIN, 47, 665, 1,4); //for 266MHz LPDDR2 (must enable half delay mode  in EMIFconfig.gel as well)
		GEL_TextOut("****  Using LPDDR2 = 266MHz\n");

        //DDR_PLL_Config(  CLKIN, 47, 665, 2,4);	//for 133MHz LPDDR2 (must disable half delay mode in EMIFconfig.gel as well)
        //GEL_TextOut("****  Using LPDDR2 = 133MHz\n");
    }
}

else 
   GEL_TextOut("****  AM43xx PLL Config failed!!  Check SYSBOOT[15:14] for proper input freq config \n");


GEL_TextOut("****  AM43xx OPP100 configuration is done ......... \n");
}


//**********************************************************************
//PLL Configuration functions
//**********************************************************************
MPU_PLL_Config(UWORD32 CLKIN,UWORD32 N,UWORD32 M,UWORD32 M2)
{
UWORD32 ref_clk,clk_out = 0;
UWORD32 clksel,div_m2,idlest_dpll;
UWORD32 temp,i;

clksel= RD_MEM_32(CM_CLKSEL_DPLL_MPU);
div_m2= RD_MEM_32(CM_DIV_M2_DPLL_MPU);

GEL_TextOut("\t ****  Going to Bypass... \n");

//put the DPLL in bypass mode
WR_MEM_32(CM_CLKMODE_DPLL_MPU,0x4);
while((RD_MEM_32(CM_IDLEST_DPLL_MPU) != 0x00000100)); //wait for bypass status

GEL_TextOut("\t ****  Bypassed, changing values... \n");

//set multiply and divide values

clksel = clksel & (~0x7FFFF);
clksel = clksel | ((M <<0x8) | N);
WR_MEM_32(CM_CLKSEL_DPLL_MPU,clksel);
div_m2 = div_m2 & ~0x1F;
div_m2 = div_m2 | M2;  
WR_MEM_32(CM_DIV_M2_DPLL_MPU,div_m2);

GEL_TextOut("\t ****  Locking PLL\n","Output",1,1,1);

//now lock the DPLL
WR_MEM_32(CM_CLKMODE_DPLL_MPU,0x7);
while((RD_MEM_32(CM_IDLEST_DPLL_MPU) != 0x1)); //wait for lock status
GEL_TextOut("\t ****  MPU PLL locked\n");

}

CORE_PLL_Config(UWORD32 CLKIN,UWORD32 N,UWORD32 M,UWORD32 M4,UWORD32 M5,UWORD32 M6)
{
UWORD32 ref_clk,clk_out4,clk_out5,clk_out6;
UWORD32 clksel,div_m4,div_m5,div_m6,idlest_dpll;

clksel= RD_MEM_32(CM_CLKSEL_DPLL_CORE);
div_m4= RD_MEM_32(CM_DIV_M4_DPLL_CORE); 
div_m5= RD_MEM_32(CM_DIV_M5_DPLL_CORE); 
div_m6= RD_MEM_32(CM_DIV_M6_DPLL_CORE); 

//put DPLL in bypass mode
WR_MEM_32(CM_CLKMODE_DPLL_CORE,0x4);
while((RD_MEM_32(CM_IDLEST_DPLL_CORE) & 0x00000100 )!=0x00000100); //wait for bypass status

GEL_TextOut("\t ****  Core Bypassed\n");

//set multiply and divide values
clksel = clksel & (~0x7FFFF);
clksel = clksel | ((M <<0x8) | N);
WR_MEM_32(CM_CLKSEL_DPLL_CORE,clksel);
div_m4= M4;   //200MHz
WR_MEM_32(CM_DIV_M4_DPLL_CORE,div_m4);
div_m5=  M5;  //250MHz
WR_MEM_32(CM_DIV_M5_DPLL_CORE,div_m5);
div_m6=  M6;  //500MHz
WR_MEM_32(CM_DIV_M6_DPLL_CORE,div_m6);

GEL_TextOut("\t ****  Now locking Core...\n");

//now lock the PLL
WR_MEM_32(CM_CLKMODE_DPLL_CORE,0x7);
while((RD_MEM_32(CM_IDLEST_DPLL_CORE) & 0x00000001 )!=0x00000001); //wait for lock status

GEL_TextOut("\t ****  Core locked\n");
}

DDR_PLL_Config(UWORD32 CLKIN,UWORD32 N,UWORD32 M,UWORD32 M2,UWORD32 M4)
{
UWORD32 ref_clk,clk_out, clk_out4, div_m4 = 0;
UWORD32 clksel,div_m2,idlest_dpll;

clksel= RD_MEM_32(CM_CLKSEL_DPLL_DDR);
div_m2= RD_MEM_32(CM_DIV_M2_DPLL_DDR);
div_m4= RD_MEM_32(CM_DIV_M4_DPLL_DDR);

//put the DPLL in bypass mode
WR_MEM_32(CM_CLKMODE_DPLL_DDR,0x4);
while((RD_MEM_32(CM_IDLEST_DPLL_DDR) & 0x00000100 )!=0x00000100); //wait for bypass status

GEL_TextOut("\t ****  DDR DPLL Bypassed\n");

clksel = clksel & (~0x7FFFF);
clksel = clksel | ((M <<0x8) | N);
WR_MEM_32(CM_CLKSEL_DPLL_DDR,clksel);
div_m2 = RD_MEM_32(CM_DIV_M2_DPLL_DDR);
div_m2 = (div_m2&0xFFFFFFE0) | M2;
WR_MEM_32(CM_DIV_M2_DPLL_DDR,div_m2);
div_m4= M4;   
WR_MEM_32(CM_DIV_M4_DPLL_DDR,div_m4);

//lock the PLL
WR_MEM_32(CM_CLKMODE_DPLL_DDR,0x7);
while((RD_MEM_32(CM_IDLEST_DPLL_DDR) & 0x00000001 )!=0x00000001); //wait for lock status

GEL_TextOut("\t ****  DDR DPLL Locked\n");


}

PER_PLL_Config(UWORD32 CLKIN,UWORD32 N,UWORD32 M,UWORD32 M2)
{
UWORD32 ref_clk, sd_value = 0;
UWORD32 clksel,div_m2,idlest_dpll,factor;

//SD = ceiling ([M /(N+1)] * CLKINP / 250 ) 
if(CLKIN==96)
	factor = (250*5);  //add in the div-by-5 to get back to 19.2
else
	factor = 250; //otherwise just keep as is
if(  (M*CLKIN)%((N+1)*factor) )
      sd_value =  ((M*CLKIN)/((N+1)*factor)) + 1;  //formula for sd
else
      sd_value =  ((M*CLKIN)/((N+1)*factor));  //formula for sd

         GEL_TextOut("\t ****  Calculated PER SD Divisor=%d\n",,,,,(sd_value));

clksel= RD_MEM_32(CM_CLKSEL_DPLL_PER);
div_m2= RD_MEM_32(CM_DIV_M2_DPLL_PER);

//put the DPLL in bypass mode
WR_MEM_32(CM_CLKMODE_DPLL_PER,0x4);
while((RD_MEM_32(CM_IDLEST_DPLL_PER) & 0x00000100 )!=0x00000100);  //wait for bypass status

GEL_TextOut("\t ****  PER DPLL Bypassed\n");

clksel = clksel & (~0xFF0FFFFF);
clksel = clksel | ((M <<0x8) | N);
clksel = clksel | (sd_value << 24);
WR_MEM_32(CM_CLKSEL_DPLL_PER,clksel);
div_m2= 0xFFFFFF80 | M2;
WR_MEM_32(CM_DIV_M2_DPLL_PER,div_m2);

//lock the PLL
WR_MEM_32(CM_CLKMODE_DPLL_PER,0x7);
while((RD_MEM_32(CM_IDLEST_DPLL_PER) & 0x00000001 )!=0x00000001); //wait for lock status

GEL_TextOut("\t ****  PER DPLL Locked\n");

}

DISP_PLL_Config(UWORD32 CLKIN,UWORD32 N,UWORD32 M,UWORD32 M2)
{
UWORD32 ref_clk = 0;
UWORD32 clkmode,clksel,div_m2,idlest_dpll;

GEL_TextOut("\t ****  DISP PLL Config is in progress .......... \n");	

clksel= RD_MEM_32(CM_CLKSEL_DPLL_DISP);
div_m2= RD_MEM_32(CM_DIV_M2_DPLL_DISP);

//put the DPLL in bypass mode
WR_MEM_32(CM_CLKMODE_DPLL_DISP,0x4);
while((RD_MEM_32(CM_IDLEST_DPLL_DISP) & 0x00000100 )!=0x00000100); //wait for bypass status

clksel = clksel & (~0x7FFFF);
clksel = clksel | ((M <<0x8) | N);
WR_MEM_32(CM_CLKSEL_DPLL_DISP,clksel);
div_m2= 0xFFFFFFE0 | M2;
WR_MEM_32(CM_DIV_M2_DPLL_DISP,div_m2);

//lock the PLL
WR_MEM_32(CM_CLKMODE_DPLL_DISP,0x7);
while((RD_MEM_32(CM_IDLEST_DPLL_DISP) & 0x00000001 )!=0x00000001); //wait for lock status

GEL_TextOut("\t ****  DISP PLL Locked \n");
}

EXT_PLL_Config(UWORD32 CLKIN,UWORD32 N,UWORD32 M,UWORD32 M2)
{
UWORD32 ref_clk,sd_value = 0;
UWORD32 clksel,div_m2,idlest_dpll,factor;

//SD = ceiling ([M /(N+1)] * CLKINP / 250 ) 
if(CLKIN==96)
	factor = (250*5);  //add in the div-by-5 to get back to 19.2
else
	factor = 250; //otherwise just keep as is
if(  (M*CLKIN)%((N+1)*factor) )
      sd_value =  ((M*CLKIN)/((N+1)*factor)) + 1;  //formula for sd
else
      sd_value =  ((M*CLKIN)/((N+1)*factor));  //formula for sd

         GEL_TextOut("\t ****  Calculated EXTDEV SD Divisor=%d\n",,,,,(sd_value));


clksel= RD_MEM_32(CM_CLKSEL_DPLL_EXTDEV);
div_m2= RD_MEM_32(CM_DIV_M2_DPLL_EXTDEV);

//put DPLL in bypass mode
WR_MEM_32(CM_CLKMODE_DPLL_EXTDEV,0x4);
while((RD_MEM_32(CM_IDLEST_DPLL_EXTDEV) & 0x00000100 )!=0x00000100); //wait for bypass status

GEL_TextOut("\t ****  EXTDEV DPLL Bypassed\n");

clksel = clksel & (~0xFF0FFFFF);
clksel = clksel | ((M <<0x8) | N);
clksel = clksel | (sd_value << 24);
WR_MEM_32(CM_CLKSEL_DPLL_EXTDEV,clksel);
div_m2= 0xFFFFFF80 | M2;
WR_MEM_32(CM_DIV_M2_DPLL_EXTDEV,div_m2);

//lock the PLL
WR_MEM_32(CM_CLKMODE_DPLL_EXTDEV,0x7);
while((RD_MEM_32(CM_IDLEST_DPLL_EXTDEV) & 0x00000001 )!=0x00000001); //wait for lock status

GEL_TextOut("\t ****  EXTDEV DPLL Locked\n");

}
