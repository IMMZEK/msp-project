
/**
 * \file  M4_PSC_PG2.gel
 *
 * \brief GEL File to control the power sleep controller on the M4 PG2
 */

/* Copyright (c) 2017, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */


/*
 * macro definitions for the WKUP_PSC
*/

/* power domain indices */
#define PD_WKUP 0
#define PD_MCU 1
#define PD_MCU_PULSAR 2

/* lpsc indices */
#define LPSC_WKUP_COMMON 0
#define LPSC_DMSC 1
#define LPSC_WKUP2MCU 2
#define LPSC_WKUP2MAIN_INFRA 3
#define LPSC_DEBUG2DMSC 4
#define LPSC_WKUP_GPIO 5
#define LPSC_MCU2MAIN_INFRA 6
#define LPSC_MCU2MAIN 7
#define LPSC_MCU2WKUP 8
#define LPSC_MAIN2MCU 9
#define LPSC_MCU_COMMON 10
#define LPSC_MCU_TEST 11
#define LPSC_MCU_MCAN_0 12
#define LPSC_MCU_MCAN_1 13
#define LPSC_MCU_OSPI_0 14
#define LPSC_MCU_OSPI_1 15
#define LPSC_MCU_HYPERBUS 16
#define LPSC_MCU_DEBUG 17
#define LPSC_MCU_R5_0 19
#define LPSC_MCU_R5_1 20

/*
 * macro definitions for the MAIN_PSC
*/

/* power domain indices */
#define GP_CORE_CTL 0
#define PD_CC_TOP 1
#define PD_A53_0 2
#define PD_A53_1 3
#define PD_A53_2 4
#define PD_A53_3 5
#define PD_A53_CLUSTER_0 6
#define PD_A53_CLUSTER_1 7
#define PD_DEBUG 8
#define PD_PER 9
#define PD_SERDES 10
#define PD_ICSSG 11
#define PD_GPU 12
#define PD_EMIF 13
#define PD_PER2 14
#define PD_ICSSG2 15

/* lpsc indices */
#define LPSC_MAIN_INFRA 0
#define LPSC_MAIN_TEST 1
#define LPSC_MAIN_PBIST 2
#define LPSC_CC_TOP 5
#define LPSC_CC_TOP_PBIST 6
#define LPSC_A53_0 7
#define LPSC_A53_1 8
#define LPSC_A53_2 9
#define LPSC_A53_3 10
#define LPSC_A53_CLUSTER_0 11
#define LPSC_A53_CLUSTER_0_PBIST 12
#define LPSC_A53_CLUSTER_1 13
#define LPSC_A53_CLUSTER_1_PBIST 14
#define LPSC_MAIN_DEBUG 15
#define LPSC_MMC 17
#define LPSC_CAL 18
#define LPSC_PCIE_0 19
#define LPSC_PER_COMMON 24
#define LPSC_NB 25
#define LPSC_SERDES_0 27
#define LPSC_SERDES_1 28
#define LPSC_ICSSG_0 29
#define LPSC_ICSSG_1 30
#define LPSC_GPU 32
#define LPSC_GPU_PBIST 33
#define LPSC_EMIF_DATA 34
#define LPSC_EMIF_CFG 35
#define LPSC_DSS 36
#define LPSC_PCIE_1 37
#define LPSC_USB_0 38
#define LPSC_USB_1 39
#define LPSC_SAUL 40
#define LPSC_ICSSG_2 42

// PSC Register Definitions

#define MAIN_PSC_INDEX				0
#define WAKEUP_PSC_INDEX			1

#define PSC_MDCTL00           		(0xA00)
#define PSC_MDSTAT00          		(0x800)
#define PSC_PDCTL00           		(0x300)
#define PSC_PDSTAT00          		(0x200)
#define PSC_PTCMD 					(0x120)
#define PSC_PTSTAT 					(0x128)

#define PSC_PD_OFF					(0x0)
#define PSC_PD_ON					(0x1)

#define PSC_SYNCRESETDISABLE		(0x0)
#define PSC_SYNCRESET 				(0x1)
#define PSC_DISABLE   				(0x2)
#define PSC_ENABLE    				(0x3)

#define PSC_TIMEOUT					(100)

#define WAKEUP_PSC_MDCTL_BASE       WAKEUP_PSC_BASE + PSC_MDCTL00
#define WAKEUP_PSC_MDSTAT_BASE      WAKEUP_PSC_BASE + PSC_MDSTAT00
#define WAKEUP_PSC_PDCTL_BASE       WAKEUP_PSC_BASE + PSC_PDCTL00
#define WAKEUP_PSC_PDSTAT_BASE      WAKEUP_PSC_BASE + PSC_PDSTAT00
#define WAKEUP_PSC_PTCMD_BASE		WAKEUP_PSC_BASE + PSC_PTCMD
#define WAKEUP_PSC_PTSTAT_BASE		WAKEUP_PSC_BASE + PSC_PTSTAT
#define WAKEUP_PSC_PTCMD            WAKEUP_PSC_PTCMD_BASE
#define WAKEUP_PSC_PTSTAT           WAKEUP_PSC_PTSTAT_BASE

#define MAIN_PSC_MDCTL_BASE    		MAIN_PSC_BASE + PSC_MDCTL00
#define MAIN_PSC_MDSTAT_BASE      	MAIN_PSC_BASE + PSC_MDSTAT00
#define MAIN_PSC_PDCTL_BASE       	MAIN_PSC_BASE + PSC_PDCTL00
#define MAIN_PSC_PDSTAT_BASE      	MAIN_PSC_BASE + PSC_PDSTAT00
#define MAIN_PSC_PTCMD_BASE			MAIN_PSC_BASE + PSC_PTCMD
#define MAIN_PSC_PTSTAT_BASE		MAIN_PSC_BASE + PSC_PTSTAT
#define MAIN_PSC_PTCMD             	MAIN_PSC_PTCMD_BASE
#define MAIN_PSC_PTSTAT 			MAIN_PSC_PTSTAT_BASE

/******************************************************************************
 *
 * NAME:
 *      Set_MAIN_PSC_State
 *
 * PURPOSE:
 *      Set a new power state for the specified power domain pd_id and module
 *		domain md_id. Wait for the power transition to complete.
 *
 * USAGE:
 *      This routine can be called as:
 *
 *      Set_MAIN_PSC_State(unsigned int pd_id, unsigned int md_id, unsigned int pd_state, unsigned int md_state)
 *
 *      pd_id - (i) power domain id
 *
 *      md_id - (i) module domain id
 *
 *		pd_state - (i) new power domain state value to set
 *					0 = PSC_PD_OFF
 *					1 = PSC_PD_ON
 *
 *      md_state - (i) new module domain state value to set
 *                  0 = PSC_SYNCRESETDISABLE (IP reset asserted and clock gated)
 *                  1 = PSC_SYNCRESET (IP reset asserted and clock running)
 *                  2 = PSC_DISABLE (IP reset released and clock gated, MMRs retained)
 *                  3 = PSC_ENABLE (IP reset released and clock running)
 *
 * RETURN VALUE:
 *      0 if ok, !=0 for error
 *
 * REFERENCE:
 *
 *****************************************************************************/
 Set_MAIN_PSC_State(unsigned int pd_id, unsigned int md_id, unsigned int pd_state, unsigned int md_state)
{
	unsigned int* mdctl;
	unsigned int* mdstat;
	unsigned int* pdctl;
	unsigned int* pdstat;

	unsigned int loop_cnt = 0;
	unsigned int ret = 1;

    unsigned int address_offset = 0;

    if (*((unsigned int*)MAIN_PSC_BASE) != PSC_PID)
    {
        address_offset = 0x80000000;
    }

	mdctl = (unsigned int*)(MAIN_PSC_MDCTL_BASE + ( 4 * md_id ) + address_offset) ;
	mdstat = (unsigned int*)(MAIN_PSC_MDSTAT_BASE + ( 4 * md_id )+ address_offset);
	pdctl = (unsigned int*)(MAIN_PSC_PDCTL_BASE + ( 4 * pd_id ) + address_offset);
	pdstat = (unsigned int*)(MAIN_PSC_PDSTAT_BASE + ( 4 * pd_id )+ address_offset);

	// If state is already set, do nothing
	if ( (( *pdstat & 0x1 ) == pd_state) && (( *mdstat & 0x1f ) == md_state) )
	{

		GEL_TextOut( "No change needed.\n");
		ret = 1;
		return ret;
	}

	// Wait for GOSTAT to clear
	while( (loop_cnt < PSC_TIMEOUT) && (*(unsigned int*)(MAIN_PSC_PTSTAT+address_offset) & (0x1 << pd_id)) != 0 )
	{
		loop_cnt++;
	}

	// Check if we got timeout error while waiting
	if (loop_cnt >= PSC_TIMEOUT)
	{
		GEL_TextOut( "Timeout Error. State not changed...\n");
		ret = 0;
		return ret;
	}

	// Set PDCTL NEXT to new state
	*pdctl = ((*pdctl) & ~(0x1)) | pd_state;

	// Set MDCTL NEXT to new state
	*mdctl = ((*mdctl) & ~(0x1f)) | md_state | 0x100;

	// Start power transition by setting PTCMD GO to 1
	*((unsigned int*)(MAIN_PSC_PTCMD+address_offset)) = (*(unsigned int*)(MAIN_PSC_PTCMD+address_offset)) | (0x1<<pd_id);

	loop_cnt = 0;

	// Wait for PTSTAT GOSTAT to clear
	while( (loop_cnt < PSC_TIMEOUT) && (*(unsigned int*)(MAIN_PSC_PTSTAT+address_offset) & (0x1 << pd_id)) != 0 )
	{
		loop_cnt++;
	}

	// Check if we got timeout error while waiting
	if (loop_cnt >= PSC_TIMEOUT)
	{
		GEL_TextOut( "Timeout Error. State not changed.\n");
		ret = 0;
		return ret;
	}

	// Verify power domain and module domain state got changed
	if ( (( *pdstat & 0x1 ) == pd_state) && (( *mdstat & 0x1f ) == md_state) )
	{
		GEL_TextOut( "Power domain and module state changed successfully.\n");
		ret = 1;
	}
	if (( *pdstat & 0x1 ) != pd_state)
	{
		GEL_TextOut( "ERROR: PSC power domain state NOT changed!\n");
		ret = 0;
	}
	if (( *mdstat & 0x1f ) != md_state)
	{
		GEL_TextOut( "ERROR: module state NOT changed!\n");
		ret = 0;
	}

	return ret;
}

/******************************************************************************
 *
 * NAME:
 *      Set_WKUP_PSC_State
 *
 * PURPOSE:
 *      Set a new power state for the specified power domain pd_id and module
 *		domain md_id. Wait for the power transition to complete.
 *
 * USAGE:
 *      This routine can be called as:
 *
 *      Set_WKUP_PSC_State(unsigned int pd_id, unsigned int md_id, unsigned int pd_state, unsigned int md_state)
 *
 *      pd_id - (i) power domain id
 *
 *      md_id - (i) module domain id
 *
 *		pd_state - (i) new power domain state value to set
 *					0 = PSC_PD_OFF
 *					1 = PSC_PD_ON
 *
 *      md_state - (i) new module domain state value to set
 *                  0 = PSC_SYNCRESETDISABLE (IP reset asserted and clock gated)
 *                  1 = PSC_SYNCRESET (IP reset asserted and clock running)
 *                  2 = PSC_DISABLE (IP reset released and clock gated, MMRs retained)
 *                  3 = PSC_ENABLE (IP reset released and clock running)
 *
 * RETURN VALUE:
 *      0 if ok, !=0 for error
 *
 * REFERENCE:
 *
 *****************************************************************************/
 Set_WKUP_PSC_State(unsigned int pd_id, unsigned int md_id, unsigned int pd_state, unsigned int md_state)
{
	unsigned int* mdctl;
	unsigned int* mdstat;
	unsigned int* pdctl;
	unsigned int* pdstat;

	unsigned int loop_cnt = 0;
	unsigned int ret = 1;

    unsigned int address_offset = 0;

    if (*((unsigned int*)WAKEUP_PSC_BASE) != PSC_PID)
    {
        address_offset = 0x20000000;
    }

	mdctl = (unsigned int*)( WAKEUP_PSC_MDCTL_BASE + ( 4 * md_id ) + address_offset);
	mdstat = (unsigned int*)(WAKEUP_PSC_MDSTAT_BASE + ( 4 * md_id ) + address_offset);
	pdctl = (unsigned int*)( WAKEUP_PSC_PDCTL_BASE + ( 4 * pd_id ) + address_offset);
	pdstat = (unsigned int*)(WAKEUP_PSC_PDSTAT_BASE + ( 4 * pd_id ) + address_offset);

	// If state is already set, do nothing
	if ( (( *pdstat & 0x1 ) == pd_state) && (( *mdstat & 0x1f ) == md_state) )
	{
		GEL_TextOut( "No change needed.\n");
		ret = 1;
		return ret;
	}

	// Wait for GOSTAT to clear
	while( (loop_cnt < PSC_TIMEOUT) && (*((unsigned int*)(WAKEUP_PSC_PTSTAT+address_offset)) & (0x1 << pd_id)) != 0 )
	{
		loop_cnt++;
	}

	// Check if we got timeout error while waiting
	if (loop_cnt >= PSC_TIMEOUT)
	{
		GEL_TextOut( "ERROR: Timeout. You are likely attempting to modify the Power Sleep Controller\n");
		GEL_TextOut( "       across a voltage crossing which is currently powered off.\n");
        GEL_TextOut( "       Consult the CBASS connectivity diagram and the PSC IP dictionary for more\n");
        GEL_TextOut( "       information.\n");


        ret = 0;
		return ret;
	}

	// Set PDCTL NEXT to new state
	*pdctl = ((*pdctl) & ~(0x1)) | pd_state;

	// Set MDCTL NEXT to new state
	*mdctl = ((*mdctl) & ~(0x1f)) | md_state;

	// Start power transition by setting PTCMD GO to 1
	(*(unsigned int*)(WAKEUP_PSC_PTCMD + address_offset)) = (*(unsigned int*)(WAKEUP_PSC_PTCMD + address_offset)) | (0x1<<pd_id);

	loop_cnt = 0;

	// Wait for PTSTAT GOSTAT to clear
	while( (loop_cnt < PSC_TIMEOUT) && (*((unsigned int*)(WAKEUP_PSC_PTSTAT+address_offset)) & (0x1 << pd_id)) != 0 )
	{
		loop_cnt++;
	}

	// Check if we got timeout error while waiting
	if (loop_cnt >= PSC_TIMEOUT)
	{
		GEL_TextOut( "Timeout Error. State not changed.\n");
		ret = 0;
		return ret;
	}

	// Verify power domain and module domain state got changed
	if ( (( *pdstat & 0x1 ) == pd_state) && (( *mdstat & 0x1f ) == md_state) )
	{
		GEL_TextOut( "Power domain and module state changed successfully.\n");
		ret = 1;
	}
	if (( *pdstat & 0x1 ) != pd_state)
	{
		GEL_TextOut( "ERROR: PSC power domain state NOT changed!\n");
		ret = 0;
	}
	if (( *mdstat & 0x1f ) != md_state)
	{
		GEL_TextOut( "ERROR: module state NOT changed!\n");
		ret = 0;
	}

	return ret;
}

 Get_MAIN_PSC_State( unsigned int pd_id, unsigned int md_id )
{
	unsigned int* mdctl;
	unsigned int* mdstat;
	unsigned int* pdstat;

	unsigned int pt_state;
	unsigned int pd_state;
	unsigned int md_state;

    unsigned int address_offset = 0;

    if (*((unsigned int*)MAIN_PSC_BASE) != PSC_PID)
    {
        address_offset = 0x80000000;
    }


	mdstat = (unsigned int*)(MAIN_PSC_MDSTAT_BASE + ( 4 * md_id ) + address_offset);
	pdstat = (unsigned int*)(MAIN_PSC_PDSTAT_BASE + ( 4 * pd_id ) + address_offset);

	pt_state = *(unsigned int*)(MAIN_PSC_PTSTAT+address_offset) & (0x1 << pd_id);
	pd_state = *pdstat & 0x1;
	md_state = *mdstat & 0x1f;

    if (pd_state == PSC_PD_OFF)
    {
        GEL_TextOut( "Power Domain: Off\n ");
    }
    else if (pd_state == PSC_PD_ON)
    {
        GEL_TextOut( "Power Domain: On\n ");
    }
    else
    {
        GEL_TextOut( "Power Domain: ERR\n ");
    }

    if (md_state == PSC_SYNCRESETDISABLE)
    {
        GEL_TextOut( "Module State: SyncResetDisable\n ");
    }
    else if (md_state == PSC_SYNCRESET)
    {
        GEL_TextOut( "Module State: SyncReset\n ");
    }
    else if (md_state == PSC_DISABLE)
    {
        GEL_TextOut( "Module State: Disable\n ");
    }
    else if (md_state == PSC_ENABLE)
    {
        GEL_TextOut( "Module State: Enable\n ");
    }
    else
    {
        GEL_TextOut( "Module State: Error\n ");
    }

    return 1;
}

 Get_WKUP_PSC_State( unsigned int pd_id, unsigned int md_id )
{
	unsigned int* mdctl;
	unsigned int* mdstat;
	unsigned int* pdstat;

	unsigned int pt_state;
	unsigned int pd_state;
	unsigned int md_state;

    unsigned int address_offset = 0;

    if (*((unsigned int*)WAKEUP_PSC_BASE) != PSC_PID)
    {
        address_offset = 0x20000000;
    }


	mdstat = (unsigned int*)(WAKEUP_PSC_MDSTAT_BASE + ( 4 * md_id ) + address_offset);
	pdstat = (unsigned int*)(WAKEUP_PSC_PDSTAT_BASE + ( 4 * pd_id ) + address_offset);

	pt_state = *((unsigned int*)(WAKEUP_PSC_PTSTAT+address_offset)) & (0x1 << pd_id);
	pd_state = *pdstat & 0x1;
	md_state = *mdstat & 0x1f;

    if (pd_state == PSC_PD_OFF)
    {
        GEL_TextOut( "Power Domain: Off\n");
    }
    else if (pd_state == PSC_PD_ON)
    {
        GEL_TextOut( "Power Domain: On\n");
    }
    else
    {
        GEL_TextOut( "Power Domain: ERR\n");
    }

    if (md_state == PSC_SYNCRESETDISABLE)
    {
        GEL_TextOut( "Module State: SyncResetDisable\n ");
    }
    else if (md_state == PSC_SYNCRESET)
    {
        GEL_TextOut( "Module State: SyncReset\n ");
    }
    else if (md_state == PSC_DISABLE)
    {
        GEL_TextOut( "Module State: Disable\n ");
    }
    else if (md_state == PSC_ENABLE)
    {
        GEL_TextOut( "Module State: Enable\n ");
    }
    else
    {
        GEL_TextOut( "Module State: Error\n ");
    }

    return 1;
}

menuitem "Power Sleep Controller/PSC Version: 2017-07-07";
hotmenu PSC_Get_Version()
{
    int status = 1;    GEL_TextOut( "This version of the PSC gel file generated on: 2017-07-07\n");
    return status;}


// Individual LPSC Power Controls

menuitem "Power Sleep Controller/Individual LPSC State Enable";

hotmenu Set_LPSC_WKUP_COMMON_On()
{
    GEL_TextOut("Enabling LPSC_WKUP_COMMON\n");
    Set_WKUP_PSC_State(PD_WKUP, LPSC_WKUP_COMMON, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_DMSC_On()
{
    GEL_TextOut("Enabling LPSC_DMSC\n");
    Set_WKUP_PSC_State(PD_WKUP, LPSC_DMSC, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_WKUP2MCU_On()
{
    GEL_TextOut("Enabling LPSC_WKUP2MCU\n");
    Set_WKUP_PSC_State(PD_WKUP, LPSC_WKUP2MCU, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_WKUP2MAIN_INFRA_On()
{
    GEL_TextOut("Enabling LPSC_WKUP2MAIN_INFRA\n");
    Set_WKUP_PSC_State(PD_WKUP, LPSC_WKUP2MAIN_INFRA, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_DEBUG2DMSC_On()
{
    GEL_TextOut("Enabling LPSC_DEBUG2DMSC\n");
    Set_WKUP_PSC_State(PD_WKUP, LPSC_DEBUG2DMSC, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_WKUP_GPIO_On()
{
    GEL_TextOut("Enabling LPSC_WKUP_GPIO\n");
    Set_WKUP_PSC_State(PD_WKUP, LPSC_WKUP_GPIO, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MCU2MAIN_INFRA_On()
{
    GEL_TextOut("Enabling LPSC_MCU2MAIN_INFRA\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU2MAIN_INFRA, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MCU2MAIN_On()
{
    GEL_TextOut("Enabling LPSC_MCU2MAIN\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU2MAIN, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MCU2WKUP_On()
{
    GEL_TextOut("Enabling LPSC_MCU2WKUP\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU2WKUP, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MAIN2MCU_On()
{
    GEL_TextOut("Enabling LPSC_MAIN2MCU\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MAIN2MCU, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MCU_COMMON_On()
{
    GEL_TextOut("Enabling LPSC_MCU_COMMON\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU_COMMON, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MCU_TEST_On()
{
    GEL_TextOut("Enabling LPSC_MCU_TEST\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU_TEST, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MCU_MCAN_0_On()
{
    GEL_TextOut("Enabling LPSC_MCU_MCAN_0\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU_MCAN_0, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MCU_MCAN_1_On()
{
    GEL_TextOut("Enabling LPSC_MCU_MCAN_1\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU_MCAN_1, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MCU_OSPI_0_On()
{
    GEL_TextOut("Enabling LPSC_MCU_OSPI_0\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU_OSPI_0, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MCU_OSPI_1_On()
{
    GEL_TextOut("Enabling LPSC_MCU_OSPI_1\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU_OSPI_1, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MCU_HYPERBUS_On()
{
    GEL_TextOut("Enabling LPSC_MCU_HYPERBUS\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU_HYPERBUS, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MCU_DEBUG_On()
{
    GEL_TextOut("Enabling LPSC_MCU_DEBUG\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU_DEBUG, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MCU_R5_0_On()
{
    GEL_TextOut("Enabling LPSC_MCU_R5_0\n");
    Set_WKUP_PSC_State(PD_MCU_PULSAR, LPSC_MCU_R5_0, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MCU_R5_1_On()
{
    GEL_TextOut("Enabling LPSC_MCU_R5_1\n");
    Set_WKUP_PSC_State(PD_MCU_PULSAR, LPSC_MCU_R5_1, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MAIN_INFRA_On()
{
    GEL_TextOut("Enabling LPSC_MAIN_INFRA\n");
    Set_MAIN_PSC_State(GP_CORE_CTL, LPSC_MAIN_INFRA, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MAIN_TEST_On()
{
    GEL_TextOut("Enabling LPSC_MAIN_TEST\n");
    Set_MAIN_PSC_State(GP_CORE_CTL, LPSC_MAIN_TEST, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MAIN_PBIST_On()
{
    GEL_TextOut("Enabling LPSC_MAIN_PBIST\n");
    Set_MAIN_PSC_State(GP_CORE_CTL, LPSC_MAIN_PBIST, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_CC_TOP_On()
{
    GEL_TextOut("Enabling LPSC_CC_TOP\n");
    Set_MAIN_PSC_State(PD_CC_TOP, LPSC_CC_TOP, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_CC_TOP_PBIST_On()
{
    GEL_TextOut("Enabling LPSC_CC_TOP_PBIST\n");
    Set_MAIN_PSC_State(PD_CC_TOP, LPSC_CC_TOP_PBIST, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_A53_0_On()
{
    GEL_TextOut("Enabling LPSC_A53_0\n");
    Set_MAIN_PSC_State(PD_A53_0, LPSC_A53_0, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_A53_1_On()
{
    GEL_TextOut("Enabling LPSC_A53_1\n");
    Set_MAIN_PSC_State(PD_A53_1, LPSC_A53_1, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_A53_2_On()
{
    GEL_TextOut("Enabling LPSC_A53_2\n");
    Set_MAIN_PSC_State(PD_A53_2, LPSC_A53_2, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_A53_3_On()
{
    GEL_TextOut("Enabling LPSC_A53_3\n");
    Set_MAIN_PSC_State(PD_A53_3, LPSC_A53_3, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_A53_CLUSTER_0_On()
{
    GEL_TextOut("Enabling LPSC_A53_CLUSTER_0\n");
    Set_MAIN_PSC_State(PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_A53_CLUSTER_0_PBIST_On()
{
    GEL_TextOut("Enabling LPSC_A53_CLUSTER_0_PBIST\n");
    Set_MAIN_PSC_State(PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_A53_CLUSTER_1_On()
{
    GEL_TextOut("Enabling LPSC_A53_CLUSTER_1\n");
    Set_MAIN_PSC_State(PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_A53_CLUSTER_1_PBIST_On()
{
    GEL_TextOut("Enabling LPSC_A53_CLUSTER_1_PBIST\n");
    Set_MAIN_PSC_State(PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1_PBIST, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MAIN_DEBUG_On()
{
    GEL_TextOut("Enabling LPSC_MAIN_DEBUG\n");
    Set_MAIN_PSC_State(PD_DEBUG, LPSC_MAIN_DEBUG, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_DSS_On()
{
    GEL_TextOut("Enabling LPSC_DSS\n");
    Set_MAIN_PSC_State(PD_PER2, LPSC_DSS, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_MMC_On()
{
    GEL_TextOut("Enabling LPSC_MMC\n");
    Set_MAIN_PSC_State(PD_PER, LPSC_MMC, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_CAL_On()
{
    GEL_TextOut("Enabling LPSC_CAL\n");
    Set_MAIN_PSC_State(PD_PER, LPSC_CAL, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_PCIE_0_On()
{
    GEL_TextOut("Enabling LPSC_PCIE_0\n");
    Set_MAIN_PSC_State(PD_PER, LPSC_PCIE_0, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_PCIE_1_On()
{
    GEL_TextOut("Enabling LPSC_PCIE_1\n");
    Set_MAIN_PSC_State(PD_PER2, LPSC_PCIE_1, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_USB_0_On()
{
    GEL_TextOut("Enabling LPSC_USB_0\n");
    Set_MAIN_PSC_State(PD_PER2, LPSC_USB_0, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_USB_1_On()
{
    GEL_TextOut("Enabling LPSC_USB_1\n");
    Set_MAIN_PSC_State(PD_PER2, LPSC_USB_1, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_SAUL_On()
{
    GEL_TextOut("Enabling LPSC_SAUL\n");
    Set_MAIN_PSC_State(PD_PER2, LPSC_SAUL, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_PER_COMMON_On()
{
    GEL_TextOut("Enabling LPSC_PER_COMMON\n");
    Set_MAIN_PSC_State(PD_PER, LPSC_PER_COMMON, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_NB_On()
{
    GEL_TextOut("Enabling LPSC_NB\n");
    Set_MAIN_PSC_State(PD_PER, LPSC_NB, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_SERDES_0_On()
{
    GEL_TextOut("Enabling LPSC_SERDES_0\n");
    Set_MAIN_PSC_State(PD_SERDES, LPSC_SERDES_0, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_SERDES_1_On()
{
    GEL_TextOut("Enabling LPSC_SERDES_1\n");
    Set_MAIN_PSC_State(PD_SERDES, LPSC_SERDES_1, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_ICSSG_0_On()
{
    GEL_TextOut("Enabling LPSC_ICSSG_0\n");
    Set_MAIN_PSC_State(PD_ICSSG, LPSC_ICSSG_0, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_ICSSG_1_On()
{
    GEL_TextOut("Enabling LPSC_ICSSG_1\n");
    Set_MAIN_PSC_State(PD_ICSSG, LPSC_ICSSG_1, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_ICSSG_2_On()
{
    GEL_TextOut("Enabling LPSC_ICSSG_2\n");
    Set_MAIN_PSC_State(PD_ICSSG2, LPSC_ICSSG_2, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_GPU_On()
{
    GEL_TextOut("Enabling LPSC_GPU\n");
    Set_MAIN_PSC_State(PD_GPU, LPSC_GPU, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_GPU_PBIST_On()
{
    GEL_TextOut("Enabling LPSC_GPU_PBIST\n");
    Set_MAIN_PSC_State(PD_GPU, LPSC_GPU_PBIST, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_EMIF_DATA_On()
{
    GEL_TextOut("Enabling LPSC_EMIF_DATA\n");
    Set_MAIN_PSC_State(PD_EMIF, LPSC_EMIF_DATA, PSC_PD_ON, PSC_ENABLE);
}

hotmenu Set_LPSC_EMIF_CFG_On()
{
    GEL_TextOut("Enabling LPSC_EMIF_CFG\n");
    Set_MAIN_PSC_State(PD_EMIF, LPSC_EMIF_CFG, PSC_PD_ON, PSC_ENABLE);
}

// Individual LPSC Power Controls

menuitem "Power Sleep Controller/Individual LPSC State Disable";

hotmenu Set_LPSC_WKUP_COMMON_Off()
{
    GEL_TextOut("Disabling LPSC_WKUP_COMMON\n");
    Set_WKUP_PSC_State(PD_WKUP, LPSC_WKUP_COMMON, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_DMSC_Off()
{
    GEL_TextOut("Disabling LPSC_DMSC\n");
    Set_WKUP_PSC_State(PD_WKUP, LPSC_DMSC, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_WKUP2MCU_Off()
{
    GEL_TextOut("Disabling LPSC_WKUP2MCU\n");
    Set_WKUP_PSC_State(PD_WKUP, LPSC_WKUP2MCU, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_WKUP2MAIN_INFRA_Off()
{
    GEL_TextOut("Disabling LPSC_WKUP2MAIN_INFRA\n");
    Set_WKUP_PSC_State(PD_WKUP, LPSC_WKUP2MAIN_INFRA, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_DEBUG2DMSC_Off()
{
    GEL_TextOut("Disabling LPSC_DEBUG2DMSC\n");
    Set_WKUP_PSC_State(PD_WKUP, LPSC_DEBUG2DMSC, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_WKUP_GPIO_Off()
{
    GEL_TextOut("Disabling LPSC_WKUP_GPIO\n");
    Set_WKUP_PSC_State(PD_WKUP, LPSC_WKUP_GPIO, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MCU2MAIN_INFRA_Off()
{
    GEL_TextOut("Disabling LPSC_MCU2MAIN_INFRA\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU2MAIN_INFRA, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MCU2MAIN_Off()
{
    GEL_TextOut("Disabling LPSC_MCU2MAIN\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU2MAIN, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MCU2WKUP_Off()
{
    GEL_TextOut("Disabling LPSC_MCU2WKUP\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU2WKUP, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MAIN2MCU_Off()
{
    GEL_TextOut("Disabling LPSC_MAIN2MCU\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MAIN2MCU, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MCU_COMMON_Off()
{
    GEL_TextOut("Disabling LPSC_MCU_COMMON\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU_COMMON, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MCU_TEST_Off()
{
    GEL_TextOut("Disabling LPSC_MCU_TEST\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU_TEST, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MCU_MCAN_0_Off()
{
    GEL_TextOut("Disabling LPSC_MCU_MCAN_0\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU_MCAN_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MCU_MCAN_1_Off()
{
    GEL_TextOut("Disabling LPSC_MCU_MCAN_1\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU_MCAN_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MCU_OSPI_0_Off()
{
    GEL_TextOut("Disabling LPSC_MCU_OSPI_0\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU_OSPI_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MCU_OSPI_1_Off()
{
    GEL_TextOut("Disabling LPSC_MCU_OSPI_1\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU_OSPI_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MCU_HYPERBUS_Off()
{
    GEL_TextOut("Disabling LPSC_MCU_HYPERBUS\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU_HYPERBUS, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MCU_DEBUG_Off()
{
    GEL_TextOut("Disabling LPSC_MCU_DEBUG\n");
    Set_WKUP_PSC_State(PD_MCU, LPSC_MCU_DEBUG, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MCU_R5_0_Off()
{
    GEL_TextOut("Disabling LPSC_MCU_R5_0\n");
    Set_WKUP_PSC_State(PD_MCU_PULSAR, LPSC_MCU_R5_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MCU_R5_1_Off()
{
    GEL_TextOut("Disabling LPSC_MCU_R5_1\n");
    Set_WKUP_PSC_State(PD_MCU_PULSAR, LPSC_MCU_R5_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MAIN_INFRA_Off()
{
    GEL_TextOut("Disabling LPSC_MAIN_INFRA\n");
    Set_MAIN_PSC_State(GP_CORE_CTL, LPSC_MAIN_INFRA, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MAIN_TEST_Off()
{
    GEL_TextOut("Disabling LPSC_MAIN_TEST\n");
    Set_MAIN_PSC_State(GP_CORE_CTL, LPSC_MAIN_TEST, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MAIN_PBIST_Off()
{
    GEL_TextOut("Disabling LPSC_MAIN_PBIST\n");
    Set_MAIN_PSC_State(GP_CORE_CTL, LPSC_MAIN_PBIST, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_CC_TOP_Off()
{
    GEL_TextOut("Disabling LPSC_CC_TOP\n");
    Set_MAIN_PSC_State(PD_CC_TOP, LPSC_CC_TOP, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_CC_TOP_PBIST_Off()
{
    GEL_TextOut("Disabling LPSC_CC_TOP_PBIST\n");
    Set_MAIN_PSC_State(PD_CC_TOP, LPSC_CC_TOP_PBIST, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_A53_0_Off()
{
    GEL_TextOut("Disabling LPSC_A53_0\n");
    Set_MAIN_PSC_State(PD_A53_0, LPSC_A53_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_A53_1_Off()
{
    GEL_TextOut("Disabling LPSC_A53_1\n");
    Set_MAIN_PSC_State(PD_A53_1, LPSC_A53_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_A53_2_Off()
{
    GEL_TextOut("Disabling LPSC_A53_2\n");
    Set_MAIN_PSC_State(PD_A53_2, LPSC_A53_2, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_A53_3_Off()
{
    GEL_TextOut("Disabling LPSC_A53_3\n");
    Set_MAIN_PSC_State(PD_A53_3, LPSC_A53_3, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_A53_CLUSTER_0_Off()
{
    GEL_TextOut("Disabling LPSC_A53_CLUSTER_0\n");
    Set_MAIN_PSC_State(PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_A53_CLUSTER_0_PBIST_Off()
{
    GEL_TextOut("Disabling LPSC_A53_CLUSTER_0_PBIST\n");
    Set_MAIN_PSC_State(PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_A53_CLUSTER_1_Off()
{
    GEL_TextOut("Disabling LPSC_A53_CLUSTER_1\n");
    Set_MAIN_PSC_State(PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_A53_CLUSTER_1_PBIST_Off()
{
    GEL_TextOut("Disabling LPSC_A53_CLUSTER_1_PBIST\n");
    Set_MAIN_PSC_State(PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1_PBIST, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MAIN_DEBUG_Off()
{
    GEL_TextOut("Disabling LPSC_MAIN_DEBUG\n");
    Set_MAIN_PSC_State(PD_DEBUG, LPSC_MAIN_DEBUG, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_DSS_Off()
{
    GEL_TextOut("Disabling LPSC_DSS\n");
    Set_MAIN_PSC_State(PD_PER2, LPSC_DSS, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_MMC_Off()
{
    GEL_TextOut("Disabling LPSC_MMC\n");
    Set_MAIN_PSC_State(PD_PER, LPSC_MMC, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_CAL_Off()
{
    GEL_TextOut("Disabling LPSC_CAL\n");
    Set_MAIN_PSC_State(PD_PER, LPSC_CAL, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_PCIE_0_Off()
{
    GEL_TextOut("Disabling LPSC_PCIE_0\n");
    Set_MAIN_PSC_State(PD_PER, LPSC_PCIE_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_PCIE_1_Off()
{
    GEL_TextOut("Disabling LPSC_PCIE_1\n");
    Set_MAIN_PSC_State(PD_PER2, LPSC_PCIE_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_USB_0_Off()
{
    GEL_TextOut("Disabling LPSC_USB_0\n");
    Set_MAIN_PSC_State(PD_PER2, LPSC_USB_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_USB_1_Off()
{
    GEL_TextOut("Disabling LPSC_USB_1\n");
    Set_MAIN_PSC_State(PD_PER2, LPSC_USB_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_SAUL_Off()
{
    GEL_TextOut("Disabling LPSC_SAUL\n");
    Set_MAIN_PSC_State(PD_PER2, LPSC_SAUL, PSC_PD_ON, PSC_DISABLE);
}

hotmenu Set_LPSC_PER_COMMON_Off()
{
    GEL_TextOut("Disabling LPSC_PER_COMMON\n");
    Set_MAIN_PSC_State(PD_PER, LPSC_PER_COMMON, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_NB_Off()
{
    GEL_TextOut("Disabling LPSC_NB\n");
    Set_MAIN_PSC_State(PD_PER, LPSC_NB, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_SERDES_0_Off()
{
    GEL_TextOut("Disabling LPSC_SERDES_0\n");
    Set_MAIN_PSC_State(PD_SERDES, LPSC_SERDES_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_SERDES_1_Off()
{
    GEL_TextOut("Disabling LPSC_SERDES_1\n");
    Set_MAIN_PSC_State(PD_SERDES, LPSC_SERDES_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_ICSSG_0_Off()
{
    GEL_TextOut("Disabling LPSC_ICSSG_0\n");
    Set_MAIN_PSC_State(PD_ICSSG, LPSC_ICSSG_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_ICSSG_1_Off()
{
    GEL_TextOut("Disabling LPSC_ICSSG_1\n");
    Set_MAIN_PSC_State(PD_ICSSG, LPSC_ICSSG_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_ICSSG_2_Off()
{
    GEL_TextOut("Disabling LPSC_ICSSG_2\n");
    Set_MAIN_PSC_State(PD_ICSSG2, LPSC_ICSSG_2, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_GPU_Off()
{
    GEL_TextOut("Disabling LPSC_GPU\n");
    Set_MAIN_PSC_State(PD_GPU, LPSC_GPU, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_GPU_PBIST_Off()
{
    GEL_TextOut("Disabling LPSC_GPU_PBIST\n");
    Set_MAIN_PSC_State(PD_GPU, LPSC_GPU_PBIST, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_EMIF_DATA_Off()
{
    GEL_TextOut("Disabling LPSC_EMIF_DATA\n");
    Set_MAIN_PSC_State(PD_EMIF, LPSC_EMIF_DATA, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}

hotmenu Set_LPSC_EMIF_CFG_Off()
{
    GEL_TextOut("Disabling LPSC_EMIF_CFG\n");
    Set_MAIN_PSC_State(PD_EMIF, LPSC_EMIF_CFG, PSC_PD_ON, PSC_SYNCRESETDISABLE);
}


// Common PSC Power Controls

menuitem "Power Sleep Controller/Common PSC Power Controls";

hotmenu Set_PSC_All_On()
{
    int status = 1;    GEL_TextOut( "Powering up all PSC power domains in progress...\n");
    GEL_TextOut( "Powering up LPSC_WKUP_COMMON\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP_COMMON, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_DMSC\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_DMSC, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_WKUP2MCU\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP2MCU, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_WKUP2MAIN_INFRA\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP2MAIN_INFRA, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_DEBUG2DMSC\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_DEBUG2DMSC, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_WKUP_GPIO\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP_GPIO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU2MAIN_INFRA\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU2MAIN_INFRA, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU2MAIN\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU2MAIN, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU2WKUP\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU2WKUP, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN2MCU\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MAIN2MCU, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_COMMON\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_COMMON, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_TEST\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_TEST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_MCAN_0\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_MCAN_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_MCAN_1\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_MCAN_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_OSPI_0\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_OSPI_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_OSPI_1\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_OSPI_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_HYPERBUS\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_HYPERBUS, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_DEBUG\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_DEBUG, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_R5_0\n");
    status &= Set_WKUP_PSC_State( PD_MCU_PULSAR, LPSC_MCU_R5_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_R5_1\n");
    status &= Set_WKUP_PSC_State( PD_MCU_PULSAR, LPSC_MCU_R5_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN_INFRA\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_INFRA, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN_TEST\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_TEST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN_PBIST\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_PBIST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_CC_TOP\n");
    status &= Set_MAIN_PSC_State( PD_CC_TOP, LPSC_CC_TOP, PSC_PD_ON, PSC_ENABLE);
    //GEL_TextOut( "Powering up LPSC_CC_TOP_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_CC_TOP, LPSC_CC_TOP_PBIST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_A53_CLUSTER_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_A53_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_0, LPSC_A53_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_A53_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_1, LPSC_A53_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_A53_CLUSTER_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_A53_2\n");
    status &= Set_MAIN_PSC_State( PD_A53_2, LPSC_A53_2, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_A53_3\n");
    status &= Set_MAIN_PSC_State( PD_A53_3, LPSC_A53_3, PSC_PD_ON, PSC_ENABLE);
    //GEL_TextOut( "Powering up LPSC_A53_CLUSTER_0_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST, PSC_PD_ON, PSC_ENABLE);
    //GEL_TextOut( "Powering up LPSC_A53_CLUSTER_1_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1_PBIST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN_DEBUG\n");
    status &= Set_MAIN_PSC_State( PD_DEBUG, LPSC_MAIN_DEBUG, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MMC\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_MMC, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_CAL\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_CAL, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_PCIE_0\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_PCIE_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_PER_COMMON\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_PER_COMMON, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_NB\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_NB, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_DSS\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_DSS, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_PCIE_1\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_PCIE_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_USB_0\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_USB_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_USB_1\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_USB_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_SAUL\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_SAUL, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_SERDES_0\n");
    status &= Set_MAIN_PSC_State( PD_SERDES, LPSC_SERDES_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_SERDES_1\n");
    status &= Set_MAIN_PSC_State( PD_SERDES, LPSC_SERDES_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_ICSSG_0\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG, LPSC_ICSSG_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_ICSSG_1\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG, LPSC_ICSSG_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_ICSSG_2\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG2, LPSC_ICSSG_2, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_GPU\n");
    status &= Set_MAIN_PSC_State( PD_GPU, LPSC_GPU, PSC_PD_ON, PSC_ENABLE);
    //GEL_TextOut( "Powering up LPSC_GPU_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_GPU, LPSC_GPU_PBIST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_EMIF_DATA\n");
    status &= Set_MAIN_PSC_State( PD_EMIF, LPSC_EMIF_DATA, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_EMIF_CFG\n");
    status &= Set_MAIN_PSC_State( PD_EMIF, LPSC_EMIF_CFG, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up all PSC power domains done!\n");
    return status;}


hotmenu Get_PSC_All_States()
{
    int status = 1;    GEL_TextOut( "Getting all PSC power states in progress... \n");
    GEL_TextOut( "State of LPSC_WKUP_COMMON\n");
    status &= Get_WKUP_PSC_State( PD_WKUP, LPSC_WKUP_COMMON);
    GEL_TextOut( "State of LPSC_DMSC\n");
    status &= Get_WKUP_PSC_State( PD_WKUP, LPSC_DMSC);
    GEL_TextOut( "State of LPSC_WKUP2MCU\n");
    status &= Get_WKUP_PSC_State( PD_WKUP, LPSC_WKUP2MCU);
    GEL_TextOut( "State of LPSC_WKUP2MAIN_INFRA\n");
    status &= Get_WKUP_PSC_State( PD_WKUP, LPSC_WKUP2MAIN_INFRA);
    GEL_TextOut( "State of LPSC_DEBUG2DMSC\n");
    status &= Get_WKUP_PSC_State( PD_WKUP, LPSC_DEBUG2DMSC);
    GEL_TextOut( "State of LPSC_WKUP_GPIO\n");
    status &= Get_WKUP_PSC_State( PD_WKUP, LPSC_WKUP_GPIO);
    GEL_TextOut( "State of LPSC_MCU2MAIN_INFRA\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU2MAIN_INFRA);
    GEL_TextOut( "State of LPSC_MCU2MAIN\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU2MAIN);
    GEL_TextOut( "State of LPSC_MCU2WKUP\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU2WKUP);
    GEL_TextOut( "State of LPSC_MAIN2MCU\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MAIN2MCU);
    GEL_TextOut( "State of LPSC_MCU_COMMON\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU_COMMON);
    GEL_TextOut( "State of LPSC_MCU_TEST\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU_TEST);
    GEL_TextOut( "State of LPSC_MCU_MCAN_0\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU_MCAN_0);
    GEL_TextOut( "State of LPSC_MCU_MCAN_1\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU_MCAN_1);
    GEL_TextOut( "State of LPSC_MCU_OSPI_0\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU_OSPI_0);
    GEL_TextOut( "State of LPSC_MCU_OSPI_1\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU_OSPI_1);
    GEL_TextOut( "State of LPSC_MCU_HYPERBUS\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU_HYPERBUS);
    GEL_TextOut( "State of LPSC_MCU_DEBUG\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU_DEBUG);
    GEL_TextOut( "State of LPSC_MCU_R5_0\n");
    status &= Get_WKUP_PSC_State( PD_MCU_PULSAR, LPSC_MCU_R5_0);
    GEL_TextOut( "State of LPSC_MCU_R5_1\n");
    status &= Get_WKUP_PSC_State( PD_MCU_PULSAR, LPSC_MCU_R5_1);
    GEL_TextOut( "State of LPSC_MAIN_INFRA\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_INFRA);
    GEL_TextOut( "State of LPSC_MAIN_TEST\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_TEST);
    GEL_TextOut( "State of LPSC_MAIN_PBIST\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_PBIST);
    GEL_TextOut( "State of LPSC_CC_TOP\n");
    status &= Get_MAIN_PSC_State( PD_CC_TOP, LPSC_CC_TOP);
    GEL_TextOut( "State of LPSC_CC_TOP_PBIST\n");
    status &= Get_MAIN_PSC_State( PD_CC_TOP, LPSC_CC_TOP_PBIST);
    GEL_TextOut( "State of LPSC_A53_0\n");
    status &= Get_MAIN_PSC_State( PD_A53_0, LPSC_A53_0);
    GEL_TextOut( "State of LPSC_A53_1\n");
    status &= Get_MAIN_PSC_State( PD_A53_1, LPSC_A53_1);
    GEL_TextOut( "State of LPSC_A53_2\n");
    status &= Get_MAIN_PSC_State( PD_A53_2, LPSC_A53_2);
    GEL_TextOut( "State of LPSC_A53_3\n");
    status &= Get_MAIN_PSC_State( PD_A53_3, LPSC_A53_3);
    GEL_TextOut( "State of LPSC_A53_CLUSTER_0\n");
    status &= Get_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0);
    GEL_TextOut( "State of LPSC_A53_CLUSTER_0_PBIST\n");
    status &= Get_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST);
    GEL_TextOut( "State of LPSC_A53_CLUSTER_1\n");
    status &= Get_MAIN_PSC_State( PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1);
    GEL_TextOut( "State of LPSC_A53_CLUSTER_1_PBIST\n");
    status &= Get_MAIN_PSC_State( PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1_PBIST);
    GEL_TextOut( "State of LPSC_MAIN_DEBUG\n");
    status &= Get_MAIN_PSC_State( PD_DEBUG, LPSC_MAIN_DEBUG);
    GEL_TextOut( "State of LPSC_MMC\n");
    status &= Get_MAIN_PSC_State( PD_PER, LPSC_MMC);
    GEL_TextOut( "State of LPSC_CAL\n");
    status &= Get_MAIN_PSC_State( PD_PER, LPSC_CAL);
    GEL_TextOut( "State of LPSC_PCIE_0\n");
    status &= Get_MAIN_PSC_State( PD_PER, LPSC_PCIE_0);
    GEL_TextOut( "State of LPSC_PER_COMMON\n");
    status &= Get_MAIN_PSC_State( PD_PER, LPSC_PER_COMMON);
    GEL_TextOut( "State of LPSC_NB\n");
    status &= Get_MAIN_PSC_State( PD_PER, LPSC_NB);
    GEL_TextOut( "State of LPSC_DSS\n");
    status &= Get_MAIN_PSC_State( PD_PER2, LPSC_DSS);
    GEL_TextOut( "State of LPSC_PCIE_1\n");
    status &= Get_MAIN_PSC_State( PD_PER2, LPSC_PCIE_1);
    GEL_TextOut( "State of LPSC_USB_0\n");
    status &= Get_MAIN_PSC_State( PD_PER2, LPSC_USB_0);
    GEL_TextOut( "State of LPSC_USB_1\n");
    status &= Get_MAIN_PSC_State( PD_PER2, LPSC_USB_1);
    GEL_TextOut( "State of LPSC_SAUL\n");
    status &= Get_MAIN_PSC_State( PD_PER2, LPSC_SAUL);
    GEL_TextOut( "State of LPSC_SERDES_0\n");
    status &= Get_MAIN_PSC_State( PD_SERDES, LPSC_SERDES_0);
    GEL_TextOut( "State of LPSC_SERDES_1\n");
    status &= Get_MAIN_PSC_State( PD_SERDES, LPSC_SERDES_1);
    GEL_TextOut( "State of LPSC_ICSSG_0\n");
    status &= Get_MAIN_PSC_State( PD_ICSSG, LPSC_ICSSG_0);
    GEL_TextOut( "State of LPSC_ICSSG_1\n");
    status &= Get_MAIN_PSC_State( PD_ICSSG, LPSC_ICSSG_1);
    GEL_TextOut( "State of LPSC_ICSSG_2\n");
    status &= Get_MAIN_PSC_State( PD_ICSSG2, LPSC_ICSSG_2);
    GEL_TextOut( "State of LPSC_GPU\n");
    status &= Get_MAIN_PSC_State( PD_GPU, LPSC_GPU);
    GEL_TextOut( "State of LPSC_GPU_PBIST\n");
    status &= Get_MAIN_PSC_State( PD_GPU, LPSC_GPU_PBIST);
    GEL_TextOut( "State of LPSC_EMIF_DATA\n");
    status &= Get_MAIN_PSC_State( PD_EMIF, LPSC_EMIF_DATA);
    GEL_TextOut( "State of LPSC_EMIF_CFG\n");
    status &= Get_MAIN_PSC_State( PD_EMIF, LPSC_EMIF_CFG);
    GEL_TextOut( "Getting all PSC power states done. \n");
    return status;}

menuitem "Power Sleep Controller/MAIN PSC Power Controls";

hotmenu MAIN_PSC_Peripheral_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up MAIN domain peripherals...\n");
    GEL_TextOut( "Powering up LPSC_MAIN_INFRA\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_INFRA, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN_TEST\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_TEST, PSC_PD_ON, PSC_ENABLE);
    //GEL_TextOut( "Powering up LPSC_MAIN_PBIST\n");
    //status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_PBIST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_CC_TOP\n");
    status &= Set_MAIN_PSC_State( PD_CC_TOP, LPSC_CC_TOP, PSC_PD_ON, PSC_ENABLE);
    //GEL_TextOut( "Powering up LPSC_CC_TOP_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_CC_TOP, LPSC_CC_TOP_PBIST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_A53_CLUSTER_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_A53_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_0, LPSC_A53_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_A53_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_1, LPSC_A53_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_A53_CLUSTER_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_A53_2\n");
    status &= Set_MAIN_PSC_State( PD_A53_2, LPSC_A53_2, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_A53_3\n");
    status &= Set_MAIN_PSC_State( PD_A53_3, LPSC_A53_3, PSC_PD_ON, PSC_ENABLE);

    //GEL_TextOut( "Powering up LPSC_A53_CLUSTER_0_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST, PSC_PD_ON, PSC_ENABLE);

    //GEL_TextOut( "Powering up LPSC_A53_CLUSTER_1_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1_PBIST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN_DEBUG\n");
    status &= Set_MAIN_PSC_State( PD_DEBUG, LPSC_MAIN_DEBUG, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MMC\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_MMC, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_CAL\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_CAL, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_PCIE_0\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_PCIE_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_PER_COMMON\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_PER_COMMON, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_NB\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_NB, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_DSS\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_DSS, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_PCIE_1\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_PCIE_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_USB_0\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_USB_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_USB_1\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_USB_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_SAUL\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_SAUL, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_SERDES_0\n");
    status &= Set_MAIN_PSC_State( PD_SERDES, LPSC_SERDES_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_SERDES_1\n");
    status &= Set_MAIN_PSC_State( PD_SERDES, LPSC_SERDES_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_ICSSG_0\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG, LPSC_ICSSG_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_ICSSG_1\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG, LPSC_ICSSG_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_ICSSG_2\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG2, LPSC_ICSSG_2, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_GPU\n");
    status &= Set_MAIN_PSC_State( PD_GPU, LPSC_GPU, PSC_PD_ON, PSC_ENABLE);
    //GEL_TextOut( "Powering up LPSC_GPU_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_GPU, LPSC_GPU_PBIST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_EMIF_DATA\n");
    status &= Set_MAIN_PSC_State( PD_EMIF, LPSC_EMIF_DATA, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_EMIF_CFG\n");
    status &= Set_MAIN_PSC_State( PD_EMIF, LPSC_EMIF_CFG, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up all MAIN domain peripherals done. \n");
    return status;}

hotmenu Get_MAIN_PSC_Peripheral_States()
{
    int status = 1;    GEL_TextOut( "Getting all MAIN PSC peripheral states in progress......\n");
    GEL_TextOut( "State of LPSC_MAIN_INFRA\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_INFRA);
    GEL_TextOut( "State of LPSC_MAIN_TEST\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_TEST);
    GEL_TextOut( "State of LPSC_MAIN_PBIST\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_PBIST);
    GEL_TextOut( "State of LPSC_CC_TOP\n");
    status &= Get_MAIN_PSC_State( PD_CC_TOP, LPSC_CC_TOP);
    GEL_TextOut( "State of LPSC_CC_TOP_PBIST\n");
    status &= Get_MAIN_PSC_State( PD_CC_TOP, LPSC_CC_TOP_PBIST);
    GEL_TextOut( "State of LPSC_A53_0\n");
    status &= Get_MAIN_PSC_State( PD_A53_0, LPSC_A53_0);
    GEL_TextOut( "State of LPSC_A53_1\n");
    status &= Get_MAIN_PSC_State( PD_A53_1, LPSC_A53_1);
    GEL_TextOut( "State of LPSC_A53_2\n");
    status &= Get_MAIN_PSC_State( PD_A53_2, LPSC_A53_2);
    GEL_TextOut( "State of LPSC_A53_3\n");
    status &= Get_MAIN_PSC_State( PD_A53_3, LPSC_A53_3);
    GEL_TextOut( "State of LPSC_A53_CLUSTER_0\n");
    status &= Get_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0);
    GEL_TextOut( "State of LPSC_A53_CLUSTER_0_PBIST\n");
    status &= Get_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST);
    GEL_TextOut( "State of LPSC_A53_CLUSTER_1\n");
    status &= Get_MAIN_PSC_State( PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1);
    GEL_TextOut( "State of LPSC_A53_CLUSTER_1_PBIST\n");
    status &= Get_MAIN_PSC_State( PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1_PBIST);
    GEL_TextOut( "State of LPSC_MAIN_DEBUG\n");
    status &= Get_MAIN_PSC_State( PD_DEBUG, LPSC_MAIN_DEBUG);
    GEL_TextOut( "State of LPSC_MMC\n");
    status &= Get_MAIN_PSC_State( PD_PER, LPSC_MMC);
    GEL_TextOut( "State of LPSC_CAL\n");
    status &= Get_MAIN_PSC_State( PD_PER, LPSC_CAL);
    GEL_TextOut( "State of LPSC_PCIE_0\n");
    status &= Get_MAIN_PSC_State( PD_PER, LPSC_PCIE_0);
    GEL_TextOut( "State of LPSC_PER_COMMON\n");
    status &= Get_MAIN_PSC_State( PD_PER, LPSC_PER_COMMON);
    GEL_TextOut( "State of LPSC_NB\n");
    status &= Get_MAIN_PSC_State( PD_PER, LPSC_NB);
    GEL_TextOut( "State of LPSC_DSS\n");
    status &= Get_MAIN_PSC_State( PD_PER2, LPSC_DSS);
    GEL_TextOut( "State of LPSC_PCIE_1\n");
    status &= Get_MAIN_PSC_State( PD_PER2, LPSC_PCIE_1);
    GEL_TextOut( "State of LPSC_USB_0\n");
    status &= Get_MAIN_PSC_State( PD_PER2, LPSC_USB_0);
    GEL_TextOut( "State of LPSC_USB_1\n");
    status &= Get_MAIN_PSC_State( PD_PER2, LPSC_USB_1);
    GEL_TextOut( "State of LPSC_SAUL\n");
    status &= Get_MAIN_PSC_State( PD_PER2, LPSC_SAUL);
    GEL_TextOut( "State of LPSC_SERDES_0\n");
    status &= Get_MAIN_PSC_State( PD_SERDES, LPSC_SERDES_0);
    GEL_TextOut( "State of LPSC_SERDES_1\n");
    status &= Get_MAIN_PSC_State( PD_SERDES, LPSC_SERDES_1);
    GEL_TextOut( "State of LPSC_ICSSG_0\n");
    status &= Get_MAIN_PSC_State( PD_ICSSG, LPSC_ICSSG_0);
    GEL_TextOut( "State of LPSC_ICSSG_1\n");
    status &= Get_MAIN_PSC_State( PD_ICSSG, LPSC_ICSSG_1);
    GEL_TextOut( "State of LPSC_ICSSG_2\n");
    status &= Get_MAIN_PSC_State( PD_ICSSG2, LPSC_ICSSG_2);
    GEL_TextOut( "State of LPSC_GPU\n");
    status &= Get_MAIN_PSC_State( PD_GPU, LPSC_GPU);
    GEL_TextOut( "State of LPSC_GPU_PBIST\n");
    status &= Get_MAIN_PSC_State( PD_GPU, LPSC_GPU_PBIST);
    GEL_TextOut( "State of LPSC_EMIF_DATA\n");
    status &= Get_MAIN_PSC_State( PD_EMIF, LPSC_EMIF_DATA);
    GEL_TextOut( "State of LPSC_EMIF_CFG\n");
    status &= Get_MAIN_PSC_State( PD_EMIF, LPSC_EMIF_CFG);
    GEL_TextOut( "Getting the state of all MAIN peripherals done. \n");
    return status;}

menuitem "Power Sleep Controller/WKUP PSC Power Controls";

hotmenu WKUP_PSC_Peripheral_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up WKUP + MCU Domain peripherals. \n");
    GEL_TextOut( "Powering up LPSC_WKUP_COMMON\n");
    status &= Set_MAIN_PSC_State( PD_WKUP, LPSC_WKUP_COMMON, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_DMSC\n");
    status &= Set_MAIN_PSC_State( PD_WKUP, LPSC_DMSC, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_WKUP2MCU\n");
    status &= Set_MAIN_PSC_State( PD_WKUP, LPSC_WKUP2MCU, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_WKUP2MAIN_INFRA\n");
    status &= Set_MAIN_PSC_State( PD_WKUP, LPSC_WKUP2MAIN_INFRA, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_DEBUG2DMSC\n");
    status &= Set_MAIN_PSC_State( PD_WKUP, LPSC_DEBUG2DMSC, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_WKUP_GPIO\n");
    status &= Set_MAIN_PSC_State( PD_WKUP, LPSC_WKUP_GPIO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU2MAIN_INFRA\n");
    status &= Set_MAIN_PSC_State( PD_MCU, LPSC_MCU2MAIN_INFRA, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU2MAIN\n");
    status &= Set_MAIN_PSC_State( PD_MCU, LPSC_MCU2MAIN, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU2WKUP\n");
    status &= Set_MAIN_PSC_State( PD_MCU, LPSC_MCU2WKUP, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN2MCU\n");
    status &= Set_MAIN_PSC_State( PD_MCU, LPSC_MAIN2MCU, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_COMMON\n");
    status &= Set_MAIN_PSC_State( PD_MCU, LPSC_MCU_COMMON, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_TEST\n");
    status &= Set_MAIN_PSC_State( PD_MCU, LPSC_MCU_TEST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_MCAN_0\n");
    status &= Set_MAIN_PSC_State( PD_MCU, LPSC_MCU_MCAN_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_MCAN_1\n");
    status &= Set_MAIN_PSC_State( PD_MCU, LPSC_MCU_MCAN_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_OSPI_0\n");
    status &= Set_MAIN_PSC_State( PD_MCU, LPSC_MCU_OSPI_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_OSPI_1\n");
    status &= Set_MAIN_PSC_State( PD_MCU, LPSC_MCU_OSPI_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_HYPERBUS\n");
    status &= Set_MAIN_PSC_State( PD_MCU, LPSC_MCU_HYPERBUS, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_DEBUG\n");
    status &= Set_MAIN_PSC_State( PD_MCU, LPSC_MCU_DEBUG, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_R5_0\n");
    status &= Set_MAIN_PSC_State( PD_MCU_PULSAR, LPSC_MCU_R5_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_R5_1\n");
    status &= Set_MAIN_PSC_State( PD_MCU_PULSAR, LPSC_MCU_R5_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up WKUP + MCU Domain peripherals done. \n");
    return status;}

hotmenu Get_WKUP_PSC_Peripheral_States()
{
    int status = 1;    GEL_TextOut( "Getting all WKUP + MCU peripheral states in progress......\n");
    GEL_TextOut( "State of LPSC_WKUP_COMMON\n");
    status &= Get_WKUP_PSC_State( PD_WKUP, LPSC_WKUP_COMMON);
    GEL_TextOut( "State of LPSC_DMSC\n");
    status &= Get_WKUP_PSC_State( PD_WKUP, LPSC_DMSC);
    GEL_TextOut( "State of LPSC_WKUP2MCU\n");
    status &= Get_WKUP_PSC_State( PD_WKUP, LPSC_WKUP2MCU);
    GEL_TextOut( "State of LPSC_WKUP2MAIN_INFRA\n");
    status &= Get_WKUP_PSC_State( PD_WKUP, LPSC_WKUP2MAIN_INFRA);
    GEL_TextOut( "State of LPSC_DEBUG2DMSC\n");
    status &= Get_WKUP_PSC_State( PD_WKUP, LPSC_DEBUG2DMSC);
    GEL_TextOut( "State of LPSC_WKUP_GPIO\n");
    status &= Get_WKUP_PSC_State( PD_WKUP, LPSC_WKUP_GPIO);
    GEL_TextOut( "State of LPSC_MCU2MAIN_INFRA\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU2MAIN_INFRA);
    GEL_TextOut( "State of LPSC_MCU2MAIN\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU2MAIN);
    GEL_TextOut( "State of LPSC_MCU2WKUP\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU2WKUP);
    GEL_TextOut( "State of LPSC_MAIN2MCU\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MAIN2MCU);
    GEL_TextOut( "State of LPSC_MCU_COMMON\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU_COMMON);
    GEL_TextOut( "State of LPSC_MCU_TEST\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU_TEST);
    GEL_TextOut( "State of LPSC_MCU_MCAN_0\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU_MCAN_0);
    GEL_TextOut( "State of LPSC_MCU_MCAN_1\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU_MCAN_1);
    GEL_TextOut( "State of LPSC_MCU_OSPI_0\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU_OSPI_0);
    GEL_TextOut( "State of LPSC_MCU_OSPI_1\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU_OSPI_1);
    GEL_TextOut( "State of LPSC_MCU_HYPERBUS\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU_HYPERBUS);
    GEL_TextOut( "State of LPSC_MCU_DEBUG\n");
    status &= Get_WKUP_PSC_State( PD_MCU, LPSC_MCU_DEBUG);
    GEL_TextOut( "State of LPSC_MCU_R5_0\n");
    status &= Get_WKUP_PSC_State( PD_MCU_PULSAR, LPSC_MCU_R5_0);
    GEL_TextOut( "State of LPSC_MCU_R5_1\n");
    status &= Get_WKUP_PSC_State( PD_MCU_PULSAR, LPSC_MCU_R5_1);
    GEL_TextOut( "Getting the state of all WKUP + MCU peripherals done. \n");
    return status;}

menuitem "Power Sleep Controller/Power Up by Power Domain Controls";

hotmenu PD_WKUP_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_WKUP. \n");
    GEL_TextOut( "Powering up LPSC_WKUP_COMMON\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP_COMMON, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_DMSC\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_DMSC, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_WKUP2MCU\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP2MCU, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_WKUP2MAIN_INFRA\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP2MAIN_INFRA, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_DEBUG2DMSC\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_DEBUG2DMSC, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_WKUP_GPIO\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP_GPIO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_WKUP done. \n");
    return status;}

hotmenu PD_MCU_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_MCU. \n");
    GEL_TextOut( "Powering up LPSC_MCU2MAIN_INFRA\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU2MAIN_INFRA, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU2MAIN\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU2MAIN, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU2WKUP\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU2WKUP, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN2MCU\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MAIN2MCU, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_COMMON\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_COMMON, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_TEST\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_TEST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_MCAN_0\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_MCAN_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_MCAN_1\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_MCAN_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_OSPI_0\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_OSPI_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_OSPI_1\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_OSPI_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_HYPERBUS\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_HYPERBUS, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_DEBUG\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_DEBUG, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_MCU done. \n");
    return status;}

hotmenu PD_MCU_PULSAR_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_MCU_PULSAR. \n");
    GEL_TextOut( "Powering up LPSC_MCU_R5_0\n");
    status &= Set_WKUP_PSC_State( PD_MCU_PULSAR, LPSC_MCU_R5_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_R5_1\n");
    status &= Set_WKUP_PSC_State( PD_MCU_PULSAR, LPSC_MCU_R5_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_MCU_PULSAR done. \n");
    return status;}

hotmenu GP_CORE_CTL_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up GP_CORE_CTL. \n");
    GEL_TextOut( "Powering up LPSC_MAIN_INFRA\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_INFRA, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN_TEST\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_TEST, PSC_PD_ON, PSC_ENABLE);
    //GEL_TextOut( "Powering up LPSC_MAIN_PBIST\n");
    //status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_PBIST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up GP_CORE_CTL done. \n");
    return status;}

hotmenu PD_CC_TOP_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_CC_TOP. \n");
    GEL_TextOut( "Powering up LPSC_CC_TOP\n");
    status &= Set_MAIN_PSC_State( PD_CC_TOP, LPSC_CC_TOP, PSC_PD_ON, PSC_ENABLE);
    //GEL_TextOut( "Powering up LPSC_CC_TOP_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_CC_TOP, LPSC_CC_TOP_PBIST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_CC_TOP done. \n");
    return status;}

hotmenu PD_A53_0_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_A53_0. \n");
    GEL_TextOut( "Powering up LPSC_A53_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_0, LPSC_A53_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_A53_0 done. \n");
    return status;}

hotmenu PD_A53_1_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_A53_1. \n");
    GEL_TextOut( "Powering up LPSC_A53_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_1, LPSC_A53_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_A53_1 done. \n");
    return status;}

hotmenu PD_A53_2_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_A53_2. \n");
    GEL_TextOut( "Powering up LPSC_A53_2\n");
    status &= Set_MAIN_PSC_State( PD_A53_2, LPSC_A53_2, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_A53_2 done. \n");
    return status;}

hotmenu PD_A53_3_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_A53_3. \n");
    GEL_TextOut( "Powering up LPSC_A53_3\n");
    status &= Set_MAIN_PSC_State( PD_A53_3, LPSC_A53_3, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_A53_3 done. \n");
    return status;}

hotmenu PD_A53_CLUSTER_0_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_A53_CLUSTER_0. \n");
    GEL_TextOut( "Powering up LPSC_A53_CLUSTER_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0, PSC_PD_ON, PSC_ENABLE);
    //GEL_TextOut( "Powering up LPSC_A53_CLUSTER_0_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_A53_CLUSTER_0 done. \n");
    return status;}

hotmenu PD_A53_CLUSTER_1_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_A53_CLUSTER_1. \n");
    GEL_TextOut( "Powering up LPSC_A53_CLUSTER_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1, PSC_PD_ON, PSC_ENABLE);
    //GEL_TextOut( "Powering up LPSC_A53_CLUSTER_1_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1_PBIST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_A53_CLUSTER_1 done. \n");
    return status;}

hotmenu PD_DEBUG_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_DEBUG. \n");
    GEL_TextOut( "Powering up LPSC_MAIN_DEBUG\n");
    status &= Set_MAIN_PSC_State( PD_DEBUG, LPSC_MAIN_DEBUG, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_DEBUG done. \n");
    return status;}

hotmenu PD_PER_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_PER. \n");
    GEL_TextOut( "Powering up LPSC_MMC\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_MMC, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_CAL\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_CAL, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_PCIE_0\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_PCIE_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_PER_COMMON\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_PER_COMMON, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_NB\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_NB, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_PER done. \n");
    return status;}

hotmenu PD_PER2_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_PER2. \n");
    GEL_TextOut( "Powering up LPSC_DSS\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_DSS, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_PCIE_1\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_PCIE_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_USB_0\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_USB_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_USB_1\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_USB_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_SAUL\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_SAUL, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_PER2 done. \n");
    return status;}

hotmenu PD_SERDES_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_SERDES. \n");
    GEL_TextOut( "Powering up LPSC_SERDES_0\n");
    status &= Set_MAIN_PSC_State( PD_SERDES, LPSC_SERDES_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_SERDES_1\n");
    status &= Set_MAIN_PSC_State( PD_SERDES, LPSC_SERDES_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_SERDES done. \n");
    return status;}

hotmenu PD_ICSSG_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_ICSSG. \n");
    GEL_TextOut( "Powering up LPSC_ICSSG_0\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG, LPSC_ICSSG_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_ICSSG_1\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG, LPSC_ICSSG_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_ICSSG done. \n");
    return status;}

hotmenu PD_ICSSG2_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_ICSSG2. \n");
    GEL_TextOut( "Powering up LPSC_ICSSG_2\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG2, LPSC_ICSSG_2, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_ICSSG2 done. \n");
    return status;}

hotmenu PD_GPU_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_GPU. \n");
    GEL_TextOut( "Powering up LPSC_GPU\n");
    status &= Set_MAIN_PSC_State( PD_GPU, LPSC_GPU, PSC_PD_ON, PSC_ENABLE);
    //GEL_TextOut( "Powering up LPSC_GPU_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_GPU, LPSC_GPU_PBIST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_GPU done. \n");
    return status;}

hotmenu PD_EMIF_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_EMIF. \n");
    GEL_TextOut( "Powering up LPSC_EMIF_DATA\n");
    status &= Set_MAIN_PSC_State( PD_EMIF, LPSC_EMIF_DATA, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_EMIF_CFG\n");
    status &= Set_MAIN_PSC_State( PD_EMIF, LPSC_EMIF_CFG, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_EMIF done. \n");
    return status;}

menuitem "Power Sleep Controller/Clock Gate by Power Domain Controls";

hotmenu PD_WKUP_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating PD_WKUP. \n");
    GEL_TextOut( "Clock Gating LPSC_WKUP_COMMON\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP_COMMON, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_DMSC\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_DMSC, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_WKUP2MCU\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP2MCU, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_WKUP2MAIN_INFRA\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP2MAIN_INFRA, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_DEBUG2DMSC\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_DEBUG2DMSC, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_WKUP_GPIO\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP_GPIO, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_WKUP done. \n");
    return status;}

hotmenu PD_MCU_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating PD_MCU. \n");
    GEL_TextOut( "Clock Gating LPSC_MCU2MAIN_INFRA\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU2MAIN_INFRA, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MCU2MAIN\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU2MAIN, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MCU2WKUP\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU2WKUP, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MAIN2MCU\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MAIN2MCU, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MCU_COMMON\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_COMMON, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MCU_TEST\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_TEST, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MCU_MCAN_0\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_MCAN_0, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MCU_MCAN_1\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_MCAN_1, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MCU_OSPI_0\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_OSPI_0, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MCU_OSPI_1\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_OSPI_1, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MCU_HYPERBUS\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_HYPERBUS, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MCU_DEBUG\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_DEBUG, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_MCU done. \n");
    return status;}

hotmenu PD_MCU_PULSAR_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating PD_MCU_PULSAR. \n");
    GEL_TextOut( "Clock Gating LPSC_MCU_R5_0\n");
    status &= Set_WKUP_PSC_State( PD_MCU_PULSAR, LPSC_MCU_R5_0, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MCU_R5_1\n");
    status &= Set_WKUP_PSC_State( PD_MCU_PULSAR, LPSC_MCU_R5_1, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_MCU_PULSAR done. \n");
    return status;}

hotmenu GP_CORE_CTL_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating GP_CORE_CTL. \n");
    GEL_TextOut( "Clock Gating LPSC_MAIN_INFRA\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_INFRA, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MAIN_TEST\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_TEST, PSC_PD_ON, PSC_DISABLE);
    //GEL_TextOut( "Clock Gating LPSC_MAIN_PBIST\n");
    //status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_PBIST, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating GP_CORE_CTL done. \n");
    return status;}

hotmenu PD_CC_TOP_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating PD_CC_TOP. \n");
    GEL_TextOut( "Clock Gating LPSC_CC_TOP\n");
    status &= Set_MAIN_PSC_State( PD_CC_TOP, LPSC_CC_TOP, PSC_PD_ON, PSC_DISABLE);
    //GEL_TextOut( "Clock Gating LPSC_CC_TOP_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_CC_TOP, LPSC_CC_TOP_PBIST, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_CC_TOP done. \n");
    return status;}

hotmenu PD_A53_0_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating PD_A53_0. \n");
    GEL_TextOut( "Clock Gating LPSC_A53_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_0, LPSC_A53_0, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_A53_0 done. \n");
    return status;}

hotmenu PD_A53_1_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating PD_A53_1. \n");
    GEL_TextOut( "Clock Gating LPSC_A53_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_1, LPSC_A53_1, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_A53_1 done. \n");
    return status;}

hotmenu PD_A53_2_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating PD_A53_2. \n");
    GEL_TextOut( "Clock Gating LPSC_A53_2\n");
    status &= Set_MAIN_PSC_State( PD_A53_2, LPSC_A53_2, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_A53_2 done. \n");
    return status;}

hotmenu PD_A53_3_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating PD_A53_3. \n");
    GEL_TextOut( "Clock Gating LPSC_A53_3\n");
    status &= Set_MAIN_PSC_State( PD_A53_3, LPSC_A53_3, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_A53_3 done. \n");
    return status;}

hotmenu PD_A53_CLUSTER_0_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating PD_A53_CLUSTER_0. \n");
    GEL_TextOut( "Clock Gating LPSC_A53_CLUSTER_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0, PSC_PD_ON, PSC_DISABLE);
    //GEL_TextOut( "Clock Gating LPSC_A53_CLUSTER_0_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_A53_CLUSTER_0 done. \n");
    return status;}

hotmenu PD_A53_CLUSTER_1_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating PD_A53_CLUSTER_1. \n");
    GEL_TextOut( "Clock Gating LPSC_A53_CLUSTER_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1, PSC_PD_ON, PSC_DISABLE);
    //GEL_TextOut( "Clock Gating LPSC_A53_CLUSTER_1_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1_PBIST, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_A53_CLUSTER_1 done. \n");
    return status;}

hotmenu PD_DEBUG_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating PD_DEBUG. \n");
    GEL_TextOut( "Clock Gating LPSC_MAIN_DEBUG\n");
    status &= Set_MAIN_PSC_State( PD_DEBUG, LPSC_MAIN_DEBUG, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_DEBUG done. \n");
    return status;}

hotmenu PD_PER_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating PD_PER. \n");
    GEL_TextOut( "Clock Gating LPSC_MMC\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_MMC, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_CAL\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_CAL, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_PCIE_0\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_PCIE_0, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_PER_COMMON\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_PER_COMMON, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_NB\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_NB, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_PER done. \n");
    return status;}

hotmenu PD_PER2_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating PD_PER2. \n");
    GEL_TextOut( "Clock Gating LPSC_DSS\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_DSS, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_PCIE_1\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_PCIE_1, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_USB_0\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_USB_0, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_USB_1\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_USB_1, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_SAUL\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_SAUL, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_PER2 done. \n");
    return status;}

hotmenu PD_SERDES_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating PD_SERDES. \n");
    GEL_TextOut( "Clock Gating LPSC_SERDES_0\n");
    status &= Set_MAIN_PSC_State( PD_SERDES, LPSC_SERDES_0, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_SERDES_1\n");
    status &= Set_MAIN_PSC_State( PD_SERDES, LPSC_SERDES_1, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_SERDES done. \n");
    return status;}

hotmenu PD_ICSSG_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating PD_ICSSG. \n");
    GEL_TextOut( "Clock Gating LPSC_ICSSG_0\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG, LPSC_ICSSG_0, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_ICSSG_1\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG, LPSC_ICSSG_1, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_ICSSG done. \n");
    return status;}

hotmenu PD_ICSSG2_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating PD_ICSSG2. \n");
    GEL_TextOut( "Clock Gating LPSC_ICSSG_2\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG2, LPSC_ICSSG_2, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_ICSSG2 done. \n");
    return status;}

hotmenu PD_GPU_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating PD_GPU. \n");
    GEL_TextOut( "Clock Gating LPSC_GPU\n");
    status &= Set_MAIN_PSC_State( PD_GPU, LPSC_GPU, PSC_PD_ON, PSC_DISABLE);
    //GEL_TextOut( "Clock Gating LPSC_GPU_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_GPU, LPSC_GPU_PBIST, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_GPU done. \n");
    return status;}

hotmenu PD_EMIF_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock gating PD_EMIF. \n");
    GEL_TextOut( "Clock Gating LPSC_EMIF_DATA\n");
    status &= Set_MAIN_PSC_State( PD_EMIF, LPSC_EMIF_DATA, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_EMIF_CFG\n");
    status &= Set_MAIN_PSC_State( PD_EMIF, LPSC_EMIF_CFG, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_EMIF done. \n");
    return status;}

menuitem "Power Sleep Controller/Reset by Power Domain Controls";

hotmenu PD_WKUP_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_WKUP. \n");
    GEL_TextOut( "Resetting LPSC_WKUP_COMMON\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP_COMMON, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_DMSC\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_DMSC, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_WKUP2MCU\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP2MCU, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_WKUP2MAIN_INFRA\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP2MAIN_INFRA, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_DEBUG2DMSC\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_DEBUG2DMSC, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_WKUP_GPIO\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP_GPIO, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_WKUP done. \n");
    return status;}

hotmenu PD_MCU_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_MCU. \n");
    GEL_TextOut( "Resetting LPSC_MCU2MAIN_INFRA\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU2MAIN_INFRA, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MCU2MAIN\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU2MAIN, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MCU2WKUP\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU2WKUP, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MAIN2MCU\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MAIN2MCU, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MCU_COMMON\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_COMMON, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MCU_TEST\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_TEST, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MCU_MCAN_0\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_MCAN_0, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MCU_MCAN_1\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_MCAN_1, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MCU_OSPI_0\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_OSPI_0, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MCU_OSPI_1\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_OSPI_1, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MCU_HYPERBUS\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_HYPERBUS, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MCU_DEBUG\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_DEBUG, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_MCU done. \n");
    return status;}

hotmenu PD_MCU_PULSAR_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_MCU_PULSAR. \n");
    GEL_TextOut( "Resetting LPSC_MCU_R5_0\n");
    status &= Set_WKUP_PSC_State( PD_MCU_PULSAR, LPSC_MCU_R5_0, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MCU_R5_1\n");
    status &= Set_WKUP_PSC_State( PD_MCU_PULSAR, LPSC_MCU_R5_1, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_MCU_PULSAR done. \n");
    return status;}

hotmenu GP_CORE_CTL_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting GP_CORE_CTL. \n");
    GEL_TextOut( "Resetting LPSC_MAIN_INFRA\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_INFRA, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MAIN_TEST\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_TEST, PSC_PD_ON, PSC_SYNCRESET);
    //GEL_TextOut( "Resetting LPSC_MAIN_PBIST\n");
   //status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_PBIST, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting GP_CORE_CTL done. \n");
    return status;}

hotmenu PD_CC_TOP_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_CC_TOP. \n");
    GEL_TextOut( "Resetting LPSC_CC_TOP\n");
    status &= Set_MAIN_PSC_State( PD_CC_TOP, LPSC_CC_TOP, PSC_PD_ON, PSC_SYNCRESET);
    //GEL_TextOut( "Resetting LPSC_CC_TOP_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_CC_TOP, LPSC_CC_TOP_PBIST, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_CC_TOP done. \n");
    return status;}

hotmenu PD_A53_0_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_A53_0. \n");
    GEL_TextOut( "Resetting LPSC_A53_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_0, LPSC_A53_0, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_A53_0 done. \n");
    return status;}

hotmenu PD_A53_1_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_A53_1. \n");
    GEL_TextOut( "Resetting LPSC_A53_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_1, LPSC_A53_1, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_A53_1 done. \n");
    return status;}

hotmenu PD_A53_2_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_A53_2. \n");
    GEL_TextOut( "Resetting LPSC_A53_2\n");
    status &= Set_MAIN_PSC_State( PD_A53_2, LPSC_A53_2, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_A53_2 done. \n");
    return status;}

hotmenu PD_A53_3_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_A53_3. \n");
    GEL_TextOut( "Resetting LPSC_A53_3\n");
    status &= Set_MAIN_PSC_State( PD_A53_3, LPSC_A53_3, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_A53_3 done. \n");
    return status;}

hotmenu PD_A53_CLUSTER_0_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_A53_CLUSTER_0. \n");
    GEL_TextOut( "Resetting LPSC_A53_CLUSTER_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0, PSC_PD_ON, PSC_SYNCRESET);
    //GEL_TextOut( "Resetting LPSC_A53_CLUSTER_0_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_A53_CLUSTER_0 done. \n");
    return status;}

hotmenu PD_A53_CLUSTER_1_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_A53_CLUSTER_1. \n");
    GEL_TextOut( "Resetting LPSC_A53_CLUSTER_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1, PSC_PD_ON, PSC_SYNCRESET);
    //GEL_TextOut( "Resetting LPSC_A53_CLUSTER_1_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1_PBIST, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_A53_CLUSTER_1 done. \n");
    return status;}

hotmenu PD_DEBUG_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_DEBUG. \n");
    GEL_TextOut( "Resetting LPSC_MAIN_DEBUG\n");
    status &= Set_MAIN_PSC_State( PD_DEBUG, LPSC_MAIN_DEBUG, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_DEBUG done. \n");
    return status;}

hotmenu PD_PER_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_PER. \n");
    GEL_TextOut( "Resetting LPSC_MMC\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_MMC, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_CAL\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_CAL, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_PCIE_0\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_PCIE_0, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_PER_COMMON\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_PER_COMMON, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_NB\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_NB, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_PER done. \n");
    return status;}

hotmenu PD_PER2_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_PER2. \n");
    GEL_TextOut( "Resetting LPSC_DSS\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_DSS, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_PCIE_1\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_PCIE_1, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_USB_0\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_USB_0, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_USB_1\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_USB_1, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_SAUL\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_SAUL, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_PER2 done. \n");
    return status;}

hotmenu PD_SERDES_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_SERDES. \n");
    GEL_TextOut( "Resetting LPSC_SERDES_0\n");
    status &= Set_MAIN_PSC_State( PD_SERDES, LPSC_SERDES_0, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_SERDES_1\n");
    status &= Set_MAIN_PSC_State( PD_SERDES, LPSC_SERDES_1, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_SERDES done. \n");
    return status;}

hotmenu PD_ICSSG_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_ICSSG. \n");
    GEL_TextOut( "Resetting LPSC_ICSSG_0\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG, LPSC_ICSSG_0, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_ICSSG_1\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG, LPSC_ICSSG_1, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_ICSSG_2\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG2, LPSC_ICSSG_2, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_ICSSG done. \n");
    return status;}

hotmenu PD_ICSSG2_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_ICSSG2. \n");
    GEL_TextOut( "Resetting LPSC_ICSSG_2\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG2, LPSC_ICSSG_2, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_ICSSG2 done. \n");
    return status;}

hotmenu PD_GPU_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_GPU. \n");
    GEL_TextOut( "Resetting LPSC_GPU\n");
    status &= Set_MAIN_PSC_State( PD_GPU, LPSC_GPU, PSC_PD_ON, PSC_SYNCRESET);
    //GEL_TextOut( "Resetting LPSC_GPU_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_GPU, LPSC_GPU_PBIST, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_GPU done. \n");
    return status;}

hotmenu PD_EMIF_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_EMIF. \n");
    GEL_TextOut( "Resetting LPSC_EMIF_DATA\n");
    status &= Set_MAIN_PSC_State( PD_EMIF, LPSC_EMIF_DATA, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_EMIF_CFG\n");
    status &= Set_MAIN_PSC_State( PD_EMIF, LPSC_EMIF_CFG, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_EMIF done. \n");
    return status;}

menuitem "Power Sleep Controller/Power Down by Power Domain Controls";

hotmenu PD_WKUP_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_WKUP. \n");
    GEL_TextOut( "Powering Down LPSC_WKUP_COMMON\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP_COMMON, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_DMSC\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_DMSC, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_WKUP2MCU\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP2MCU, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_WKUP2MAIN_INFRA\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP2MAIN_INFRA, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_DEBUG2DMSC\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_DEBUG2DMSC, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_WKUP_GPIO\n");
    status &= Set_WKUP_PSC_State( PD_WKUP, LPSC_WKUP_GPIO, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_WKUP done. \n");
    return status;}

hotmenu PD_MCU_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_MCU. \n");
    GEL_TextOut( "Powering Down LPSC_MCU2MAIN_INFRA\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU2MAIN_INFRA, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_MCU2MAIN\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU2MAIN, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_MCU2WKUP\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU2WKUP, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_MAIN2MCU\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MAIN2MCU, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_MCU_COMMON\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_COMMON, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_MCU_TEST\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_TEST, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_MCU_MCAN_0\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_MCAN_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_MCU_MCAN_1\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_MCAN_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_MCU_OSPI_0\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_OSPI_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_MCU_OSPI_1\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_OSPI_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_MCU_HYPERBUS\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_HYPERBUS, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_MCU_DEBUG\n");
    status &= Set_WKUP_PSC_State( PD_MCU, LPSC_MCU_DEBUG, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_MCU done. \n");
    return status;}

hotmenu PD_MCU_PULSAR_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_MCU_PULSAR. \n");
    GEL_TextOut( "Powering Down LPSC_MCU_R5_0\n");
    status &= Set_WKUP_PSC_State( PD_MCU_PULSAR, LPSC_MCU_R5_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_MCU_R5_1\n");
    status &= Set_WKUP_PSC_State( PD_MCU_PULSAR, LPSC_MCU_R5_1, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_MCU_PULSAR done. \n");
    return status;}

hotmenu GP_CORE_CTL_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down GP_CORE_CTL. \n");
    GEL_TextOut( "Powering Down LPSC_MAIN_INFRA\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_INFRA, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_MAIN_TEST\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_TEST, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_MAIN_PBIST\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_PBIST, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down GP_CORE_CTL done. \n");
    return status;}

hotmenu PD_CC_TOP_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_CC_TOP. \n");
    GEL_TextOut( "Powering Down LPSC_CC_TOP\n");
    status &= Set_MAIN_PSC_State( PD_CC_TOP, LPSC_CC_TOP, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_CC_TOP_PBIST\n");
    status &= Set_MAIN_PSC_State( PD_CC_TOP, LPSC_CC_TOP_PBIST, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_CC_TOP done. \n");
    return status;}

hotmenu PD_A53_0_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_A53_0. \n");
    GEL_TextOut( "Powering Down LPSC_A53_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_0, LPSC_A53_0, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_A53_0 done. \n");
    return status;}

hotmenu PD_A53_1_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_A53_1. \n");
    GEL_TextOut( "Powering Down LPSC_A53_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_1, LPSC_A53_1, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_A53_1 done. \n");
    return status;}

hotmenu PD_A53_2_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_A53_2. \n");
    GEL_TextOut( "Powering Down LPSC_A53_2\n");
    status &= Set_MAIN_PSC_State( PD_A53_2, LPSC_A53_2, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_A53_2 done. \n");
    return status;}

hotmenu PD_A53_3_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_A53_3. \n");
    GEL_TextOut( "Powering Down LPSC_A53_3\n");
    status &= Set_MAIN_PSC_State( PD_A53_3, LPSC_A53_3, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_A53_3 done. \n");
    return status;}

hotmenu PD_A53_CLUSTER_0_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_A53_CLUSTER_0. \n");
    GEL_TextOut( "Powering Down LPSC_A53_CLUSTER_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    //GEL_TextOut( "Powering Down LPSC_A53_CLUSTER_0_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_A53_CLUSTER_0 done. \n");
    return status;}

hotmenu PD_A53_CLUSTER_1_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_A53_CLUSTER_1. \n");
    GEL_TextOut( "Powering Down LPSC_A53_CLUSTER_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    //GEL_TextOut( "Powering Down LPSC_A53_CLUSTER_1_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_1, LPSC_A53_CLUSTER_1_PBIST, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_A53_CLUSTER_1 done. \n");
    return status;}

hotmenu PD_DEBUG_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_DEBUG. \n");
    GEL_TextOut( "Powering Down LPSC_MAIN_DEBUG\n");
    status &= Set_MAIN_PSC_State( PD_DEBUG, LPSC_MAIN_DEBUG, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_DEBUG done. \n");
    return status;}

hotmenu PD_PER_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_PER. \n");
    GEL_TextOut( "Powering Down LPSC_MMC\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_MMC, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_CAL\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_CAL, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_PCIE_0\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_PCIE_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_PER_COMMON\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_PER_COMMON, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_NB\n");
    status &= Set_MAIN_PSC_State( PD_PER, LPSC_NB, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_PER done. \n");
    return status;}

hotmenu PD_PER2_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_PER2. \n");
    GEL_TextOut( "Powering Down LPSC_DSS\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_DSS, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_PCIE_1\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_PCIE_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_USB_0\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_USB_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_USB_1\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_USB_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_SAUL\n");
    status &= Set_MAIN_PSC_State( PD_PER2, LPSC_SAUL, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_PER2 done. \n");
    return status;}

hotmenu PD_SERDES_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_SERDES. \n");
    GEL_TextOut( "Powering Down LPSC_SERDES_0\n");
    status &= Set_MAIN_PSC_State( PD_SERDES, LPSC_SERDES_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_SERDES_1\n");
    status &= Set_MAIN_PSC_State( PD_SERDES, LPSC_SERDES_1, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_SERDES done. \n");
    return status;}

hotmenu PD_ICSSG_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_ICSSG. \n");
    GEL_TextOut( "Powering Down LPSC_ICSSG_0\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG, LPSC_ICSSG_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_ICSSG_1\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG, LPSC_ICSSG_1, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_ICSSG done. \n");
    return status;}

hotmenu PD_ICSSG2_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_ICSSG2. \n");
    GEL_TextOut( "Powering Down LPSC_ICSSG_2\n");
    status &= Set_MAIN_PSC_State( PD_ICSSG2, LPSC_ICSSG_2, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_ICSSG2 done. \n");
    return status;}

hotmenu PD_GPU_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_GPU. \n");
    GEL_TextOut( "Powering Down LPSC_GPU\n");
    status &= Set_MAIN_PSC_State( PD_GPU, LPSC_GPU, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    //GEL_TextOut( "Powering Down LPSC_GPU_PBIST\n");
    //status &= Set_MAIN_PSC_State( PD_GPU, LPSC_GPU_PBIST, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_GPU done. \n");
    return status;}

hotmenu PD_EMIF_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_EMIF. \n");
    GEL_TextOut( "Powering Down LPSC_EMIF_DATA\n");
    status &= Set_MAIN_PSC_State( PD_EMIF, LPSC_EMIF_DATA, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_EMIF_CFG\n");
    status &= Set_MAIN_PSC_State( PD_EMIF, LPSC_EMIF_CFG, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_EMIF done. \n");
    return status;}

