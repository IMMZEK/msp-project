<?xml version="1.0" encoding="UTF-8"?>
<PropertyList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- Nodes -->
	<node id="FlashProgrammerNode">
		<name>Flash Settings</name>
		<children>
			<child>CommunicationSettingBasic</child>
			<child>EraseSetting</child>
			<child>VerifySetting</child>
			<child>ReadSetting</child>
			<child>ResetSetting</child>
		</children>
	</node>

	<!-- Group -->
	<group id="CommunicationSettingBasic">
		<name>Communication Settings</name>
		<children> 
		    <child>ComPortInfoText</child>
			<child>ComPortTextField</child>
			<child>ToolInfoTextRocket</child>
			<child>ToolInfoTextUSBtoSerial</child>
			<child>Tool</child>
			<child>UARTSpeedSelection</child>
		</children>
	</group>

	<group id="EraseSetting">
		<name>Erase Settings</name>
		<children> 
			<child>EraseColdWarmResetInfoText</child>
			<child>EraseSettingSelection</child>
		</children>
	</group>

	<group id="VerifySetting">
		<name>Verify Settings</name>
		<children> 
			<child>VerifyInfoText</child>
			<child>VerifyCheckbox</child>
		</children>
	</group>

	<group id="ReadSetting">
		<name>Read Settings</name>
		<children> 
			<child>PasswordInfoText</child>
			<child>PasswordExampleInfoText</child>
			<child>PasswordTextField</child>
			<child>ReadImageFileInfoText</child>
			<child>ReadImageFileTextField</child>
			<child>ReadStartAddressTextField</child>
			<child>ReadLengthTextField</child>
			<child>ReadButton</child>
		</children>
	</group>

	<group id="ResetSetting">
		<name>Reset Settings</name>
		<children> 
			<child>ResetCheckbox</child>
			<child>ResetAddress</child>
		</children>
	</group>

	<!-- Categories-->
	<categories>
		<category>Setup</category>
		<category>Erase</category>
		<category>Verify</category>
		<category>Read</category>
		<category>Reset</category>
	</categories>

	<!-- Property Definitions : CommunicationSetting-->
	<property id="ComPortInfoText">
		<target>generic</target>
		<name>Example - COM1 (Windows), /dev/ttyACM0 (Linux), /dev/tty.usbmodem1411 (OS X) </name>
		<valueType>Text</valueType>
		<categories>
			<category>Setup</category>
		</categories>
		<quickSetting /> 
	</property>

	<property id="ComPortTextField">
		<target>generic</target>
		<name>COM Port</name>
		<valueType>String</valueType>
		<defaultValue>/dev/ttyACM0</defaultValue>
		<description>Enter the serial port for bootloader communication
		</description>
		<categories>
            <category>Setup</category>
        </categories>
		<quickSetting /> 
	</property>

	<property id="ToolInfoTextRocket">
		<target>generic</target>
		<name>By using MSP-BSL "Rocket", the invoke sequence is generated by the RST and TST / TCK pins.</name>
		<valueType>Text</valueType>
		<categories>
			<category>Setup</category>
		</categories>
		<quickSetting /> 
	</property>

	<property id="ToolInfoTextUSBtoSerial">
		<target>generic</target>
		<name>By using USB to Serial Converter, the invoke sequence is generated by the DTR pin for the RST pin and RTS pin for the TST / TCK pin.</name>
		<valueType>Text</valueType>
		<categories>
			<category>Setup</category>
		</categories>
		<quickSetting /> 
	</property>

	<property id="Tool">
		<target>generic</target>
		<name>Communication Bridge</name>
		<valueType>ChoiceList</valueType>
		<values>
			<value>MSP-BSL "Rocket"</value>
			<value>USB to Serial Converter</value>
		</values>
		<defaultValue>MSP-BSL "Rocket"</defaultValue>
		<description>Communication bridge to translate USB to serial communication protocol
		</description>
		<categories>
		<category>Setup</category>
		</categories>
		<quickSetting /> 
	</property>

	<property id="UARTSpeedSelection">
		<target>generic</target>
		<name>UART Speed</name>
		<valueType>ChoiceList</valueType>	
		<values>
			<value>9600</value>
			<value>19200</value>
			<value>38400</value>
		</values>
		<defaultValue>9600</defaultValue>
		<description>UART speed options supported
		</description>
		<categories>
		<category>Setup</category>
		</categories>
		<quickSetting /> 
	</property>

	<!-- Property Definitions : EraseSetting-->
	<property id="EraseColdWarmResetInfoText">
		<target>generic</target>
		<name>When entering the BSL by cold start (applying the BSL hardware entry sequence on the RST and TST pins), the LOCKA bit is automatically unlocked. A mass erase that is executed during BSL communication erases all parts of information memory and also main memory. When entering the BSL by warm start (by jumping to the BSL application from a software function), the LOCKA bit is not automatically unlocked. A mass erase performed in this state does not erase the information memory. The user application must ensure that LOCKA is cleared before the initialization of the BSL, so a mass erase command can erase the information memory.</name>
		<valueType>Text</valueType>
		<categories>
			<category>Erase</category>
		</categories>
	</property>

	<property id="EraseSettingSelection">
		<target>generic</target>
		<name>Erase Setting</name>
		<valueType>ChoiceList</valueType>
		<values>
			<value>Erase main and information memory</value>
			<value>Do not perform erase before programming</value>
		</values>
		<defaultValue>Erase main and information memory</defaultValue>
		<description>Erase options execution before programming
		</description>
		<categories>
		<category>Erase</category>
		</categories>
	</property>

	<!-- Property Definitions : VerifySetting-->
	<property id="VerifyInfoText">
		<target>generic</target>
		<name>Programming verification is done by reading back the programmed memory based on the given firmware image. This implies to the additional overall programming time.</name>
		<valueType>Text</valueType>
		<categories>
			<category>Verify</category>
		</categories>
	</property>

	<property id="VerifyCheckbox">
		<target>generic</target>
		<name>Automatic verification based on the given firmware image</name>
		<valueType>Boolean</valueType>
		<defaultValue>1</defaultValue>
		<description>Memory verification options after programming
		</description>
		<categories>
			<category>Verify</category>
		</categories>
	</property>

	<!-- Property Definitions : ReadSetting-->
	<property id="PasswordInfoText">
		<target>generic</target>
		<name>To be able to read the memory, the bootloader has to be unlocked by using a password. The password is a 32 byte long block of data which starts at offset 0xFFE0. Write the password in word-wise hexadecimal format starting with "0x" and with comma "," for separation.</name>
		<valueType>Text</valueType>
		<categories>
			<category>Read</category>
		</categories>
	</property>

	<property id="PasswordExampleInfoText">
		<target>generic</target>
		<name>Example: if the 32 bytes data at 0xFFE0 are 00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff 01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10, the password shall be written as: 0x00112233, 0x44556677, 0x8899aabb, 0xccddeeff, 0x01234567, 0x89abcdef, 0xfedcba98, 0x76543210. </name>
		<valueType>Text</valueType>
		<categories>
			<category>Read</category>
		</categories>
	</property>

	<property id="PasswordTextField">
		<target>generic</target>
		<name>Password</name>
		<valueType>String</valueType>
		<defaultValue></defaultValue>
		<description>Password to unlock the bootloader
		</description>
		<categories>
			<category>Read</category>
		</categories>
	</property>

	<property id="ReadImageFileInfoText">
		<target>generic</target>
		<name>Supported format files are: .txt , .hex, and .bin. Start address is read as hexadecimal format. Length of bytes is read as hexadecimal when started with "0x" and as the decimal without "0x".</name>
		<valueType>Text</valueType>
		<categories>
			<category>Read</category>
		</categories>
	</property>

	<property id="ReadImageFileTextField">
		<target>generic</target>
		<name>Read Image File</name>
		<valueType>String</valueType>
		<defaultValue></defaultValue>
		<description>File name storing the read content
		</description>
		<categories>
			<category>Read</category>
		</categories>
	</property>

	<property id="ReadStartAddressTextField">
		<target>generic</target>
		<name>Start Address</name>
		<valueType>String</valueType>
		<defaultValue></defaultValue>
		<description>Start address in memory to read
		</description>
		<categories>
			<category>Read</category>
		</categories>
	</property>

	<property id="ReadLengthTextField">
		<target>generic</target>
		<name>Length</name>
		<valueType>String</valueType>
		<defaultValue></defaultValue>
		<description>Number of bytes to read
		</description>
		<categories>
			<category>Read</category>
		</categories>
	</property>

	<property id="ReadButton">
		<target>generic</target>
		<name>Read</name>
		<valueType>Button</valueType>
		<action>DPActiveDebugSession.flash.performOperation("Read")</action>
		<description>Click this button to read the memory and store in a file
		</description>
		<categories>
			<category>Read</category>
		</categories>
	</property>

	<!-- Property Definitions : ResetSetting-->
	<property id="ResetCheckbox">
		<target>generic</target>
		<name>Set PC to given address</name>
		<valueType>Boolean</valueType>
		<defaultValue>0</defaultValue>
		<description>PC is set with given address after programming
		</description>
		<categories>
			<category>Reset</category>
		</categories>
	</property>

	<property id="ResetAddress">
		<target>generic</target>
		<name>Address</name>
		<valueType>String</valueType>
		<defaultValue></defaultValue>
		<enableIf>
			<property id="ResetCheckbox">1</property>
		</enableIf>
		<description>Set PC register is set with given address
		</description>
		<categories>
			<category>Reset</category>
		</categories>
	</property>
	<!-- Finish -->
</PropertyList>
