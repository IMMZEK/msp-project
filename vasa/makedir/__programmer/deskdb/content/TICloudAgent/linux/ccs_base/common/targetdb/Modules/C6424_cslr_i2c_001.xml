<?xml version="1.0" encoding="UTF-8"?>
<module id="I2C" HW_revision="" XML_version="1" description="I2C">
	<register id="ICOAR" acronym="ICOAR" offset="0x0000" width="32" description="I2C Own Address Register">
		<bitfield id="_RESV_1" width="22" begin="31" end="10" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="OADDR" width="10" begin="9" end="0" resetval="0" description="Own slave address. Provides the slave address of the I2C." range="" rwaccess="RW"/>
	</register>
	<register id="ICIMR" acronym="ICIMR" offset="0x0004" width="32" description="I2C Interrupt Mask Register">
		<bitfield id="_RESV_1" width="25" begin="31" end="7" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="AAS" width="1" begin="6" end="6" resetval="0" description="Address-As-Slave interrupt enable bit" range="" rwaccess="RW">
			<bitenum id="DISABLE" value="0" token="DISABLE" description="Mask interrupt"/>
			<bitenum id="ENABLE" value="1" token="ENABLE" description="Unmask interrupt"/>
		</bitfield>
		<bitfield id="SCD" width="1" begin="5" end="5" resetval="0" description="Stop Condition Detected interrupt enable bit" range="" rwaccess="RW">
			<bitenum id="DISABLE" value="0" token="DISABLE" description="Mask interrupt"/>
			<bitenum id="ENABLE" value="1" token="ENABLE" description="Unmask interrupt"/>
		</bitfield>
		<bitfield id="ICXRDY" width="1" begin="4" end="4" resetval="0" description="Trasmit-Data-Ready interrupt enable bit" range="" rwaccess="RW">
			<bitenum id="DISABLE" value="0" token="DISABLE" description="Mask interrupt"/>
			<bitenum id="ENABLE" value="1" token="ENABLE" description="Unmask interrupt"/>
		</bitfield>
		<bitfield id="ICRRDY" width="1" begin="3" end="3" resetval="0" description="Receive-Data-Ready interrupt enable bit" range="" rwaccess="RW">
			<bitenum id="DISABLE" value="0" token="DISABLE" description="Mask interrupt"/>
			<bitenum id="ENABLE" value="1" token="ENABLE" description="Unmask interrupt"/>
		</bitfield>
		<bitfield id="ARDY" width="1" begin="2" end="2" resetval="0" description="Register-access-ready interrupt enable bit" range="" rwaccess="RW">
			<bitenum id="DISABLE" value="0" token="DISABLE" description="Mask interrupt"/>
			<bitenum id="ENABLE" value="1" token="ENABLE" description="Unmask interrupt"/>
		</bitfield>
		<bitfield id="NACK" width="1" begin="1" end="1" resetval="0" description="No-Acknowledgement interrupt enable bit" range="" rwaccess="RW">
			<bitenum id="DISABLE" value="0" token="DISABLE" description="Mask interrupt"/>
			<bitenum id="ENABLE" value="1" token="ENABLE" description="Unmask interrupt"/>
		</bitfield>
		<bitfield id="AL" width="1" begin="0" end="0" resetval="0" description="Arbitration-lost interrupt enable bit" range="" rwaccess="RW">
			<bitenum id="DISABLE" value="0" token="DISABLE" description="Mask interrupt"/>
			<bitenum id="ENABLE" value="1" token="ENABLE" description="Unmask interrupt"/>
		</bitfield>
	</register>
	<register id="ICSTR" acronym="ICSTR" offset="0x0008" width="32" description="I2C Interrupt Status Register">
		<bitfield id="_RESV_1" width="17" begin="31" end="15" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="SDIR" width="1" begin="14" end="14" resetval="0" description="Slave direction bit. This bit is clear to '0' indicating the I2C is a master transmitter/receiver or a slave receiver. This bit is also clear by STOP condition or START condition. It is set to '1' when the I2C slave is a transmitter. In DLB mode (which the configuration should be master-transmitter slave-receiver), this bit is clear to '0'. Writing a '1' to this bit to clear it." range="" rwaccess="RW"/>
		<bitfield id="NACKSNT" width="1" begin="13" end="13" resetval="0" description="A No Acknowledge is sent due to NACKMOD is set to a '1'. NACKSNT =0: A No Acknowledge is not sent.  NACKSNT =1: A No Acknowledge is sent. Writing a '1' to this bit to clear it." range="" rwaccess="RW"/>
		<bitfield id="BB" width="1" begin="12" end="12" resetval="0" description="Bus Busy. This bit indicates the state of the serial bus. BB=0: The bus is free. BB=1: The bus is occupied. On reception of a 'start' condition, the device sets BB to 1. This bit is also set if SCL low state and IRS is '0'. BB is clear to 0 after reception of a 'stop' condition. In the 'master' mode, BB is controlled by the software. When BB=1, and STT is set to a 1, a restart condition is generated." range="" rwaccess="RW"/>
		<bitfield id="RSFULL" width="1" begin="11" end="11" resetval="0" description="Receive shift full. This bit indicates whether the receiver has experienced overrun. Overrun occurs when the receive shift register (ICRSR) is full and ICDRR has not been read since the ICRSR-to-ICDRR transfer. The FSM is holding for ICDRR read access. RSFULL is clear when reading the ICDRR, or resetting the I2C (IRS_=0), or resetting the device. RSFULL is set to '1' when the I2C has recognized an overrun. The contents of ICDRR are NOT lost in this case. RSFULL is clear as a result of reading the ICDRR." range="" rwaccess="R"/>
		<bitfield id="XSMT" width="1" begin="10" end="10" resetval="1" description="Transmit shift empty not. This bit indicates whether the transmitter has experienced underflow. Underflow occurs when the transmit shift register (ICXSR) is empty and ICDXR has not been loaded. The FSM is holding for ICDXR write access.  XSMT_ is clear when underflow has occurred.  Resetting the I2C (IRS_=0) or the device sets it to a '1'. XSMT_ is set to '1' as a result of writing to ICDXR." range="" rwaccess="R"/>
		<bitfield id="AAS" width="1" begin="9" end="9" resetval="0" description="Address As Slave. This bit is set to 1 by the device when it has recognized its own slave address or an address of all (8) zeros. The AAS bit is reset by restart or stop condition. The device remains selected until the 'stop' condition." range="" rwaccess="R"/>
		<bitfield id="AD0" width="1" begin="8" end="8" resetval="0" description="Address Zero Status: This bit is set to 1 by device if it detects the address of all (8) zeros (i.e. general call). The AD0 bit is reset to 0 (default value) when a 'start' or 'stop' condition is detected." range="" rwaccess="R"/>
		<bitfield id="_RESV_9" width="2" begin="7" end="6" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="SCD" width="1" begin="5" end="5" resetval="0" description="Stop Condition Detection bit SCD is set when the I2C sends or receives STOP condition. This bit is cleared by reading ICIVR (as 110) or writing '1' to itself." range="" rwaccess="RW"/>
		<bitfield id="ICXRDY" width="1" begin="4" end="4" resetval="1" description="Transmit Data Ready interrupt flag bit. ICXRDY is set to '1' when the LSB transmitted data bit has been shifted out of the ICDXR. ICRXDY is clear to '0' when the ICDXR is written. This bit can also be polled by the DSP to write a new transmitted data into the ICDXR. Write '1' or DXR Write will clear it." range="" rwaccess="RW"/>
		<bitfield id="ICRRDY" width="1" begin="3" end="3" resetval="0" description="Receive Data Ready interrupt flag bit. ICRRDY is set to '1' when the LSB received data bit has been shifted into the ICDRR. ICRRDY is clear to '0' when the ICDRR is read. This bit can also be polled by the DSP to read the received data in the ICDRR. Write '1' or DRR Read will clear it." range="" rwaccess="RW"/>
		<bitfield id="ARDY" width="1" begin="2" end="2" resetval="0" description="Register-access-ready interrupt flag bit. ARDY is generated by the hardware, if the I2C is in the master mode, when the previously programmed data and command has been performed and status bit has been updated. This flag is used by the DSP to let it knows that the I2C registers are ready to be accessed again. When RM=0, ARDY is set when the internal data count is passed 0 if STP register bit has not been set. When RM=1, ARDY is set at each byte end. Write '1' will clear it." range="" rwaccess="RW"/>
		<bitfield id="NACK" width="1" begin="1" end="1" resetval="0" description="No-Acknowledgement interrupt flag bit. The No Acknowledge flag bit is set when the hardware detects no acknowledge has been received. Write '1' or Read the IVR will clear it." range="" rwaccess="RW"/>
		<bitfield id="AL" width="1" begin="0" end="0" resetval="0" description="Arbitration Lost interrupt flag bit The Arbitration Lost flag bit is set to 1 when the device in the 'master transmitter' mode senses it has lost an arbitration when two or more transmitters start a transmission almost simultaneously or when the I2C attempts to start a transfer while BB (bus busy) is 1. When this is set to 1 due to arbitration lost, the MST/STP bits are clear, the I2C becomes a slave receiver. Write '1' or Read the IVR will clear it." range="" rwaccess="RW"/>
	</register>
	<register id="ICCLKL" acronym="ICCLKL" offset="0x000C" width="32" description="I2C Clock Divider Low Register">
		<bitfield id="_RESV_1" width="16" begin="31" end="16" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="ICCL" width="16" begin="15" end="0" resetval="0" description="Clock low-time divide-down value of 1-65536." range="" rwaccess="RW"/>
	</register>
	<register id="ICCLKH" acronym="ICCLKH" offset="0x0010" width="32" description="I2C Clock Divider High Register">
		<bitfield id="_RESV_1" width="16" begin="31" end="16" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="ICCH" width="16" begin="15" end="0" resetval="0" description="Clock high-time divide-down value of 1-65536." range="" rwaccess="RW"/>
	</register>
	<register id="ICCNT" acronym="ICCNT" offset="0x0014" width="32" description="I2C Data Count Register">
		<bitfield id="_RESV_1" width="16" begin="31" end="16" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="ICDC" width="16" begin="15" end="0" resetval="0" description="Data count value. When RM=0 in ICMDR, ICDC indicates the number of data words to transfer in the nonrepeat mode. When RM=1 in ICMDR, the value in ICCNT is a don't care. If STP=1 in ICMDR, a STOP condition is generated when the internal data counter counts down to 0. 0: The start value loaded to the internal data counter is 65536. 1-FFFFh: The start value loaded to internal data counter is 1-65535." range="" rwaccess="RW"/>
	</register>
	<register id="ICDRR" acronym="ICDRR" offset="0x0018" width="32" description="I2C Data Receive Register">
		<bitfield id="_RESV_1" width="24" begin="31" end="8" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="D" width="8" begin="7" end="0" resetval="0" description="Receive data." range="" rwaccess="R"/>
	</register>
	<register id="ICSAR" acronym="ICSAR" offset="0x001C" width="32" description="I2C Slave Address Register">
		<bitfield id="_RESV_1" width="22" begin="31" end="10" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="SADDR" width="10" begin="9" end="0" resetval="1023" description="Slave address. Provides the slave address of the I2C." range="" rwaccess="RW"/>
	</register>
	<register id="ICDXR" acronym="ICDXR" offset="0x0020" width="32" description="I2C Data Transmit Register">
		<bitfield id="_RESV_1" width="24" begin="31" end="8" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="D" width="8" begin="7" end="0" resetval="0" description="Transmit data." range="" rwaccess="RW"/>
	</register>
	<register id="ICMDR" acronym="ICMDR" offset="0x0024" width="32" description="I2C Mode Register">
		<bitfield id="_RESV_1" width="16" begin="31" end="16" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="NACKMOD" width="1" begin="15" end="15" resetval="0" description="No Acknowledge (NACK) mode. This bit is used to send an Acknowledge (ACK) or a No Acknowledge (NACK) to the transmitter. This bit is only applicable when the I2C is in receiver mode. In master receiver mode, when the internal data count counter decrements to zero, the I2C sends a NACK. The master receiver I2C finishes a transfer when it sends a NACK. The I2C ignores ICCNT when NACKMOD is '1'. The NACKMOD bit should be set before the rising edge of the last data bit (bit 8) if a NACK must be sent and this bit is cleared once a NACK has been sent. NACKMOD=0, the I2C sends an ACK to the transmitter during the acknowledge cycle. NACKMOD=1, the I2C sends a NACK to the transmitter during the acknowledge cycle." range="" rwaccess="RW"/>
		<bitfield id="FREE" width="1" begin="14" end="14" resetval="0" description="Free Running. This bit is used to determine the state of the I2C when a breakpoint is encountered in the HLL debugger. FREE=0: (default) Stops immediately if SCL is low and keep driving SCL low whether I2C is master transmitter/receiver. If SCL is high, I2C waits until SCL becomes low and then stops. If the I2C is a slave, it will stop when the transmission/receiving completes. FREE=1: The I2C runs free." range="" rwaccess="RW"/>
		<bitfield id="STT" width="1" begin="13" end="13" resetval="0" description="Start Condition (Master only mode). This bit can be set to a '1' by the DSP to generate a Start condition. In master mode, when setting Start to '1' generates a Start condition. It is reset to '0' by the hardware after the Start condition has been generated. The Start/Stop bits can be configured to generate different transfer formats. Note that the STT and STP can be used to terminate the repeat mode. STT, STP, Conditions, Bus Activities (In order below:) 1, 0, Start, S-A-D 0, 1, Stop, P 1, 1, Start-Stop (ICCNT= n), S-A-D..(n)..D-P 1, 0, Start (ICCNT= n), S-A-D..(n)..D" range="" rwaccess="RW"/>
		<bitfield id="_RESV_5" width="1" begin="12" end="12" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="STP" width="1" begin="11" end="11" resetval="0" description="Stop Condition (Master mode only). This bit can be set to a '1' by the DSP to generate a Stop condition. It is reset to '0' by the hardware after the Stop condition has been generated. The Stop condition is generated when ICCNT passes 0." range="" rwaccess="RW"/>
		<bitfield id="MST" width="1" begin="10" end="10" resetval="0" description="Master MST=0: The I 2 C peripheral is in the 'slave' mode and clock is received from the 'master' device. MST=1: The I 2 C peripheral is in the 'master' mode and it generates the clock. This bit is clear when the transfer completed." range="" rwaccess="RW"/>
		<bitfield id="TRX" width="1" begin="9" end="9" resetval="0" description="Transmitter. TRX=0: The I 2 C is in the 'receiver' mode and data on data line SDA is shifted into the data register ICDRR. TRX=1: The I 2 C is in the 'transmitter' mode and the data in ICDXR is shifted out on data line SDA. The operating modes are defined as follows. MST, TRX, Operating Modes (In order below) 0, x, 'slave receiver' 0, x, 'slave transmitter' 1, 0, 'master receiver' 1, 1, 'master transmitter'" range="" rwaccess="RW"/>
		<bitfield id="XA" width="1" begin="8" end="8" resetval="0" description="Expanded Address (both Master and Slave mode). XA=0: (default) 7-bit address mode (normal address mode). XA=1: 10-bit address mode (expanded address mode)" range="" rwaccess="RW"/>
		<bitfield id="RM" width="1" begin="7" end="7" resetval="0" description="Repeat Mode. This bit is set to a '1' by the DSP to put the I2C in the repeat mode. In this mode, data is continuously transmitted out of the ICDXR until the STP bit is set to '1' regardless of ICCNT value. This bit is don't care if the I2C is configured in slave mode. RM, STT, STP, Conditions, Bus activities, Mode (in order below) 0, 0, 0, Idle, None, NA 0, 0, 1, Stop, P, NA 0, 1, 0, (Re)Start, S-A-D..(n)..D, Repeat n 0, 1, 1, (Re)Start-Stop, S-A-D..(n)..D-P, Repeat n 1, 0, 0, Idle, None, NA 1, 0, 1, Stop, P, NA 1, 1, 0, (Re)Start, S-A-D-D-D..., Continuous 1, 1, 1, Reserved, None, NA" range="" rwaccess="RW"/>
		<bitfield id="DLB" width="1" begin="6" end="6" resetval="0" description="Digital Loop Back (in master transmit mode only). This bit is set to a '1' by the DSP to put the I2C in the loop back mode. In this mode, data transmitted out of the ICDXR will be received in the ICDRR after ((DSP freq/I2C freq)*8) DSP cycles via an internal path. The address of the ICOAR is output on SDA." range="" rwaccess="RW"/>
		<bitfield id="IRS" width="1" begin="5" end="5" resetval="0" description="I2C Reset Not. This can be set to a '0' by the DSP to put the I2C in reset or to a '1' to take the I2C out of reset. When this bit is reset to 0, all status bits in ICSTR are set to default values. Note that if this bit is reset during a transfer, it can cause the I2C bus hang (SDA and SCL are tri-stated)." range="" rwaccess="RW"/>
		<bitfield id="STB" width="1" begin="4" end="4" resetval="0" description="Start Byte (Master only mode). The Start Byte mode bit is set to 1 by the DSP to configure the I2C in Start byte mode, the I2C sends &quot;00000001&quot; regardless ICSAR value. Refer to the Philip I2C spec for more details." range="" rwaccess="RW"/>
		<bitfield id="FDF" width="1" begin="3" end="3" resetval="0" description="Free Data Format (both Master and Slave modes). This bit can be set to '1' by the DSP to configure the I2C in Free Data Format mode FDF MST TRX Operating mode (In order below) 0 0 x Slave in non FDF mode 0 1 0 Master receive in non FDF mode 0 1 1 Master transmit in non FDF mode 1 0 0 Slave receiver in FDF mode 1 0 1 Slave transmitter in FDF mode 1 1 0 Master receiver in FDF mode 1 1 1 Master transmitter in FDF mode" range="" rwaccess="RW"/>
		<bitfield id="BC" width="3" begin="2" end="0" resetval="0" description="Bit Count. Bit Count defines the number of bits starting from the lsb (excluding the acknowledge bit) of the next byte which are yet to be received or  transmitted. BC, Bits/byte in FDF, Bits/byte w/ ACK (In order below) 001, NA (reserved), NA (reserved) 010, 2, 3 011, 3, 4 100, 4, 5 101, 5, 6 110, 6, 7 111, 7, 8 000, 8, 9" range="" rwaccess="RW"/>
	</register>
	<register id="ICIVR" acronym="ICIVR" offset="0x0028" width="32" description="I2C Interrupt Vector Register">
		<bitfield id="_RESV_1" width="29" begin="31" end="3" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="INTCODE" width="3" begin="2" end="0" resetval="0" description="Interrupt code. The binary-coded-interrupt vector indicates which interrupt has occurred. Reading the ICIVR clears the interrupt flag; if other interrupts are pending, a new interrupt is generated. If there are more than one interrupt flag, reading the ICIVR clears the highest priority interrupt flag. Note that users must read (clear) the IVR before doing another start otherwise the IVR could contain incorrect (old interrupt flags) value." range="" rwaccess="R">
			<bitenum id="NONE" value="0" token="NONE" description="No interrupt occurred"/>
			<bitenum id="AL" value="1" token="AL" description="Arbitration Lost interrupt occurred (Highest Priority)"/>
			<bitenum id="NACK" value="2" token="NACK" description="No Acknowledge interrupt occurred"/>
			<bitenum id="ARDY" value="3" token="ARDY" description="Register Access Ready interrupt occurred"/>
			<bitenum id="ICRRDY" value="4" token="ICRRDY" description="Receive Data Ready interrupt occurred"/>
			<bitenum id="ICXRDY" value="5" token="ICXRDY" description="Transmit Data Ready interrupt occurred"/>
			<bitenum id="SCD" value="6" token="SCD" description="Stop Condition Detected interrupt occurred"/>
			<bitenum id="AAS" value="7" token="AAS" description="Address As Slave interrupt occurred (Lowest Priority)"/>
		</bitfield>
	</register>
	<register id="ICEMDR" acronym="ICEMDR" offset="0x002C" width="32" description="I2C Extended Mode Register">
		<bitfield id="_RESV_1" width="30" begin="31" end="2" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="IGNACK" width="1" begin="1" end="1" resetval="0" description="Ignore NACK mode." range="" rwaccess="RW">
			<bitenum id="NORMAL" value="0" token="NORMAL" description="Master transmitter operates normally, that is, it discontinues the data transfer and sets the ARDY and NACK bits in ICSTR when receiving a NACK from the slave."/>
			<bitenum id="IGNORE" value="1" token="IGNORE" description="Master transmitter ignores a NACK from the slave."/>
		</bitfield>
		<bitfield id="BCM" width="1" begin="0" end="0" resetval="1" description="Backward Compatibility Mode  This bit affects the I2C interrupt behavior." range="" rwaccess="RW"/>
	</register>
	<register id="ICPSC" acronym="ICPSC" offset="0x0030" width="32" description="I2C Prescaler Register">
		<bitfield id="_RESV_1" width="24" begin="31" end="8" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="IPSC" width="8" begin="7" end="0" resetval="0" description="I2C prescaler divide-down value. IPSC determines how much the I2C input clock is divided to create the I2C peripheral clock: I2C clock frequency = I2C input clock frequency/(IPSC+1) Note: IPSC must be initialized while the I2C is in reset (IRS=0 in ICMDR)." range="" rwaccess="RW"/>
	</register>
	<register id="ICPID1" acronym="ICPID1" offset="0x0034" width="32" description="I2C Peripheral ID Register 1">
		<bitfield id="_RESV_1" width="16" begin="31" end="16" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="CLASS" width="8" begin="15" end="8" resetval="1" description="Identifies the class of peripheral. This value should be 0x01" range="" rwaccess="R"/>
		<bitfield id="REVISION" width="8" begin="7" end="0" resetval="37" description="Identifies the revision level of the I2C. This value should be 0x25, and be incremented each time the design is revised." range="" rwaccess="R"/>
	</register>
	<register id="ICPID2" acronym="ICPID2" offset="0x0038" width="32" description="I2C Peripheral ID Register 2">
		<bitfield id="_RESV_1" width="24" begin="31" end="8" resetval="0" description="Reserved" range="" rwaccess="N"/>
		<bitfield id="TYPE" width="8" begin="7" end="0" resetval="5" description="Identifies the type of peripheral. This value should be 0x05" range="" rwaccess="R"/>
	</register>
</module>
