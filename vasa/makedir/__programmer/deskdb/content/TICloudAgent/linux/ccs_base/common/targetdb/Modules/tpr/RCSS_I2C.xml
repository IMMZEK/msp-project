<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="RCSS_I2C" id="RCSS_I2C">
  
  
  <register acronym="ICOAR" description="         I2C Own Address register    " id="ICOAR" offset="0x0" width="32">
    
  <bitfield begin="31" description="         Reserved     " end="10" id="NU" rwaccess="RW" width="22"></bitfield>
    
  <bitfield begin="9" description="         Own address. Use in both 7- and 10-bit address mode. Note  that usercan program the I2C own address to any value as  long as it does notconflict with other components in the  system.    " end="0" id="A9_A0" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="ICIMR" description="         I2C Interrupt Mask/Status register    " id="ICIMR" offset="0x4" width="32">
    
  <bitfield begin="31" description="         Reserved     " end="7" id="NU" rwaccess="RW" width="25"></bitfield>
    
  <bitfield begin="6" description="         Address As Slave interrupt mask bit. Setting a&quot;1&quot; to this  bit unmasks the Address As Slave interrupt. Setting a&quot;0&quot; to  this bit masks the Address As Slave interrupt.    " end="6" id="AAS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="         Stop Condition Detection mask bit. Setting a&quot;1&quot; to this bit  unmasks the Stop Condition Detection interrupt. Setting a &quot;0&quot; to this bit masks the Stop Condition Detection  interrupt.    " end="5" id="SCD" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="         Transmit Data Ready interrupt mask bit. Setting a&quot;1&quot; to  this bit unmasks the Transmit Data Ready interrupt. Setting  a&quot;0&quot; to this bit masks the Transmit Data Ready interrupt.    " end="4" id="ICXRDY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="         Receive Data Ready interrupt mask bit. Setting a&quot;1&quot; to this  bit unmasks the Receive Data Ready interrupt. Setting a&quot;0&quot;  to this bit masks the Receive Data Ready interrupt.    " end="3" id="ICRRDY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="         Register access ready interrupt mask bit. Setting a&quot;1&quot; to  this bit unmasks the Register access ready interrupt.  Setting a&quot;0&quot; to this bit masks the Register access ready  interrupt.    " end="2" id="ARDY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="         No Acknowledgement interrupt mask bit. Setting a&quot;1&quot; to this  bit unmasks the No Acknowledgement interrupt. Setting a&quot;0&quot;  to this bit masks the No Acknowledgement interrupt.    " end="1" id="NACK" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="         Arbitration Lost interrupt mask bit. Setting a&quot;1&quot; to this  bit unmasks the Arbitration Lost interrupt. Setting a&quot;0&quot; to  this bit masks the Arbitration Lost interrupt.    " end="0" id="AL" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="ICSTR" description="         I2C Interrupt Status register    " id="ICSTR" offset="0x8" width="32">
    
  <bitfield begin="31" description="         Reserved     " end="15" id="NU2" rwaccess="RW" width="17"></bitfield>
    
  <bitfield begin="14" description="         Slave Direction.  This bit is clear to '0' indicating the I2C is a master  transmitter/receiver or a slave receiver. This bit is also  clear by  STOP condition or START condition. It is set to '1' when the  I2C  slave is a transmitter. In DLB mode (which the configuration  should be master-transmitter slave-receiver) this bit is  clear to  '0'. Writing a&quot;1&quot; to this bit to clear it.     " end="14" id="SDIR" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="         A No Acknowledge is sent due to NACKMOD is set to a&quot;1&quot;.  NACKSNT =0: A No Acknowledge is not sent. NACKSNT =1: A No  Acknowledge is sent.  Writing a&quot;1&quot; to this bit to clear it.     " end="13" id="NACKSNT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="         Bus Busy. This bit indicates the state of the serial bus.  BB=0: The bus is free.  BB=1: The bus is occupied.  On reception of a&quot;start&quot; condition the device sets BB to  1. This  bit is also set if the I2C detects SCL low state.  BB is clear to 0 after reception of a&quot;stop&quot; condition.  BB is kept to&quot;0&quot; regardless SCL state when the I2C is in  reset  (IRS_=0). If the IRS_ is set to&quot;1&quot; during transaction  between  other I2C devices the BB bit is set at the first falling  edge of SCL  or START condition. - (RW  )    " end="12" id="BB" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="         Receive shift full. This bit indicates whether the receiver  has  experienced overrun. Overrun occurs when the receive shift  register (ICRSR) is full and ICDRR has not been read since  the  ICRSR-to-ICDRR transfer. The FSM is holding for ICDRR read  access.  RSFULL is clear when reading the ICDRR.  RSFULL is set to&quot;1&quot; when the I2C has recognized an overrun.  The contents of ICDRR are NOT lost in this case.  In repeat mode since double buffer (ICRSR and ICDRR)  behaves like a single buffer RSFULL is set to&quot;1&quot; every  time the  data is received.  RSFULL is clear as a result of reading the ICDRR. - (RW  )    " end="11" id="RSFULL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="         Transmit shift empty not. This bit indicates whether the  transmitter has experienced underflow. Underflow occurs when  the transmit shift register (ICXSR) is empty and ICDXR has  not  been loaded. The FSM is holding for ICDXR write access.  XSMT_ is cleared when underflow has occurred.  XSMT_ is set to&quot;1&quot; as a result of writing to ICDXR.  In repeat mode if the I2C in master transmitter mode is  holding  transfer with XSMT_=0 (i.e. waiting for further action) and  the  STT or STP bit is set XSMT_ is set to&quot;1&quot; by hardware.    " end="10" id="XSMT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="         Address As Slave. This bit is set to 1 by the device when it  has  recognized its own slave address or an address of all (8)  zeros.  The AAS bit is reset by stop condition or detection of any  address byte that does not match ICOAR. - (RW  )    " end="9" id="AAS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="         Address Zero Status: This bit is set to 1 by device if it  detects the  address of all (8) zeros (i.e. general call). The AD0 bit is  reset to  0 (default value) when a&quot;start&quot; or&quot;stop&quot; condition is  detected. - (RW  )   " end="8" id="AD0" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="         Reserved     " end="6" id="NU1" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="5" description="         Stop Condition Detection bit  SCD is set when the I2C sends or receives STOP condition.  This  bit is cleared by reading ICIVR (as 110) or writing '1' to  itself.    " end="5" id="SCD" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="         Transmit Data Ready interrupt flag bit.  ICXRDY is set to&quot;1&quot; is generated when the transmitted data  has been copied from ICDXR to the transmit-shift register  (ICXSR).  ICRXDY is clear to&quot;0&quot; when the ICDXR is written. This bit  can  also be polled by the CPU to write a new transmitted data  into  the ICDXR.  Write '1' to this bit will set it and DXR Write will clear  it.    " end="4" id="ICXRDY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="         Receive Data Ready interrupt flag bit.  ICRRDY is set to&quot;1&quot; when the received data has been copied  from ICRSR into the ICDRR. ICRRDY is cleared to&quot;0&quot; when the  ICDRR is read. This bit can also be polled by the CPU to read  the received data in the ICDRR.  Write '1' or DRR Read will clear it.     " end="3" id="ICRRDY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="         Register-access-ready interrupt flag bit.  ARDY is generated by the hardware if the I2C is in the  master  mode when the previously programmed data and command has  been performed and status bit has been updated. This flag is  used by the CPU to let it knows that the I2C registers are  ready  to be accessed again.  When RM=0 ARDY is set when the internal data count is  passed 0 if STP register bit has not been set.  When RM=1 ARDY is set at each byte end. If the I2C is in FDF  mode(FDF=1) ARDY is set just after Start condition.  This bit is automatically cleared by hardware when writing  data  to ICDXR in transmit mode reading data from ICDRR in receive  mode or setting STT or STP bit.  Write '1' will clear it.     " end="2" id="ARDY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="         No-Acknowledgement interrupt flag bit.  The No Acknowledge flag bit is set when the hardware in &quot;master&quot; mode detects no acknowledge has been received.  This bit is NOT set by no-acknowledgement after Start byte  Write '1' or Read the ICIVR (as 010) will clear it.     " end="1" id="NACK" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="         Arbitration-Lost interrupt flag bit.  The Arbitration Lost flag bit is set to 1 when the device in  the &quot;master&quot; mode senses it has lost an arbitration when two or  more  transmitters start a transmission almost simultaneously or  when  the I2C attempts to start a transfer while BB (bus busy) is  1.  When this is set to 1 due to arbitration lost the  MST/STT/STP  bits are clear the I2C becomes a slave.  Write '1' or Read the ICIVR (as 001) will clear it.     " end="0" id="AL" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="ICCLKL" description="         I2C Clock Divider Low register    " id="ICCLKL" offset="0xC" width="32">
    
  <bitfield begin="31" description="         Reserved     " end="16" id="NU" rwaccess="RW" width="16"></bitfield>
    
  <bitfield begin="15" description="         Low time I 2 C SCL Clock Division Factor. They are used to  divide down the master clock to create the SCL low time  transition frequency. This register must be configured while  the I2C is still in reset (IRS_=0).     " end="0" id="ICCL15_ICCL0" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="ICCLKH" description="         I2C Clock Divider High register    " id="ICCLKH" offset="0x10" width="32">
    
  <bitfield begin="31" description="         Reserved     " end="16" id="NU" rwaccess="RW" width="16"></bitfield>
    
  <bitfield begin="15" description="         High time I 2 C SCL Clock Division Factor. They are used to  divide down the master clock to create the SCL high time  transition frequency. This register must be configured while  the I2C is still in reset (IRS_=0).     " end="0" id="ICCH15_ICCLH0" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="ICCNT" description="         I2C Data Count register    " id="ICCNT" offset="0x14" width="32">
    
  <bitfield begin="31" description="         Reserved     " end="16" id="NU" rwaccess="RW" width="16"></bitfield>
    
  <bitfield begin="15" description="         Data count. This data count register is used to generate a  Stop condition if a Stop condition is specified (STP=1). .   ICCNT=1 data count is 1   ::::::::::::::::::::::::::::::::::::::::::::   ::::::::::::::::::::::::::::::::::::::::::::   ICCNT=0FFFFh data count is 65535   ICCNT=0data counter is 65536   Note that ICCNT is a don&quot;t care when RM is set to 1.      " end="0" id="ICDC15_ICDC0" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="ICDRR" description="         I2C Data Receive register    " id="ICDRR" offset="0x18" width="32">
    
  <bitfield begin="31" description="         Reserved     " end="8" id="NU" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="7" description="         Receive data     " end="0" id="D7_D0" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="ICSAR" description="         I2C Slave Address register    " id="ICSAR" offset="0x1C" width="32">
    
  <bitfield begin="31" description="         Reserved     " end="10" id="NU" rwaccess="RW" width="22"></bitfield>
    
  <bitfield begin="9" description="         Slave address. Use in both 7- and 10-bit address mode.    " end="0" id="A9_A0" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="ICDXR" description="         I2C Data Transmit register    " id="ICDXR" offset="0x20" width="32">
    
  <bitfield begin="31" description="         Reserved     " end="8" id="NU" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="7" description="         Transmit data     " end="0" id="D7_D0" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="ICMDR" description="         I2C Mode register    " id="ICMDR" offset="0x24" width="32">
    
  <bitfield begin="31" description="         Reserved     " end="16" id="NU2" rwaccess="RW" width="16"></bitfield>
    
  <bitfield begin="15" description="         No Acknowledge (NACK) mode.  This bit is used to send an Acknowledge (ACK) or a No  Acknowledge (NACK) to the transmitter. This bit is only  applicable  when the I2C is in receiver mode. In master receiver mode  when  the internal data count counter decrements to zero the I2C  sends a  NACK. The master receiver I2C finishes a transfer when it  sends a  NACK. The I2C ignores ICCNT when NACKMOD is '1'. The  NACKMOD bit should be set before the rising edge of the last  data  bit (bit 8) if a NACK must be sent and this bit is cleared  once a  NACK has been sent.   NACKMOD=0 the I2C sends an ACK to the transmitter during the  acknowledge cycle.  NACKMOD=1 the I2C sends a NACK to the transmitter during the  acknowledge cycle.      " end="15" id="NACKMOD" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="14" description="         Free Running.  This bit is used to determine the state of the I2C when a  breakpoint  is encountered in the HLL debugger.  FREE=0: (default) Stops immediately if SCL is low and keep  driving  SCL low whether I2C is master transmitter/receiver. If SCL  is high  I2C waits until SCL becomes low and then stops. If the I2C  is a  slave it will stop when the transmission/receiving  completes.  FREE=1: The I2C runs free.     " end="14" id="FREE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="13" description="         Start Condition (Master only mode).  This bit can be set to a&quot;1&quot; by the CPU to generate a Start  condition.  In master mode when setting Start to&quot;1&quot; generates a Start  condition.  It is reset to &quot;0&quot; by the hardware after the Start condition  has been  generated. The Start/Stop bits can be configured to generate  different transfer formats. Note that the STT and STP can be  used to  terminate the repeat mode.   ____________________________________________________ STT___STP____Conditions_______________Bus Activities   _1_____0________Start___________________S-A-D   _0_____1________Stop_____________________P   _1_____1________Start-Stop (ICCNT= n)______S-A-D..(n)..D-P   _1_____0________Start (ICCNT= n)__________S-A-D..(n)..D      ____________________________________________________ " end="13" id="STT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="12" description="         Reserved for IDLEEN (IDLE Enable on 5509). - (RW  )    " end="12" id="NU1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="11" description="         Stop Condition (Master mode only).  This bit can be set to a&quot;1&quot; by the CPU to generate a Stop  condition.  It is reset to &quot;0&quot; by the hardware after the Stop condition  has been  generated. The Stop condition is generated when ICCNT passes  0  when the I2C is in non-repeat mode(RM=0).     " end="11" id="STP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="10" description="         Master.  MST=0: The I 2 C peripheral is in the&quot;slave&quot; mode and clock  is  received from the&quot;master&quot; device.  MST=1: The I 2 C peripheral is in the&quot;master&quot; mode and it  generates  the clock. This bit is clear when the transfer completed.    " end="10" id="MST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="9" description="         Transmitter.  TRX=0: The I 2 C is in the&quot;receiver&quot; mode and data on data  line SDA  is shifted into the data register ICDRR.  TRX=1: The I 2 C is in the&quot;transmitter&quot; mode and the data  in ICDXR  is shifted out on data line SDA.  The operating modes (not in FDF mode) are defined as follows.  In FDF mode TRX must be configured even if the I2C is in  slave  mode because there is no address/direction byte in FDF mode.   ______________________________ MST___TRX___Operating Modes   _0______x_____&quot;slave receiver&quot;   _0______x_____&quot;slave transmitter&quot;   _1______0_____&quot;master receiver&quot;   _1______1_____&quot;master transmitter&quot;      ______________________________ " end="9" id="TRX" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="         Expanded Address.  XA=0: (default) 7-bit address mode (normal address mode).  XA=1: 10-bit address mode (expanded address mode)  Please note that XA needs to be configured even if the I2C  is in  slave mode.     " end="8" id="XA" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="         Repeat Mode.  This bit is set to a&quot;1&quot; by the CPU to put the I2C in the  repeat mode.  In this mode data is continuously transmitted out of the  ICDXR until  the STP bit is set to&quot;1&quot; regardless of ICCNT value. This  bit is don&quot;t  care if the I2C is configured in slave mode.   _________________________________________________________ RM___STT___STP___Conditions_____Bus Activities_______Mode   _0_____0_____0_______Idle___________None___________NA   _0_____0_____1_______Stop____________P____________NA   _0_____1_____0_____(Re)Start_______S-A-D..(n)..D____Repeat n   _0_____1_____1_____(Re)Start-Stop___S-A-D..(n)..D-P__Repeat n   _1_____0_____0_______Idle___________none___________NA   _1_____0_____1_______Stop____________P  ___________NA   _1_____1_____0_____(Re)Start_______S-A-D-D-D.._____Continuous   _1_____1_____1_____Reserved________None___________NA  _________________________________________________________     " end="7" id="RM" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="         Digital Loop Back (in master transmit mode only).  This bit is set to a&quot;1&quot; by the CPU to put the I2C in the  loop back  mode. In this mode data transmitted out of the ICDXR will be  received in the ICDRR after ((CPU freq/I2C freq)8) CPU  cycles via an internal path. The address of the ICOAR is  output on SDA.    " end="6" id="DLB" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="         I2C Reset Not.  This can be set to a&quot;0&quot; by the CPU to put the I2C in reset  or to a&quot;1&quot;  to take the I2C out of reset. When this bit is reset to 0  all status bits  in ICSTR and ICIVR are set to default values. Note that if  this bit is  reset during a transfer it can cause the I2C bus hang (SDA  and SCL  are tri-stated).     " end="5" id="IRS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="         Start Byte (Master only mode).  The Start Byte mode bit is set to 1 by the CPU to configure  the I2C  in Start byte mode the I2C sends &quot;00000001&quot;� regardless ICSAR  value. Refer to the Philip I2C spec for more details.     " end="4" id="STB" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="         Free Data Format.   This bit can be set to&quot;1&quot; by the CPU to configure the I2C  in Free  Data Format mode.   ______________________________________________ FDF___MST___TRX______Operating mode  _0______0_____ x____Slave in non FDF mode   _0______1_____0____Master receive in non FDF mode   _0______1_____1____Master transmit in non FDF mode   _1______0_____0____Slave receiver in FDF mode   _1______0_____1____Slave transmitter in FDF mode   _1______1_____0____Master receiver in FDF mode   _1______1_____1____Master transmitter in FDF mode   ______________________________________________    " end="3" id="FDF" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="         Bit Count : Bit Count 2, Bit Count 1 and Bit Count 0 define  the  number of bits starting from the lsb (excluding the  acknowledge bit)  of the next byte which are yet to be received or transmitted.   __________________________________________ BC2_BC1_BC0__Bits/byte in FDF__Bits/byte w/ ACK   _0___0___1_____NA (reserved)____ NA (reserved)   _0___1___0________2______________3_______  _0___1___1________3______________4_______   _1___0___0________4______________5_______   _1___0___1________5______________6_______   _1___1___0________6______________7_______   _1___1___1________7______________8_______   _0___0___0________8______________9_______  __________________________________________     " end="0" id="BC2_BC1_BC0" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="ICIVR" description="         I2C Interrupt Vector register    " id="ICIVR" offset="0x28" width="32">
    
  <bitfield begin="31" description="         Reserved.     " end="12" id="NU2" rwaccess="RW" width="20"></bitfield>
    
  <bitfield begin="11" description="         Reserved for internal testing.     " end="8" id="TESTMD" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="7" description="         Reserved.     " end="3" id="NU1" rwaccess="RW" width="5"></bitfield>
    
  <bitfield begin="2" description="         Interrupt code.  The binary-coded-interrupt vector indicates which interrupt  has  occurred. Reading the ICIVR clears the interrupt code except  ARDY(011) RRDY(100) and XRDY(101). Interrupt code for ARDY  RRDY and XRDY is cleared when ARDY ICRRDY and ICXRDY  bits in the ICSTR is cleared to default value respectively.  If other  interrupts are pending a new interrupt is generated. If  there are  more than one interrupt flag reading the ICIVR clears the  highest  priority interrupt code.  Reading the ICIVR also clears corresponding status bit in the  ICSTR except ARDY ICRRDY ICXRDY and AAS.  Note that users must read (clear) the ICIVR before doing  another  start otherwise the ICIVR could contain incorrect (old  interrupt flags)  value.   ________________________________________________ Interrupt Code____________Interrupt Occurred__________ _000_(default)_________________None   _001_(highest priority)____Arbitration Lost interrupt   _010__________________No Acknowledgement interrupt   _011__________________Register Access Ready interrupt   _100__________________Receive Data Ready interrupt   _101__________________Transmit Data Ready interrupt   _110__________________Stop Condition Detection   _111_(lowest priority)_____Address As Slave - (RW)   ________________________________________________    " end="0" id="INTCODE" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="ICEMDR" description="         I2C Extended Mode register    " id="ICEMDR" offset="0x2C" width="32">
    
  <bitfield begin="31" description="         Reserved. - (RW  )    " end="2" id="NU" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="         Ignore NACK mode  IGNACK=0 The master transmitter will operate normally  discontinue the data transfer and set the ARDY and NACK  status bits when a NACK signal is received from the slave.  IGNACK=1 The master transmitter will ignore a NACK  received from the slave.     " end="1" id="IGNACK" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="         Backward Compatibility Mode.  This bit affects the I2C interrupt behavior. Refer to  appendix A  for details.     " end="0" id="BCM" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="ICPSC" description="         I2C Prescaler register    " id="ICPSC" offset="0x30" width="32">
    
  <bitfield begin="31" description="         Reserved.     " end="8" id="NU" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="7" description="         8-bit prescaler to divide the system clock down to 4/8/12Mhz  clock and used by the I2C module. This register must be  initialized while the I2C is still in reset (IRS_=0). The  value takes  effect on the rising edge of IRS_.     " end="0" id="IPSC7_IPSC0" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="ICPID1" description="         I2C Peripheral ID register 1    " id="ICPID1" offset="0x34" width="32">
    
  <bitfield begin="31" description="         Reserved.     " end="16" id="NU" rwaccess="RW" width="16"></bitfield>
    
  <bitfield begin="15" description="         Identifies the class of peripheral. This value should be  0x01 - (RW  )    " end="8" id="CLASS" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="         Identifies the revision level of the I2C. This value should  be  incremented each time the design is revised. - (RW  )    " end="0" id="REVISION" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="ICPID2" description="         I2C Peripheral ID register 2    " id="ICPID2" offset="0x38" width="32">
    
  <bitfield begin="31" description="         Reserved.     " end="8" id="NU" rwaccess="RW" width="24"></bitfield>
    
  <bitfield begin="7" description="         Identifies the type of peripheral. This value should be 0x05  - (RW  )   " end="0" id="TYPE" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="ICDMAC" description="         I2C DMA Control Register    " id="ICDMAC" offset="0x3C" width="32">
    
  <bitfield begin="31" description="         Reserved. - (RW  )    " end="2" id="NU" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="         Transmit DMA enable. This bit controls the receive DMA  event pin to the system. When this bit is 1 the DMA event is  enabled and ICTEVT_POR pin is asserted when the DMA  transfer is required. When this bit is 0 the ICTEVT_POR pin  is never asserted.  RXDMAEN=0: DMA transmit event is disabled.  RXDMAEN=1: DMA transmit event is enabled. (Default)     " end="1" id="TXDMAEN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="         Receive DMA enable. This bit controls the receive DMA  event pin to the system. When this bit is 1 the DMA event is  enabled and ICREVT_POR pin is asserted when the DMA  transfer is required. When this bit is 0 the ICREVT_POR  pin is never asserted.  RXDMAEN=0: DMA receive event is disabled.  RXDMAEN=1: DMA receive event is enabled. (Default)     " end="0" id="RXDMAEN" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="I2C_RESERVED1" description="         Reserved    " id="I2C_RESERVED1" offset="0x40" width="32">
    
  <bitfield begin="31" description="         Reserved.     " end="0" id="NU" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="I2C_RESERVED2" description="         Reserved    " id="I2C_RESERVED2" offset="0x44" width="32">
    
  <bitfield begin="31" description="         Reserved.     " end="0" id="NU" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="ICPFUNC" description="         I2C Pin Function register    " id="ICPFUNC" offset="0x48" width="32">
    
  <bitfield begin="31" description="         Reserved.     " end="1" id="NU" rwaccess="RW" width="31"></bitfield>
    
  <bitfield begin="0" description="         Controls the function of the I2C SCL and SDA pins.  0 = Pins function as SCL and SDA  1 = Pins functions as GPIO  Note: No hardware protection is required to disable I2C  function when the PFUNC[0] and IRS_ bits are both set to  one. When PFUNC[0] is&quot;1&quot; (GPIO mode) the sub-module  which controls the I2C function receives the value&quot;1&quot; for  SCL  and SDA. IRS_ can be set to&quot;1&quot; regardless of PFUNC[0]  and the I2C function works whenever the IRS_ bit is&quot;1&quot;. The  user is expected to hold I2C in reset via IRS_ bit when  changing to/from GPIO mode via the PFUNC[0] bit.     " end="0" id="PFUNC0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="ICPDIR" description="         I2C Pin Direction register    " id="ICPDIR" offset="0x4C" width="32">
    
  <bitfield begin="31" description="         Reserved     " end="2" id="NU" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="         Controls the direction of the I2C SDA pin when configured as  GPIO.  0 = SDA pin functions as input  1 = SDA pin functions as output     " end="1" id="PDIR1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="         Controls the direction of the I2C SCL pin when configured as  GPIO.  0 = SCL pin functions as input  1 = SCL pin functions as output     " end="0" id="PDIR0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="ICPDIN" description="         I2C Pin Data In register    " id="ICPDIN" offset="0x50" width="32">
    
  <bitfield begin="31" description="         Reserved     " end="2" id="NU" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="         Indicates the logic level present on the SDA pin.  Reads:  0 = Logic low present at SDA pin regardless of PFUNC  setting.  1 = Logic high present at SDA pin regardless of PFUNC  setting.  Writes:  Writes have no effect. - (RW  )    " end="1" id="PDIN1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="         Indicates the logic level present on the SCL pin.  Reads:  0 = Logic low present at SCL pin regardless of PFUNC  setting.  1 = Logic high present at SCL pin regardless of PFUNC  setting.  Writes:  Writes have no effect - (RW  )    " end="0" id="PDIN0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="ICPDOUT" description="         I2C Pin Data Out register    " id="ICPDOUT" offset="0x54" width="32">
    
  <bitfield begin="31" description="         Reserved     " end="2" id="NU" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="         Controls the level driven on the SDA pin when configured as  GPIO output.  Reads:  Reads return register values not GPIO pin levels.  Writes:  0 = SDA pin driven low  1 = SDA pin driven high.  Note: If SDA is connected to an open-drain buffer at the  chiplevel  the I2C cannot drive SDA to high.     " end="1" id="PDOUT1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="         Controls the level driven on the SCL pin when configured as  GPIO output.  Reads:  Reads return register values not GPIO pin levels.  Writes:  0 = SCL pin driven low  1 = SCL pin driven high  Note: If SCL is connected to an open-drain buffer at the  chiplevel  the I2C cannot drive SCL to high.     " end="0" id="PDOUT0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="ICPDSET" description="         I2C Pin Data Set register    " id="ICPDSET" offset="0x58" width="32">
    
  <bitfield begin="31" description="         Reserved     " end="2" id="NU" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="         Used to set PDOUT[1] bit which corresponds to the SDA GPIO  pin.  Reads:  Reads should return 0. User documentation should say reads  are indeterminate.  Writes:  0 = no effect  1 = PDOUT[1] bit is set to logic high.     " end="1" id="PDSET1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="         Used to set PDOUT[0] bit which corresponds to the SCL GPIO  pin.  Reads:  Reads should return 0. User documentation should say reads  are indeterminate.  Writes:  0 = no effect  1 = PDOUT[0] bit is set to logic high.     " end="0" id="PDSET0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="ICPDCLR" description="         I2C Pin Data Clear register    " id="ICPDCLR" offset="0x5C" width="32">
    
  <bitfield begin="31" description="         Reserved     " end="2" id="NU" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="         Used to clear PDOUT[1] bit which corresponds to the SDA pin.  Reads:  Reads should return 0. User documentation should say reads  are indeterminate.  Writes:  0 = no effect  1 = PDOUT[1] bit is cleared to logic low.     " end="1" id="PDCLR1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="         Used to clear PDOUT[0] bit which corresponds to the SCL pin.  Reads:  Reads should return 0. User documentation should say reads  are indeterminate.  Writes:  0 = no effect  1 = PDOUT[0] bit is cleared to logic low.     " end="0" id="PDCLR0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="ICPDRV" description="         I2C Pin Driver Mode Register    " id="ICPDRV" offset="0x60" width="32">
    
  <bitfield begin="31" description="         Reserved     " end="2" id="NU" rwaccess="RW" width="30"></bitfield>
    
  <bitfield begin="1" description="         Used to select driver mode of output buffer for SDA pin.  0 = I2C mode.   1 = GPIO mode. Note: Value of this register is reflected on the  PDRV_SDA_POR port. Actual function depends on I/O buffer and  chip implementation.    " end="1" id="PDRV1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="         Used to select driver mode of output buffer for SCL pin.  0 = I2C mode. 1 = GPIO mode. Note: Value of this register is reflected on the  PDRV_SCL_POR port. Actual function depends on I/O buffer  and chip implementation.     " end="0" id="PDRV0" rwaccess="RW" width="1"></bitfield>
  </register>
</module>
