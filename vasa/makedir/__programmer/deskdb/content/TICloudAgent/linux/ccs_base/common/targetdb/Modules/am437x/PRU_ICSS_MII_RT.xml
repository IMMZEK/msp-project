<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="PRU_ICSS_MII_RT" id="PRU_ICSS_MII_RT">
  
  
  <register acronym="RXCFG0" description="RX CONFIG0" id="RXCFG0" offset="0x0" page="2" width="32">
    
  <bitfield begin="31" description="Reserved" end="7" id="Reserved2" rwaccess="R" width="25"></bitfield>
    
  <bitfield begin="6" description="Enables auto-forward of received preamble. When enabled, this will forward the preamble nibbles including the SFD to the TX L1 FIFO that is attached to the PRU. First data byte seen by PRU R31 and/or RX L2 is destination address (DA). Odd number of preamble nibbles is supported in this mode. For example, 0x55D. Note that new RX should only occur after the current TX completes. 0x0: Disable 0x1: Enable, it must disable RX_CUT_PREAMBLE and TX_AUTO_PREAMBLE" end="6" id="RX_AUTOFWD_PRE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Defines the order of Byte0/1 placement for RX R31 and RX L2. Note that if TX_AUTO_SEQUENCE enabled, this bit cannot get enable since TX_BYTE_SWAP on swaps the PRU output. This bit must be selected/updated when the port is disabled or there is no traffic. 0x0: R31[15:8]/RXL2[15:8] = Byte1{Nibble3,Nibble2} R31[ 7:0]/RXL2[7:0] = Byte0{Nibble1,Nibble0} 0x1: R31[15:8]/RXL2[15:8] = Byte0{Nibble1,Nibble0} R31[ 7:0]/RXL2[7:0] = Byte1{Nibble3,Nibble2} Nibble0 is the first nibble received." end="5" id="RX_BYTE_SWAP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Enables RX L2 buffer. 0x0: Disable (RX L2 can function as generic scratch pad) 0x1: Enable" end="4" id="RX_L2_ENABLE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Selects receive data source. Typically, the setting for this will not be identical for the two MII receive configuration registers. 0x0: MII RX Data from Port 0 (default for RXCFG0) 0x1: MII RX Data from Port 1 (default for RXCFG1)" end="3" id="RX_MUX_SEL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Removes received preamble. 0x0: All data from Ethernet PHY are passed on to PRU register. This assumes Ethernet PHY which does not shorten the preamble. 0x1: MII interface suppresses preamble and sync frame delimiter. First data byte seen by PRU register is destination address." end="2" id="RX_CUT_PREAMBLE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Reserved" end="1" id="Reserved1" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="Enables the receive traffic currently selected by RX_MUX_SELECT. 0x0: Disable 0x1: Enable" end="0" id="RX_ENABLE" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="RXCFG1" description="RX CONFIG1" id="RXCFG1" offset="0x4" page="2" width="32">
    
  <bitfield begin="31" description="Reserved" end="7" id="Reserved1" rwaccess="R" width="25"></bitfield>
    
  <bitfield begin="6" description="Enables auto-forward of received preamble. When enabled, this will forward the preamble nibbles including the SFD to the TX L1 FIFO that is attached to the PRU. First data byte seen by PRU R31 and/or RX L2 is destination address (DA). Odd number of preamble nibbles is supported in this mode. For example, 0x55D. Note that new RX should only occur after the current TX completes. 0x0: Disable 0x1: Enable, it must disable RX_CUT_PREAMBLE and TX_AUTO_PREAMBLE" end="6" id="RX_AUTOFWD_PRE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="Defines the order of Byte0/1 placement for RX R31 and RX L2. Note that if TX_AUTO_SEQUENCE enabled, this bit cannot get enable since TX_BYTE_SWAP on swaps the PRU output. This bit must be selected/updated when the port is disabled or there is no traffic. 0x0: R31[15:8]/RXL2[15:8] = Byte1{Nibble3,Nibble2} R31[ 7:0]/RXL2[7:0] = Byte0{Nibble1,Nibble0} 0x1: R31[15:8]/RXL2[15:8] = Byte0{Nibble1,Nibble0} R31[ 7:0]/RXL2[7:0] = Byte1{Nibble3,Nibble2} Nibble0 is the first nibble received." end="5" id="RX_BYTE_SWAP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Enables RX L2 buffer. 0x0: Disable (RX L2 can function as generic scratch pad) 0x1: Enable" end="4" id="RX_L2_ENABLE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Selects receive data source. Typically, the setting for this will not be identical for the two MII receive configuration registers. 0x0: MII RX Data from Port 0 (default for RXCFG0) 0x1: MII RX Data from Port 1 (default for RXCFG1)" end="3" id="RX_MUX_SEL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Removes received preamble. 0x0: All data from Ethernet PHY are passed on to PRU register. This assumes Ethernet PHY which does not shorten the preamble. 0x1: MII interface suppresses preamble and sync frame delimiter. First data byte seen by PRU register is destination address." end="2" id="RX_CUT_PREAMBLE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Reserved" end="1" id="Reserved2" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="Enables the receive traffic currently selected by RX_MUX_SELECT. 0x0: Disable 0x1: Enable" end="0" id="RX_ENABLE" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="TXCFG0" description="TX CONFIG0" id="TXCFG0" offset="0x10" page="2" width="32">
    
  <bitfield begin="31" description="Reserved" end="31" id="Reserved1" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="30" description="In order to guarantee the MII_RT IO timing values published in the device data manual, the ocp_clk must be configured for 200MHz and TX_CLK_DELAY must be set to 6h. " end="28" id="TX_CLK_DELAY" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="27" description="Reserved" end="26" id="Reserved2" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="25" description="Defines the minimum time interval (delay) between receiving the RXDV for the current frame and the start of the transmit interface sending data to the MII interface. Delay value is in units of MII_RT clock cycles, which uses the ocp_clk (default is 200MHz, or 5ns). Default TX_START_DELAY value is 320ns, which is optimized for minimum latency at 16 bit processing. Counter is started with RX_DV signal going active. Transmit interface stops sending data when no more data is written into transmit interface by PRU along with TX_EOF marker bit set. If the TX FIFO has data when the delay expires, then TX will start sending data. But if the TX FIFO is empty, it will not start until the TX FIFO is not empty. It is possible to overflow the TX FIFO with the max delay setting when auto-forwarding is enabled since the time delay is larger than the amount of data it needs to store. As long as TX L1 FIFO overflows, software will need to issue a TX_RESET to reset the TX FIFO. The total delay is 64-byte times (size of TX FIFO), but you need to allow delays for synchronization. Do to this fact, the maximum delay should be 80ns less when auto forwarding is enabled. Therefore, 0x3F0 is the maximum in this configuration." end="16" id="TX_START_DELAY" rwaccess="RW" width="10"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="10" id="Reserved3" rwaccess="R" width="6"></bitfield>
    
  <bitfield begin="9" description="Enables transmit auto-sequence. Note the transmit data source is determined by TX_MUX_SEL setting. 0x0: Disable 0x1: Enable, transmit state machine based on events on receiver path that is connected to the respective transmitter. Also, the masking logic is disabled and only the MII data is used. " end="9" id="TX_AUTO_SEQUENCE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Selects transmit data source. The default/reset setting for TX Port 0 is 1. This setting permits MII TX Port 0 to receive data from PRU1 and the MII TX Port 1 which is connected to PRU0 by default. 0x0: Data from PRU0 (default for TXCFG1) 0x1: Data from PRU1 (default for TXCFG0)" end="8" id="TX_MUX_SEL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Reserved" end="4" id="Reserved4" rwaccess="R" width="4"></bitfield>
    
  <bitfield begin="3" description="Defines the order of Byte0/1 placement for TX R30. This bit must be selected/updated when the port is disabled or there is no traffic. 0x0: R30[15:8] = Byte1{Nibble3,Nibble2} R30[ 7:0] = Byte0{Nibble1,Nibble0} R30[31:24] = TX_MASK[15:8] R30[23:16] = TX_MASK[7:0] 0x1: R30[15:8] = Byte0{Nibble1,Nibble0} R30[ 7:0] = Byte1{Nibble3,Nibble2} R30[31:24] = TX_MASK[7:0] R30[23:16] = TX_MASK[15:8] Nibble0 is the first nibble received." end="3" id="TX_BYTE_SWAP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Enables transmit self clear on TX_EOF event. Note that iep.cmp[3] must be set before transmission will start for TX0, and iep_cmp[4] for TX1. This is a new dependency, in addition to TX L1 FIFO not empty and TX_START_DELAY expiration, to start transmission. 0x0: Disable 0x1: Enable, TX_ENABLE will be clear for a TX_EOF event by itself." end="2" id="TX_EN_MODE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Transmit data auto-preamble. 0x0: PRU will provide full preamble 0x1: TX FIFO will insert pre-amble automatically. Note that the TX FIFO does not get preloaded with the preamble until the first write occurs. This can cause the latency to be larger than the minimum latency." end="1" id="TX_AUTO_PREAMBLE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Enables transmit traffic on TX PORT. If TX_EN_MODE is set, then TX_ENABLE will self clear during a TX_EOF event. Note Software can use this to pre-fill the TX FIFO and then start the TX frame during non-ECS operations. 0x0: TX PORT is disabled/stopped immediately 0x1: TX PORT is enabled and the frame will start once the IPG counter expired and TX Start Delay counter has expired" end="0" id="TX_ENABLE" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="TXCFG1" description="TX CONFIG1" id="TXCFG1" offset="0x14" page="2" width="32">
    
  <bitfield begin="31" description="Reserved" end="31" id="Reserved1" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="30" description="In order to guarantee the MII_RT IO timing values published in the device data manual, the ocp_clk must be configured for 200MHz and TX_CLK_DELAY must be set to 6h." end="28" id="TX_CLK_DELAY" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="27" description="Reserved" end="26" id="Reserved2" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="25" description="Defines the minimum time interval (delay) between receiving the RXDV for the current frame and the start of the transmit interface sending data to the MII interface. Delay value is in units of MII_RT clock cycles, which uses the ocp_clk (default is 200MHz, or 5ns). Default TX_START_DELAY value is 320ns, which is optimized for minimum latency at 16 bit processing. Counter is started with RX_DV signal going active. Transmit interface stops sending data when no more data is written into transmit interface by PRU along with TX_EOF marker bit set. If the TX FIFO has data when the delay expires, then TX will start sending data. But if the TX FIFO is empty, it will not start until the TX FIFO is not empty. It is possible to overflow the TX FIFO with the max delay setting when auto-forwarding is enabled since the time delay is larger than the amount of data it needs to store. As long as TX L1 FIFO overflows, software will need to issue a TX_RESET to reset the TX FIFO. The total delay is 64-byte times (size of TX FIFO), but you need to allow delays for synchronization. Do to this fact, the maximum delay should be 80ns less when auto forwarding is enabled. Therefore, 0x3F0 is the maximum in this configuration." end="16" id="TX_START_DELAY" rwaccess="RW" width="10"></bitfield>
    
  <bitfield begin="15" description="Reserved" end="10" id="Reserved3" rwaccess="R" width="6"></bitfield>
    
  <bitfield begin="9" description="Enables transmit auto-sequence. Note the transmit data source is determined by TX_MUX_SEL setting. 0x0: Disable 0x1: Enable, transmit state machine based on events on receiver path that is connected to the respective transmitter. Also, the masking logic is disabled and only the MII data is used. " end="9" id="TX_AUTO_SEQUENCE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="8" description="Selects transmit data source. The default/reset setting for TX Port 0 is 1. This setting permits MII TX Port 0 to receive data from PRU1 and the MII TX Port 1 which is connected to PRU0 by default. 0x0: Data from PRU0 (default for TXCFG1) 0x1: Data from PRU1 (default for TXCFG0)" end="8" id="TX_MUX_SEL" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="7" description="Reserved" end="4" id="Reserved4" rwaccess="R" width="4"></bitfield>
    
  <bitfield begin="3" description="Defines the order of Byte0/1 placement for TX R30. This bit must be selected/updated when the port is disabled or there is no traffic. 0x0: R30[15:8] = Byte1{Nibble3,Nibble2} R30[ 7:0] = Byte0{Nibble1,Nibble0} R30[31:24] = TX_MASK[15:8] R30[23:16] = TX_MASK[7:0] 0x1: R30[15:8] = Byte0{Nibble1,Nibble0} R30[ 7:0] = Byte1{Nibble3,Nibble2} R30[31:24] = TX_MASK[7:0] R30[23:16] = TX_MASK[15:8] Nibble0 is the first nibble received." end="3" id="TX_BYTE_SWAP" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Enables transmit self clear on TX_EOF event. Note that iep.cmp[3] must be set before transmission will start for TX0, and iep_cmp[4] for TX1. This is a new dependency, in addition to TX L1 FIFO not empty and TX_START_DELAY expiration, to start transmission. 0x0: Disable 0x1: Enable, TX_ENABLE will be clear for a TX_EOF event by itself." end="2" id="TX_EN_MODE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Transmit data auto-preamble. 0x0: PRU will provide full preamble 0x1: TX FIFO will insert pre-amble automatically. Note that the TX FIFO does not get preloaded with the preamble until the first write occurs. This can cause the latency to be larger than the minimum latency." end="1" id="TX_AUTO_PREAMBLE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Enables transmit traffic on TX PORT. If TX_EN_MODE is set, then TX_ENABLE will self clear during a TX_EOF event. Note Software can use this to pre-fill the TX FIFO and then start the TX frame during non-ECS operations. 0x0: TX PORT is disabled/stopped immediately 0x1: TX PORT is enabled and the frame will start once the IPG counter expired and TX Start Delay counter has expired" end="0" id="TX_ENABLE" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="TXCRC0" description="TX CYCLIC REDUNDANCY CHECK0" id="TXCRC0" offset="0x20" page="2" width="32">
    
  <bitfield begin="31" description="FCS (CRC32) data can be read by PRU for diagnostics. It is only valid after 6 clocks after a TX_CRC_HIGH command is given." end="0" id="TX_CRC32" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="TXCRC1" description="TX CYCLIC REDUNDANCY CHECK1" id="TXCRC1" offset="0x24" page="2" width="32">
    
  <bitfield begin="31" description="FCS (CRC32) data can be read by PRU for diagnostics. It is only valid after 6 clocks after a TX_CRC_HIGH command is given." end="0" id="TX_CRC32" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="TXIPG0" description="TX INTERPACKET GAP0" id="TXIPG0" offset="0x30" page="2" width="32">
    
  <bitfield begin="31" description="Reserved" end="10" id="Reserved1" rwaccess="R" width="22"></bitfield>
    
  <bitfield begin="9" description="Defines the minimum of transmit Inter Packet Gap (IPG) which is the number of ocp_clk cycles between the de-assertion of TX_EN and the assertion of TX_EN. The start of the TX will get delayed when the incoming packet IPG is less than defined minimum value. In general, software should program in increments of 8, 40ns to insure the extra delays takes effect." end="0" id="TX_IPG" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="TXIPG1" description="TX INTERPACKET GAP1" id="TXIPG1" offset="0x34" page="2" width="32">
    
  <bitfield begin="31" description="Reserved" end="10" id="Reserved1" rwaccess="R" width="22"></bitfield>
    
  <bitfield begin="9" description="Defines the minimum of transmit Inter Packet Gap (IPG) which is the number of ocp_clk cycles between the de-assertion of TX_EN and the assertion of TX_EN. The start of the TX will get delayed when the incoming packet IPG is less than defined minimum value. In general, software should program in increments of 8, 40ns to insure the extra delays takes effect." end="0" id="TX_IPG" rwaccess="RW" width="10"></bitfield>
  </register>
  
  
  <register acronym="PRS0" description="PORT RAW STATUS0" id="PRS0" offset="0x38" page="2" width="32">
    
  <bitfield begin="31" description="Reserved" end="2" id="Reserved1" rwaccess="R" width="30"></bitfield>
    
  <bitfield begin="1" description="Current state of pr#lt#k#gt#_mii0_crs" end="1" id="pr1_mii0_crs" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="Current state of pr#lt#k#gt#_mii0_col" end="0" id="pr1_mii0_col" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="PRS1" description="PORT RAW STATUS1" id="PRS1" offset="0x3C" page="2" width="32">
    
  <bitfield begin="31" description="Reserved" end="2" id="Reserved1" rwaccess="R" width="30"></bitfield>
    
  <bitfield begin="1" description="Current state of pr#lt#k#gt#_mii1_crs" end="1" id="pr1_mii1_crs" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="Current state of pr#lt#k#gt#_mii1_col" end="0" id="pr1_mii1_col" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="RXFRMS0" description="RX FRAME SIZE0" id="RXFRMS0" offset="0x40" page="2" width="32">
    
  <bitfield begin="31" description="Defines the maximum received frame count. If the total byte count of the received frame is more than defined value, RX_MAX_FRM_ERR will get set. 0x0: 1 byte after SFD and including CRC. N: N+1 bytes after SFD and including CRC Note if the incoming frame is truncated at the marker, RX_CRC and RX_NIBBLE_ODD will not get asserted." end="16" id="RX_MAX_FRM_CNT" rwaccess="RW" width="16"></bitfield>
    
  <bitfield begin="15" description="Defines the minimum received frame count. If the total byte count of received frame is less than defined value, RX_MIN_FRM_ERR will get set. 0x0: 1 byte after SFD and including CRC. N: N+1 bytes after SFD and including CRC" end="0" id="RX_MIN_FRM_CNT" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="RXFRMS1" description="RX FRAME SIZE1" id="RXFRMS1" offset="0x44" page="2" width="32">
    
  <bitfield begin="31" description="Defines the maximum received frame count. If the total byte count of the received frame is more than defined value, RX_MAX_FRM_ERR will get set. 0x0: 1 byte after SFD and including CRC. N: N+1 bytes after SFD and including CRC Note if the incoming frame is truncated at the marker, RX_CRC and RX_NIBBLE_ODD will not get asserted." end="16" id="RX_MAX_FRM_CNT" rwaccess="RW" width="16"></bitfield>
    
  <bitfield begin="15" description="Defines the minimum received frame count. If the total byte count of received frame is less than defined value, RX_MIN_FRM_ERR will get set. 0x0: 1 byte after SFD and including CRC. N: N+1 bytes after SFD and including CRC" end="0" id="RX_MIN_FRM_CNT" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="RXPCNT0" description="RX PREAMABLE COUNT0" id="RXPCNT0" offset="0x48" page="2" width="32">
    
  <bitfield begin="31" description="Reserved" end="8" id="Reserved1" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="Defines the maximum number of nibbles until the start of frame delimiter (SFD) event occurred (i.e. matches 0x5D). RX_MAX_PRE_COUNT_ERR will be set if the preamble counts more than the value of RX_MAX_PRE_CNT. If the SFD does not occur within 16 nibbles, the error will assert and the incoming frame will be truncated. 0x0: Disabled 0x1: Reserved 0x2: 4th nibble needs to have built 0x5D 0xe: 16th nibble needs to have built 0x5D Note the 16th nibble is transmitted." end="4" id="RX_MAX_PRE_CNT" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="3" description="Defines the minimum number of nibbles until the start of frame delimiter (SFD) event occurred, which is matched the value 0x5D. RX_MIN_PRE_COUNT_ERR will be set if the preamble counts less than the value of RX_MIN_PRE_CNT. 0x0: Disabled 0x1: 1 0x5 before 0x5D 0x2: 2 0x5 before 0x5D N: N 0x5 before 0x5D Note it does not need to be 0x5. " end="0" id="RX_MIN_PRE_CNT" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="RXPCNT1" description="RX PREAMABLE COUNT1" id="RXPCNT1" offset="0x4C" page="2" width="32">
    
  <bitfield begin="31" description="Reserved" end="8" id="Reserved1" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="Defines the maximum number of nibbles until the start of frame delimiter (SFD) event occurred (i.e. matches 0x5D). RX_MAX_PRE_COUNT_ERR will be set if the preamble counts more than the value of RX_MAX_PRE_CNT. If the SFD does not occur within 16 nibbles, the error will assert and the incoming frame will be truncated. 0x0: Disabled 0x1: Reserved 0x2: 4th nibble needs to have built 0x5D 0xe: 16th nibble needs to have built 0x5D Note the 16th nibble is transmitted." end="4" id="RX_MAX_PRE_CNT" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="3" description="Defines the minimum number of nibbles until the start of frame delimiter (SFD) event occurred, which is matched the value 0x5D. RX_MIN_PRE_COUNT_ERR will be set if the preamble counts less than the value of RX_MIN_PRE_CNT. 0x0: Disabled 0x1: 1 0x5 before 0x5D 0x2: 2 0x5 before 0x5D N: N 0x5 before 0x5D Note it does not need to be 0x5. " end="0" id="RX_MIN_PRE_CNT" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="RXERR0" description="RX ERROR0" id="RXERR0" offset="0x50" page="2" width="32">
    
  <bitfield begin="31" description="Reserved" end="4" id="Reserved1" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="Error status of received frame is more than the value of RX_MAX_FRM_CNT. 0x0: No error occurred 0x1: Error occurred" end="3" id="RX_MAX_FRM_CNT_ERR" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="Error status of received frame is less than the value of RX_MIN_FRM_CNT. 0x0: No error occurred 0x1: Error occurred" end="2" id="RX_MIN_FRM_CNT_ERR" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="1" description="Error status of received preamble nibble is more than the value of RX_MAX_PRE_CNT. 0x0: No error occurred 0x1: Error occurred" end="1" id="RX_MAX_PRE_CNT_ERR" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="Error status of received preamble nibble is less than the value of RX_MIN_PRE_CNT. 0x0: No error occurred 0x1: Error occurred" end="0" id="RX_MIN_PRE_CNT_ERR" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="RXERR1" description="RX ERROR1" id="RXERR1" offset="0x54" page="2" width="32">
    
  <bitfield begin="31" description="Reserved" end="4" id="Reserved1" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="Error status of received frame is more than the value of RX_MAX_FRM_CNT. 0x0: No error occurred 0x1: Error occurred" end="3" id="RX_MAX_FRM_CNT_ERR" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="Error status of received frame is less than the value of RX_MIN_FRM_CNT. 0x0: No error occurred 0x1: Error occurred" end="2" id="RX_MIN_FRM_CNT_ERR" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="1" description="Error status of received preamble nibble is more than the value of RX_MAX_PRE_CNT. 0x0: No error occurred 0x1: Error occurred" end="1" id="RX_MAX_PRE_CNT_ERR" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="Error status of received preamble nibble is less than the value of RX_MIN_PRE_CNT. 0x0: No error occurred 0x1: Error occurred" end="0" id="RX_MIN_PRE_CNT_ERR" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="RXFLV0" description="RX FIFO0 Level" id="RXFLV0" offset="0x60" page="2" width="32">
    
  <bitfield begin="31" description="Reserved" end="8" id="Reserved1" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="Define the number of valid bytes in the RX FIFO 0 = empty 1 = 1 Byte/ 2 Nibbles 2 = 2 Byte/ 4  Nibble ... 32 = 32 Bytes/ 64 Nibbles " end="0" id="RX_FIFO_LEVEL" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="RXFLV1" description="RX FIFO1 Level" id="RXFLV1" offset="0x64" page="2" width="32">
    
  <bitfield begin="31" description="Reserved" end="8" id="Reserved1" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="Define the number of valid bytes in the RX FIFO 0 = empty 1 = 1 Byte/ 2 Nibbles 2 = 2 Byte/ 4  Nibble ... 32 = 32 Bytes/ 64 Nibbles " end="0" id="RX_FIFO_LEVEL" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="TXFLV0" description="TX FIFO0 Level" id="TXFLV0" offset="0x68" page="2" width="32">
    
  <bitfield begin="31" description="Reserved" end="8" id="Reserved1" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="Define the number of valid nibbles in the TX FIFO 0 = empty 1 = 1 Nibble 2 = 1 Byte/ 2 Nibble ... 128 = 64 Bytes/ 128 Nibbles " end="0" id="TX_FIFO_LEVEL" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="TXFLV1" description="TX FIFO1 Level" id="TXFLV1" offset="0x6C" page="2" width="32">
    
  <bitfield begin="31" description="Reserved" end="8" id="Reserved1" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="Define the number of valid nibbles in the TX FIFO 0 = empty 1 = 1 Nibble 2 = 1 Byte/ 2 Nibble ... 128 = 64 Bytes/ 128 Nibbles " end="0" id="TX_FIFO_LEVEL" rwaccess="R" width="8"></bitfield>
  </register>
</module>
