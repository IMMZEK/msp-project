<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="" id="PLLDIG_CTRL">
  
  
  <register acronym="PID" description=" PID register " id="PID" offset="0x0" width="32">
    
  <bitfield begin="31" description="" end="16" id="" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="15" description="" end="11" id="" rwaccess="R" width="5"></bitfield>
    
  <bitfield begin="10" description="" end="8" id="" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="7" description="" end="6" id="" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="5" description="" end="0" id="" rwaccess="R" width="6"></bitfield>
  </register>
  
  
  <register acronym="PLLDIG_EN" description="" id="PLLDIG_EN" offset="0x4" width="32">
    
  <bitfield begin="18" description="PLL DIG lockmon enable 0x0 = PLL DIG lockmon disbale 0x7 = PLL DIG lockmon enable" end="16" id="cfg_plldig_lockmon_enable" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="10" description="PLL DIG and APLL auto switch enable 0x0 = PLL DIG wont be auto turn off when APLL is enable 0x7 = PLL DIG will be auto turn off when APLL is enable" end="8" id="cfg_pll_auto_switch_enable" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="2" description="PLL DIG enable 0x0 = PLL DIG disable 0x7 = PLL DIG enable" end="0" id="cfg_plldig_en" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="PLLDIG_MDIV_NDIV" description="" id="PLLDIG_MDIV_NDIV" offset="0x8" width="32">
    
  <bitfield begin="22" description="NDIV value for the PLL DIG Input clock divider settings .NDIV value directly programs the 7-bit pre- divider. Divide value ranges from 2 to 127. NDIV value has to be chosen based on the REF_CLKIN frequency so as to get the internal reference frequency of the PLL closest to 2Mhz" end="16" id="cfg_plldig_ndiv" rwaccess="RW" width="7"></bitfield>
    
  <bitfield begin="8" description="MDIV value for the PLL DIG Feedback divider settings. MDIV value directly programs the 9-bit feedback divider. Divide value ranges from 2 to 511. MDIV value has to be chosen to generate the required clock out frequency from the 2Mhz internal PLL reference" end="0" id="cfg_plldig_mdiv" rwaccess="RW" width="9"></bitfield>
  </register>
  
  
  <register acronym="PLLDIG_CTRL" description="" id="PLLDIG_CTRL" offset="0xC" width="32">
    
  <bitfield begin="31" description="PLL DIG test controls" end="0" id="cfg_plldig_ctrl" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="PLLDIG_MODE_EN" description="" id="PLLDIG_MODE_EN" offset="0x10" width="32">
    
  <bitfield begin="16" description="PLL DIG high frequency mode operation, Divide by 2 the PLL clock out" end="16" id="cfg_plldig_lowfreq_mode_en" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="PLL DIG high frequency mode operation" end="0" id="cfg_plldig_highfreq_mode_en" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="PLLDIG_APLL_SW_DIS_DELAY1" description="" id="PLLDIG_APLL_SW_DIS_DELAY1" offset="0x14" width="32">
    
  <bitfield begin="31" description="Delay to switch the PLL clock source when the auto PLL switch mode is enable" end="16" id="cfg_plldig_auto_switch_delay" rwaccess="RW" width="16"></bitfield>
    
  <bitfield begin="15" description="Delay to switch the PLL clock source when the auto PLL switch mode is enable" end="0" id="cfg_apll_auto_switch_delay" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="PLLDIG_APLL_SW_DIS_DELAY2" description="" id="PLLDIG_APLL_SW_DIS_DELAY2" offset="0x18" width="32">
    
  <bitfield begin="31" description="Delay between the PLL clock source switching and disabling of the APLL" end="16" id="cfg_apll_disable_delay" rwaccess="RW" width="16"></bitfield>
    
  <bitfield begin="15" description="Delay between the PLL clock source switching and disabling of the PLL DIG" end="0" id="cfg_plldig_disable_delay" rwaccess="RW" width="16"></bitfield>
  </register>
  
  
  <register acronym="PLLDIG_OVERRIDE" description="" id="PLLDIG_OVERRIDE" offset="0x1C" width="32">
    
  <bitfield begin="5" description="Override control for the fast clock src mux select 0x0 = PLL DIG selected as fast clock 0x7 = APLL selected as fast clock" end="3" id="cfg_ov_final_plldig_apll_mux_sel" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="2" description="Mux select control to select the override value of the fast clock src mux select  0x0 = functional value selected for the fast clock src mux select  0x7 = Override value selected for the fast clock src mux select" end="0" id="cfg_sel_ov_final_plldig_apll_mux_sel" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="PLLDIG_STATUS" description="" id="PLLDIG_STATUS" offset="0x20" width="32">
    
  <bitfield begin="8" description="PLL DIG lockmon status" end="8" id="plldig_lockmon" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="1" description="XTAL clock frequency status, 0x0 = 25MHz 0x1 = 40MHz 0x2 = 26MHz 0x3 = 38.4MHz" end="0" id="clkm_xtal_freq" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="FAST_CLK_MUX_POSTDIV" description="" id="FAST_CLK_MUX_POSTDIV" offset="0x24" width="32">
    
  <bitfield begin="15" description="Divider value for FAST selected clock. Data should be loaded as multibit. For example: if divider value of 8 (1000) needs to be selected then '100010001000' should be configured to the register." end="4" id="divr" rwaccess="RW" width="12"></bitfield>
    
  <bitfield begin="3" description="Status shows the current divider value choosen for FAST_CLK." end="0" id="currdivr" rwaccess="R" width="4"></bitfield>
  </register>
  
  
  <register acronym="FAST_CLK_STATUS" description="" id="FAST_CLK_STATUS" offset="0x28" width="32">
    
  <bitfield begin="1" description="Current Clock selected by GCM Clock Mux 0x1 : PLLDIG  0x2 : APLL" end="0" id="currclk" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="LOCK0_KICK0" description="  - KICK0 component " id="LOCK0_KICK0" offset="0x1008" width="32">
    
  <bitfield begin="31" description=" - KICK0 component" end="0" id="" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="LOCK0_KICK1" description="  - KICK1 component " id="LOCK0_KICK1" offset="0x100C" width="32">
    
  <bitfield begin="31" description=" - KICK1 component" end="0" id="" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="intr_raw_status" description=" Interrupt Raw Status/Set Register " id="intr_raw_status" offset="0x1010" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error. Raw status is read. Write a 1 to set the status. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="intr_enabled_status_clear" description=" Interrupt Enabled Status/Clear register " id="intr_enabled_status_clear" offset="0x1014" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error. Enabled status is read. Write a 1 to clear the status. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="intr_enable" description=" Interrupt Enable register " id="intr_enable" offset="0x1018" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error enable. Write a 1 to set the enable. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="intr_enable_clear" description=" Interrupt Enable Clear register " id="intr_enable_clear" offset="0x101C" width="32">
    
  <bitfield begin="3" description="Proxy0 access violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="3" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="Kick access violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="2" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="Addressing violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="1" id="" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="Protection violation error enable clear. Write a 1 to clear the enable. Writing a 0 has no effect." end="0" id="" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="eoi" description=" EOI register " id="eoi" offset="0x1020" width="32">
    
  <bitfield begin="7" description="EOI vector value. Write this with interrupt distribution value in the chip." end="0" id="" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="fault_address" description=" Fault Address register " id="fault_address" offset="0x1024" width="32">
    
  <bitfield begin="31" description="Fault Address." end="0" id="" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="fault_type_status" description=" Fault Type Status register " id="fault_type_status" offset="0x1028" width="32">
    
  <bitfield begin="6" description="Non-secure access." end="6" id="" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="5" description="Fault Type   10_0000 = Supervisor read  fault  - priv = 1 dir = 1 dtype != 1    01_0000 = Supervisor write fault  - priv = 1 dir = 0   00_1000 = Supervisor execute fault - priv = 1 dir = 1 dtype = 1   00_0100 = User read  fault - priv = 0 dir = 1 dtype = 1   00_0010 = User write fault - priv = 0 dir = 0   00_0001 = User execute fault - priv = 0 dir = 1 dtype = 1   00_0000 = No fault" end="0" id="" rwaccess="R" width="6"></bitfield>
  </register>
  
  
  <register acronym="fault_attr_status" description=" Fault Attribute Status register " id="fault_attr_status" offset="0x102C" width="32">
    
  <bitfield begin="31" description="XID." end="20" id="" rwaccess="R" width="12"></bitfield>
    
  <bitfield begin="19" description="Route ID." end="8" id="" rwaccess="R" width="12"></bitfield>
    
  <bitfield begin="7" description="Privilege ID." end="0" id="" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="fault_clear" description=" Fault Clear register " id="fault_clear" offset="0x1030" width="32">
    
  <bitfield begin="0" description="Fault clear. Writing a 1 clears the current fault. Writing a 0 has no effect." end="0" id="" rwaccess="W" width="1"></bitfield>
  </register>
</module>
