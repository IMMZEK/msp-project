<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was autogenerated by Socrates Bitwise, Duolog Technologies Ltd. -->
<module id="I2CM" HW_revision="" XML_version="1.0" description="Register fields should be considered static unless otherwise noted as dynamic." xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="setup_parser.xsd">
    <register acronym="SA" width="32" description="I2C master slave address
This register consists of eight bits, seven address bits (A6-A0), and a receive and send bit, which determines if the next operation is a receive (high) or transmit (low)." id="SA" offset="0x0" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved24" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="7" end="1" rwaccess="RW" description="I2C slave address" id="SA" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="Receive and send
The R/S bit specifies if the next operation is a receive (high) or transmit (low).
0: Transmit
1: Receive" id="RS" resetval="" >
        </bitfield>
    </register>
    <register acronym="CTRL" width="32" description="I2C master control and status
This register accesses status bits when read and control bits when written. When read, the status register indicates the state of the I2C bus controller. When written, the control register configures the I2C controller operation.
The START bit generates the START or REPEATED START condition. The STOP bit determines if the cycle stops at the end of the data cycle or continues on to a repeated START condition. To generate a single transmit cycle, the I2C master slave address (I2CMSA) register is written with the desired address, the R/S bit is cleared, and this register is written with ACK = X (0 or 1), STOP = 1, START = 1, and RUN = 1 to perform the operation and stop. When the operation is completed (or aborted due an error), an interrupt becomes active and the data may be read from the I2CMDR register. When the I2C module operates in master receiver mode, the ACK bit is normally set, causing the I2C bus controller to automatically transmit an acknowledge after each byte. This bit must be cleared when the I2C bus controller requires no further data to be transmitted from the slave transmitter." id="CTRL" offset="0x4" >
        <bitfield range="" begin="31" width="28" end="4" rwaccess="WO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved28" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="1" end="3" rwaccess="WO" description="Data acknowledge enable
0: The received data byte is not acknowledged automatically by the master.
1: The received data byte is acknowledged automatically by the master." id="ACK" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="1" end="2" rwaccess="WO" description="Generate STOP
0: The controller does not generate the STOP condition.
1: The controller generates the STOP condition." id="STOP" resetval="" >
        </bitfield>
        <bitfield range="" begin="1" width="1" end="1" rwaccess="WO" description="Generate START
0: The controller does not generate the START condition.
1: The controller generates the START condition." id="START" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="WO" description="I2C master enable
0: The master is disabled.
1: The master is enabled to transmit or receive data.
When the BUSY bit is set, the other status bits are not valid." id="RUN" resetval="" >
        </bitfield>
    </register>
    <register acronym="STAT" width="32" description="I2C master control and status
This register accesses status bits when read and control bits when written. When read, the status register indicates the state of the I2C bus controller. When written, the control register configures the I2C controller operation.
The START bit generates the START or REPEATED START condition. The STOP bit determines if the cycle stops at the end of the data cycle or continues on to a repeated START condition. To generate a single transmit cycle, the I2C master slave address (I2CMSA) register is written with the desired address, the R/S bit is cleared, and this register is written with ACK = X (0 or 1), STOP = 1, START = 1, and RUN = 1 to perform the operation and stop. When the operation is completed (or aborted due an error), an interrupt becomes active and the data may be read from the I2CMDR register. When the I2C module operates in master receiver mode, the ACK bit is normally set, causing the I2C bus controller to automatically transmit an acknowledge after each byte. This bit must be cleared when the I2C bus controller requires no further data to be transmitted from the slave transmitter." id="STAT" offset="0x4" >
        <bitfield range="" begin="31" width="25" end="7" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved25" resetval="" >
        </bitfield>
        <bitfield range="" begin="6" width="1" end="6" rwaccess="RO" description="Bus busy
0: The I2C bus is idle.
1: The I2C bus is busy.
The bit changes based on the START and STOP conditions." id="BUSBSY" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="1" end="5" rwaccess="RO" description="I2C idle
0: The I2C controller is not idle.
1: The I2C controller is idle." id="IDLE" resetval="" >
        </bitfield>
        <bitfield range="" begin="4" width="1" end="4" rwaccess="RO" description="Arbitration lost
0: The I2C controller won arbitration.
1: The I2C controller lost arbitration." id="ARBLST" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="1" end="3" rwaccess="RO" description="Acknowledge data
0: The transmited data was acknowledged.
1: The transmited data was not acknowledged." id="DATACK" resetval="" >
        </bitfield>
        <bitfield range="" begin="2" width="1" end="2" rwaccess="RO" description="Acknowledge address
0: The transmited address was acknowledged.
1: The transmited address was not acknowledged." id="ADRACK" resetval="" >
        </bitfield>
        <bitfield range="" begin="1" width="1" end="1" rwaccess="RO" description="Error
0: No error was detected on the last operation.
1: An error occurred on the last operation." id="ERROR" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RO" description="I2C busy
0: The controller is idle.
1: The controller is busy.
When the BUSY bit is set, the other status bits are not valid." id="BUSY" resetval="" >
        </bitfield>
    </register>
    <register acronym="DR" width="32" description="I2C master data
This register contains the data to be transmitted when in the master transmit state and the data received when in the master receive state." id="DR" offset="0x8" >
        <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved24" resetval="" >
        </bitfield>
        <bitfield range="" begin="7" width="8" end="0" rwaccess="RW" description="Data transferred
Data transferred during transaction" id="DATA" resetval="" >
        </bitfield>
    </register>
    <register acronym="TPR" width="32" description="I2C master timer period
This register specifies the period of the SCL clock." id="TPR" offset="0xc" >
        <bitfield range="" begin="31" width="25" end="7" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved25" resetval="" >
        </bitfield>
        <bitfield range="" begin="6" width="7" end="0" rwaccess="RW" description="SCL clock period
This field specifies the period of the SCL clock.
SCL_PRD = 2 * (1+TPR)*(SCL_LP + SCL_HP)*CLK_PRD
where:
SCL_PRD is the SCL line period (I2C clock).
TPR is the timer period register value (range of 1 to 127)
SCL_LP is the SCL low period (fixed at 6).
SCL_HP is the SCL high period (fixed at 4).
CLK_PRD is the system clock period in ns." id="TPR" resetval="" >
        </bitfield>
    </register>
    <register acronym="IMR" width="32" description="I2C master interrupt mask
This register controls whether a raw interrupt is promoted to a controller interrupt." id="IMR" offset="0x10" >
        <bitfield range="" begin="31" width="31" end="1" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved31" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="Interrupt mask
1: The master interrupt is sent to the interrupt controller when the RIS bit in the I2CMRIS register is set.
0: The RIS interrupt is suppressed and not sent to the interrupt controller." id="IM" resetval="" >
        </bitfield>
    </register>
    <register acronym="RIS" width="32" description="I2C master raw interrupt status
This register specifies whether an interrupt is pending." id="RIS" offset="0x14" >
        <bitfield range="" begin="31" width="31" end="1" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved31" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RO" description="Raw interrupt status
1: A master interrupt is pending.
0: No interrupt
This bit is cleared by writing 1 to the IC bit in the I2CMICR register." id="RIS" resetval="" >
        </bitfield>
    </register>
    <register acronym="MIS" width="32" description="I2C master masked interrupt status
This register specifies whether an interrupt was signaled." id="MIS" offset="0x18" >
        <bitfield range="" begin="31" width="31" end="1" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved31" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RO" description="Masked interrupt status
1: An unmasked master interrupt is pending.
0: An interrupt has not occurred or is masked.
This bit is cleared by writing 1 to the IC bit in the I2CMICR register." id="MIS" resetval="" >
        </bitfield>
    </register>
    <register acronym="ICR" width="32" description="I2C master interrupt clear
This register clears the raw and masked interrupts." id="ICR" offset="0x1c" >
        <bitfield range="" begin="31" width="31" end="1" rwaccess="WO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved31" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="WO" description="Interrupt clear
Writing 1 to this bit clears the RIS bit in the I2CMRIS register and the MIS bit in the I2CMMIS register.
Reading this register returns no meaningful data." id="IC" resetval="" >
        </bitfield>
    </register>
    <register acronym="CR" width="32" description="I2C master configuration
This register configures the mode (master or slave) and sets the interface for test mode loopback." id="CR" offset="0x20" >
        <bitfield range="" begin="31" width="26" end="6" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved26" resetval="" >
        </bitfield>
        <bitfield range="" begin="5" width="1" end="5" rwaccess="RW" description="I2C slave function enable
1: Slave mode is enabled.
0: Slave mode is disabled." id="SFE" resetval="" >
        </bitfield>
        <bitfield range="" begin="4" width="1" end="4" rwaccess="RW" description="I2C master function enable
1: Master mode is enabled.
0: Master mode is disabled." id="MFE" resetval="" >
        </bitfield>
        <bitfield range="" begin="3" width="3" end="1" rwaccess="RO" description="Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation." id="Reserved3" resetval="" >
        </bitfield>
        <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="I2C loopback
1: The controller in a test mode loopback configuration.
0: Normal operation" id="LPBK" resetval="" >
        </bitfield>
    </register>
</module>
