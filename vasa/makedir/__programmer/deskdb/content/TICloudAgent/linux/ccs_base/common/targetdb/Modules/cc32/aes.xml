<?xml version="1.0" encoding="UTF-8"?>
<module id="aes" HW_revision="">
    <register id="KEY2_6" width="32" offset="0x0" description="XTS second key / CBC-MAC third key">
    </register>
    <register id="KEY2_7" width="32" offset="0x4" description="XTS second key (MSW for 256-bit key) / CBC-MAC third key (MSW)">
    </register>
    <register id="KEY2_4" width="32" offset="0x8" description="XTS / CCM second key / CBC-MAC third key (LSW)">
    </register>
    <register id="KEY2_5" width="32" offset="0xC" description="XTS second key (MSW for 192-bit key) / CBC-MAC third key">
    </register>
    <register id="KEY2_2" width="32" offset="0x10" description="XTS / CCM / CBC-MAC second key / Hash Key input">
    </register>
    <register id="KEY2_3" width="32" offset="0x14" description="XTS second key (MSW for 128-bit key) + CCM/CBC-MAC second key (MSW) / Hash Key input (MSW)">
    </register>
    <register id="KEY2_0" width="32" offset="0x18" description="XTS / CCM / CBC-MAC second key (LSW) / Hash Key input (LSW)">
    </register>
    <register id="KEY2_1" width="32" offset="0x1C" description="XTS / CCM / CBC-MAC second key / Hash Key input">
    </register>
    <register id="KEY1_6" width="32" offset="0x20" description="Key (LSW for 256-bit key)">
    </register>
    <register id="KEY1_7" width="32" offset="0x24" description="Key (MSW for 256-bit key)">
    </register>
    <register id="KEY1_4" width="32" offset="0x28" description="Key (LSW for 192-bit key)">
    </register>
    <register id="KEY1_5" width="32" offset="0x2C" description="Key (MSW for 192-bit key)">
    </register>
    <register id="KEY1_2" width="32" offset="0x30" description="Key">
    </register>
    <register id="KEY1_3" width="32" offset="0x34" description="Key (MSW for 128-bit key)">
    </register>
    <register id="KEY1_0" width="32" offset="0x38" description="Key (LSW for 128-bit key)">
    </register>
    <register id="KEY1_1" width="32" offset="0x3C" description="Key">
    </register>
    <register id="IV_IN_0" width="32" offset="0x40" description="Initialization Vector input (LSW)">
    </register>
    <register id="IV_IN_1" width="32" offset="0x44" description="Initialization vector input">
    </register>
    <register id="IV_IN_2" width="32" offset="0x48" description="Initialization vector input">
    </register>
    <register id="IV_IN_3" width="32" offset="0x4C" description="Initialization Vector input (MSW)">
    </register>
    <register id="CTRL" width="32" offset="0x50" description="register determines the mode of operation of the AES Engine">
        <bitfield id="CCM" description="Defines M? that indicated the length of the authentication field for CCM operations; the authentication field length equals two times (the value of CCM-M plus one). Note that the AES Engine always returns a 128-bit authentication field@@ of which the M least significant bytes are valid. All values are supported." begin="24" end="22" width="3" rwaccess="R/W">
        </bitfield>
        <bitfield id="CCM_L" description="Defines L? that indicated the width of the length field for CCM operations; the length field in bytes equals the value of CMM-L plus one. Supported values for L are (programmed value): 2 (1)@@ 4 (3) and 8 (7)." begin="21" end="19" width="3" rwaccess="R/W">
        </bitfield>
        <bitfield id="GCM" description="AES-GCM mode is selected.this is a combined mode@@ using the Galois field multiplier GF(2^128) for authentication and AES-CTR mode for encryption@@ the bits specify the GCM mode. 0x0 No operation 0x1 GHASH with H loaded and Y0-encrypted forced to zero 0x2 GHASH with H loaded and Y0-encrypted calculated internally 0x3 Autonomous GHASH (both H and Y0-encrypted calculated internally)" begin="17" end="16" width="2" rwaccess="R/W">
        </bitfield>
        <bitfield id="XTS" description="AES-XTS operation is selected; the bits specify the XTS mode.01 = Previous/intermediate tweak value and j loaded (value is loaded via IV@@ j is loaded via the AAD length register) 0x0 No operation 0x1 Previous/intermediate tweak value and j loaded (value is loaded via IV@@ j is loaded via the AAD length register) 0x2 Key2@@ i and j loaded (i is loaded via IV@@ j is loaded via the AAD length register) 0x3 Key2 and i loaded@@ j=0 (i is loaded via IV)" begin="12" end="11" width="2" rwaccess="R/W">
        </bitfield>
        <bitfield id="CTR_WIDTH" description="Specifies the counter width for AES-CTR mode 0x0 Counter is 32 bits 0x1 Counter is 64 bits 0x2 Counter is 128 bits 0x3 Counter is 192 bits" begin="8" end="7" width="2" rwaccess="R/W">
        </bitfield>
        <bitfield id="KEY_SIZE" description="key size 0x0 reserved 0x1 Key is 128 bits. 0x2 Key is 192 bits 0x3 Key is 256" begin="4" end="3" width="2" rwaccess="R/W">
        </bitfield>
    </register>
    <register id="C_LENGTH_0" width="32" offset="0x54" description="Crypto data length registers (LSW and MSW) store the cryptographic data length in bytes for all modes. Once processing with this context is started@@ this length decrements to zero. Data lengths up to (2^61  1) bytes are allowed. For GCM@@ any value up to 2^36 - 32 bytes can be used. This is because a 32-bit counter mode is used; the maximum number of 128-bit blocks is 2^32  2@@ resulting in a maximum number of bytes of 2^36 - 32. A write to this register triggers the engine to start using this context. This is valid for all modes except GCM and CCM. Note that for the combined modes@@ this length does not include the authentication only data; the authentication length is specified in the AES_AUTH_LENGTH register below. All modes must have a length &gt; 0. For the combined modes@@ it is allowed to have one of the lengths equal to zero. For the basic encryption modes (ECB/CBC/CTR/ICM/CFB128) it is allowed to program zero to the length field; in that case the length is assumed infinite. All data must be byte (8-bit) aligned; bit aligned data streams are not supported by the AES Engine. For a Host read operation@@ these registers return all-zeroes.">
    </register>
    <register id="C_LENGTH_1" width="32" offset="0x58" description="Crypto data length registers (LSW and MSW) store the cryptographic data length in bytes for all modes. Once processing with this context is started@@ this length decrements to zero. Data lengths up to (2^61  1) bytes are allowed. For GCM@@ any value up to 2^36 - 32 bytes can be used. This is because a 32-bit counter mode is used; the maximum number of 128-bit blocks is 2^32  2@@ resulting in a maximum number of bytes of 2^36 - 32. A write to this register triggers the engine to start using this context. This is valid for all modes except GCM and CCM. Note that for the combined modes@@ this length does not include the authentication only data; the authentication length is specified in the AES_AUTH_LENGTH register below. All modes must have a length &gt; 0. For the combined modes@@ it is allowed to have one of the lengths equal to zero. For the basic encryption modes (ECB/CBC/CTR/ICM/CFB128) it is allowed to program zero to the length field; in that case the length is assumed infinite. All data must be byte (8-bit) aligned; bit aligned data streams are not supported by the AES Engine. For a Host read operation@@ these registers return all-zeroes.">
        <bitfield id="LENGTH" description="Data length (MSW) length registers (LSW and MSW) store the cryptographic data length in bytes for all modes. Once processing with this context is started@@ this length decrements to zero. Data lengths up to (2^61  1) bytes are allowed. For GCM@@ any value up to 2^36 - 32 bytes can be used. This is because a 32-bit counter mode is used; the maximum number of 128-bit blocks is 2^32  2@@ resulting in a maximum number of bytes of 2^36 - 32. A write to this register triggers the engine to start using this context. This is valid for all modes except GCM and CCM. Note that for the combined modes@@ this length does not include the authentication only data; the authentication length is specified in the AES_AUTH_LENGTH register below. All modes must have a length &gt; 0. For the combined modes@@ it is allowed to have one of the lengths equal to zero. For the basic encryption modes (ECB/CBC/CTR/ICM/CFB128) it is allowed to program zero to the length field; in that case the length is assumed infinite. All data must be byte (8-bit) aligned; bit aligned data streams are not supported by the AES Engine. For a Host read operation@@ these registers return all-zeroes." begin="28" end="0" width="29" rwaccess="R/W">
        </bitfield>
    </register>
    <register id="AUTH_LENGTH" width="32" offset="0x5C" description="AAD data length. The authentication length register store the authentication data length in bytes for combined modes only (GCM or CCM) Supported AAD-lengths for CCM are from 0 to (2^16 - 2^8) bytes. For GCM any value up to (2^32 - 1) bytes can be used. Once processing with this context is started@@ this length decrements to zero. A write to this register triggers the engine to start using this context for GCM and CCM. For XTS this register is optionally used to load j. Loading of j is only required if j != 0. j is a 28-bit value and must be written to bits [31-4] of this register. j represents the sequential number of the 128-bit block inside the data unit. For the first block in a unit@@ this value is zero. It is not required to provide a j for each new data block within a unit. Note that it is possible to start with a j unequal to zero; refer to Table 4 for more details. For a Host read operation@@ these registers return all-zeroes.">
    </register>
    <register id="DATA_IN_0" width="32" offset="0x60" description="Data register to read and write plaintext/ciphertext (MSW)">
    </register>
    <register id="DATA_IN_1" width="32" offset="0x64" description="Data register to read and write plaintext/ciphertext">
    </register>
    <register id="DATA_IN_2" width="32" offset="0x68" description="Data register to read and write plaintext/ciphertext">
    </register>
    <register id="DATA_IN_3" width="32" offset="0x6C" description="Data register to read and write plaintext/ciphertext (LSW)">
    </register>
    <register id="TAG_OUT_0" width="32" offset="0x70" description="">
    </register>
    <register id="TAG_OUT_1" width="32" offset="0x74" description="">
    </register>
    <register id="TAG_OUT_2" width="32" offset="0x78" description="">
    </register>
    <register id="TAG_OUT_3" width="32" offset="0x7C" description="">
    </register>
    <register id="REVISION" width="32" offset="0x80" description="Register AES_REVISION">
        <bitfield id="SCHEME" description="" begin="31" end="30" width="2" rwaccess="R/W">
        </bitfield>
        <bitfield id="FUNC" description="Function indicates a software compatible module family. If there is no level of software compatibility a new Func number (and hence REVISION) should be assigned." begin="27" end="16" width="12" rwaccess="R/W">
        </bitfield>
        <bitfield id="R_RTL" description="RTL Version (R)@@ maintained by IP design owner. RTL follows a numbering such as X.Y.R.Z which are explained in this table. R changes ONLY when: (1) PDS uploads occur which may have been due to spec changes (2) Bug fixes occur (3) Resets to '0' when X or Y changes. Design team has an internal 'Z' (customer invisible) number which increments on every drop that happens due to DV and RTL updates. Z resets to 0 when R increments." begin="15" end="11" width="5" rwaccess="R/W">
        </bitfield>
        <bitfield id="X_MAJOR" description="Major Revision (X)@@ maintained by IP specification owner. X changes ONLY when: (1) There is a major feature addition. An example would be adding Master Mode to Utopia Level2. The Func field (or Class/Type in old PID format) will remain the same. X does NOT change due to: (1) Bug fixes (2) Change in feature parameters." begin="10" end="8" width="3" rwaccess="R/W">
        </bitfield>
        <bitfield id="CUSTOM" description="" begin="7" end="6" width="2" rwaccess="R/W">
        </bitfield>
        <bitfield id="Y_MINOR" description="Minor Revision (Y)@@ maintained by IP specification owner. Y changes ONLY when: (1) Features are scaled (up or down). Flexibility exists in that this feature scalability may either be represented in the Y change or a specific register in the IP that indicates which features are exactly available. (2) When feature creeps from Is-Not list to Is list. But this may not be the case once it sees silicon; in which case X will change. Y does NOT change due to: (1) Bug fixes (2) Typos or clarifications (3) major functional/feature change/addition/deletion. Instead these changes may be reflected via R@@ S@@ X as applicable. Spec owner maintains a customer-invisible number 'S' which changes due to: (1) Typos/clarifications (2) Bug documentation. Note that this bug is not due to a spec change but due to implementation. Nevertheless@@ the spec tracks the IP bugs. An RTL release (say for silicon PG1.1) that occurs due to bug fix should document the corresponding spec number (X.Y.S) in its release notes." begin="5" end="0" width="6" rwaccess="R/W">
        </bitfield>
    </register>
    <register id="SYSCONFIG" width="32" offset="0x84" description="Register AES_SYSCONFIG.This register configures the DMA signals and controls the IDLE and reset logic">
    </register>
    <register id="SYSSTATUS" width="32" offset="0x88" description="">
    </register>
    <register id="IRQSTATUS" width="32" offset="0x8C" description="This register indicates the interrupt status. If one of the interrupt bits is set the interrupt output will be asserted">
    </register>
    <register id="IRQENABLE" width="32" offset="0x90" description="This register contains an enable bit for each unique interrupt generated by the module. It matches the layout of AES_IRQSTATUS register. An interrupt is enabled when the bit in this register is set to 1. An interrupt that is enabled is propagated to the SINTREQUEST_x output. All interrupts need to be enabled explicitly by writing this register. ****************************************************************************">
    </register>
</module>
