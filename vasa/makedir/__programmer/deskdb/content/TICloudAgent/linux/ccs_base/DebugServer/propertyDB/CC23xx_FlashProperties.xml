<?xml version="1.0" encoding="utf-8"?>
<PropertyList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <!--Nodes-->
    <node id="FlashProgrammerNode">
        <name>Flash Settings</name>
        <children>
            <child>ProgramLoadSettingsGroup</child>
            <child>FlashPageGroup</child>
            <child>CcfgGroup</child>
            <child>EraseActionGroup</child>
            <child>DebugAuthenticationGroup</child>
            <child>FlashAlignCombineToggle</child>
            <child>FlashAlignmentSize</child>
            <child>DeviceInfoGroup</child>
        </children>
    </node>
    <!--Groups -->
    <group id="ProgramLoadSettingsGroup">
        <name>Program Load Settings</name>
        <children>
            <child>FlashEraseSetting</child>
            <child>ImageVerificationSetting</child>
            <child>PerformBlankCheck</child>
            <child>SectorSize</child>
            <child>CcfgSize</child>
            <child>CcfgUserRecordSize</child>
            <child>CcfgBase</child>
        </children>
    </group>
    <group id="FlashPageGroup">
        <name>Skip Sectors during Program Load</name>
        <children>
            <child>FlashPageToggle</child>
            <child>FlashPageText</child>
            <child>FlashPages</child>
            <child>FlashPagesFilledWith</child>
            <child>FlashPagesFilledWithValue</child>
        </children>
    </group>
    <group id="EraseActionGroup">
        <name>Erase Actions</name>
        <children>
            <child>ChipEraseButton</child>
            <child>ChipEraseRetainButton</child>
        </children>
    </group>
    <group id="DebugAuthenticationGroup">
        <name>Debug authentication</name>
        <children>
            <child>DebugPassword</child>
        </children>
    </group>
    <group id="DeviceInfoGroup">
        <name>Device Information</name>
        <children>
            <child>DeviceInfoFlashSize</child>
            <child>DeviceInfoRAMSize</child>
            <child>DeviceInfoRevision</child>
            <child>ReadDeviceInfo</child>
            <child>DeviceInfoRevisionTranslation</child>
            <child>DeviceInfoRAMSizeTranslation</child>
            <child>DeviceInfoFlashSizeTranslation</child>
        </children>
    </group>
    <group id="CcfgGroup">
        <name>Customer Configuration (CCFG)</name>
        <children>
            <child>CcfgOverwriteCrcsToggle</child>
            <child>CcfgCrcFields</child>
            <child>CcfgVerifyUserrecordCrcToggle</child>
            <child>ccfg.bootCfg.crc32Info</child>
            <child>ccfg.crc32Info</child>
            <child>ccfg.userRecord.crc32Info</child>
            <child>ccfg.debugCfg.crc32Info</child>
            <child>CcfgOverwriteAuthorizationFieldsToggle</child>
            <child>CcfgOverwriteAuthorizationFieldsTypeChoicelist</child>
            <child>CcfgOverwriteAuthorizationFieldsPasswordId</child>
            <child>CcfgOverwriteAuthorizationFieldsPasswordHash</child>
        </children>
    </group>
    <!--Categories -->
    <categories>
        <category>Program Load</category>
        <category>CCFG</category>
        <category>Manual Erase</category>
        <category>Debug Authentication</category>
        <category>Flash Page</category>
        <category>Download</category>
        <category>Primary BLE Address</category>
        <category>Secondary BLE Address</category>
        <category>Primary IEEE Address</category>
        <category>Secondary IEEE Address</category>
        <category>Device Info</category>
    </categories>
    <!--Property Definitions -->
    <property id="FlashEraseSetting">
        <target>generic</target>
        <name>Erase Settings during Program Load</name>
        <valueType>ChoiceList</valueType>
        <values>
            <value>Chip Erase</value>
            <value>Chip Erase (Retain sectors specified in CCFG)</value>
            <value>Do not erase sectors (program load only)</value>
        </values>
        <defaultValue>Chip Erase</defaultValue>
        <categories>
            <category>Program Load</category>
        </categories>
    </property>
    <property id="ImageVerificationSettingText">
        <target>generic</target>
        <name>Note: If the "Verify Only" option is selected, image data will be verified via device management commands (contents on the device are never read back).
        </name>
        <valueType>Text</valueType>
        <categories>
            <category>Program Load</category>
        </categories>
    </property>
    <property id="ImageVerificationSetting">
        <target>generic</target>
        <name>Verify Only</name>
        <valueType>Boolean</valueType>
        <defaultValue>0</defaultValue>
        <categories>
            <category>Program Load</category>
        </categories>
    </property>
    <property id="PerformBlankCheck">
        <target>generic</target>
        <name>Perform Blank Check</name>
        <valueType>Button</valueType>
        <action>DPActiveDebugSession.flash.performOperation("BlankCheck")</action>
        <categories>
            <category>Program Load</category>
        </categories>
    </property>
    <property id="FlashPageText">
        <target>generic</target>
        <name>Note: This option affects erase, program and verification.
The specified sectors are not programmed. The sectors can be given as a range and/or single sectors.
Example: "0-5,8" Skip erase/program/verify of sectors 0, 1, 2, 3, 4, 5, 8.
        </name>
        <valueType>Text</valueType>
        <categories>
            <category>Flash Page</category>
        </categories>
    </property>
    <property id="FlashPageToggle">
        <target>generic</target>
        <name>Skip specified sectors during program load</name>
        <valueType>Boolean</valueType>
        <defaultValue>0</defaultValue>
        <categories>
            <category>Flash Page</category>
        </categories>
    </property>
    <property id="FlashPages">
        <target>generic</target>
        <name>Sector(s): </name>
        <valueType>String</valueType>
        <defaultValue>0-5,8</defaultValue>
        <enableIf>
            <property id="FlashPageToggle">1</property>
        </enableIf>
        <categories>
            <category>Flash Page</category>
        </categories>
    </property>
    <property id="FlashPagesFilledWith">
        <target>generic</target>
        <name>Skip sectors filled with specified value</name>
        <valueType>Boolean</valueType>
        <defaultValue>0</defaultValue>
        <categories>
            <category>Flash Page</category>
        </categories>
    </property>
    <property id="FlashPagesFilledWithValue">
        <target>generic</target>
        <name>Exlude sectors in image filled with:</name>
        <valueType>String</valueType>
        <defaultValue>0x</defaultValue>
        <enableIf>
            <property id="FlashPagesFilledWith">1</property>
        </enableIf>
        <categories>
            <category>Flash Page</category>
        </categories>
    </property>
    <property id="ChipEraseButton">
        <target>generic</target> <!-- ISA name for Cortex-M3/4 -->
        <name>Chip Erase</name>
        <valueType>Button</valueType>
        <action>DPActiveDebugSession.flash.erase()</action>
        <categories>
            <category>Manual Erase</category>
        </categories>
    </property>
    <property id="ChipEraseRetainButton">
        <target>generic</target> <!-- ISA name for Cortex-M3/4 -->
        <name>Chip Erase (Retain sectors specified in CCFG)</name>
        <valueType>Button</valueType>
        <action>DPActiveDebugSession.flash.performOperation("ChipEraseRetain")</action>
        <categories>
            <category>Manual Erase</category>
        </categories>
    </property>
    <property id="DebugPassword">
        <target>generic</target> <!-- ISA name for Cortex-M3/4 -->
        <name>Debug Password</name>
        <valueType>String</valueType>
        <defaultValue>Open Sesame!</defaultValue>
        <categories>
            <category>Debug Authentication</category>
        </categories>
    </property>
    <property id="FlashAlignCombineToggle">
        <target>generic</target>
        <name>Align program with sectors</name>
        <valueType>Boolean</valueType>
        <defaultValue>1</defaultValue>
        <hidden />
    </property>
    <property id="FlashAlignmentSize">
        <!-- When set, this option combines all sections that is within the given range,
             resulting in bigger programming chunks and improved speed. Holes are
             programmed with FF data -->
        <target>generic</target>
        <name>Alignment Size: 0x</name>
        <valueType>String</valueType>
        <defaultValue>800</defaultValue> <!-- HEX value -->
        <hidden />
    </property>
    <property id="DeviceInfoFlashSize">
        <target>generic</target>
        <name>Flash Size</name>
        <valueType>String</valueType>
        <defaultValue>--</defaultValue>
        <readOnly>1</readOnly>
        <categories>
            <category>Device Info</category>
        </categories>
    </property>
    <property id="DeviceInfoRAMSize">
        <target>generic</target>
        <name>RAM Size</name>
        <valueType>String</valueType>
        <defaultValue>--</defaultValue>
        <readOnly>1</readOnly>
        <categories>
            <category>Device Info</category>
        </categories>
    </property>
    <property id="DeviceInfoRevision">
        <target>generic</target>
        <name>Revision</name>
        <valueType>String</valueType>
        <defaultValue>--</defaultValue>
        <readOnly>1</readOnly>
        <categories>
            <category>Device Info</category>
        </categories>
    </property>
    <property id="ReadDeviceInfo">
        <target>generic</target>
        <name>Read Device Info</name>
        <valueType>Button</valueType>
        <action>DPActiveDebugSession.flash.performOperation("ReadDeviceInfo")</action>
        <categories>
            <category>Device Info</category>
        </categories>
    </property>
    <property id="DeviceInfoRevisionTranslation">
        <target>generic</target>
        <name>Revision Translation</name>
        <valueType>String</valueType>
        <!-- Revision translation
             The list describes how the revision information in DEVICEID_VERSION and DEVICEID_DEVICE (DEVICEID[31:12]) can be translated to a numeric representation (e.g. 1.0) and a letter representation (e.g. A)
             The format of the list is as below:
             "<DEVICEID[31:12]>:<numeric representation>:<letter representation>:<DEVICEID[31:12]>:<numeric representation>:<letter representation>:..."
        -->
        <defaultValue>0x0BB84:1.0:A:0x1BB84:2.0:B:0x0BB85:1.0:A</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="DeviceInfoRAMSizeTranslation">
        <target>generic</target>
        <name>RAM Size Translation</name>
        <valueType>String</valueType>
        <!-- Format: <DEVICEID_DEVICE>:<PARTID_PART>:<PARTID_VARIANT>:<RAM size in bytes>:...
             All elements must be in hex, except if a wildcard character '*' is specifed instead.
             If for example all variants of a device has the same size, the wildcard character can be used.
             For example "0xBB84:0x2DDA:*:0x9000". This means that all variants with DEVICEID_DEVICE=0xBB84 and PARTID_PART=0x2DDA has a RAM size of 36kB
             Another example is "0xBB84:*:*:0x9000". This means that all devices with DEVICEID_DEVICE=0xBB84 has a RAM size of 36kB "-->
        <defaultValue>0xBB84:*:*:0x9000:0xBB85:*:*:0x7000</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="DeviceInfoFlashSizeTranslation">
        <target>generic</target>
        <name>Flash Size Translation</name>
        <valueType>String</valueType>
        <!-- Format: <DEVICEID_DEVICE>:<PARTID_PART>:<PARTID_VARIANT>:<Flash size in bytes>;...
             All elements must be in hex, except if a wildcard character '*' is specifed instead.
             If for example all variants of a device has the same size, the wildcard character can be used.
             For example "0xBB84:0x2DDA:*:0x80000". This means that all variants with DEVICEID_DEVICE=0xBB84 and PARTID_PART=0x2DDA has a flash size of 512kB
             Another example is "0xBB84:*:*:0x80000". This means that all devices with DEVICEID_DEVICE=0xBB84 has a flash size of 512kB "-->
        <defaultValue>0xBB84:*:*:0x80000:0xBB85:*:*:0x40000</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="CcfgOverwriteCrcsToggle">
        <target>generic</target>
        <name>Overwrite CRC fields in CCFG. The CRC values will be based on the provided image.</name>
        <valueType>Boolean</valueType>
        <defaultValue>1</defaultValue>
        <description>Specify which CRC fields should be overwritten below. This setting is automatically enabled if any of the below CCFG overwrite settings are enabled.</description>
        <categories>
            <category>CCFG</category>
        </categories>
    </property>
    <property id="CcfgCrcFields">
        <target>generic</target>
        <name>Comma separated list of CRC fields in CCFG that will be overwritten.
Valid field names are: ccfg.bootCfg.crc32,ccfg.crc32,ccfg.userRecord.crc32,ccfg.debugCfg.crc32</name>
        <valueType>String</valueType>
        <defaultValue>ccfg.bootCfg.crc32,ccfg.crc32,ccfg.userRecord.crc32,ccfg.debugCfg.crc32</defaultValue>
        <description>This setting will be used whenever CRC fields in CCFG will be overwritten. Please note that if any settings to overwrite a field in CCFG are enabled, then the CRC fields that are affected by these changes must be included in this list.</description>
        <categories>
            <category>CCFG</category>
        </categories>
    </property>
    <property id="CcfgVerifyUserrecordCrcToggle">
        <target>generic</target>
        <name>Verify the UserRecord CRC32 field during flash programming. All other CRC fields are always verified.
        </name>
        <valueType>Boolean</valueType>
        <defaultValue>1</defaultValue>
        <categories>
            <category>CCFG</category>
        </categories>
    </property>
    <property id="ccfg.bootCfg.crc32Info">
        <target>generic</target>
        <name>ccfg.bootCfg.crc32</name>
        <valueType>String</valueType>
        <!-- <offset in ccfg for data start in hex>:<data length in bytes in hex> -->
        <defaultValue>0:C</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="ccfg.crc32Info">
        <target>generic</target>
        <name>ccfg.crc32</name>
        <valueType>String</valueType>
        <!-- <offset in ccfg for data start in hex>:<data length in bytes in hex> -->
        <defaultValue>10:73C</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="ccfg.userRecord.crc32Info">
        <target>generic</target>
        <name>ccfg.userRecord.crc32</name>
        <valueType>String</valueType>
        <!-- <offset in ccfg for data start in hex>:<data length in bytes in hex> -->
        <defaultValue>750:7C</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="ccfg.debugCfg.crc32Info">
        <target>generic</target>
        <name>ccfg.debugCfg.crc32</name>
        <valueType>String</valueType>
        <!-- <offset in ccfg for data start in hex>:<data length in bytes in hex> -->
        <defaultValue>7D0:2C</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="CcfgOverwriteAuthorizationFieldsToggle">
        <target>generic</target>
        <name>Overwrite Debug Authorization Configuration</name>
        <valueType>Boolean</valueType>
        <defaultValue>0</defaultValue>
        <categories>
            <category>CCFG</category>
        </categories>
    </property>
    <property id="CcfgOverwriteAuthorizationFieldsTypeChoicelist">
        <target>generic</target>
        <name>Debug Authorization Configuration</name>
        <valueType>StringList</valueType>
        <values>
            <value>Debug always allowed</value>
            <value>Require debug authentication</value>
            <value>Debug not allowed</value>
        </values>
        <defaultValue>Debug always allowed</defaultValue>
        <enableIf>
            <property id="CcfgOverwriteAuthorizationFieldsToggle">1</property>
        </enableIf>
        <categories>
            <category>CCFG</category>
        </categories>
    </property>
    <property id="CcfgOverwriteAuthorizationFieldsPasswordId">
        <target>generic</target>
        <name>Password ID</name>
        <valueType>String</valueType>
        <defaultValue>0101020305080D15</defaultValue>
        <!-- If we supply multiple conditions to enableIf they are OR'ed,
             so if we want to have the conditions AND'ed, we have to invert the conditions and use disableIf instead -->
        <disableIf>
            <property id="CcfgOverwriteAuthorizationFieldsToggle">0</property>
            <property id="CcfgOverwriteAuthorizationFieldsTypeChoicelist">Debug always allowed</property>
            <property id="CcfgOverwriteAuthorizationFieldsTypeChoicelist">Debug not allowed</property>
        </disableIf>
        <description>Hex-formatted password ID. 64-bit customer-defined password ID readable through SACI command (may be used by to calculate or look up debug password)</description>
        <categories>
            <category>CCFG</category>
        </categories>
    </property>
    <property id="CcfgOverwriteAuthorizationFieldsPasswordHash">
        <target>generic</target>
        <name>Password Hash</name>
        <valueType>String</valueType>
        <defaultValue>6DD7E436EBF431DF95AE15EE03BA8EE4C4C63FD8453F675E74D7C2012C9058E5</defaultValue>
        <!-- If we supply multiple conditions to enableIf they are OR'ed,
             so if we want to have the conditions AND'ed, we have to invert the conditions and use disableIf instead -->
        <disableIf>
            <property id="CcfgOverwriteAuthorizationFieldsToggle">0</property>
            <property id="CcfgOverwriteAuthorizationFieldsTypeChoicelist">Debug always allowed</property>
            <property id="CcfgOverwriteAuthorizationFieldsTypeChoicelist">Debug not allowed</property>
        </disableIf>
        <categories>
            <category>CCFG</category>
        </categories>
    </property>
    <property id="SectorSize">
        <target>generic</target>
        <name>SectorSize</name>
        <valueType>String</valueType>
        <!-- size of flash sector in bytes in hex -->
        <defaultValue>800</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="CcfgSize">
        <target>generic</target>
        <name>CcfgSize</name>
        <valueType>String</valueType>
        <!-- size of CCFG sector in bytes in hex -->
        <defaultValue>800</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="CcfgUserRecordSize">
        <target>generic</target>
        <name>CcfgUserRecordSize</name>
        <valueType>String</valueType>
        <!-- size of CCFG User Record in bytes in hex -->
        <defaultValue>80</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="CcfgBase">
        <target>generic</target>
        <name>CcfgBase</name>
        <valueType>String</valueType>
        <!-- Base of CCFG sector in hex -->
        <defaultValue>4E020000</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <!-- MemoryRangeX used by Uniflash memory view -->
    <property id="MemoryRange0">
        <target>generic</target>
        <name>CCFG</name>
        <valueType>String</valueType>
        <defaultValue>0x4E020000-0x4E0207FF</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <property id="MemoryRange1">
        <target>generic</target>
        <name>FCFG1</name>
        <valueType>String</valueType>
        <defaultValue>0x4E000000-0x4E0003FF</defaultValue>
        <readOnly>1</readOnly>
        <hidden />
    </property>
    <!-- fin -->
</PropertyList>
