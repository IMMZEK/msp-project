<module name="FSIRX5_CFG" acronym="" XML_version="1.0" HW_revision="n/a" description="">
	<register id="CFG_RX_MASTER_CTRL_ALTB_" acronym="CFG_RX_MASTER_CTRL_ALTB_" offset="0x0" width="16" description="Receive master control register">
		<bitfield id="KEY" width="8" begin="15" end="8" resetval="0x0" description="Write Key.In order to write to this register, 0xA5 must be written to this field at the same time. Otherwise, writes are ignored. The key is cleared immediately after writing, so it must be written again for every change to this register." range="15 - 8" rwaccess="W"/> 
		<bitfield id="INPUT_ISOLATE" width="1" begin="3" end="3" resetval="0x0" description="When set to 1, the FSI RX inputs [RXCLK, RXD0 and RXD1] will be isolated from what is driven from the device pins and will be held at inactive level of '1'.This isolation facilitates the user to switch the RX inputs to a different set of device pins and hence any potential glitch that could occur during the process of switching will not affect the RX module itself." range="3" rwaccess="R/W"/> 
		<bitfield id="SPI_PAIRING" width="1" begin="2" end="2" resetval="0x0" description="Clock Pairing for SPI-like Behavior Enable bitThis bit enables the internal clock pairing with the FSI TX module. This feature internally connects the TXCLK to RXCLK allowing the FSI TX module, acting as a SPI master, to clock data into the receiver and out of the transmitter like a standard SPI module. This configuration is valid when the Module is in SPI mode only [RX_OPER_CTRL.SPI_MODE = 1] 0h [R/W] = SPI clock pairing is not enabled.1h [R/W] = SPI clock pairing is enabled. The RXCLK will be internally connected to the TXCLK of the corresponding FSI module. Note: The KEY field must contatin 0xA5 for any write to this bit to take effect." range="2" rwaccess="R/W"/> 
		<bitfield id="INT_LOOPBACK" width="1" begin="1" end="1" resetval="0x0" description="Internal Loopback Enable bitThis bit enables the internal loopback functionality of the FSI receiver. By enabling this bit, a mux will select the signals coming directly from the corresponding FSI transmitter module rather than from the pins. 0h [R/W] = Internal loopback is disabled. The FSI RX module will receive signals coming from the pins.1h [R/W] = Internal loopback is enabled. The FSI RX module will receive signals from the directly from FSI TX module rather than the pins. Note: The KEY field must contatin 0xA5 for any write to this bit to take effect." range="1" rwaccess="R/W"/> 
		<bitfield id="CORE_RST" width="1" begin="0" end="0" resetval="0x0" description="Receiver Master Core Reset bitThis bit controls the receiver master core reset. In order to receive any frame, this bit must be cleared.Note: For reset to take affect, the FSI RX module must be held in reset for at least 4 SYSCLK cycles. 0h [R/W] = Receiver core is not in reset and can receive frames.1h [R/W] = Receiver core is held in reset. Note: The KEY field must contatin 0xA5 for any write to this bit to take effect." range="0" rwaccess="R/W"/>
	</register>
	<register id="CFG_Reserved_1" acronym="CFG_Reserved_1" offset="0x2" width="16" description="">
		
	</register>
	<register id="CFG_Reserved_2" acronym="CFG_Reserved_2" offset="0x4" width="16" description="">
		
	</register>
	<register id="CFG_Reserved_3" acronym="CFG_Reserved_3" offset="0x6" width="16" description="">
		
	</register>
	<register id="CFG_RX_OPER_CTRL" acronym="CFG_RX_OPER_CTRL" offset="0x8" width="16" description="Receive operation control register. Protected by LOCK field in RX_LOCK_CTRL register.">
		<bitfield id="PING_WD_RST_MODE" width="1" begin="8" end="8" resetval="0x0" description="Ping Watchdog Timeout Mode Select bitThis bit selects the mode by which the ping watchdog counter is reset. The watchdog counter can be reset and restarted only by ping frames or by any received frame. 0h [R/W] = The ping watchdog counter will reset and restart only by ping frames.1h [R/W] = The ping watchdog counter will reset and restart by any received frame." range="8" rwaccess="R/W"/> 
		<bitfield id="ECC_SEL" width="1" begin="7" end="7" resetval="0x0" description="ECC Data Width Select bitThis bit selects between whether the ECC computation is done on 16-bit or 32-bit words. 0h [R/W] = 32-bit ECC is used.1h [R/W] = 16-bit ECC is used." range="7" rwaccess="R/W"/> 
		<bitfield id="N_WORDS" width="4" begin="6" end="3" resetval="0x0" description="Number of Words to ReceiveThis field defines the number of words which will be received in a DATA_N_WORD frame. This is a user-defined field that must match the corresponding field in the transmitter. Set this bitfield to be one less than the number of words to be received. This value is only applicable when the frame type received is DATA_N_WORD. 0h [R/W] = 1 data word frame [16-bit data].1h [R/W] = 2 data word frame [32-bit data]...Fh [R/W] = 16 data word frame [256-bit data]." range="6 - 3" rwaccess="R/W"/> 
		<bitfield id="SPI_MODE" width="1" begin="2" end="2" resetval="0x0" description="SPI Mode Enable bitThis bit enables and disables the SPI compatibility mode of the FSI RX. The received data must be formatted as an FSI frame in order for the data to properly be received. SPI compatibility mode will allow FSI RX to receive data that is sent using SPI signal format. Refer to the applicable section in the FSI TRM chapter for more information. 0h [R/W] = FSI is in normal mode of operation.1h [R/W] = FSI is operating in SPI compatibility mode." range="2" rwaccess="R/W"/> 
		<bitfield id="DATA_WIDTH" width="2" begin="1" end="0" resetval="0x0" description="Receive Data Width Select bitThese bits decide the number of data lines used for receiving data.  0h [R/W] = Data will be received on one data line, RXD0.1h [R/W] = Data will be received on two data lines, RXD0 and RXD1.2h, 3h [R/W] = Reserved" range="1 - 0" rwaccess="R/W"/>
	</register>
	<register id="CFG_Reserved_4" acronym="CFG_Reserved_4" offset="0xA" width="16" description="">
		
	</register>
	<register id="CFG_RX_FRAME_INFO" acronym="CFG_RX_FRAME_INFO" offset="0xC" width="16" description="Receive frame control register">
		<bitfield id="FRAME_TYPE" width="4" begin="3" end="0" resetval="0x0" description="Received Frame TypeThis field indicates the type of frame that was successfully received last. 0000b [R/W] = A ping frame was received0100b [R/W] = A DATA_1_WORD frame was received [16-bit data].0101b [R/W] = A DATA_2_WORD frame was received [32-bit data].0110b [R/W] = A DATA_4_WORD frame was received [64-bit data]. 0111b [R/W] = A DATA_6_WORD frame was received [96-bit data].0011b [R/W] = A DATA_N_WORD frame was received. The N_WORD field will determine the number of words [1 to 16] to be sent. The number of words received must equal the value programmed in RX_OPER_CTRL.N_WORDS. 1111b [R/W] = An error frame was received. This frame can be used during error conditions or any condition where the transmitter wants to signal the receiver for attention. However, the user software is at liberty to use this for any purpose. 0001b, 0010b, and 1000b through 1110b are Reserved and should not be used." range="3 - 0" rwaccess="R"/>
	</register>
	<register id="CFG_RX_FRAME_TAG_UDATA" acronym="CFG_RX_FRAME_TAG_UDATA" offset="0xE" width="16" description="Receive frame tag and user data register">
		<bitfield id="USER_DATA" width="8" begin="15" end="8" resetval="0x0" description="Received User DataThis field contains the 8-bit user data field of the last successfully received frame." range="15 - 8" rwaccess="R"/> 
		<bitfield id="FRAME_TAG" width="4" begin="4" end="1" resetval="0x0" description="Received Frame TagThis field contains the 4-bit frame tag from the last successfully received frame. This is intentionally shifted into bits 4:1 so that the register can be used as a 32-bit address index based on the received tag." range="4 - 1" rwaccess="R"/> 
		<bitfield id="ZERO" width="1" begin="0" end="0" resetval="0x0" description="Zero bitThis bit will always read  as 0. This is intentionally provided to create a 32-bit offset if required. Using the FRAME_TAG  and ZERO bits of this register [bits 4:0], application software can directly index into an array of 32-bit data." range="0" rwaccess="R"/>
	</register>
	<register id="CFG_RX_DMA_CTRL" acronym="CFG_RX_DMA_CTRL" offset="0x10" width="16" description="Receive DMA event control register. Protected by LOCK field in RX_LOCK_CTRL register.">
		<bitfield id="DMA_EVT_EN" width="1" begin="0" end="0" resetval="0x0" description="DMA Event Enable bitThis bit will enable a DMA Event to be generated upon the completion of a frame reception. 0h [R/W] = A DMA event will not be generated.1h [R/W] = A DMA event will be generated upon the reception of a frame. Note: The DMA event will only be generated for data frames." range="0" rwaccess="R/W"/>
	</register>
	<register id="CFG_Reserved_5" acronym="CFG_Reserved_5" offset="0x12" width="16" description="">
		
	</register>
	<register id="CFG_RX_EVT_STS_ALT1_" acronym="CFG_RX_EVT_STS_ALT1_" offset="0x14" width="16" description="Receive event and error status flag register">
		<bitfield id="ERROR_TAG_MATCH" width="1" begin="14" end="14" resetval="0x0" description="Error Tag Match FlagThis bit indicates that an error frame was received with a  tag comparison matching the masked tag reference. Software can also force this bit to get set by writing to the RX_EVT_FRC register.  0h [R] = No  tag-matched error frame received.1h [R] = A  tag-matched error frame has been received. To clear this bit, write to the corresponding bit in the RX_EVT_CLR register." range="14" rwaccess="R"/> 
		<bitfield id="DATA_TAG_MATCH" width="1" begin="13" end="13" resetval="0x0" description="Data Tag Match FlagThis bit indicates that a dataframe was received with a  tag comparison matching the masked tag reference. Software can also force this bit to get set by writing to the RX_EVT_FRC register.  0h [R] = No tag-matched data frame received.1h [R] = A tag-matched data frame has been received. To clear this bit, write to the corresponding bit in the RX_EVT_CLR register." range="13" rwaccess="R"/> 
		<bitfield id="PING_TAG_MATCH" width="1" begin="12" end="12" resetval="0x0" description="Ping Tag Match FlagThis bit indicates that a ping frame was received with a  tag comparison matching the masked tag reference. Software can also force this bit to get set by writing to the RX_EVT_FRC register.  0h [R] = No tag-matched ping frame received.1h [R] = A tag-matched ping frame has been received. To clear this bit, write to the corresponding bit in the RX_EVT_CLR register." range="12" rwaccess="R"/> 
		<bitfield id="DATA_FRAME" width="1" begin="11" end="11" resetval="0x0" description="Data Frame Received FlagThis bit indicates that an data frame has been received. Software can also force this bit to get set by writing to the RX_EVT_FRC register.  0h [R] = No data frame has been received.1h [R] = A data frame has been received. To clear this bit, write to the corresponding bit in the RX_EVT_CLR register." range="11" rwaccess="R"/> 
		<bitfield id="FRAME_OVERRUN" width="1" begin="10" end="10" resetval="0x0" description="Frame Overrun FlagThis bit indicates that a frame overrun condition has occured. This bit gets set to 1 when a new DATA/ERROR frame is received and the corresponding DATA_FRAME_RCVD/ERROR_FRAME_RCVD flag is still set to 1. Software can also force this bit to get set by writing to the RX_EVT_FRC register.  0h [R] = Frame overrun has not ocurred.1h [R] = Frame overrun has ocurred. To clear this bit, write to the corresponding bit in the RX_EVT_CLR register." range="10" rwaccess="R"/> 
		<bitfield id="PING_FRAME" width="1" begin="9" end="9" resetval="0x0" description="Ping Frame Received FlagThis bit indicates that an ping frame has been received. Software can also force this bit to get set by writing to the RX_EVT_FRC register.  0h [R] = No ping frame has been received.1h [R] = A ping frame has been received. To clear this bit, write to the corresponding bit in the RX_EVT_CLR register." range="9" rwaccess="R"/> 
		<bitfield id="ERR_FRAME" width="1" begin="8" end="8" resetval="0x0" description="Error Frame Received FlagThis bit indicates that an error frame has been received. Software can also force this bit to get set by writing to the RX_EVT_FRC register.  0h [R] = No error frame has been received.1h [R] = An error frame has been received. To clear this bit, write to the corresponding bit in the RX_EVT_CLR register." range="8" rwaccess="R"/> 
		<bitfield id="BUF_UNDERRUN" width="1" begin="7" end="7" resetval="0x0" description="Receive Buffer Underrun FlagThis bit indicates that a buffer underrun condition has occured in the receive buffer. This will happen when software reads the buffer which is empty and has no valid data. Software can also force this bit to get set by writing to the RX_EVT_FRC register.  0h [R] = Receive Buffer Underrun has not ocurred.1h [R] = Receive Buffer Underrun has ocurred. To clear this bit, write to the corresponding bit in the RX_EVT_CLR register." range="7" rwaccess="R"/> 
		<bitfield id="FRAME_DONE" width="1" begin="6" end="6" resetval="0x0" description="Frame Done FlagThis bit indicates that a frame has been successfully received without error. Software can also force this bit to get set by writing to the RX_EVT_FRC register.  0h [R] = No frame has been successfully received.1h [R] = A frame has been successfully received. To clear this bit, write to the corresponding bit in the RX_EVT_CLR register." range="6" rwaccess="R"/> 
		<bitfield id="BUF_OVERRUN" width="1" begin="5" end="5" resetval="0x0" description="Receive Buffer Overrun FlagThis bit indicates that a buffer overrun condition has occured in the receive buffer. Software can also force this bit to get set by writing to the RX_EVT_FRC register.  0h [R] = Receive buffer overrun has not ocurred.1h [R] = Receive buffer overrun has ocurred. To clear this bit, write to the corresponding bit in the RX_EVT_CLR register." range="5" rwaccess="R"/> 
		<bitfield id="EOF_ERR" width="1" begin="4" end="4" resetval="0x0" description="End-of-Frame Error FlagThis bit indicates that an invalid end-of-frame bit pattern has been received. Software can also force this bit to get set by writing to the RX_EVT_FRC register.  0h [R] = Invalid end-of-frame has not been received.1h [R] = Invalid end-of-frame has been received To clear this bit, write to the corresponding bit in the RX_EVT_CLR register." range="4" rwaccess="R"/> 
		<bitfield id="TYPE_ERR" width="1" begin="3" end="3" resetval="0x0" description="Frame Type Error FlagThis bit inditcates that an invalid frame type has been received. Software can also force this bit to get set by writing to the RX_EVT_FRC register.  0h [R] = Invalid frame type has not been received.1h [R] = Invalid frame type has been received To clear this bit, write to the corresponding bit in the RX_EVT_CLR register." range="3" rwaccess="R"/> 
		<bitfield id="CRC_ERR" width="1" begin="2" end="2" resetval="0x0" description="CRC Error FlagThis bit indicates that a CRC error has occured. A CRC error will be generated on a data frame where the received CRC and the computed CRC do not match. Software can also force this bit to get set by writing to the RX_EVT_FRC register.  0h [R] = CRC error has not occured.1h [R] = CRC error has occured. To clear this bit, write to the corresponding bit in the RX_EVT_CLR register." range="2" rwaccess="R"/> 
		<bitfield id="FRAME_WD_TO" width="1" begin="1" end="1" resetval="0x0" description="Frame Watchdog Timeout FlagThis bit indicates that the frame watchdog timer has timed out. Software can also force this bit to get set by writing to the RX_EVT_FRC register.  0h [R] = Frame watchdog timeout has not occured.1h [R] = Frame watchdog timeout has occured. To clear this bit, write to the corresponding bit in the RX_EVT_CLR register." range="1" rwaccess="R"/> 
		<bitfield id="PING_WD_TO" width="1" begin="0" end="0" resetval="0x0" description="Ping Watchdog Timeout FlagThis bit indicates that the ping watchdog timer has timed out. Software can also force this bit to get set by writing to the RX_EVT_FRC register.  0h [R] = Ping watchdog timeout has not occured.1h [R] = Ping watchdog timeout has occured. To clear this bit, write to the corresponding bit in the RX_EVT_CLR register." range="0" rwaccess="R"/>
	</register>
	<register id="CFG_RX_CRC_INFO" acronym="CFG_RX_CRC_INFO" offset="0x16" width="16" description="Receive CRC info of received and computed CRC">
		<bitfield id="CALC_CRC" width="8" begin="15" end="8" resetval="0x0" description="Harware Calculated CRC ValueThis bitfield contains the CRC value that was calculated on the last received data. The contents of this bitfield are valid only when data frames are received.  Note: The contents of this bitfield are invalid for ping and error frames." range="15 - 8" rwaccess="R"/> 
		<bitfield id="RX_CRC" width="8" begin="7" end="0" resetval="0x0" description="Received CRC ValueThis bitfield contains the CRC value that was last received a frame. The contents of this bitfield are valid only when data frames are received.  Note: The contents of this bitfield are invalid for ping and error frames." range="7 - 0" rwaccess="R"/>
	</register>
	<register id="CFG_RX_EVT_CLR_ALT1_" acronym="CFG_RX_EVT_CLR_ALT1_" offset="0x18" width="16" description="Receive event and error clear register">
		<bitfield id="ERROR_TAG_MATCH" width="1" begin="14" end="14" resetval="0x0" description="Error Tag Match Glag Clear bitThis bit clears the corresponding bit in the RX_EVT_STS register. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Writing a 1 to this bit will clear the corresponding bit in the RX_EVT_STS register to 0." range="14" rwaccess="W"/> 
		<bitfield id="DATA_TAG_MATCH" width="1" begin="13" end="13" resetval="0x0" description="Data Tag Match Flag Clear bitThis bit clears the corresponding bit in the RX_EVT_STS register. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Writing a 1 to this bit will clear the corresponding bit in the RX_EVT_STS register to 0." range="13" rwaccess="W"/> 
		<bitfield id="PING_TAG_MATCH" width="1" begin="12" end="12" resetval="0x0" description="Ping Tag Match Flag Clear bitThis bit clears the corresponding bit in the RX_EVT_STS register. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Writing a 1 to this bit will clear the corresponding bit in the RX_EVT_STS register to 0." range="12" rwaccess="W"/> 
		<bitfield id="DATA_FRAME" width="1" begin="11" end="11" resetval="0x0" description="Data Frame Received Flag Clear bitThis bit clears the corresponding bit in the RX_EVT_STS register. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Writing a 1 to this bit will clear the corresponding bit in the RX_EVT_STS register to 0." range="11" rwaccess="W"/> 
		<bitfield id="FRAME_OVERRUN" width="1" begin="10" end="10" resetval="0x0" description="Frame Overrun Flag Clear bitThis bit clears the corresponding bit in the RX_EVT_STS register. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Writing a 1 to this bit will clear the corresponding bit in the RX_EVT_STS register to 0." range="10" rwaccess="W"/> 
		<bitfield id="PING_FRAME" width="1" begin="9" end="9" resetval="0x0" description="Ping Frame Received Flag Clear bitThis bit clears the corresponding bit in the RX_EVT_STS register. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Writing a 1 to this bit will clear the corresponding bit in the RX_EVT_STS register to 0." range="9" rwaccess="W"/> 
		<bitfield id="ERR_FRAME" width="1" begin="8" end="8" resetval="0x0" description="Error Frame Received Flag Clear bitThis bit clears the corresponding bit in the RX_EVT_STS register. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Writing a 1 to this bit will clear the corresponding bit in the RX_EVT_STS register to 0." range="8" rwaccess="W"/> 
		<bitfield id="BUF_UNDERRUN" width="1" begin="7" end="7" resetval="0x0" description="Receive Buffer Underrun Flag Clear bitThis bit clears the corresponding bit in the RX_EVT_STS register. 0h [R/W] = Writing a 0 to this bit will have no effect.1h [R/W] = Writing a 1 to this bit will clear the corresponding bit in the RX_EVT_STS register to 0." range="7" rwaccess="W"/> 
		<bitfield id="FRAME_DONE" width="1" begin="6" end="6" resetval="0x0" description="Frame Done Flag Clear bitThis bit clears the corresponding bit in the RX_EVT_STS register. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Writing a 1 to this bit will clear the corresponding bit in the RX_EVT_STS register to 0." range="6" rwaccess="W"/> 
		<bitfield id="BUF_OVERRUN" width="1" begin="5" end="5" resetval="0x0" description="Receive Buffer Overrun Flag Clear bitThis bit clears the corresponding bit in the RX_EVT_STS register. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Writing a 1 to this bit will clear the corresponding bit in the RX_EVT_STS register to 0." range="5" rwaccess="W"/> 
		<bitfield id="EOF_ERR" width="1" begin="4" end="4" resetval="0x0" description="End-of-Frame Error Flag Clear bitThis bit clears the corresponding bit in the RX_EVT_STS register. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Writing a 1 to this bit will clear the corresponding bit in the RX_EVT_STS register to 0." range="4" rwaccess="W"/> 
		<bitfield id="TYPE_ERR" width="1" begin="3" end="3" resetval="0x0" description="Frame Type Error Flag Clear bitThis bit clears the corresponding bit in the RX_EVT_STS register. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Writing a 1 to this bit will clear the corresponding bit in the RX_EVT_STS register to 0." range="3" rwaccess="W"/> 
		<bitfield id="CRC_ERR" width="1" begin="2" end="2" resetval="0x0" description="CRC Error Flag Clear bitThis bit clears the corresponding bit in the RX_EVT_STS register. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Writing a 1 to this bit will clear the corresponding bit in the RX_EVT_STS register to 0." range="2" rwaccess="W"/> 
		<bitfield id="FRAME_WD_TO" width="1" begin="1" end="1" resetval="0x0" description="Frame Watchdog Timeout Flag Clear bitThis bit clears the corresponding bit in the RX_EVT_STS register. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Writing a 1 to this bit will clear the corresponding bit in the RX_EVT_STS register to 0." range="1" rwaccess="W"/> 
		<bitfield id="PING_WD_TO" width="1" begin="0" end="0" resetval="0x0" description="Ping Watchdog Timeout Flag Clear bitThis bit clears the corresponding bit in the RX_EVT_STS register. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Writing a 1 to this bit will clear the corresponding bit in the RX_EVT_STS register to 0." range="0" rwaccess="W"/>
	</register>
	<register id="CFG_RX_EVT_FRC_ALT1_" acronym="CFG_RX_EVT_FRC_ALT1_" offset="0x1A" width="16" description="Receive event and error flag force register">
		<bitfield id="ERROR_TAG_MATCH" width="1" begin="14" end="14" resetval="0x0" description="Error Tag Match Flag Force bitThis bit will cause the corresponding bit in the RX_EVT_STS register to get set. The purpose of this register is to allow software to simulate the effect of the event and test the associated software/ISR. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Force the corresponding bit in the RX_EVT_STS Register." range="14" rwaccess="W"/> 
		<bitfield id="DATA_TAG_MATCH" width="1" begin="13" end="13" resetval="0x0" description="Data Tag Match Flag Force bitThis bit will cause the corresponding bit in the RX_EVT_STS register to get set. The purpose of this register is to allow software to simulate the effect of the event and test the associated software/ISR. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Force the corresponding bit in the RX_EVT_STS Register." range="13" rwaccess="W"/> 
		<bitfield id="PING_TAG_MATCH" width="1" begin="12" end="12" resetval="0x0" description="Ping Tag Match Flag Force bitThis bit will cause the corresponding bit in the RX_EVT_STS register to get set. The purpose of this register is to allow software to simulate the effect of the event and test the associated software/ISR. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Force the corresponding bit in the RX_EVT_STS Register." range="12" rwaccess="W"/> 
		<bitfield id="DATA_FRAME" width="1" begin="11" end="11" resetval="0x0" description="Data Frame Received Flag Force bitThis bit will cause the corresponding bit in the RX_EVT_STS register to get set. The purpose of this register is to allow software to simulate the effect of the event and test the associated software/ISR. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Force the corresponding bit in the RX_EVT_STS Register." range="11" rwaccess="W"/> 
		<bitfield id="FRAME_OVERRUN" width="1" begin="10" end="10" resetval="0x0" description="Frame Overrun Flag Force bitThis bit will cause the corresponding bit in the RX_EVT_STS register to get set. The purpose of this register is to allow software to simulate the effect of the event and test the associated software/ISR. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Force the corresponding bit in the RX_EVT_STS Register." range="10" rwaccess="W"/> 
		<bitfield id="PING_FRAME" width="1" begin="9" end="9" resetval="0x0" description="Ping Frame Received Flag Force bitThis bit will cause the corresponding bit in the RX_EVT_STS register to get set. The purpose of this register is to allow software to simulate the effect of the event and test the associated software/ISR. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Force the corresponding bit in the RX_EVT_STS Register." range="9" rwaccess="W"/> 
		<bitfield id="ERR_FRAME" width="1" begin="8" end="8" resetval="0x0" description="Error Frame Received Flag Force bitThis bit will cause the corresponding bit in the RX_EVT_STS register to get set. The purpose of this register is to allow software to simulate the effect of the event and test the associated software/ISR. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Force the corresponding bit in the RX_EVT_STS Register." range="8" rwaccess="W"/> 
		<bitfield id="BUF_UNDERRUN" width="1" begin="7" end="7" resetval="0x0" description="Receive Buffer Underrun Flag Force bitThis bit will cause the corresponding bit in the RX_EVT_STS register to get set. The purpose of this register is to allow software to simulate the effect of the event and test the associated software/ISR. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Force the corresponding bit in the RX_EVT_STS Register." range="7" rwaccess="W"/> 
		<bitfield id="FRAME_DONE" width="1" begin="6" end="6" resetval="0x0" description="Frame Done Flag Force bitThis bit will cause the corresponding bit in the RX_EVT_STS register to get set. The purpose of this register is to allow software to simulate the effect of the event and test the associated software/ISR. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Force the corresponding bit in the RX_EVT_STS Register." range="6" rwaccess="W"/> 
		<bitfield id="BUF_OVERRUN" width="1" begin="5" end="5" resetval="0x0" description="Receive Buffer Overrun Flag Force bitThis bit will cause the corresponding bit in the RX_EVT_STS register to get set. The purpose of this register is to allow software to simulate the effect of the event and test the associated software/ISR. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Force the corresponding bit in the RX_EVT_STS Register." range="5" rwaccess="W"/> 
		<bitfield id="EOF_ERR" width="1" begin="4" end="4" resetval="0x0" description="End-of-Frame Error Flag Force bitThis bit will cause the corresponding bit in the RX_EVT_STS register to get set. The purpose of this register is to allow software to simulate the effect of the event and test the associated software/ISR. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Force the corresponding bit in the RX_EVT_STS Register." range="4" rwaccess="W"/> 
		<bitfield id="TYPE_ERR" width="1" begin="3" end="3" resetval="0x0" description="Frame Type Error Flag Force bitThis bit will cause the corresponding bit in the RX_EVT_STS register to get set. The purpose of this register is to allow software to simulate the effect of the event and test the associated software/ISR. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Force the corresponding bit in the RX_EVT_STS Register." range="3" rwaccess="W"/> 
		<bitfield id="CRC_ERR" width="1" begin="2" end="2" resetval="0x0" description="CRC Error Flag Force bitThis bit will cause the corresponding bit in the RX_EVT_STS register to get set. The purpose of this register is to allow software to simulate the effect of the event and test the associated software/ISR. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Force the corresponding bit in the RX_EVT_STS Register." range="2" rwaccess="W"/> 
		<bitfield id="FRAME_WD_TO" width="1" begin="1" end="1" resetval="0x0" description="Frame Watchdog Timeout Flag Force bitThis bit will cause the corresponding bit in the RX_EVT_STS register to get set. The purpose of this register is to allow software to simulate the effect of the event and test the associated software/ISR. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Force the corresponding bit in the RX_EVT_STS Register." range="1" rwaccess="W"/> 
		<bitfield id="PING_WD_TO" width="1" begin="0" end="0" resetval="0x0" description="Ping Watchdog Timeout Flag Force bitThis bit will cause the corresponding bit in the RX_EVT_STS register to get set. The purpose of this register is to allow software to simulate the effect of the event and test the associated software/ISR. 0h [W] = Writing a 0 to this bit will have no effect.1h [W] = Force the corresponding bit in the RX_EVT_STS Register." range="0" rwaccess="W"/>
	</register>
	<register id="CFG_RX_BUF_PTR_LOAD" acronym="CFG_RX_BUF_PTR_LOAD" offset="0x1C" width="16" description="Receive buffer pointer load register">
		<bitfield id="BUF_PTR_LOAD" width="4" begin="3" end="0" resetval="0x0" description="Buffer Pointer Load.This is the value to be loaded into the receive word pointer when written. This is to allow software to force the receiver to start storing the received data starting at a specific location in the buffer.  NOTE: The value of the CURR_BUF_PTR in the RX_BUF_PTR_STS will not get reflected immediately. This will take effect only when there is a valid receive operation with incoming clocks after [3 RXCLK + 3 SYCLK] cycles." range="3 - 0" rwaccess="R/W"/>
	</register>
	<register id="CFG_RX_BUF_PTR_STS" acronym="CFG_RX_BUF_PTR_STS" offset="0x1E" width="16" description="Receive buffer pointer status register">
		<bitfield id="CURR_WORD_CNT" width="5" begin="12" end="8" resetval="0x0" description="Words Available in the Receive BufferThis bitfield indicates the number of valid data words present in the receive buffer that have not been read by the application software. This bitfield is only valid when there is no active transfer. Note: This value will not be valid if there has been a buffer overrun or underrun condition." range="12 - 8" rwaccess="R"/> 
		<bitfield id="CURR_BUF_PTR" width="4" begin="3" end="0" resetval="0x0" description="Current Buffer Pointer IndexThis bitfield will show the current index of the buffer pointer. This value is only valid when there is no active transmission." range="3 - 0" rwaccess="R"/>
	</register>
	<register id="CFG_RX_FRAME_WD_CTRL" acronym="CFG_RX_FRAME_WD_CTRL" offset="0x20" width="16" description="Receive frame watchdog control register. Protected by LOCK field in RX_LOCK_CTRL register.">
		<bitfield id="FRAME_WD_EN" width="1" begin="1" end="1" resetval="0x0" description="Frame Watchdog Counter Enable bitThis bit will enable or disable the frame watchdog counter. The counter [RX_FRAME_WD_CNT] will begin counting from 0 when a valid start-of-frame pattern is received. When the reference value [RX_FRAME_WD_REF] is reached, it will generate a frame watchdog timeout event [RX_EVT_STS.FRAME_WD_TO] and the counter value will reset to 0 and continue counting on the next valid start-of-frame. 0h [R/W] = The frame watchdog counter is disabled and not running.1h [R/W] = The frame watchdog counter logic is enabled and running." range="1" rwaccess="R/W"/> 
		<bitfield id="FRAME_WD_CNT_RST" width="1" begin="0" end="0" resetval="0x0" description="Frame Watchdog Counter Reset bitThis bit will reset the frame watchdog counter to 0. This bit will always be read as 0. 0h [R/W] = Writing a 0 to this bit has no effect.1h [W] = The frame watchdog counter will be reset to 0." range="0" rwaccess="R/W"/>
	</register>
	<register id="CFG_Reserved_6" acronym="CFG_Reserved_6" offset="0x22" width="16" description="">
		
	</register>
	<register id="CFG_RX_FRAME_WD_REF" acronym="CFG_RX_FRAME_WD_REF" offset="0x24" width="32" description="Receive frame watchdog counter reference. Protected by LOCK field in RX_LOCK_CTRL register.">
		<bitfield id="FRAME_WD_REF" width="32" begin="31" end="0" resetval="0x0" description="Frame Watchdog Counter Reference ValueThis is the 32-bit reference value for the frame watchdog timeout counter. The counter will count up starting from 0 at a valid start-of-frame pattern and continue counting until this value is reached." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="CFG_RX_FRAME_WD_CNT" acronym="CFG_RX_FRAME_WD_CNT" offset="0x28" width="32" description="Receive frame watchdog current count">
		<bitfield id="FRAME_WD_CNT" width="32" begin="31" end="0" resetval="0x0" description="Frame Watchdog Counter ValueThis is the 32-bit read-only register which shows the current value of the frame watchdog counter. This counter is reset to 0 in a variety of ways: A write to FRME_WD_CNT_RST, a match with FRAME_WD_REF, or the reception of a successful data frame." range="31 - 0" rwaccess="R"/>
	</register>
	<register id="CFG_RX_PING_WD_CTRL" acronym="CFG_RX_PING_WD_CTRL" offset="0x2C" width="16" description="Receive ping watchdog control register. Protected by LOCK field in RX_LOCK_CTRL register.">
		<bitfield id="PING_WD_EN" width="1" begin="1" end="1" resetval="0x0" description="Ping Watchdog Counter Enable bitThis bit will enable or disable the ping watchdog counter. The counter [RX_PING_WD_CNT] will begin counting from 0 when it is enabled. When the reference value [RX_PING_WD_REF] is reached, it will generate a ping watchdog timeout event [RX_EVT_STS.PING_WD_TO] and the counter value will reset to 0, and resume counting 0h [R/W] = The ping watchdog counter is disabled and not running.1h [R/W] = The ping watchdog counter logic is enabled and running." range="1" rwaccess="R/W"/> 
		<bitfield id="PING_WD_RST" width="1" begin="0" end="0" resetval="0x0" description="Ping Watchdog Counter Reset bitThis bit will reset the ping watchdog counter to 0. This bit will always be read as 0. 0h [R/W] = Writing a 0 to this bit has no effect.1h [W] = The ping watchdog counter will be reset to 0." range="0" rwaccess="R/W"/>
	</register>
	<register id="CFG_RX_PING_TAG" acronym="CFG_RX_PING_TAG" offset="0x2E" width="16" description="Receive ping tag register">
		<bitfield id="PING_TAG" width="4" begin="4" end="1" resetval="0x0" description="Received Ping Frame TagThis field contains the 4-bit frame tag from the last successfully received ping frame. This is intentionally shifted into bits 4:1 so that the register can be used as a 32-bit address index based on the received tag." range="4 - 1" rwaccess="R"/> 
		<bitfield id="ZERO" width="1" begin="0" end="0" resetval="0x0" description="Zero bitThis bit will always read  as 0. This is intentionally provided to create a 32-bit offset if required. Using the PING_TAG  and ZERO bits of this register [bits 4:0], application software can directly index into an array of 32-bit data." range="0" rwaccess="R"/>
	</register>
	<register id="CFG_RX_PING_WD_REF" acronym="CFG_RX_PING_WD_REF" offset="0x30" width="32" description="Receive ping watchdog counter reference. Protected by LOCK field in RX_LOCK_CTRL register.">
		<bitfield id="PING_WD_REF" width="32" begin="31" end="0" resetval="0x0" description="Ping Watchdog Counter Reference ValueThis is the 32-bit reference value for the ping watchdog timeout counter. The counter will count up starting from 0 and continue counting until this value is reached. " range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="CFG_RX_PING_WD_CNT" acronym="CFG_RX_PING_WD_CNT" offset="0x34" width="32" description="Receive pingwatchdog current count">
		<bitfield id="PING_WD_CNT" width="32" begin="31" end="0" resetval="0x0" description="Ping Watchdog Counter ValueThis is the 32-bit read-only register which shows the current value of the ping watchdog counter. This counter is reset to 0 in a variety of ways: A write to PING_WD_RST, a match with PING_WD_REF, or the reception of a ping frame." range="31 - 0" rwaccess="R"/>
	</register>
	<register id="CFG_RX_INT1_CTRL_ALT1_" acronym="CFG_RX_INT1_CTRL_ALT1_" offset="0x38" width="16" description="Receive interrupt control register for RX_INT1. Protected by LOCK field in RX_LOCK_CTRL register.">
		<bitfield id="INT1_EN_ERROR_TAG_MATCH" width="1" begin="14" end="14" resetval="0x0" description="Enable Error Frame Received with Tag Match Interrupt to INT1 bitThis is an enable register which decides whether an interrupt [RX_INT1] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT1.1h [R/W] = An error frame received with matching tag will trigger an interrupt on RX_INT1. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="14" rwaccess="R/W"/> 
		<bitfield id="INT1_EN_DATA_TAG_MATCH" width="1" begin="13" end="13" resetval="0x0" description="Enable Data Frame Received with Tag Match Interrupt to INT1 bitThis is an enable register which decides whether an interrupt [RX_INT1] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT1.1h [R/W] = A data frame received with matching tag will trigger an interrupt on RX_INT1. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="13" rwaccess="R/W"/> 
		<bitfield id="INT1_EN_PING_TAG_MATCH" width="1" begin="12" end="12" resetval="0x0" description="Enable Ping Frame Received with Tag Match Interrupt to INT1 bitThis is an enable register which decides whether an interrupt [RX_INT1] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT1.1h [R/W] = A ping frame received with matching tag will trigger an interrupt on RX_INT1. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="12" rwaccess="R/W"/> 
		<bitfield id="INT1_EN_DATA_FRAME" width="1" begin="11" end="11" resetval="0x0" description="Enable Data Frame Received Interrupt to INT1 bitThis is an enable register which decides whether an interrupt [RX_INT1] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT1.1h [R/W] = A data frame received event will trigger an interrupt on RX_INT1. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="11" rwaccess="R/W"/> 
		<bitfield id="INT1_EN_FRAME_OVERRUN" width="1" begin="10" end="10" resetval="0x0" description="Enable Frame Overrun Interrupt to INT1 bitThis is an enable register which decides whether an interrupt [RX_INT1] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT1.1h [R/W] = A frame overrun event will trigger an interrupt on RX_INT1. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="10" rwaccess="R/W"/> 
		<bitfield id="INT1_EN_PING_FRAME" width="1" begin="9" end="9" resetval="0x0" description="Enable Ping Frame Received Interrupt to INT1 bitThis is an enable register which decides whether an interrupt [RX_INT1] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT1.1h [R/W] = A ping frame received event will trigger an interrupt on RX_INT1. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="9" rwaccess="R/W"/> 
		<bitfield id="INT1_EN_ERR_FRAME" width="1" begin="8" end="8" resetval="0x0" description="Enable ERROR Frame Received Interrupt to INT1 bitThis is an enable register which decides whether an interrupt [RX_INT1] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT1.1h [R/W] = A error frame received event will trigger an interrupt on RX_INT1. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="8" rwaccess="R/W"/> 
		<bitfield id="INT1_EN_UNDERRUN" width="1" begin="7" end="7" resetval="0x0" description="Enable Buffer Underrun Interrupt to INT1 bitThis is an enable register which decides whether an interrupt [RX_INT1] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT1.1h [R/W] = A buffer underrun event will trigger an interrupt on RX_INT1. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="7" rwaccess="R/W"/> 
		<bitfield id="INT1_EN_FRAME_DONE" width="1" begin="6" end="6" resetval="0x0" description="Enable Frame Done Interrupt to INT1 bitThis is an enable register which decides whether an interrupt [RX_INT1] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT1.1h [R/W] = A frame done event will trigger an interrupt on RX_INT1. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="6" rwaccess="R/W"/> 
		<bitfield id="INT1_EN_OVERRUN" width="1" begin="5" end="5" resetval="0x0" description="Enable Receive Buffer Overrun Interrupt to INT1 bitThis is an enable register which decides whether an interrupt [RX_INT1] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT1.1h [R/W] = A receive buffer overrun event will trigger an interrupt on RX_INT1. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="5" rwaccess="R/W"/> 
		<bitfield id="INT1_EN_EOF_ERR" width="1" begin="4" end="4" resetval="0x0" description="Enable End-of-Frame Error Interrupt to INT1 bitThis is an enable register which decides whether an interrupt [RX_INT1] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT1.1h [R/W] = An end-of-frame error event will trigger an interrupt on RX_INT1. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="4" rwaccess="R/W"/> 
		<bitfield id="INT1_EN_TYPE_ERR" width="1" begin="3" end="3" resetval="0x0" description="Enable Frame Type Error Interrupt to INT1 bitThis is an enable register which decides whether an interrupt [RX_INT1] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT1.1h [R/W] = A frame type error event will trigger an interrupt on RX_INT1. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="3" rwaccess="R/W"/> 
		<bitfield id="INT1_EN_CRC_ERR" width="1" begin="2" end="2" resetval="0x0" description="Enable CRC Error Interrupt to INT1 bitThis is an enable register which decides whether an interrupt [RX_INT1] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT1.1h [R/W] = A CRC error will trigger an interrupt on RX_INT1. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="2" rwaccess="R/W"/> 
		<bitfield id="INT1_EN_FRAME_WD_TO" width="1" begin="1" end="1" resetval="0x0" description="Enable Frame Watchdog Timeout Interrupt to INT1 bitThis is an enable register which decides whether an interrupt [RX_INT1] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT1.1h [R/W] = A frame watchdog timeout event will trigger an interrupt on RX_INT1. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="1" rwaccess="R/W"/> 
		<bitfield id="INT1_EN_PING_WD_TO" width="1" begin="0" end="0" resetval="0x0" description="Enable Ping Watchdog Timeout Interrupt to INT1 bitThis is an enable register which decides whether an interrupt [RX_INT1] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT1.1h [R/W] = A ping watchdog timeout event will trigger an interrupt on RX_INT1. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="0" rwaccess="R/W"/>
	</register>
	<register id="CFG_RX_INT2_CTRL_ALT1_" acronym="CFG_RX_INT2_CTRL_ALT1_" offset="0x3A" width="16" description="Receive interrupt control register for RX_INT2. Protected by LOCK field in RX_LOCK_CTRL register.">
		<bitfield id="INT2_EN_ERROR_TAG_MATCH" width="1" begin="14" end="14" resetval="0x0" description="Enable Error Frame Received with Tag Match Interrupt to INT2 bitThis is an enable register which decides whether an interrupt [RX_INT2] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT2.1h [R/W] = An error frame received with matching tag will trigger an interrupt on RX_INT2. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="14" rwaccess="R/W"/> 
		<bitfield id="INT2_EN_DATA_TAG_MATCH" width="1" begin="13" end="13" resetval="0x0" description="Enable Data Frame Received with Tag Match Interrupt to INT2 bitThis is an enable register which decides whether an interrupt [RX_INT2] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT2.1h [R/W] = A data frame received with matching tag will trigger an interrupt on RX_INT2. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="13" rwaccess="R/W"/> 
		<bitfield id="INT2_EN_PING_TAG_MATCH" width="1" begin="12" end="12" resetval="0x0" description="Enable Ping Frame Received with Tag Match Interrupt to INT2 bitThis is an enable register which decides whether an interrupt [RX_INT2] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT2.1h [R/W] = A ping frame received with matching tag will trigger an interrupt on RX_INT2. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="12" rwaccess="R/W"/> 
		<bitfield id="INT2_EN_DATA_FRAME" width="1" begin="11" end="11" resetval="0x0" description="Enable Data Frame Received Interrupt to INT2 bitThis is an enable register which decides whether an interrupt [RX_INT2] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT2.1h [R/W] = A data frame received event will trigger an interrupt on RX_INT2. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="11" rwaccess="R/W"/> 
		<bitfield id="INT2_EN_FRAME_OVERRUN" width="1" begin="10" end="10" resetval="0x0" description="Enable Frame Overrun Interrupt to INT2 bitThis is an enable register which decides whether an interrupt [RX_INT2] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT2.1h [R/W] = A frame overrun event will trigger an interrupt on RX_INT2. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="10" rwaccess="R/W"/> 
		<bitfield id="INT2_EN_PING_FRAME" width="1" begin="9" end="9" resetval="0x0" description="Enable Ping Frame Received Interrupt to INT2 bitThis is an enable register which decides whether an interrupt [RX_INT2] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT2.1h [R/W] = A ping frame received event will trigger an interrupt on RX_INT2. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="9" rwaccess="R/W"/> 
		<bitfield id="INT2_EN_ERR_FRAME" width="1" begin="8" end="8" resetval="0x0" description="Enable Error Frame Received Interrupt to INT2 bitThis is an enable register which decides whether an interrupt [RX_INT2] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT2.1h [R/W] = A error frame received event will trigger an interrupt on RX_INT2. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="8" rwaccess="R/W"/> 
		<bitfield id="INT2_EN_UNDERRUN" width="1" begin="7" end="7" resetval="0x0" description="Enable Buffer Underrun Interrupt to INT2 bitThis is an enable register which decides whether an interrupt [RX_INT2] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT2.1h [R/W] = A buffer underrun event will trigger an interrupt on RX_INT2. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="7" rwaccess="R/W"/> 
		<bitfield id="INT2_EN_FRAME_DONE" width="1" begin="6" end="6" resetval="0x0" description="Enable Frame Done Interrupt to INT2 bitThis is an enable register which decides whether an interrupt [RX_INT2] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT2.1h [R/W] = A frame done event will trigger an interrupt on RX_INT2. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="6" rwaccess="R/W"/> 
		<bitfield id="INT2_EN_OVERRUN" width="1" begin="5" end="5" resetval="0x0" description="Enable Buffer Overrun Interrupt to INT2 bitThis is an enable register which decides whether an interrupt [RX_INT2] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT2.1h [R/W] = A buffer overrun event will trigger an interrupt on RX_INT2. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="5" rwaccess="R/W"/> 
		<bitfield id="INT2_EN_EOF_ERR" width="1" begin="4" end="4" resetval="0x0" description="Enable End-of-Frame Error Interrupt to INT2 bitThis is an enable register which decides whether an interrupt [RX_INT2] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT2.1h [R/W] = An end-of-frame error event will trigger an interrupt on RX_INT2. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="4" rwaccess="R/W"/> 
		<bitfield id="INT2_EN_TYPE_ERR" width="1" begin="3" end="3" resetval="0x0" description="Enable Frame Type Error Interrupt to INT2 bitThis is an enable register which decides whether an interrupt [RX_INT2] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT2.1h [R/W] = A frame type error event will trigger an interrupt on RX_INT2. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="3" rwaccess="R/W"/> 
		<bitfield id="INT2_EN_CRC_ERR" width="1" begin="2" end="2" resetval="0x0" description="Enable CRC Error Interrupt to INT2 bitThis is an enable register which decides whether an interrupt [RX_INT2] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT2.1h [R/W] = A CRC error will trigger an interrupt on RX_INT2. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="2" rwaccess="R/W"/> 
		<bitfield id="INT2_EN_FRAME_WD_TO" width="1" begin="1" end="1" resetval="0x0" description="Enable Frame Watchdog Timeout Interrupt to INT2 bitThis is an enable register which decides whether an interrupt [RX_INT2] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT2.1h [R/W] = A frame watchdog timeout event will trigger an interrupt on RX_INT2. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="1" rwaccess="R/W"/> 
		<bitfield id="INT2_EN_PING_WD_TO" width="1" begin="0" end="0" resetval="0x0" description="Enable Ping Watchdog Timeout Interrupt to INT2 bitThis is an enable register which decides whether an interrupt [RX_INT2] will be generated on the enabled event. 0h [R/W] = This event will not trigger an interrupt on RX_INT2.1h [R/W] = A ping watchdog timeout event will trigger an interrupt on RX_INT2. The event itself will be latched in the corresponding bit in the RX_EVT_STS Register" range="0" rwaccess="R/W"/>
	</register>
	<register id="CFG_RX_LOCK_CTRL" acronym="CFG_RX_LOCK_CTRL" offset="0x3C" width="16" description="Receive lock control register">
		<bitfield id="KEY" width="8" begin="15" end="8" resetval="0x0" description="Write Key.In order to write to this register, 0xA5 must be written to this field at the same time. Otherwise, writes are ignored. The key is cleared immediately after writing, so it must be written again for every change to this register." range="15 - 8" rwaccess="W"/> 
		<bitfield id="LOCK" width="1" begin="0" end="0" resetval="0x0" description="Control Register Lock Enable bitThis bit locks the contents of all the receive control registers that support a lock protection. Once locked, further writes will not take effect until SYSRS unlocks the register. Once set, further writes even to this bit will be ignored. 0h [R/W] = Receive control registers can be modified and are not locked.1h [R/W] = Receive control registers are locked and cannot be modified until this bit is cleared by SYSRS. Any further writes to this bit are ignored. Note: The KEY field must contatin 0xA5 for any write to this bit to take effect." range="0" rwaccess="R/W"/>
	</register>
	<register id="CFG_Reserved_7" acronym="CFG_Reserved_7" offset="0x3E" width="16" description="">
		
	</register>
	<register id="CFG_RX_ECC_DATA" acronym="CFG_RX_ECC_DATA" offset="0x40" width="32" description="Receive ECC data register">
		<bitfield id="DATA_HIGH" width="16" begin="31" end="16" resetval="0x0" description="Upper 16 bits of ECC DataWriting to this bitfield will cause the ECC logic to compute the ECC[SEC-DED] the entire 32-bit register and update TX_ECC_VAL register with the results. Software should write to these 16 bits of the register in a 32-bit write when needing to compute ECC for 32-bits for the full TX_ECC_DATA register." range="31 - 16" rwaccess="R/W"/> 
		<bitfield id="DATA_LOW" width="16" begin="15" end="0" resetval="0x0" description="Lower 16 bits of ECC DataWriting to this bitfield will cause the ECC logic to compute the ECC[SEC-DED] for these 16 bits and update the TX_ECC_VAL register with the results. Software should write to these register bits as a 16-bit write when needing to compute ECC for 16-bits." range="15 - 0" rwaccess="R/W"/>
	</register>
	<register id="CFG_RX_ECC_VAL" acronym="CFG_RX_ECC_VAL" offset="0x44" width="16" description="Receive ECC value register">
		<bitfield id="ECC_VAL" width="7" begin="6" end="0" resetval="0x0" description="ECC Value for SEC-DED checkThis field contains the ECC value to be used for SEC-DED either for 16-bit or 32-bit data in the RX_ECC_DATA register." range="6 - 0" rwaccess="R/W"/>
	</register>
	<register id="CFG_Reserved_8" acronym="CFG_Reserved_8" offset="0x46" width="16" description="">
		
	</register>
	<register id="CFG_RX_ECC_SEC_DATA" acronym="CFG_RX_ECC_SEC_DATA" offset="0x48" width="32" description="Receive ECC corrected data register">
		<bitfield id="SEC_DATA" width="32" begin="31" end="0" resetval="0x0" description="ECC Single Error Corrected DataThe ECC corrected data will be available in this register. This value is valid only when there are no bit errors, or a single bit error was detected. Otherwise, the contents of this register are invalid and should not be used." range="31 - 0" rwaccess="R"/>
	</register>
	<register id="CFG_RX_ECC_LOG" acronym="CFG_RX_ECC_LOG" offset="0x4C" width="16" description="Receive ECC log and status register">
		<bitfield id="MBE" width="1" begin="1" end="1" resetval="0x1" description="Multiple Bit Errors DetectedThis bit indicates the occurrence of multiple bit errors.The data is corrupted and cannot be corrected. If this bit is set, the data present in RX_ECC_SEC_DATA is invalid and should not be used. 0h [R] Multiple Bit Errors were not detected. Check the SBE bit for single bit errors.1h [R] Multiple Bit Errors were detected. The data is not able to be corrected. The value present in RX_ECC_SEC_DATA is invalid and should not be used." range="1" rwaccess="R"/> 
		<bitfield id="SBE" width="1" begin="0" end="0" resetval="0x1" description="Single Bit Error DetectedThis bit indicates the occurrence of a single bit error in the data. The data is autocorrected and placed into the RX_ECC_SEC_DATA register. This bit is valid only if MBE is 0. 0h [R] No bit errors were detected. The value in RX_ECC_SEC_DATA is correct. 1h [R] A single bit error was detected and corrected. The corrected data is present in RX_ECC_SEC_DATA." range="0" rwaccess="R"/>
	</register>
	<register id="CFG_Reserved_9" acronym="CFG_Reserved_9" offset="0x4E" width="16" description="">
		
	</register>
	<register id="CFG_RX_FRAME_TAG_CMP" acronym="CFG_RX_FRAME_TAG_CMP" offset="0x50" width="16" description="Receive frame tag compare register. Protected by LOCK field in RX_LOCK_CTRL register.">
		<bitfield id="BROADCAST_EN" width="1" begin="9" end="9" resetval="0x0" description="Broadcast Enable bitThis will enable the reception of a ping frame broadcast. When this bit is set, bit 3 of the received tag will be treated as a broadcast notification. If bit 3 of the received tag is set to 1, a ping tag match event will be triggered regardless of the. A match caused by the comparison of TAG_MASK and TAG_REF will still be considered a match and the frame tag match event will be triggered as normal This bit only takes effect only if CMP_EN is set to 1. 0h [R/W] Broadcast frame match disabled.1h [R/W] Broadcast frame match enabled." range="9" rwaccess="R/W"/> 
		<bitfield id="CMP_EN" width="1" begin="8" end="8" resetval="0x0" description="Frame Tag Compare Enable bitSet this bit to enable the comparison of an incoming frame  tag and the value stored in the frame tag reference. A match caused by the comparison of TAG_MASK, TAG_REF, and the incoming frame tag will trigger the apprpriate frame tag match event. 0h [R/W] Frame tag comparison is disabled.1h [R/W] Frame tag comparison is enabled." range="8" rwaccess="R/W"/> 
		<bitfield id="TAG_MASK" width="4" begin="7" end="4" resetval="0x0" description="Frame Tag MaskAny bit position in this register set to 0 will be used in the comparison of the incoming frame tag and the value stored in TAG_REF. A bit position set to 1 will be ignored in the tag comparison. This mask value is used only for non-ping frames. " range="7 - 4" rwaccess="R/W"/> 
		<bitfield id="TAG_REF" width="4" begin="3" end="0" resetval="0x0" description="Frame Tag ReferenceThe reference tag to check against when comparing the TAG_MASK and the incoming frame tag. This reference value is used only for non-ping frames." range="3 - 0" rwaccess="R/W"/>
	</register>
	<register id="CFG_RX_PING_TAG_CMP" acronym="CFG_RX_PING_TAG_CMP" offset="0x52" width="16" description="Receive ping tag compare register. Protected by LOCK field in RX_LOCK_CTRL register.">
		<bitfield id="BROADCAST_EN" width="1" begin="9" end="9" resetval="0x0" description="Broadcast Enable bitThis will enable the reception of a ping frame broadcast. When this bit is set, bit 3 of the received tag will be treated as a broadcast notification. If bit 3 of the received tag is set to 1, a ping tag match event will be triggered regardless of the. A match caused by the comparison of TAG_MASK and TAG_REF will still be considered a match and the ping tag match event will be triggered as normal This bit only takes effect only if CMP_EN is set to 1. 0h [R/W] Broadcast frame match disabled.1h [R/W] Broadcast frame match enabled." range="9" rwaccess="R/W"/> 
		<bitfield id="CMP_EN" width="1" begin="8" end="8" resetval="0x0" description="Ping Tag Compare Enable bitSet this bit to enable the comparison of an incoming ping tag and the value stored in the ping tag reference. A match caused by the comparison of TAG_MASK, TAG_REF, and the incoming ping tag will trigger a ping frame tag match event. 0h [R/W] Ping tag comparison is disabled.1h [R/W] Ping tag comparison is enabled." range="8" rwaccess="R/W"/> 
		<bitfield id="TAG_MASK" width="4" begin="7" end="4" resetval="0x0" description="Ping Tag MaskAny bit position in this register set to 0 will be used in the comparison of the incoming ping frame tag and the value stored in TAG_REF. A bit position set to 1 will be ignored in the tag comparison. This mask value is used only for ping frames. " range="7 - 4" rwaccess="R/W"/> 
		<bitfield id="TAG_REF" width="4" begin="3" end="0" resetval="0x0" description="Ping Tag ReferenceThe reference tag to check against when comparing the TAG_MASK and the incoming ping tag. This reference value is used only for ping frames." range="3 - 0" rwaccess="R/W"/>
	</register>
	<register id="CFG_Reserved_10" acronym="CFG_Reserved_10" offset="0x54" width="16" description="">
		
	</register>
	<register id="CFG_RX_DLYLINE_CTRL" acronym="CFG_RX_DLYLINE_CTRL" offset="0x60" width="16" description="Receive delay line control register. Protected by LOCK field in RX_LOCK_CTRL register.">
		<bitfield id="RXD1_DLY" width="5" begin="14" end="10" resetval="0x0" description="Delay Line Tap Select for RXD1This bitfield selects the number of delay elements inserted into the RXD1 path from the pin boundary to the receiver core. 0h [R/W] Zero delay elements are included in the RXD1 path. RXD1 is taken directly from the pin.1h [R/W] One delay element is included in the RXD1 path.2h [R/W] Two delay elements are included in the RXD1 path....1Fh [R/W] 31 delay elements are included in the RXD1 path, the maximum." range="14 - 10" rwaccess="R/W"/> 
		<bitfield id="RXD0_DLY" width="5" begin="9" end="5" resetval="0x0" description="Delay Line Tap Select for RXD0This bitfield selects the number of delay elements inserted into the RXD0 path from the pin boundary to the receiver core. 0h [R/W] Zero delay elements are included in the RXD0 path. RXD0 is taken directly from the pin.1h [R/W] One delay element is included in the RXD0 path.2h [R/W] Two delay elements are included in the RXD0 path....1Fh [R/W] 31 delay elements are included in the RXD0 path, the maximum." range="9 - 5" rwaccess="R/W"/> 
		<bitfield id="RXCLK_DLY" width="5" begin="4" end="0" resetval="0x0" description="Delay Line Tap Select for RXCLKThis bitfield selects the number of delay elements inserted into the RXCLK path from the pin boundary to the receiver core. 0h [R/W] Zero delay elements are included in the RXCLK path. RXCLK is taken directly from the pin.1h [R/W] One delay element is included in the RXCLK path.2h [R/W] Two delay elements are included in the RXCLK path....1Fh [R/W] 31 delay elements are included in the RXCLK path, the maximum." range="4 - 0" rwaccess="R/W"/>
	</register>
	<register id="CFG_Reserved_11" acronym="CFG_Reserved_11" offset="0x62" width="16" description="">
		
	</register>
	<register id="CFG_RX_VIS_1" acronym="CFG_RX_VIS_1" offset="0x70" width="32" description="Receive debug visibility register 1">
		<bitfield id="RX_CORE_STS" width="1" begin="3" end="3" resetval="0x0" description="Receiver Core Status bitThis bit indicates the status of the receiver core. If this bit is set, the receiver should undergo a reset and subsequent resynchronization with the transmitter. This bit will be always be set when the receiver has detected and end of frame error or a frame type error. This bit can also be set if the receiver becomes corrupted due to noise on the signal lines. If the receiver has experienced a ping watchdog or frame watchdog timeout, this bit should be read to determine if the cause was due to a corrupt transaction, thus putting the receiver core into an unrecoverable state. Only a soft reset will reset the recevier core and thus reset this bit. 0h [R] The receiver core is operating normally.1h [R] The receiver core has entered into an error state and should be reset." range="3" rwaccess="R"/>
	</register>
	<register id="CFG_Reserved_12" acronym="CFG_Reserved_12" offset="0x74" width="16" description="">
		
	</register>
	<register id="CFG_RX_BUF_BASE" acronym="CFG_RX_BUF_BASE" offset="0x80" width="16" description="Base address for receive data buffer">
		<bitfield id="BASE_ADDRESS" width="16" begin="15" end="0" resetval="0x0" description="Receive Data Buffer Base AddressThis is the base address of the 16-word data buffer used by the receiver." range="15 - 0" rwaccess="R"/>
	</register>
</module>