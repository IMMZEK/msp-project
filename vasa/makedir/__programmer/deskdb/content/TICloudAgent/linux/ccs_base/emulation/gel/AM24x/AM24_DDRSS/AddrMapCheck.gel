/* Copyright (c) 2021, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

pow(unsigned int x,unsigned int y)
{
	unsigned int result = 1;
	unsigned int exponent = y;
	unsigned int base = x;
	while (exponent != 0)
	{
        result *= base;
        --exponent;
    }
	return(result);
}

codeWordArray(unsigned int i)
{
    if(i==0)  return 0xACED0123;   // 0x80000000
    if(i==1)  return 0xBEEF4567;   // 0x80000004
    if(i==2)  return 0xF00D89AB;   // 0x80000008
    if(i==3)  return 0xDEADCDEF;   // 0x80000010
    if(i==4)  return 0xBABE1234;   // 0x80000020
    if(i==5)  return 0xB00B5678;   // 0x80000040
    if(i==6)  return 0xCAFE9ABC;   // 0x80000080
    if(i==7)  return 0xEA5EDEF0;   // 0x80000100
    if(i==8)  return 0xD0652345;   // 0x80000200
    if(i==9)  return 0x2BAD6789;   // 0x80000400
    if(i==10) return 0xC0DEABCD;  // 0x80000800
    if(i==11) return 0xFA11EF01;  // 0x80001000
    if(i==12) return 0xFEED3456;  // 0x80002000
    if(i==13) return 0xD00D789A;  // 0x80004000
    if(i==14) return 0xFACEBCDE;  // 0x80008000
    if(i==15) return 0xCACAF012;  // 0x80010000
    if(i==16) return 0x1337FEDC;  // 0x80020000
    if(i==17) return 0x5EEDBA98;  // 0x80040000
    if(i==18) return 0xC0DA7654;  // 0x80080000
    if(i==19) return 0x1A553210;  // 0x80100000
    if(i==20) return 0x5ADDEDCB;  // 0x80200000
    if(i==21) return 0xD0D0A987;  // 0x80400000
    if(i==22) return 0xCA5E6543;  // 0x80800000
    if(i==23) return 0xBE11210F;  // 0x81000000
    if(i==24) return 0x50FADCBA;  // 0x82000000
    if(i==25) return 0xF1D09876;  // 0x84000000
    if(i==26) return 0xB01D5432;  // 0x88000000
    if(i==27) return 0xBA1110FE;  // 0x90000000
    if(i==28) return 0xB10BCBA9;  // 0xA0000000
    if(i==29) return 0xAC1D8765;  // 0xC0000000
    if(i==30) return 0x4892AE13;  // 0xE0000000
    if(i==31) return 0x92B481C5;  // 0xFFFFFFFC
	
    return 0;
}

MemoryAddress(unsigned int i)
{
    if(i==0)  return 0x80000000;
    if(i==1)  return 0x80000004;
    if(i==2)  return 0x80000008;
    if(i==3)  return 0x80000010;
    if(i==4)  return 0x80000020;
    if(i==5)  return 0x80000040;
    if(i==6)  return 0x80000080;
    if(i==7)  return 0x80000100;
    if(i==8)  return 0x80000200;
    if(i==9)  return 0x80000400;
    if(i==10) return 0x80000800;
    if(i==11) return 0x80001000;
    if(i==12) return 0x80002000;
    if(i==13) return 0x80004000;
    if(i==14) return 0x80008000;
    if(i==15) return 0x80010000;
    if(i==16) return 0x80020000;
    if(i==17) return 0x80040000;
    if(i==18) return 0x80080000;
    if(i==19) return 0x80100000;
    if(i==20) return 0x80200000;
    if(i==21) return 0x80400000;
    if(i==22) return 0x80800000;
    if(i==23) return 0x81000000;
    if(i==24) return 0x82000000;
    if(i==25) return 0x84000000;
    if(i==26) return 0x88000000;
    if(i==27) return 0x90000000;
    if(i==28) return 0xA0000000;
    if(i==29) return 0xC0000000;
    if(i==30) return 0xE0000000;
    if(i==31) return 0xFFFFFFFC;
	
    return 0;
}

GetSize(unsigned int i)
{
		if(i==0)  GEL_TextOut("DDR Capacity Detected: 0Bytes\n");
		if(i==1)  GEL_TextOut("DDR Capacity Detected: 4Bytes\n");
		if(i==2)  GEL_TextOut("DDR Capacity Detected: 8Bytes\n");
		if(i==3)  GEL_TextOut("DDR Capacity Detected: 16Bytes\n");
		if(i==4)  GEL_TextOut("DDR Capacity Detected: 32Bytes\n");
		if(i==5)  GEL_TextOut("DDR Capacity Detected: 64Bytes\n");
		if(i==6)  GEL_TextOut("DDR Capacity Detected: 128Bytes\n");
		if(i==7)  GEL_TextOut("DDR Capacity Detected: 256Bytes\n");
		if(i==8)  GEL_TextOut("DDR Capacity Detected: 512Bytes\n");
		if(i==9)  GEL_TextOut("DDR Capacity Detected: 1KByte\n");
		if(i==10) GEL_TextOut("DDR Capacity Detected: 2KByte\n");
		if(i==11) GEL_TextOut("DDR Capacity Detected: 4KByte\n");
		if(i==12) GEL_TextOut("DDR Capacity Detected: 8KByte\n");
		if(i==13) GEL_TextOut("DDR Capacity Detected: 16KByte\n");
		if(i==14) GEL_TextOut("DDR Capacity Detected: 32KByte\n");
		if(i==15) GEL_TextOut("DDR Capacity Detected: 64KByte\n");
		if(i==16) GEL_TextOut("DDR Capacity Detected: 128KByte\n");
		if(i==17) GEL_TextOut("DDR Capacity Detected: 256KByte\n");
		if(i==18) GEL_TextOut("DDR Capacity Detected: 512KByte\n");
		if(i==19) GEL_TextOut("DDR Capacity Detected: 1MByte\n");
		if(i==20) GEL_TextOut("DDR Capacity Detected: 2MByte\n");
		if(i==21) GEL_TextOut("DDR Capacity Detected: 4MByte\n");
		if(i==22) GEL_TextOut("DDR Capacity Detected: 8MByte\n");
		if(i==23) GEL_TextOut("DDR Capacity Detected: 16MByte\n");
		if(i==24) GEL_TextOut("DDR Capacity Detected: 32MByte\n");
		if(i==25) GEL_TextOut("DDR Capacity Detected: 64MByte\n");
		if(i==26) GEL_TextOut("DDR Capacity Detected: 128MByte\n");
		if(i==27) GEL_TextOut("DDR Capacity Detected: 256MByte\n");
		if(i==28) GEL_TextOut("DDR Capacity Detected: 512MByte\n");
		if(i==29) GEL_TextOut("DDR Capacity Detected: 1GByte\n");
		if(i==30) GEL_TextOut("DDR Capacity Detected: 1.5GGByte\n");
		if(i==31) GEL_TextOut("DDR Capacity Detected: 1.75GByte\n");
		if(i==32) GEL_TextOut("DDR Capacity Detected: 2GByte\n");
}
menuitem "AM24 DDRSS Debug/Data Tests" 


hotmenu AddrMapCheck()
{
	unsigned int index=0;
	unsigned int startAddr = 0x80000000;
	unsigned int DDRaddr;
	unsigned int verify_index;
	unsigned int Verify_DDRaddr;
	unsigned int temp;
	unsigned int fail_flag=0;
	
	GEL_TextOut("Running Address Map Check...\n");
	GEL_TextOut("startAddr = %x\n",,,,,startAddr);

	do{
		DDRaddr = MemoryAddress(index);
		*DDRaddr = codeWordArray(index);
		//verify
		verify_index = 0;
		do{
			Verify_DDRaddr = MemoryAddress(verify_index);
			temp = *Verify_DDRaddr;
			if (temp != codeWordArray(verify_index))
			{
				fail_flag = 1;
				break;
			}
			verify_index++;
		} while (verify_index<=index);
		index++;
	}while(index <= 31);		

//	if(fail_flag==1){
//		GEL_TextOut("Failure at DDR address %x\n",,,,,Verify_DDRaddr);
//		GEL_TextOut("Value = %x, Expected %x\n",,,,,temp,codeWordArray(verify_index));
//	}
	GetSize(verify_index);
}			
			

