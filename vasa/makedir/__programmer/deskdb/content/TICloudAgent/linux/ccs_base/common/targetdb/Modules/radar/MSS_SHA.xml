<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="MSS_SHA" id="MSS_SHA">
  
  
  <register acronym="S_ODIGEST_A" description=" WRITE: Outer Digest [127:96] for MD5 [159:128] for SHA-1 [255:224] for SHA-2 / HMAC Key [31:0] for HMAC key proc READ: Outer Digest [127:96] for MD5 [159:128] for SHA-1 [255:224] for SHA-2" id="S_ODIGEST_A" offset="0x0" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_ODIGEST_B" description=" WRITE: Outer Digest [95:64] for MD5 [127:96] for SHA-1 [223:192] for SHA-2 / HMAC Key [63:32] for HMAC key proc READ: Outer Digest [95:64] for MD5 [127:96] for SHA-1 [223:192] for SHA-2" id="S_ODIGEST_B" offset="0x4" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_ODIGEST_C" description=" WRITE: Outer Digest [63:32] for MD5 [95:64] for SHA-1 [191:160] for SHA-2 / HMAC Key [95:64] for HMAC key proc READ: Outer Digest [63:32] for MD5 [95:64] for SHA-1 [191:160] for SHA-2" id="S_ODIGEST_C" offset="0x8" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_ODIGEST_D" description=" WRITE: Outer Digest [31:0] for MD5 [63:31] for SHA-1 [159:128] for SHA-2 / HMAC Key [127:96] for HMAC key proc READ: Outer Digest [31:0] for MD5 [63:32] for SHA-1 [159:128] for SHA-2" id="S_ODIGEST_D" offset="0xC" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_ODIGEST_E" description=" WRITE: Outer Digest [31:0] for SHA-1 [127:96] for SHA-2 / HMAC Key [159:128] for HMAC key proc READ: Outer Digest [31:0] for SHA-1 [127:96] for SHA-2" id="S_ODIGEST_E" offset="0x10" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_ODIGEST_F" description=" WRITE: Outer Digest [95:64] for SHA-2 / HMAC Key [191:160] for HMAC key proc READ: Outer Digest [95:64] for SHA-2" id="S_ODIGEST_F" offset="0x14" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_ODIGEST_G" description=" WRITE: Outer Digest [63:32] for SHA-2 / HMAC Key [223:192] for HMAC key proc READ: Outer Digest [63:32] for SHA-2" id="S_ODIGEST_G" offset="0x18" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_ODIGEST_H" description=" WRITE: Outer Digest [31:0] for SHA-2 / HMAC Key [255:224] for HMAC key proc READ: Outer Digest [31:0] for SHA-2" id="S_ODIGEST_H" offset="0x1C" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_IDIGEST_A" description=" WRITE: Inner / Initial Digest [127:96] for MD5 [159:128] for SHA-1 [255:224] for SHA-2 / HMAC Key [287:256] for HMAC key proc READ: Intermediate / Inner Digest [127:96] for MD5 [159:128] for SHA-1 [255:224] for SHA-2 / Result Digest/MAC [127:96] for MD5 [159:128] for SHA-1 [223:192] for SHA-2 224 [255:224] for SHA-2 256" id="S_IDIGEST_A" offset="0x20" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_IDIGEST_B" description=" WRITE: Inner / Initial Digest [95:64] for MD5 [127:96] for SHA-1 [223:192] for SHA-2 / HMAC Key [319:288] for HMAC key proc READ: Intermediate / Inner Digest [95:64] for MD5 [127:96] for SHA-1 [223:192] for SHA-2 / Result Digest/MAC [95:64] for MD5 [127:96] for SHA-1 [191:160] for SHA-2 224 [223:192] for SHA-2 256" id="S_IDIGEST_B" offset="0x24" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_IDIGEST_C" description=" WRITE: Inner / Initial Digest [63:32] for MD5 [95:64] for SHA-1 [191:160] for SHA- 2 / HMAC Key [351:320] for HMAC key proc READ: Intermediate / Inner Digest [63:32] for MD5 [95:64] for SHA-1 [191:160] for SHA-2 / Result Digest/MAC [63:32] for MD5 [95:64] for SHA-1 [159:128] for SHA-2 224 [191:160] for SHA-2 256" id="S_IDIGEST_C" offset="0x28" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_IDIGEST_D" description=" WRITE: Inner / Initial Digest [31:0] for MD5 [63:32] for SHA-1 [159:128] for SHA-2 / HMAC Key [383:352] for HMAC key proc READ: Intermediate / Inner Digest [31:0] for MD5 [63:32] for SHA-1 [159:128] for SHA-2 / Result Digest/MAC [31:0] for MD5 [63:32] for SHA-1 [127:96] for SHA-2 224 [159:128] for SHA-2 256" id="S_IDIGEST_D" offset="0x2C" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_IDIGEST_E" description=" WRITE: Inner / Initial Digest [31:0] for SHA-1 [127:96] for SHA-2 / HMAC Key [415:384] for HMAC key proc READ: Intermediate / Inner Digest [31:0] for SHA-1 [127:96] for SHA-2 / Result Digest/MAC [31:0] for SHA-1 [95:64] for SHA-2 224 [127:96] for SHA-2 256" id="S_IDIGEST_E" offset="0x30" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_IDIGEST_F" description=" WRITE: Inner / Initial Digest [95:64] for SHA-2 / HMAC Key [447:416] for HMAC key proc READ: Intermediate / Inner Digest [95:64] for SHA-2 / Result Digest/MAC [63:32] for SHA-2 224 [95:64] for SHA-2 256" id="S_IDIGEST_F" offset="0x34" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_IDIGEST_G" description=" WRITE: Inner / Initial Digest [63:32] for SHA-2 / HMAC Key [479:448] for HMAC key proc READ: Intermediate / Inner Digest [63:32] for SHA-2 / Result Digest/MAC [31:0] for SHA-2 224 [63:32] for SHA-2 256" id="S_IDIGEST_G" offset="0x38" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_IDIGEST_H" description=" WRITE: Inner / Initial Digest [31:0] for SHA-2 / HMAC Key [511:480] for HMAC key proc READ: Intermediate / Inner Digest [31:0] for SHA-2 / Result Digest/MAC [31:0] for SHA-2 256" id="S_IDIGEST_H" offset="0x3C" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_DIGEST_COUNT" description=" WRITE: Initial Digest Count ([31:6] only [5:0] assumed 0) READ: Result / IntermediateDigest Count The initial digest byte count for hash/HMAC continue operations (HMAC Key Processing = 0 and Use Algorithm Constants = 0) on the Secure World must be written to this register prior to starting the operation by writing to S_HASH_MODE. When either HMAC Key Processing is 1 or Use Algorithm Constants is 1 this register does not need to be written it will be overwritten with 64 (1 hash block of key XOR ipad) or 0 respectively automatically. When starting a HMAC operation from pre-computes (HMAC Key Processing is 0) then the value 64 must be written here to compensate for the appended key XOR ipad block. Note that the value written should always be a 64 byte multiple the lower 6 bits written are ignored.  The updated digest byte count (initial digest byte count + bytes processed) can be read from this register when the status register indicates that the operation is done or suspended due to a context switch request or when a Secure World context out DMA is requested. In Advanced DMA mode when not suspended with a partial result reading the SHA_P_DIGEST_COUNT register triggers the Hash/HMAC Engine to start the next context input DMA. Therefore reading the SHA_P_DIGEST_COUNT register should always be the last context-read action if not suspended with a partial result (i.e. PartHashReady interrupt not pending)." id="S_DIGEST_COUNT" offset="0x40" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_MODE" description=" Register SHA_MODE" id="S_MODE" offset="0x44" width="32">
    
  <bitfield begin="31" description="reserved" end="8" id="Reserved" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="The HMAC Outer Hash is performed on the hash digest when the inner hash hash finished (block length exhausted and final hash performed if close_hash is 1). This bit should normally be set together with close_hash to finish the inner hash first or Block Length should be zero (HMAC continue with the just outer hash to be done). Auto cleared internally when outer hash performed. 0 No operation 1 hmac processing" end="7" id="HMAC_OUTER_HASH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="reserved" end="6" id="Reserved1" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="5" description="Performs HMAC key processing on the 512 bit HMAC key loaded into the SHA_P_IDIGEST_{A to H} and SHA_P_ODIGEST_{A to H} register block. Once HMAC key processing is finished this bit is automatically cleared and the resulting Inner and Outer digest is available from SHA_P_IDIGEST_{A to H} and SHA_P_ODIGEST_{A to H} respectively after which regular hash processing (using SHA_P_IDIGEST_{A to H} as initial digest) will commence until the Block Length is exhausted. 0 No operation. 1 Hmac processing." end="5" id="HMAC_KEY_PROC" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Performs the padding the hash/HMAC will be 'closed' at the end of the block as per MD5/SHA-1/SHA-2 specification (i.e. appropriate padding is added) or no padding is done allowing the hash to be continued later. However if the hash/HMAC is not closed then the Block Length MUST be a multiple of 64 bytes to ensure correct operation. Auto cleared internally when hash closed. 0 No padding hash computation can be contimued. 1 Last packet will be padded." end="4" id="CLOSE_HASH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="The initial digest register will be overwritten with the algorithm constants for the selected algorithm when hashing and the initial digest count register will be reset to 0. This will start a normal hash operation. When continuing an existing hash or when performing an HMAC operation this register must be set to 0 and the intermediate/inner digest or HMAC key and digest count need to be written to the context input registers prior to writing SHA_P_MODE. Auto cleared internally after first block processed. 0 Use pre-calculated digest (from an other operation) 1 Use constants of the selected algo." end="3" id="ALGO_CONSTANT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="These bits select the hash algorithm to be used for processing: 0 md5_128 algorithm 0x1 sha1_160 algorithm 0x2 sha2_224 algorithm 0x3 sha2_256 algorithm" end="1" id="ALGO" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="0" description="reserved" end="0" id="Reserved2" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="S_LENGTH" description=" WRITE: Block Length / Remaining Byte Count (bytes) READ: Remaining Byte Count. The value programmed MUST be a 64-byte multiple if Close Hash is set to 0. This register is also the trigger to start processing: once this register is written the core will commence requesting input data via DMA or IRQ (if programmed length > 0) and start processing. The remaining byte count for the active operation can be read from this register when the interrupt status register indicates that the operation is suspended due to a context switch request." id="S_LENGTH" offset="0x48" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_DATA0_IN" description=" Data input message 0" id="S_DATA0_IN" offset="0x80" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA0_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_DATA1_IN" description=" Data input message 1" id="S_DATA1_IN" offset="0x84" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA1_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_DATA2_IN" description=" Data input message 2" id="S_DATA2_IN" offset="0x88" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA2_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_DATA3_IN" description=" Data input message 3" id="S_DATA3_IN" offset="0x8C" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA3_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_DATA4_IN" description=" Data input message 4" id="S_DATA4_IN" offset="0x90" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA4_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_DATA5_IN" description=" Data input message 5" id="S_DATA5_IN" offset="0x94" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA5_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_DATA6_IN" description=" Data input message 6" id="S_DATA6_IN" offset="0x98" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA6_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_DATA7_IN" description=" Data input message 7" id="S_DATA7_IN" offset="0x9C" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA7_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_DATA8_IN" description=" Data input message 8" id="S_DATA8_IN" offset="0xA0" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA8_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_DATA9_IN" description=" Data input message 9" id="S_DATA9_IN" offset="0xA4" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA9_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_DATA10_IN" description=" Data input message 10" id="S_DATA10_IN" offset="0xA8" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA10_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_DATA11_IN" description=" Data input message 11" id="S_DATA11_IN" offset="0xAC" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA11_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_DATA12_IN" description=" Data input message 12" id="S_DATA12_IN" offset="0xB0" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA12_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_DATA13_IN" description=" Data input message 13" id="S_DATA13_IN" offset="0xB4" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA13_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_DATA14_IN" description=" Data input message 14" id="S_DATA14_IN" offset="0xB8" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA14_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_DATA15_IN" description=" Data input message 15" id="S_DATA15_IN" offset="0xBC" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA15_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_REVISION" description=" Register SHA_REV" id="S_REVISION" offset="0x100" width="32">
    
  <bitfield begin="31" description="Used to distinguish between old scheme and current. Read�0 Legacy ASP or WTBU scheme Read�0x1 Highlander 0.8 scheme" end="30" id="SCHEME" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description="reserved" end="28" id="Reserved1" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="27" description="Function indicates a software compatible module family. If there is no level of software compatibility a new Func number (and hence REVISION) should be assigned." end="16" id="FUNC" rwaccess="R" width="12"></bitfield>
    
  <bitfield begin="15" description="RTL Version (R) maintained by IP design owner. RTL follows a numbering such as X.Y.R.Z which are explained in this table. R changes ONLY when: (1) PDS uploads occur which may have been due to spec changes (2) Bug fixes occur (3) Resets to '0' when X or Y changes. Design team has an internal 'Z' (customer invisible) number which increments on every drop that happens due to DV and RTL updates. Z resets to 0 when R increments." end="11" id="R_RTL" rwaccess="R" width="5"></bitfield>
    
  <bitfield begin="10" description="Major Revision (X) maintained by IP specification owner. X changes ONLY when: (1) There is a major feature addition. An example would be adding Master Mode to Utopia Level2. The Func field (or Class/Type in old PID format) will remain the same. X does NOT change due to: (1) Bug fixes (2) Change in feature parameters." end="8" id="X_MAJOR" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="7" description="Indicates a special version for a particular device. Consequence of use may avoid use of standard Chip Support Library (CSL) / Drivers. Read�0 Non custom (standard) revision" end="6" id="CUSTOM" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="5" description="Minor Revision (Y) maintained by IP specification owner. Y changes ONLY when: (1) Features are scaled (up or down). Flexibility exists in that this feature scalability may either be represented in the Y change or a specific register in the IP that indicates which features are exactly available. (2) When feature creeps from Is-Not list to Is list. But this may not be the case once it sees silicon; in which case X will change. Y does NOT change due to: (1) Bug fixes (2) Typos or clarifications (3) major functional/feature change/addition/deletion. Instead these changes may be reflected via R S X as applicable. Spec owner maintains a customer-invisible number 'S' which changes due to: (1) Typos/clarifications (2) Bug documentation. Note that this bug is not due to a spec change but due to implementation. Nevertheless the spec tracks the IP bugs. An RTL release (say for silicon PG1.1) that occurs due to bug fix should document the corresponding spec number (X.Y.S) in its release notes." end="0" id="Y_MINOR" rwaccess="R" width="6"></bitfield>
  </register>
  
  
  <register acronym="S_SYSCONFIG" description=" Register SHA_SYSCONFIG" id="S_SYSCONFIG" offset="0x110" width="32">
    
  <bitfield begin="31" description="reserved" end="8" id="Reserved" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="If set to 1 Advanced mode is enabled for the Secure World. If set to 0 Legacy mode is enabled for the Secure World." end="7" id="PADVANCED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Finish all pending data and context DMA input requests (but will not assert any new requests) finish processing all data in the module and provide a saved context (partial hash result updated digest count remaining length updated mode information where applicable) for the last operation that was interrupted so that it can be resumed later." end="6" id="PCONT_SWT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="reserved" end="4" id="Reserved1" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="3" description="enable dma Read�0 Interrupt disenabled Read�1 Interrupt enabled" end="3" id="PDMA_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="enable interrupt Read�0 Interrupt disenabled Read�1 Interrupt enabled" end="2" id="PIT_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="reserved" end="0" id="Reserved2" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="S_SYSSTATUS" description=" Register SHA_SYSSTATUS" id="S_SYSSTATUS" offset="0x114" width="32">
    
  <bitfield begin="31" description="reserved" end="1" id="Reserved" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description="data" end="0" id="RESETDONE" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="S_IRQSTATUS" description=" Register SHA_IRQSTATUS" id="S_IRQSTATUS" offset="0x118" width="32">
    
  <bitfield begin="31" description="reserved" end="4" id="Reserved" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="indicates that the secure side context input registers are available for a new context for the next packet to be processed." end="3" id="CONTEXT_READY" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="After a secure side context switch request this bit will read as 1 indicating that the saved context is available from the secure side context output registers. Note that if the context switch request coincides with a final hash (when hashing) or an outer hash (when doing HMAC) that PartHashReady will not become active but a regular Output Ready will occur instead (indicating that the result is final and therefore no continuation is required)." end="2" id="PARTHASH_READY" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="1" description="indicates that the secure side data FIFO is ready to receive the next 64 byte data block." end="1" id="INPUT_READY" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="Indicates that a (partial) result or saved context is available from the secure side context output registers." end="0" id="OUTPUT_READY" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="S_IRQENABLE" description=" Register SHA_IRQENABLE. The SHA_P_IRQENABLE register contains an enable bit for each unique interrupt for the public side. An interrupt is enabled when both the global enable in SHA_P_SYSCONFIG (PIT_en) and the bit in this register are both set to 1. An interrupt that is enabled is propagated to the SINTREQUEST_P output. Please note that the dedicated partial hash output (SINTREQUEST_PART_P) is not affected by this register it is only affected by the global enable SHA_P_SYSCONFIG (PIT_en)." id="S_IRQENABLE" offset="0x11C" width="32">
    
  <bitfield begin="31" description="reserved" end="4" id="Reserved" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="mask for context ready" end="3" id="M_CONTEXT_READY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="mask for partial hash" end="2" id="M_PARTHASH_READY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="mask for input_ready" end="1" id="M_INPUT_READY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="mask for output_ready" end="0" id="M_OUTPUT_READY" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="S_XSSTATUS" id="S_XSSTATUS" offset="0x140" width="32">
    
  <bitfield begin="31" description="reserved" end="4" id="RESERVED" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="This bit is set to 1 by the module if any of the Public World registers is written. It can be cleared by the host by writing a 1 in this location." end="3" id="PDIRTY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="This bit is set to 1 by the module if any of the Public World registers is read. It can be cleared by the host by writing a 1 in this location" end="2" id="PACCESSED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="This bit is set to 1 by the module if any of the Secure World registers is written. It can be cleared by the host by writing a 1 in this location." end="1" id="SDIRTY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="This bit is set to 1 by the module if any of the Secure World registers is read. It can be cleared by the host by writing a 1 in this location." end="0" id="SACCESSED" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="S_LOCKDOWN" id="S_LOCKDOWN" offset="0x14C" width="32">
    
  <bitfield begin="31" description="These bits should be written with zeroes and ignored on reads." end="29" id="RESERVED2" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="28" description="This makes the P_HASH_ODIGEST_A through P_HASH_ODIGEST_H write-only, further protecting the HMAC key from being read by Public World software. Note: setting this bit also makes HMAC continue operations impossible!" end="28" id="BLOCK_ODIGEST_RD" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="27" description="When this bit is set, the P_HASH_LENGTH register cannot be overwritten. This prevents Public World software from truncating or extending the block to be hashed or starting hash/HMAC operations by itself." end="27" id="LOCK_LENGTH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="26" description="When this bit is set, the P_HASH_DIGEST_COUNT register cannot be overwritten. This, in combination with bits 3 and 24 prevents the Public World software from adding data at the front of the block to be hashed." end="26" id="LOCK_DIGESTCOUNT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="25" description="When this bit is set, the P_HASH_ODIGEST_A through P_HASH_ODIGEST_H registers cannot be overwritten. This prevents Public World software from loading a weak and/or known HMAC key or an outer digest value." end="25" id="LOCK_ODIGEST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="24" description="When this bit is set, the P_HASH_IDIGEST_A through P_HASH_IDIGEST_H registers cannot be overwritten. This prevents Public World software from loading a weak and/or known key or an initial digest value" end="24" id="LOCK_IDIGEST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="23" description="reserved" end="8" id="RESERVED1" rwaccess="R" width="16"></bitfield>
    
  <bitfield begin="7" description="When this bit is set, HMAC Outer Hash bit in P_HASH_MODE cannot be modified. This prevents Public World software from bypassing the HMAC closure by clearing the corresponding mode bit during processing." end="7" id="LOCK_HMAC_OUTER_HASH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="When this bit is set, the Reuse HMAC Key bit in P_HASH_MODE cannot be modified" end="6" id="LOCK_REUSE_HMAC_KEY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="When this bit is set, the HMAC Key Preprocessing bit in P_HASH_MODE cannot be modified. This prevents Public World software from bypassing the HMAC key preprocessing step and using the key data directly" end="5" id="LOCK_HMAC_KEY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="When this bit is set, the Close Hash bit in P_HASH_MODE cannot be modified. This prevents Public World software from bypassing the hash closure by clearing the corresponding mode bit during processing." end="4" id="LOCK_CLOSE_HASH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="When this bit is set, the Use Alg Constants bit in P_HASH_MODE cannot be modified. This e.g. prevents Public World software from switching to (known!) algorithm constants instead of the (secret key based?) loaded &amp; locked initial digest." end="3" id="LOCK_USE_ALOG_CONST" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="When either lock bit is set, the corresponding Algorithm bit in P_HASH_MODE cannot be modified. This locks the algorithm preventing further use." end="0" id="LOCK_ALGO" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_ODIGEST_A" description="Public World Outer SHA-512 Digest " id="S_HASH512_ODIGEST_A" offset="0x200" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [511:480] for SHA-384 and SHA-512 / SHA512_HMAC Key [31:0] for HMAC key proc R: Outer Digest [511:480] for SHA-384 and SHA-512 " end="0" id="ODIGEST_A" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_ODIGEST_B" description="Public World Outer SHA-512 Digest " id="S_HASH512_ODIGEST_B" offset="0x204" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [479:448] for SHA-384 and SHA-512 / SHA512_HMAC Key [63:32] for HMAC key proc R: Outer Digest [479:448] for SHA-384 and SHA-512 " end="0" id="ODIGEST_B" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_ODIGEST_C" description="Public World Outer SHA-512 Digest " id="S_HASH512_ODIGEST_C" offset="0x208" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [447:416] for SHA-384 and SHA-512 / SHA512_HMAC Key [95:64] for HMAC key proc R: Outer Digest [447:416] for SHA-384 and SHA-512 " end="0" id="ODIGEST_C" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_ODIGEST_D" description="Public World Outer SHA-512 Digest " id="S_HASH512_ODIGEST_D" offset="0x20C" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [415:384] for SHA-384 and SHA-512 / SHA512_HMAC Key [127:96] for HMAC key proc R: Outer Digest [415:384] for SHA-384 and SHA-512 " end="0" id="ODIGEST_D" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_ODIGEST_E" description="Public World Outer SHA-512 Digest " id="S_HASH512_ODIGEST_E" offset="0x210" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [383:352] for SHA-384 and SHA-512 / SHA512_HMAC Key [159:128] for HMAC key proc R: Outer Digest [383:352] for SHA-384 and SHA-512 " end="0" id="ODIGEST_E" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_ODIGEST_F" description="Public World Outer SHA-512 Digest " id="S_HASH512_ODIGEST_F" offset="0x214" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [351:320] for SHA-384 and SHA-512 / SHA512_HMAC Key [191:160] for HMAC key proc R: Outer Digest [351:320] for SHA-384 and SHA-512 " end="0" id="ODIGEST_F" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_ODIGEST_G" description="Public World Outer SHA-512 Digest " id="S_HASH512_ODIGEST_G" offset="0x218" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [319:288] for SHA-384 and SHA-512 / SHA512_HMAC Key [223:192] for HMAC key proc R: Outer Digest [319:288] for SHA-384 and SHA-512 " end="0" id="ODIGEST_G" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_ODIGEST_H" description="Public World Outer SHA-512 Digest " id="S_HASH512_ODIGEST_H" offset="0x21C" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [287:256] for SHA-384 and SHA-512 / SHA512_HMAC Key [255:244] for HMAC key proc R: Outer Digest [287:256] for SHA-384 and SHA-512 " end="0" id="ODIGEST_H" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_ODIGEST_I" description="Public World Outer SHA-512 Digest " id="S_HASH512_ODIGEST_I" offset="0x220" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [255:224] for SHA-384 and SHA-512 / SHA512_HMAC Key [287:256] for HMAC key proc R: Outer Digest [255:224] for SHA-384 and SHA-512 " end="0" id="ODIGEST_I" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_ODIGEST_J" description="Public World Outer SHA-512 Digest " id="S_HASH512_ODIGEST_J" offset="0x224" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [223:192] for SHA-384 and SHA-512 / SHA512_HMAC Key [319:288] for HMAC key proc R: Outer Digest [223:129] for SHA-384 and SHA-512 " end="0" id="ODIGEST_J" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_ODIGEST_K" description="Public World Outer SHA-512 Digest " id="S_HASH512_ODIGEST_K" offset="0x228" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [191:160] for SHA-384 and SHA-512 / SHA512_HMAC Key [351:320] for HMAC key proc R: Outer Digest [191:160] for SHA-384 and SHA-512 " end="0" id="ODIGEST_K" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_ODIGEST_L" description="Public World Outer SHA-512 Digest " id="S_HASH512_ODIGEST_L" offset="0x22C" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [159:128] for SHA-384 and SHA-512 / SHA512_HMAC Key [383:352] for HMAC key proc R: Outer Digest [159:128] for SHA-384 and SHA-512 " end="0" id="ODIGEST_L" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_ODIGEST_M" description="Public World Outer SHA-512 Digest " id="S_HASH512_ODIGEST_M" offset="0x230" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [128:96] for SHA-384 and SHA-512 / SHA512_HMAC Key [415:384] for HMAC key proc R: Outer Digest [128:96] for SHA-384 and SHA-512 " end="0" id="ODIGEST_M" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_ODIGEST_N" description="Public World Outer SHA-512 Digest " id="S_HASH512_ODIGEST_N" offset="0x234" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [95:64] for SHA-384 and SHA-512 / SHA512_HMAC Key [447:416] for HMAC key proc R: Outer Digest [95:64] for SHA-384 and SHA-512 " end="0" id="ODIGEST_N" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_ODIGEST_O" description="Public World Outer SHA-512 Digest " id="S_HASH512_ODIGEST_O" offset="0x238" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [63:32] for SHA-384 and SHA-512 / SHA512_HMAC Key [479:448] for HMAC key proc R: Outer Digest [63:32] for SHA-384 and SHA-512 " end="0" id="ODIGEST_O" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_ODIGEST_P" description="Public World Outer SHA-512 Digest " id="S_HASH512_ODIGEST_P" offset="0x23C" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [31:0] for SHA-384 and SHA-512 / SHA512_HMAC Key [511:480] for HMAC key proc R: Outer Digest [31:0] for SHA-384 and SHA-512 " end="0" id="ODIGEST_P" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_IDIGEST_A" description="Public World Inner SHA-512 Digest " id="S_HASH512_IDIGEST_A" offset="0x240" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [383:352] for SHA-384 and [511:480] for SHA-512 / SHA512_HMAC Key [543:512] for HMAC key proc R: Intermediate / Inner Digest Digest [383:352] for SHA-384 and [511:480] for SHA-512 Result Digest/MAC Digest [383:352] for SHA-384 and [511:480] for SHA-512  " end="0" id="IDIGEST_A" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_IDIGEST_B" description="Public World Inner SHA-512 Digest " id="S_HASH512_IDIGEST_B" offset="0x244" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [531:320] for SHA-384 and [479:448] for SHA-512 / SHA512_HMAC Key [543:512] for HMAC key proc R: Intermediate / Inner Digest Digest Digest [531:320] for SHA-384 and [479:448] for SHA-512 Result Digest/MAC Digest Digest [531:320] for SHA-384 and [479:448] for SHA-512  " end="0" id="IDIGEST_B" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_IDIGEST_C" description="Public World Inner SHA-512 Digest " id="S_HASH512_IDIGEST_C" offset="0x248" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [319:288] for SHA-384 and [416:447] for SHA-512 / SHA512_HMAC Key [543:512] for HMAC key proc R: Intermediate / Inner Digest Digest Digest [319:288] for SHA-384 and [416:447] for SHA-512 Result Digest/MAC Digest Digest [319:288] for SHA-384 and [416:447] for SHA-512 " end="0" id="IDIGEST_C" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_IDIGEST_D" description="Public World Inner SHA-512 Digest " id="S_HASH512_IDIGEST_D" offset="0x24C" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [287:256] for SHA-384 and [415:384] for SHA-512 / SHA512_HMAC Key [639:608] for HMAC key proc R: Intermediate / Inner Digest [287:256] for SHA-384 and [415:384] for SHA-512 Result Digest/MAC Digest Digest [287:256] for SHA-384 and [415:384] for SHA-512 " end="0" id="IDIGEST_D" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_IDIGEST_E" description="Public World Inner SHA-512 Digest " id="S_HASH512_IDIGEST_E" offset="0x250" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [255:224] for SHA-384 and [383:362] for SHA-512 / SHA512_HMAC Key [671:640] for HMAC key proc R: Intermediate / Inner Digest [255:224] for SHA-384 and [383:362] for SHA-512 Result Digest/MAC Digest Digest [255:224] for SHA-384 and [383:362] for SHA-512  " end="0" id="IDIGEST_E" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_IDIGEST_F" description="Public World Inner SHA-512 Digest " id="S_HASH512_IDIGEST_F" offset="0x254" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [223:192] for SHA-384 and [351:320] for SHA-512 / SHA512_HMAC Key [703:672] for HMAC key proc R: Intermediate / Inner Digest [223:192] for SHA-384 and [351:320] for SHA-512 Result Digest/MAC Digest Digest [223:192] for SHA-384 and [351:320] for SHA-512  " end="0" id="IDIGEST_F" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_IDIGEST_G" description="Public World Inner SHA-512 Digest " id="S_HASH512_IDIGEST_G" offset="0x258" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [191:160] for SHA-384 and [319:288] for SHA-512 / SHA512_HMAC Key [735:704] for HMAC key proc R: Intermediate / Inner Digest [191:160] for SHA-384 and [319:288] for SHA-512 Result Digest/MAC Digest Digest [191:160] for SHA-384 and [319:288] for SHA-512  " end="0" id="IDIGEST_G" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_IDIGEST_H" description="Public World Inner SHA-512 Digest " id="S_HASH512_IDIGEST_H" offset="0x25C" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [159:128] for SHA-384 and [287:256] for SHA-512 / SHA512_HMAC Key [767:736] for HMAC key proc R: Intermediate / Inner Digest [159:128] for SHA-384 and [287:256] for SHA-512 Result Digest/MAC Digest Digest [159:128] for SHA-384 and [287:256] for SHA-512  " end="0" id="IDIGEST_H" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_IDIGEST_I" description="Public World Inner SHA-512 Digest " id="S_HASH512_IDIGEST_I" offset="0x260" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [127:96] for SHA-384 and [255:224] for SHA-512 / SHA512_HMAC Key [799:768] for HMAC key proc R: Intermediate / Inner Digest [127:96] for SHA-384 and [255:224] for SHA-512 Result Digest/MAC Digest Digest [127:96] for SHA-384 and [255:224] for SHA-512  " end="0" id="IDIGEST_I" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_IDIGEST_J" description="Public World Inner SHA-512 Digest " id="S_HASH512_IDIGEST_J" offset="0x264" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [95:64] for SHA-384 and [223:192] for SHA-512 / SHA512_HMAC Key [831:800] for HMAC key proc R: Intermediate / Inner Digest [95:64] for SHA-384 and [223:192] for SHA-512 Result Digest/MAC Digest Digest [95:64] for SHA-384 and [223:192] for SHA-512  " end="0" id="IDIGEST_J" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_IDIGEST_K" description="Public World Inner SHA-512 Digest " id="S_HASH512_IDIGEST_K" offset="0x268" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [63:32] for SHA-384 and [191:160] for SHA-512 / SHA512_HMAC Key [863:832] for HMAC key proc R: Intermediate / Inner Digest [63:32] for SHA-384 and [191:160] for SHA-512 Result Digest/MAC Digest Digest [63:32] for SHA-384 and [191:160] for SHA-512  " end="0" id="IDIGEST_K" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_IDIGEST_L" description="Public World Inner SHA-512 Digest " id="S_HASH512_IDIGEST_L" offset="0x26C" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [31:0] for SHA-384 and [159:128] for SHA-512 / SHA512_HMAC Key [895:864] for HMAC key proc R: Intermediate / Inner Digest [31:0] for SHA-384 and [159:128] for SHA-512 Result Digest/MAC Digest Digest [31:0] for SHA-384 and [159:128] for SHA-512  " end="0" id="IDIGEST_L" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_IDIGEST_M" description="Public World Inner SHA-512 Digest " id="S_HASH512_IDIGEST_M" offset="0x270" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [127:96] for SHA-512 / SHA512_HMAC Key [927:896] for HMAC key proc R: Intermediate / Inner Digest [127:96] for SHA-512 Result Digest/MAC Digest Digest [127:96] for SHA-512 " end="0" id="IDIGEST_M" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_IDIGEST_N" description="Public World Inner SHA-512 Digest " id="S_HASH512_IDIGEST_N" offset="0x274" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [95:64] for SHA-512 / SHA512_HMAC Key [959:928] for HMAC key proc R: Intermediate / Inner Digest [95:64] for SHA-512 Result Digest/MAC Digest Digest [95:64] for SHA-512 " end="0" id="IDIGEST_N" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_IDIGEST_O" description="Public World Inner SHA-512 Digest " id="S_HASH512_IDIGEST_O" offset="0x278" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [63:32] for SHA-512 / SHA512_HMAC Key [991:960] for HMAC key proc R: Intermediate / Inner Digest [63:32] for SHA-512 Result Digest/MAC Digest Digest [63:32] for SHA-512 " end="0" id="IDIGEST_O" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_IDIGEST_P" description="Public World Inner SHA-512 Digest " id="S_HASH512_IDIGEST_P" offset="0x27C" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [31:0] for SHA-512 / SHA512_HMAC Key [1023:992] for HMAC key proc R: Intermediate / Inner Digest [31:0] for SHA-512 Result Digest/MAC Digest Digest [31:0] for SHA-512 " end="0" id="IDIGEST_P" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_DIGEST_COUNT" description="Public World SHA-512 Digest Count " id="S_HASH512_DIGEST_COUNT" offset="0x280" width="32">
    
  <bitfield begin="31" description="W: Initial Digest Count ([31:7] only, [6:0] assumed 0) R: Result / IntermediateDigest Count " end="0" id="DIGEST_COUNT" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_MODE" description="Public World SHA-512 Hash Mode" id="S_HASH512_MODE" offset="0x284" width="32">
    
  <bitfield begin="31" description="These bits should be written with zeroes and ignored on reads." end="8" id="RESERVED" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="If set to 1, the HMAC Outer Hash is performed on the hash digest when the inner hash hash finished (block length exhausted and final hash performed if Close Hash is 1). This bit should normally be set together with Close Hash to finish the inner hash first, or Block Length should be zero (HMAC continue with the just outer hash to be done). Auto cleared internally when outer hash performed. " end="7" id="HMAC_OUTER_HASH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="If set to 1, an HMAC operation is started using the HMAC key that was loaded at the time HMAC Key Processing was last performed, provided that the P_HASH512_ODIGEST registers have not been overwritten since. This makes it possible to authenticate multiple blocks using the HMAC key without actually having to reload the key. Note that P_HASH512_DIGEST_COUNT is forced to 128 to indicate that the 128 byte key XOR ipad block has been processed first.  This bit should not be set together with bit 5.  " end="6" id="REUSE_HMAC_KEY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="If set to 1, the hash core will perform HMAC key processing on the HMAC key (with block size length) loaded into the P_HASH512_IDIGEST:P_HASH512_ODIGEST register block. Once HMAC key processing is finished, this bit is automatically cleared and the resulting Inner and Outer digest is available from P_HASH512_IDIGEST and P_HASH512_ODIGEST respectively, after which regular hash processing (using P_HASH512_IDIGEST as initial digest) will commence until the Block Length is exhausted. Note that P_HASH_DIGEST512_COUNT is forced to 128 to indicate that the 128 byte key XOR ipad block has been processed first." end="5" id="HMAC_KEY_PROCESSING" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="If set to 1, then the hash/HMAC will be 'closed' at the end of the block, as per MD5/SHA-1/SHA-2 specification (i.e. appropriate padding is added).  If set to 0, then the hash/HMAC will not be closed and can be continued later. However, if the hash/HMAC is not closed then the Block Length MUST be a multiple of the hash bloc k size to ensure correct operation. Auto cleared internally when hash close operation starts." end="4" id="CLOSE_HASH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="If set to 1, the initial digest register will be overwritten with the algorithm constants for the selected algorithm when hashing and the initial digest count register will be reset to 0. This will start a normal hash operation. When continuing an existing hash or when performing an HMAC operation, this register must be set to 0 and the intermediate/inner digest or HMAC key and digest count need to be written to the context input registers prior to writing P_HASH512_MODE. Auto cleared internally after first block processed. " end="3" id="USE_ALG_CONSTANTS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="These bits select the hash algorithm to be used for processing: 000 - MD5 010 - SHA-1 100 - SHA-224 110 - SHA-256 001 - SHA-384 011 - SHA-512 " end="0" id="ALGORITHM" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="S_HASH512_LENGTH" description="Public World SHA-512 Block Length " id="S_HASH512_LENGTH" offset="0x288" width="32">
    
  <bitfield begin="31" description="W: Block Length / Remaining Byte Count (bytes) R: Remaining Byte Count " end="0" id="LENGTH" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_ODIGEST_A" description=" WRITE: Outer Digest [127:96] for MD5 [159:128] for SHA-1 [255:224] for SHA-2 / HMAC Key [31:0] for HMAC key proc READ: Outer Digest [127:96] for MD5 [159:128] for SHA-1 [255:224] for SHA-2" id="P_ODIGEST_A" offset="0x1000" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_ODIGEST_B" description=" WRITE: Outer Digest [95:64] for MD5 [127:96] for SHA-1 [223:192] for SHA-2 / HMAC Key [63:32] for HMAC key proc READ: Outer Digest [95:64] for MD5 [127:96] for SHA-1 [223:192] for SHA-2" id="P_ODIGEST_B" offset="0x1004" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_ODIGEST_C" description=" WRITE: Outer Digest [63:32] for MD5 [95:64] for SHA-1 [191:160] for SHA-2 / HMAC Key [95:64] for HMAC key proc READ: Outer Digest [63:32] for MD5 [95:64] for SHA-1 [191:160] for SHA-2" id="P_ODIGEST_C" offset="0x1008" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_ODIGEST_D" description=" WRITE: Outer Digest [31:0] for MD5 [63:31] for SHA-1 [159:128] for SHA-2 / HMAC Key [127:96] for HMAC key proc READ: Outer Digest [31:0] for MD5 [63:32] for SHA-1 [159:128] for SHA-2" id="P_ODIGEST_D" offset="0x100C" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_ODIGEST_E" description=" WRITE: Outer Digest [31:0] for SHA-1 [127:96] for SHA-2 / HMAC Key [159:128] for HMAC key proc READ: Outer Digest [31:0] for SHA-1 [127:96] for SHA-2" id="P_ODIGEST_E" offset="0x1010" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_ODIGEST_F" description=" WRITE: Outer Digest [95:64] for SHA-2 / HMAC Key [191:160] for HMAC key proc READ: Outer Digest [95:64] for SHA-2" id="P_ODIGEST_F" offset="0x1014" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_ODIGEST_G" description=" WRITE: Outer Digest [63:32] for SHA-2 / HMAC Key [223:192] for HMAC key proc READ: Outer Digest [63:32] for SHA-2" id="P_ODIGEST_G" offset="0x1018" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_ODIGEST_H" description=" WRITE: Outer Digest [31:0] for SHA-2 / HMAC Key [255:224] for HMAC key proc READ: Outer Digest [31:0] for SHA-2" id="P_ODIGEST_H" offset="0x101C" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_IDIGEST_A" description=" WRITE: Inner / Initial Digest [127:96] for MD5 [159:128] for SHA-1 [255:224] for SHA-2 / HMAC Key [287:256] for HMAC key proc READ: Intermediate / Inner Digest [127:96] for MD5 [159:128] for SHA-1 [255:224] for SHA-2 / Result Digest/MAC [127:96] for MD5 [159:128] for SHA-1 [223:192] for SHA-2 224 [255:224] for SHA-2 256" id="P_IDIGEST_A" offset="0x1020" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_IDIGEST_B" description=" WRITE: Inner / Initial Digest [95:64] for MD5 [127:96] for SHA-1 [223:192] for SHA-2 / HMAC Key [319:288] for HMAC key proc READ: Intermediate / Inner Digest [95:64] for MD5 [127:96] for SHA-1 [223:192] for SHA-2 / Result Digest/MAC [95:64] for MD5 [127:96] for SHA-1 [191:160] for SHA-2 224 [223:192] for SHA-2 256" id="P_IDIGEST_B" offset="0x1024" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_IDIGEST_C" description=" WRITE: Inner / Initial Digest [63:32] for MD5 [95:64] for SHA-1 [191:160] for SHA- 2 / HMAC Key [351:320] for HMAC key proc READ: Intermediate / Inner Digest [63:32] for MD5 [95:64] for SHA-1 [191:160] for SHA-2 / Result Digest/MAC [63:32] for MD5 [95:64] for SHA-1 [159:128] for SHA-2 224 [191:160] for SHA-2 256" id="P_IDIGEST_C" offset="0x1028" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_IDIGEST_D" description=" WRITE: Inner / Initial Digest [31:0] for MD5 [63:32] for SHA-1 [159:128] for SHA-2 / HMAC Key [383:352] for HMAC key proc READ: Intermediate / Inner Digest [31:0] for MD5 [63:32] for SHA-1 [159:128] for SHA-2 / Result Digest/MAC [31:0] for MD5 [63:32] for SHA-1 [127:96] for SHA-2 224 [159:128] for SHA-2 256" id="P_IDIGEST_D" offset="0x102C" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_IDIGEST_E" description=" WRITE: Inner / Initial Digest [31:0] for SHA-1 [127:96] for SHA-2 / HMAC Key [415:384] for HMAC key proc READ: Intermediate / Inner Digest [31:0] for SHA-1 [127:96] for SHA-2 / Result Digest/MAC [31:0] for SHA-1 [95:64] for SHA-2 224 [127:96] for SHA-2 256" id="P_IDIGEST_E" offset="0x1030" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_IDIGEST_F" description=" WRITE: Inner / Initial Digest [95:64] for SHA-2 / HMAC Key [447:416] for HMAC key proc READ: Intermediate / Inner Digest [95:64] for SHA-2 / Result Digest/MAC [63:32] for SHA-2 224 [95:64] for SHA-2 256" id="P_IDIGEST_F" offset="0x1034" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_IDIGEST_G" description=" WRITE: Inner / Initial Digest [63:32] for SHA-2 / HMAC Key [479:448] for HMAC key proc READ: Intermediate / Inner Digest [63:32] for SHA-2 / Result Digest/MAC [31:0] for SHA-2 224 [63:32] for SHA-2 256" id="P_IDIGEST_G" offset="0x1038" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_IDIGEST_H" description=" WRITE: Inner / Initial Digest [31:0] for SHA-2 / HMAC Key [511:480] for HMAC key proc READ: Intermediate / Inner Digest [31:0] for SHA-2 / Result Digest/MAC [31:0] for SHA-2 256" id="P_IDIGEST_H" offset="0x103C" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_DIGEST_COUNT" description=" WRITE: Initial Digest Count ([31:6] only [5:0] assumed 0) READ: Result / IntermediateDigest Count The initial digest byte count for hash/HMAC continue operations (HMAC Key Processing = 0 and Use Algorithm Constants = 0) on the Secure World must be written to this register prior to starting the operation by writing to S_HASH_MODE. When either HMAC Key Processing is 1 or Use Algorithm Constants is 1 this register does not need to be written it will be overwritten with 64 (1 hash block of key XOR ipad) or 0 respectively automatically. When starting a HMAC operation from pre-computes (HMAC Key Processing is 0) then the value 64 must be written here to compensate for the appended key XOR ipad block. Note that the value written should always be a 64 byte multiple the lower 6 bits written are ignored.  The updated digest byte count (initial digest byte count + bytes processed) can be read from this register when the status register indicates that the operation is done or suspended due to a context switch request or when a Secure World context out DMA is requested. In Advanced DMA mode when not suspended with a partial result reading the SHA_P_DIGEST_COUNT register triggers the Hash/HMAC Engine to start the next context input DMA. Therefore reading the SHA_P_DIGEST_COUNT register should always be the last context-read action if not suspended with a partial result (i.e. PartHashReady interrupt not pending)." id="P_DIGEST_COUNT" offset="0x1040" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_MODE" description=" Register SHA_MODE" id="P_MODE" offset="0x1044" width="32">
    
  <bitfield begin="31" description="reserved" end="8" id="Reserved" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="The HMAC Outer Hash is performed on the hash digest when the inner hash hash finished (block length exhausted and final hash performed if close_hash is 1). This bit should normally be set together with close_hash to finish the inner hash first or Block Length should be zero (HMAC continue with the just outer hash to be done). Auto cleared internally when outer hash performed. 0 No operation 1 hmac processing" end="7" id="HMAC_OUTER_HASH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="reserved" end="6" id="Reserved1" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="5" description="Performs HMAC key processing on the 512 bit HMAC key loaded into the SHA_P_IDIGEST_{A to H} and SHA_P_ODIGEST_{A to H} register block. Once HMAC key processing is finished this bit is automatically cleared and the resulting Inner and Outer digest is available from SHA_P_IDIGEST_{A to H} and SHA_P_ODIGEST_{A to H} respectively after which regular hash processing (using SHA_P_IDIGEST_{A to H} as initial digest) will commence until the Block Length is exhausted. 0 No operation. 1 Hmac processing." end="5" id="HMAC_KEY_PROC" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Performs the padding the hash/HMAC will be 'closed' at the end of the block as per MD5/SHA-1/SHA-2 specification (i.e. appropriate padding is added) or no padding is done allowing the hash to be continued later. However if the hash/HMAC is not closed then the Block Length MUST be a multiple of 64 bytes to ensure correct operation. Auto cleared internally when hash closed. 0 No padding hash computation can be contimued. 1 Last packet will be padded." end="4" id="CLOSE_HASH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="The initial digest register will be overwritten with the algorithm constants for the selected algorithm when hashing and the initial digest count register will be reset to 0. This will start a normal hash operation. When continuing an existing hash or when performing an HMAC operation this register must be set to 0 and the intermediate/inner digest or HMAC key and digest count need to be written to the context input registers prior to writing SHA_P_MODE. Auto cleared internally after first block processed. 0 Use pre-calculated digest (from an other operation) 1 Use constants of the selected algo." end="3" id="ALGO_CONSTANT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="These bits select the hash algorithm to be used for processing: 0 md5_128 algorithm 0x1 sha1_160 algorithm 0x2 sha2_224 algorithm 0x3 sha2_256 algorithm" end="1" id="ALGO" rwaccess="RW" width="2"></bitfield>
    
  <bitfield begin="0" description="reserved" end="0" id="Reserved2" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="P_LENGTH" description=" WRITE: Block Length / Remaining Byte Count (bytes) READ: Remaining Byte Count. The value programmed MUST be a 64-byte multiple if Close Hash is set to 0. This register is also the trigger to start processing: once this register is written the core will commence requesting input data via DMA or IRQ (if programmed length > 0) and start processing. The remaining byte count for the active operation can be read from this register when the interrupt status register indicates that the operation is suspended due to a context switch request." id="P_LENGTH" offset="0x1048" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_DATA0_IN" description=" Data input message 0" id="P_DATA0_IN" offset="0x1080" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA0_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_DATA1_IN" description=" Data input message 1" id="P_DATA1_IN" offset="0x1084" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA1_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_DATA2_IN" description=" Data input message 2" id="P_DATA2_IN" offset="0x1088" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA2_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_DATA3_IN" description=" Data input message 3" id="P_DATA3_IN" offset="0x108C" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA3_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_DATA4_IN" description=" Data input message 4" id="P_DATA4_IN" offset="0x1090" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA4_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_DATA5_IN" description=" Data input message 5" id="P_DATA5_IN" offset="0x1094" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA5_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_DATA6_IN" description=" Data input message 6" id="P_DATA6_IN" offset="0x1098" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA6_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_DATA7_IN" description=" Data input message 7" id="P_DATA7_IN" offset="0x109C" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA7_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_DATA8_IN" description=" Data input message 8" id="P_DATA8_IN" offset="0x10A0" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA8_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_DATA9_IN" description=" Data input message 9" id="P_DATA9_IN" offset="0x10A4" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA9_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_DATA10_IN" description=" Data input message 10" id="P_DATA10_IN" offset="0x10A8" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA10_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_DATA11_IN" description=" Data input message 11" id="P_DATA11_IN" offset="0x10AC" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA11_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_DATA12_IN" description=" Data input message 12" id="P_DATA12_IN" offset="0x10B0" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA12_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_DATA13_IN" description=" Data input message 13" id="P_DATA13_IN" offset="0x10B4" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA13_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_DATA14_IN" description=" Data input message 14" id="P_DATA14_IN" offset="0x10B8" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA14_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_DATA15_IN" description=" Data input message 15" id="P_DATA15_IN" offset="0x10BC" width="32">
    
  <bitfield begin="31" description="data" end="0" id="DATA15_IN" rwaccess="W" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_REVISION" description=" Register SHA_REV" id="P_REVISION" offset="0x1100" width="32">
    
  <bitfield begin="31" description="Used to distinguish between old scheme and current. Read�0 Legacy ASP or WTBU scheme Read�0x1 Highlander 0.8 scheme" end="30" id="SCHEME" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description="reserved" end="28" id="Reserved1" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="27" description="Function indicates a software compatible module family. If there is no level of software compatibility a new Func number (and hence REVISION) should be assigned." end="16" id="FUNC" rwaccess="R" width="12"></bitfield>
    
  <bitfield begin="15" description="RTL Version (R) maintained by IP design owner. RTL follows a numbering such as X.Y.R.Z which are explained in this table. R changes ONLY when: (1) PDS uploads occur which may have been due to spec changes (2) Bug fixes occur (3) Resets to '0' when X or Y changes. Design team has an internal 'Z' (customer invisible) number which increments on every drop that happens due to DV and RTL updates. Z resets to 0 when R increments." end="11" id="R_RTL" rwaccess="R" width="5"></bitfield>
    
  <bitfield begin="10" description="Major Revision (X) maintained by IP specification owner. X changes ONLY when: (1) There is a major feature addition. An example would be adding Master Mode to Utopia Level2. The Func field (or Class/Type in old PID format) will remain the same. X does NOT change due to: (1) Bug fixes (2) Change in feature parameters." end="8" id="X_MAJOR" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="7" description="Indicates a special version for a particular device. Consequence of use may avoid use of standard Chip Support Library (CSL) / Drivers. Read�0 Non custom (standard) revision" end="6" id="CUSTOM" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="5" description="Minor Revision (Y) maintained by IP specification owner. Y changes ONLY when: (1) Features are scaled (up or down). Flexibility exists in that this feature scalability may either be represented in the Y change or a specific register in the IP that indicates which features are exactly available. (2) When feature creeps from Is-Not list to Is list. But this may not be the case once it sees silicon; in which case X will change. Y does NOT change due to: (1) Bug fixes (2) Typos or clarifications (3) major functional/feature change/addition/deletion. Instead these changes may be reflected via R S X as applicable. Spec owner maintains a customer-invisible number 'S' which changes due to: (1) Typos/clarifications (2) Bug documentation. Note that this bug is not due to a spec change but due to implementation. Nevertheless the spec tracks the IP bugs. An RTL release (say for silicon PG1.1) that occurs due to bug fix should document the corresponding spec number (X.Y.S) in its release notes." end="0" id="Y_MINOR" rwaccess="R" width="6"></bitfield>
  </register>
  
  
  <register acronym="P_SYSCONFIG" description=" Register SHA_SYSCONFIG" id="P_SYSCONFIG" offset="0x1110" width="32">
    
  <bitfield begin="31" description="reserved" end="8" id="Reserved" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="If set to 1 Advanced mode is enabled for the Secure World. If set to 0 Legacy mode is enabled for the Secure World." end="7" id="PADVANCED" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="Finish all pending data and context DMA input requests (but will not assert any new requests) finish processing all data in the module and provide a saved context (partial hash result updated digest count remaining length updated mode information where applicable) for the last operation that was interrupted so that it can be resumed later." end="6" id="PCONT_SWT" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="reserved" end="4" id="Reserved1" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="3" description="enable dma Read�0 Interrupt disenabled Read�1 Interrupt enabled" end="3" id="PDMA_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="enable interrupt Read�0 Interrupt disenabled Read�1 Interrupt enabled" end="2" id="PIT_EN" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="reserved" end="0" id="Reserved2" rwaccess="R" width="2"></bitfield>
  </register>
  
  
  <register acronym="P_SYSSTATUS" description=" Register SHA_SYSSTATUS" id="P_SYSSTATUS" offset="0x1114" width="32">
    
  <bitfield begin="31" description="reserved" end="1" id="Reserved" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description="data" end="0" id="RESETDONE" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="P_IRQSTATUS" description=" Register SHA_IRQSTATUS" id="P_IRQSTATUS" offset="0x1118" width="32">
    
  <bitfield begin="31" description="reserved" end="4" id="Reserved" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="indicates that the secure side context input registers are available for a new context for the next packet to be processed." end="3" id="CONTEXT_READY" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="After a secure side context switch request this bit will read as 1 indicating that the saved context is available from the secure side context output registers. Note that if the context switch request coincides with a final hash (when hashing) or an outer hash (when doing HMAC) that PartHashReady will not become active but a regular Output Ready will occur instead (indicating that the result is final and therefore no continuation is required)." end="2" id="PARTHASH_READY" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="1" description="indicates that the secure side data FIFO is ready to receive the next 64 byte data block." end="1" id="INPUT_READY" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="Indicates that a (partial) result or saved context is available from the secure side context output registers." end="0" id="OUTPUT_READY" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="P_IRQENABLE" description=" Register SHA_IRQENABLE. The SHA_P_IRQENABLE register contains an enable bit for each unique interrupt for the public side. An interrupt is enabled when both the global enable in SHA_P_SYSCONFIG (PIT_en) and the bit in this register are both set to 1. An interrupt that is enabled is propagated to the SINTREQUEST_P output. Please note that the dedicated partial hash output (SINTREQUEST_PART_P) is not affected by this register it is only affected by the global enable SHA_P_SYSCONFIG (PIT_en)." id="P_IRQENABLE" offset="0x111C" width="32">
    
  <bitfield begin="31" description="reserved" end="4" id="Reserved" rwaccess="R" width="28"></bitfield>
    
  <bitfield begin="3" description="mask for context ready" end="3" id="M_CONTEXT_READY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="mask for partial hash" end="2" id="M_PARTHASH_READY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="1" description="mask for input_ready" end="1" id="M_INPUT_READY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="mask for output_ready" end="0" id="M_OUTPUT_READY" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_ODIGEST_A" description="Public World Outer SHA-512 Digest " id="P_HASH512_ODIGEST_A" offset="0x1200" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [511:480] for SHA-384 and SHA-512 / SHA512_HMAC Key [31:0] for HMAC key proc R: Outer Digest [511:480] for SHA-384 and SHA-512 " end="0" id="ODIGEST_A" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_ODIGEST_B" description="Public World Outer SHA-512 Digest " id="P_HASH512_ODIGEST_B" offset="0x1204" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [479:448] for SHA-384 and SHA-512 / SHA512_HMAC Key [63:32] for HMAC key proc R: Outer Digest [479:448] for SHA-384 and SHA-512 " end="0" id="ODIGEST_B" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_ODIGEST_C" description="Public World Outer SHA-512 Digest " id="P_HASH512_ODIGEST_C" offset="0x1208" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [447:416] for SHA-384 and SHA-512 / SHA512_HMAC Key [95:64] for HMAC key proc R: Outer Digest [447:416] for SHA-384 and SHA-512 " end="0" id="ODIGEST_C" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_ODIGEST_D" description="Public World Outer SHA-512 Digest " id="P_HASH512_ODIGEST_D" offset="0x120C" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [415:384] for SHA-384 and SHA-512 / SHA512_HMAC Key [127:96] for HMAC key proc R: Outer Digest [415:384] for SHA-384 and SHA-512 " end="0" id="ODIGEST_D" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_ODIGEST_E" description="Public World Outer SHA-512 Digest " id="P_HASH512_ODIGEST_E" offset="0x1210" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [383:352] for SHA-384 and SHA-512 / SHA512_HMAC Key [159:128] for HMAC key proc R: Outer Digest [383:352] for SHA-384 and SHA-512 " end="0" id="ODIGEST_E" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_ODIGEST_F" description="Public World Outer SHA-512 Digest " id="P_HASH512_ODIGEST_F" offset="0x1214" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [351:320] for SHA-384 and SHA-512 / SHA512_HMAC Key [191:160] for HMAC key proc R: Outer Digest [351:320] for SHA-384 and SHA-512 " end="0" id="ODIGEST_F" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_ODIGEST_G" description="Public World Outer SHA-512 Digest " id="P_HASH512_ODIGEST_G" offset="0x1218" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [319:288] for SHA-384 and SHA-512 / SHA512_HMAC Key [223:192] for HMAC key proc R: Outer Digest [319:288] for SHA-384 and SHA-512 " end="0" id="ODIGEST_G" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_ODIGEST_H" description="Public World Outer SHA-512 Digest " id="P_HASH512_ODIGEST_H" offset="0x121C" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [287:256] for SHA-384 and SHA-512 / SHA512_HMAC Key [255:244] for HMAC key proc R: Outer Digest [287:256] for SHA-384 and SHA-512 " end="0" id="ODIGEST_H" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_ODIGEST_I" description="Public World Outer SHA-512 Digest " id="P_HASH512_ODIGEST_I" offset="0x1220" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [255:224] for SHA-384 and SHA-512 / SHA512_HMAC Key [287:256] for HMAC key proc R: Outer Digest [255:224] for SHA-384 and SHA-512 " end="0" id="ODIGEST_I" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_ODIGEST_J" description="Public World Outer SHA-512 Digest " id="P_HASH512_ODIGEST_J" offset="0x1224" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [223:192] for SHA-384 and SHA-512 / SHA512_HMAC Key [319:288] for HMAC key proc R: Outer Digest [223:129] for SHA-384 and SHA-512 " end="0" id="ODIGEST_J" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_ODIGEST_K" description="Public World Outer SHA-512 Digest " id="P_HASH512_ODIGEST_K" offset="0x1228" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [191:160] for SHA-384 and SHA-512 / SHA512_HMAC Key [351:320] for HMAC key proc R: Outer Digest [191:160] for SHA-384 and SHA-512 " end="0" id="ODIGEST_K" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_ODIGEST_L" description="Public World Outer SHA-512 Digest " id="P_HASH512_ODIGEST_L" offset="0x122C" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [159:128] for SHA-384 and SHA-512 / SHA512_HMAC Key [383:352] for HMAC key proc R: Outer Digest [159:128] for SHA-384 and SHA-512 " end="0" id="ODIGEST_L" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_ODIGEST_M" description="Public World Outer SHA-512 Digest " id="P_HASH512_ODIGEST_M" offset="0x1230" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [128:96] for SHA-384 and SHA-512 / SHA512_HMAC Key [415:384] for HMAC key proc R: Outer Digest [128:96] for SHA-384 and SHA-512 " end="0" id="ODIGEST_M" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_ODIGEST_N" description="Public World Outer SHA-512 Digest " id="P_HASH512_ODIGEST_N" offset="0x1234" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [95:64] for SHA-384 and SHA-512 / SHA512_HMAC Key [447:416] for HMAC key proc R: Outer Digest [95:64] for SHA-384 and SHA-512 " end="0" id="ODIGEST_N" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_ODIGEST_O" description="Public World Outer SHA-512 Digest " id="P_HASH512_ODIGEST_O" offset="0x1238" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [63:32] for SHA-384 and SHA-512 / SHA512_HMAC Key [479:448] for HMAC key proc R: Outer Digest [63:32] for SHA-384 and SHA-512 " end="0" id="ODIGEST_O" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_ODIGEST_P" description="Public World Outer SHA-512 Digest " id="P_HASH512_ODIGEST_P" offset="0x123C" width="32">
    
  <bitfield begin="31" description="W: Outer Digest [31:0] for SHA-384 and SHA-512 / SHA512_HMAC Key [511:480] for HMAC key proc R: Outer Digest [31:0] for SHA-384 and SHA-512 " end="0" id="ODIGEST_P" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_IDIGEST_A" description="Public World Inner SHA-512 Digest " id="P_HASH512_IDIGEST_A" offset="0x1240" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [383:352] for SHA-384 and [511:480] for SHA-512 / SHA512_HMAC Key [543:512] for HMAC key proc R: Intermediate / Inner Digest Digest [383:352] for SHA-384 and [511:480] for SHA-512 Result Digest/MAC Digest [383:352] for SHA-384 and [511:480] for SHA-512  " end="0" id="IDIGEST_A" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_IDIGEST_B" description="Public World Inner SHA-512 Digest " id="P_HASH512_IDIGEST_B" offset="0x1244" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [531:320] for SHA-384 and [479:448] for SHA-512 / SHA512_HMAC Key [543:512] for HMAC key proc R: Intermediate / Inner Digest Digest Digest [531:320] for SHA-384 and [479:448] for SHA-512 Result Digest/MAC Digest Digest [531:320] for SHA-384 and [479:448] for SHA-512  " end="0" id="IDIGEST_B" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_IDIGEST_C" description="Public World Inner SHA-512 Digest " id="P_HASH512_IDIGEST_C" offset="0x1248" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [319:288] for SHA-384 and [416:447] for SHA-512 / SHA512_HMAC Key [543:512] for HMAC key proc R: Intermediate / Inner Digest Digest Digest [319:288] for SHA-384 and [416:447] for SHA-512 Result Digest/MAC Digest Digest [319:288] for SHA-384 and [416:447] for SHA-512 " end="0" id="IDIGEST_C" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_IDIGEST_D" description="Public World Inner SHA-512 Digest " id="P_HASH512_IDIGEST_D" offset="0x124C" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [287:256] for SHA-384 and [415:384] for SHA-512 / SHA512_HMAC Key [639:608] for HMAC key proc R: Intermediate / Inner Digest [287:256] for SHA-384 and [415:384] for SHA-512 Result Digest/MAC Digest Digest [287:256] for SHA-384 and [415:384] for SHA-512 " end="0" id="IDIGEST_D" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_IDIGEST_E" description="Public World Inner SHA-512 Digest " id="P_HASH512_IDIGEST_E" offset="0x1250" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [255:224] for SHA-384 and [383:362] for SHA-512 / SHA512_HMAC Key [671:640] for HMAC key proc R: Intermediate / Inner Digest [255:224] for SHA-384 and [383:362] for SHA-512 Result Digest/MAC Digest Digest [255:224] for SHA-384 and [383:362] for SHA-512  " end="0" id="IDIGEST_E" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_IDIGEST_F" description="Public World Inner SHA-512 Digest " id="P_HASH512_IDIGEST_F" offset="0x1254" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [223:192] for SHA-384 and [351:320] for SHA-512 / SHA512_HMAC Key [703:672] for HMAC key proc R: Intermediate / Inner Digest [223:192] for SHA-384 and [351:320] for SHA-512 Result Digest/MAC Digest Digest [223:192] for SHA-384 and [351:320] for SHA-512  " end="0" id="IDIGEST_F" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_IDIGEST_G" description="Public World Inner SHA-512 Digest " id="P_HASH512_IDIGEST_G" offset="0x1258" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [191:160] for SHA-384 and [319:288] for SHA-512 / SHA512_HMAC Key [735:704] for HMAC key proc R: Intermediate / Inner Digest [191:160] for SHA-384 and [319:288] for SHA-512 Result Digest/MAC Digest Digest [191:160] for SHA-384 and [319:288] for SHA-512  " end="0" id="IDIGEST_G" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_IDIGEST_H" description="Public World Inner SHA-512 Digest " id="P_HASH512_IDIGEST_H" offset="0x125C" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [159:128] for SHA-384 and [287:256] for SHA-512 / SHA512_HMAC Key [767:736] for HMAC key proc R: Intermediate / Inner Digest [159:128] for SHA-384 and [287:256] for SHA-512 Result Digest/MAC Digest Digest [159:128] for SHA-384 and [287:256] for SHA-512  " end="0" id="IDIGEST_H" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_IDIGEST_I" description="Public World Inner SHA-512 Digest " id="P_HASH512_IDIGEST_I" offset="0x1260" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [127:96] for SHA-384 and [255:224] for SHA-512 / SHA512_HMAC Key [799:768] for HMAC key proc R: Intermediate / Inner Digest [127:96] for SHA-384 and [255:224] for SHA-512 Result Digest/MAC Digest Digest [127:96] for SHA-384 and [255:224] for SHA-512  " end="0" id="IDIGEST_I" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_IDIGEST_J" description="Public World Inner SHA-512 Digest " id="P_HASH512_IDIGEST_J" offset="0x1264" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [95:64] for SHA-384 and [223:192] for SHA-512 / SHA512_HMAC Key [831:800] for HMAC key proc R: Intermediate / Inner Digest [95:64] for SHA-384 and [223:192] for SHA-512 Result Digest/MAC Digest Digest [95:64] for SHA-384 and [223:192] for SHA-512  " end="0" id="IDIGEST_J" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_IDIGEST_K" description="Public World Inner SHA-512 Digest " id="P_HASH512_IDIGEST_K" offset="0x1268" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [63:32] for SHA-384 and [191:160] for SHA-512 / SHA512_HMAC Key [863:832] for HMAC key proc R: Intermediate / Inner Digest [63:32] for SHA-384 and [191:160] for SHA-512 Result Digest/MAC Digest Digest [63:32] for SHA-384 and [191:160] for SHA-512  " end="0" id="IDIGEST_K" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_IDIGEST_L" description="Public World Inner SHA-512 Digest " id="P_HASH512_IDIGEST_L" offset="0x126C" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [31:0] for SHA-384 and [159:128] for SHA-512 / SHA512_HMAC Key [895:864] for HMAC key proc R: Intermediate / Inner Digest [31:0] for SHA-384 and [159:128] for SHA-512 Result Digest/MAC Digest Digest [31:0] for SHA-384 and [159:128] for SHA-512  " end="0" id="IDIGEST_L" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_IDIGEST_M" description="Public World Inner SHA-512 Digest " id="P_HASH512_IDIGEST_M" offset="0x1270" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [127:96] for SHA-512 / SHA512_HMAC Key [927:896] for HMAC key proc R: Intermediate / Inner Digest [127:96] for SHA-512 Result Digest/MAC Digest Digest [127:96] for SHA-512 " end="0" id="IDIGEST_M" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_IDIGEST_N" description="Public World Inner SHA-512 Digest " id="P_HASH512_IDIGEST_N" offset="0x1274" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [95:64] for SHA-512 / SHA512_HMAC Key [959:928] for HMAC key proc R: Intermediate / Inner Digest [95:64] for SHA-512 Result Digest/MAC Digest Digest [95:64] for SHA-512 " end="0" id="IDIGEST_N" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_IDIGEST_O" description="Public World Inner SHA-512 Digest " id="P_HASH512_IDIGEST_O" offset="0x1278" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [63:32] for SHA-512 / SHA512_HMAC Key [991:960] for HMAC key proc R: Intermediate / Inner Digest [63:32] for SHA-512 Result Digest/MAC Digest Digest [63:32] for SHA-512 " end="0" id="IDIGEST_O" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_IDIGEST_P" description="Public World Inner SHA-512 Digest " id="P_HASH512_IDIGEST_P" offset="0x127C" width="32">
    
  <bitfield begin="31" description="W: Inner / Initial Digest [31:0] for SHA-512 / SHA512_HMAC Key [1023:992] for HMAC key proc R: Intermediate / Inner Digest [31:0] for SHA-512 Result Digest/MAC Digest Digest [31:0] for SHA-512 " end="0" id="IDIGEST_P" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_DIGEST_COUNT" description="Public World SHA-512 Digest Count " id="P_HASH512_DIGEST_COUNT" offset="0x1280" width="32">
    
  <bitfield begin="31" description="W: Initial Digest Count ([31:7] only, [6:0] assumed 0) R: Result / IntermediateDigest Count " end="0" id="DIGEST_COUNT" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_MODE" description="Public World SHA-512 Hash Mode" id="P_HASH512_MODE" offset="0x1284" width="32">
    
  <bitfield begin="31" description="These bits should be written with zeroes and ignored on reads." end="8" id="RESERVED" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description="If set to 1, the HMAC Outer Hash is performed on the hash digest when the inner hash hash finished (block length exhausted and final hash performed if Close Hash is 1). This bit should normally be set together with Close Hash to finish the inner hash first, or Block Length should be zero (HMAC continue with the just outer hash to be done). Auto cleared internally when outer hash performed. " end="7" id="HMAC_OUTER_HASH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="6" description="If set to 1, an HMAC operation is started using the HMAC key that was loaded at the time HMAC Key Processing was last performed, provided that the P_HASH512_ODIGEST registers have not been overwritten since. This makes it possible to authenticate multiple blocks using the HMAC key without actually having to reload the key. Note that P_HASH512_DIGEST_COUNT is forced to 128 to indicate that the 128 byte key XOR ipad block has been processed first.  This bit should not be set together with bit 5.  " end="6" id="REUSE_HMAC_KEY" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="5" description="If set to 1, the hash core will perform HMAC key processing on the HMAC key (with block size length) loaded into the P_HASH512_IDIGEST:P_HASH512_ODIGEST register block. Once HMAC key processing is finished, this bit is automatically cleared and the resulting Inner and Outer digest is available from P_HASH512_IDIGEST and P_HASH512_ODIGEST respectively, after which regular hash processing (using P_HASH512_IDIGEST as initial digest) will commence until the Block Length is exhausted. Note that P_HASH_DIGEST512_COUNT is forced to 128 to indicate that the 128 byte key XOR ipad block has been processed first." end="5" id="HMAC_KEY_PROCESSING" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="If set to 1, then the hash/HMAC will be 'closed' at the end of the block, as per MD5/SHA-1/SHA-2 specification (i.e. appropriate padding is added).  If set to 0, then the hash/HMAC will not be closed and can be continued later. However, if the hash/HMAC is not closed then the Block Length MUST be a multiple of the hash bloc k size to ensure correct operation. Auto cleared internally when hash close operation starts." end="4" id="CLOSE_HASH" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="If set to 1, the initial digest register will be overwritten with the algorithm constants for the selected algorithm when hashing and the initial digest count register will be reset to 0. This will start a normal hash operation. When continuing an existing hash or when performing an HMAC operation, this register must be set to 0 and the intermediate/inner digest or HMAC key and digest count need to be written to the context input registers prior to writing P_HASH512_MODE. Auto cleared internally after first block processed. " end="3" id="USE_ALG_CONSTANTS" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="2" description="These bits select the hash algorithm to be used for processing: 000 - MD5 010 - SHA-1 100 - SHA-224 110 - SHA-256 001 - SHA-384 011 - SHA-512 " end="0" id="ALGORITHM" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="P_HASH512_LENGTH" description="Public World SHA-512 Block Length " id="P_HASH512_LENGTH" offset="0x1288" width="32">
    
  <bitfield begin="31" description="W: Block Length / Remaining Byte Count (bytes) R: Remaining Byte Count " end="0" id="LENGTH" rwaccess="RW" width="32"></bitfield>
  </register>
</module>
