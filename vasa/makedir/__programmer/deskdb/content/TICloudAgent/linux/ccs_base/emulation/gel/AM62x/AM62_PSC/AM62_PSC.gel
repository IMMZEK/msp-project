
/**
 * \file  AM62_PSC.gel
 *
 * \brief GEL File to control the power sleep controller on the AM62x
 */

/* Copyright (c) 2022, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */


/*
 * macro definitions for the MAIN_PSC
*/

/* power domain indices */
#define GP_CORE_CTL      0
#define PD_ICSSM         1
#define PD_CPSW          2
#define PD_A53_CLUSTER_0 3
#define PD_A53_0         4
#define PD_A53_1         5
#define PD_A53_2         6
#define PD_A53_3         7
#define PD_GPU           8
#define PD_DSS           9


/* lpsc indices */
#define LPSC_MAIN_ALWAYSON         0
#define LPSC_MAIN_DM               1
#define LPSC_DM_PBIST              2
#define LPSC_MAIN2DM_ISO           3
#define LPSC_DM2MAIN_ISO           4
#define LPSC_DM2MAIN_INFRA_ISO     5
#define LPSC_DM2CENTRAL_ISO        6
#define LPSC_CENTRAL2DM_ISO        7
#define LPSC_EMIF_LOCAL            9
#define LPSC_EMIF_CFG_ISO          10
#define LPSC_EMIF_DATA_ISO         11
#define LPSC_MAIN_USB0_ISO         12
#define LPSC_MAIN_USB1_ISO         13
#define LPSC_MAIN_TEST             14
#define LPSC_GPMC                  15
#define LPSC_MAIN_MCASP_0          17
#define LPSC_MAIN_MCASP_1          18
#define LPSC_MAIN_MCASP_2          19
#define LPSC_EMMC_8B               20
#define LPSC_EMMC_4B_0             21
#define LPSC_EMMC_4B_1             22
#define LPSC_USB_0                 23
#define LPSC_USB_1                 24
#define LPSC_CSI_RX_0              25
#define LPSC_DPHY_0                26
#define LPSC_SMS_COMMON            27
#define LPSC_FSS_OSPI              28
#define LPSC_TIFS                  29
#define LPSC_HSM                   30
#define LPSC_SA3UL                 31
#define LPSC_HSM_ISO               32
#define LPSC_DEBUGSS               33
#define LPSC_MAIN_IP               34
#define LPSC_MAIN_MCANSS_0         35
#define LPSC_GIC                   36
#define LPSC_MAIN_PBIST            37
#define LPSC_ICSSM                 40
#define LPSC_CPSW3G                41
#define LPSC_A53_CLUSTER_0         42
#define LPSC_A53_CLUSTER_0_PBIST_0 43
#define LPSC_A53_CLUSTER_0_PBIST_1 44
#define LPSC_A53_0                 45
#define LPSC_A53_1                 46
#define LPSC_A53_2                 47
#define LPSC_A53_3                 48
#define LPSC_GPU                   49
#define LPSC_GPU_PBIST             50
#define LPSC_DSS                   51

#define MAIN_SEC_MMR0_CFG0_BASE        0x45a00000UL
#define PM_CONFIG_OFFSET               0x9080
#define PM_STATUS_OFFSET               0x9090

/*
 * macro definitions for the MCU_PSC
*/

/* power domain indices */
#define GP_CORE_CTL_MCU              0
#define PD_MCU_M4F                   1

/* lpsc indices */
#define LPSC_MCU_ALWAYSON         0
#define LPSC_MAIN2MCU_ISO         1
#define LPSC_MCU2MAIN_ISO         2
#define LPSC_DM2SAFE_ISO          3
#define LPSC_MCU2DM_ISO           4
#define LPSC_MCU_TEST             5
#define LPSC_MCU_M4F              6
#define LPSC_MCU_MCANSS_0         7
#define LPSC_MCU_MCANSS_1         8
#define LPSC_MCU_COMMON           9

#define MCU_PSC_BASE				(0x04000000)
#define MAIN_PSC_BASE				(0x00400000)


#define MAIN_PSC_INDEX				0
#define MCU_PSC_INDEX		    	1

#define PSC_MDCTL00           		(0xA00)
#define PSC_MDSTAT00          		(0x800)
#define PSC_PDCTL00           		(0x300)
#define PSC_PDSTAT00          		(0x200)
#define PSC_PTCMD 					(0x120)
#define PSC_PTSTAT 					(0x128)

#define PSC_PD_OFF					(0x0)
#define PSC_PD_ON					(0x1)

#define PSC_SYNCRESETDISABLE		(0x0)
#define PSC_SYNCRESET 				(0x1)
#define PSC_DISABLE   				(0x2)
#define PSC_ENABLE    				(0x3)

#define PSC_TIMEOUT					(100)

#define MCU_PSC_MDCTL_BASE          MCU_PSC_BASE + PSC_MDCTL00
#define MCU_PSC_MDSTAT_BASE         MCU_PSC_BASE + PSC_MDSTAT00
#define MCU_PSC_PDCTL_BASE          MCU_PSC_BASE + PSC_PDCTL00
#define MCU_PSC_PDSTAT_BASE         MCU_PSC_BASE + PSC_PDSTAT00
#define MCU_PSC_PTCMD_BASE		    MCU_PSC_BASE + PSC_PTCMD
#define MCU_PSC_PTSTAT_BASE		    MCU_PSC_BASE + PSC_PTSTAT
#define MCU_PSC_PTCMD               MCU_PSC_PTCMD_BASE
#define MCU_PSC_PTSTAT              MCU_PSC_PTSTAT_BASE

#define MAIN_PSC_MDCTL_BASE    		MAIN_PSC_BASE + PSC_MDCTL00
#define MAIN_PSC_MDSTAT_BASE      	MAIN_PSC_BASE + PSC_MDSTAT00
#define MAIN_PSC_PDCTL_BASE       	MAIN_PSC_BASE + PSC_PDCTL00
#define MAIN_PSC_PDSTAT_BASE      	MAIN_PSC_BASE + PSC_PDSTAT00
#define MAIN_PSC_PTCMD_BASE			MAIN_PSC_BASE + PSC_PTCMD
#define MAIN_PSC_PTSTAT_BASE		MAIN_PSC_BASE + PSC_PTSTAT
#define MAIN_PSC_PTCMD             	MAIN_PSC_PTCMD_BASE
#define MAIN_PSC_PTSTAT 			MAIN_PSC_PTSTAT_BASE

/******************************************************************************
 *
 * NAME:
 *      Set_MAIN_PSC_State
 *
 * PURPOSE:
 *      Set a new power state for the specified power domain pd_id and module 
 *		domain md_id. Wait for the power transition to complete.
 *
 * USAGE:
 *      This routine can be called as:
 *
 *      Set_MAIN_PSC_State(unsigned int pd_id, unsigned int md_id, unsigned int pd_state, unsigned int md_state)
 *
 *      pd_id - (i) power domain id
 *
 *      md_id - (i) module domain id
 *
 *		pd_state - (i) new power domain state value to set
 *					0 = PSC_PD_OFF
 *					1 = PSC_PD_ON
 *
 *      md_state - (i) new module domain state value to set
 *                  0 = PSC_SYNCRESETDISABLE (IP reset asserted and clock gated)
 *                  1 = PSC_SYNCRESET (IP reset asserted and clock running)
 *                  2 = PSC_DISABLE (IP reset released and clock gated, MMRs retained)
 *                  3 = PSC_ENABLE (IP reset released and clock running)
 * 
 * RETURN VALUE:
 *      0 if ok, !=0 for error
 *
 * REFERENCE:
 *
 *****************************************************************************/
 Set_MAIN_PSC_State(unsigned int pd_id, unsigned int md_id, unsigned int pd_state, unsigned int md_state)
{
	unsigned int* mdctl;
	unsigned int* mdstat;
	unsigned int* pdctl;
	unsigned int* pdstat;	
	
	unsigned int loop_cnt = 0;
	unsigned int ret = 1;
    
	unsigned int address_offset = AddrOffset();
    
  	mdctl = (unsigned int*)(MAIN_PSC_MDCTL_BASE + ( 4 * md_id ) + address_offset);
	mdstat = (unsigned int*)(MAIN_PSC_MDSTAT_BASE + ( 4 * md_id )+ address_offset);
	pdctl = (unsigned int*)(MAIN_PSC_PDCTL_BASE + ( 4 * pd_id ) + address_offset);
	pdstat = (unsigned int*)(MAIN_PSC_PDSTAT_BASE + ( 4 * pd_id )+ address_offset);	

	GEL_TextOut("mdctl %x\n",,,,,mdctl);
    GEL_TextOut("mdstat %x\n",,,,,mdstat);
    GEL_TextOut("pdctl %x\n",,,,,pdctl);
    GEL_TextOut("pdstat %x\n",,,,,pdstat);

	// If state is already set, do nothing
	if ( (( *pdstat & 0x1 ) == pd_state) && (( *mdstat & 0x1f ) == md_state) )
	{
        
		GEL_TextOut( "No change needed.\n");
		ret = 1;
		return ret;
	}

	// Wait for GOSTAT to clear
	while( (loop_cnt < PSC_TIMEOUT) && (*(unsigned int*)(MAIN_PSC_PTSTAT+address_offset) & (0x1 << pd_id)) != 0 )
	{
		loop_cnt++;
	}
	
	// Check if we got timeout error while waiting
	if (loop_cnt >= PSC_TIMEOUT)
	{
		GEL_TextOut( "Timeout Error. State not changed.\n");
		ret = 0;
		return ret;
	}
	
	// Set PDCTL NEXT to new state
	*pdctl = ((*pdctl) & ~(0x1)) | pd_state;	
	GEL_TextOut("pd_state = %x\n",,,,,pd_state);

	// Set MDCTL NEXT to new state
	*mdctl = ((*mdctl) & ~(0x1f)) | md_state;
	GEL_TextOut("md_state = %x\n",,,,,md_state);
	
	// Start power transition by setting PTCMD GO to 1
	*((unsigned int*)(MAIN_PSC_PTCMD+address_offset)) = (*(unsigned int*)(MAIN_PSC_PTCMD+address_offset)) | (0x1<<pd_id);
	GEL_TextOut ("%x = 1<<%x\n",,,,,MAIN_PSC_PTCMD+address_offset,pd_id);
	loop_cnt = 0;

	// Wait for PTSTAT GOSTAT to clear
	while( (loop_cnt < PSC_TIMEOUT) && (*(unsigned int*)(MAIN_PSC_PTSTAT+address_offset) & (0x1 << pd_id)) != 0 )
	{
		loop_cnt++;
	}			

	// Check if we got timeout error while waiting
	if (loop_cnt >= PSC_TIMEOUT)
	{
		GEL_TextOut( "Timeout Error. State not changed.\n");
		ret = 0;
		return ret;		
	}

	// Verify power domain and module domain state got changed
	if ( (( *pdstat & 0x1 ) == pd_state) && (( *mdstat & 0x1f ) == md_state) )
	{
		GEL_TextOut( "Power domain and module state changed successfully.\n");
		ret = 1;
	}
	if (( *pdstat & 0x1 ) != pd_state)
	{
		GEL_TextOut( "ERROR: PSC power domain state NOT changed!\n");
		ret = 0;
	}
	if (( *mdstat & 0x1f ) != md_state)
	{
		GEL_TextOut( "ERROR: module state NOT changed!\n");
		ret = 0;
	}
	
	return ret;
}

/******************************************************************************
 *
 * NAME:
 *      Set_MCU_PSC_State
 *
 * PURPOSE:
 *      Set a new power state for the specified power domain pd_id and module 
 *		domain md_id. Wait for the power transition to complete.
 *
 * USAGE:
 *      This routine can be called as:
 *
 *      Set_MCU_PSC_State(unsigned int pd_id, unsigned int md_id, unsigned int pd_state, unsigned int md_state)
 *
 *      pd_id - (i) power domain id
 *
 *      md_id - (i) module domain id
 *
 *		pd_state - (i) new power domain state value to set
 *					0 = PSC_PD_OFF
 *					1 = PSC_PD_ON
 *
 *      md_state - (i) new module domain state value to set
 *                  0 = PSC_SYNCRESETDISABLE (IP reset asserted and clock gated)
 *                  1 = PSC_SYNCRESET (IP reset asserted and clock running)
 *                  2 = PSC_DISABLE (IP reset released and clock gated, MMRs retained)
 *                  3 = PSC_ENABLE (IP reset released and clock running)
 * 
 * RETURN VALUE:
 *      0 if ok, !=0 for error
 *
 * REFERENCE:
 *
 *****************************************************************************/
 Set_MCU_PSC_State(unsigned int pd_id, unsigned int md_id, unsigned int pd_state, unsigned int md_state)
{
	unsigned int* mdctl;
	unsigned int* mdstat;
	unsigned int* pdctl;
	unsigned int* pdstat;	
	
	unsigned int loop_cnt = 0;
	unsigned int ret = 1;
    
	unsigned int address_offset = AddrOffset();
    
 	mdctl  = (unsigned int*)(MCU_PSC_MDCTL_BASE + ( 4 * md_id ) + address_offset);
	mdstat = (unsigned int*)(MCU_PSC_MDSTAT_BASE + ( 4 * md_id ) + address_offset);
	pdctl  = (unsigned int*)(MCU_PSC_PDCTL_BASE + ( 4 * pd_id ) + address_offset);
	pdstat = (unsigned int*)(MCU_PSC_PDSTAT_BASE + ( 4 * pd_id ) + address_offset);	

	// If state is already set, do nothing
	if ( (( *pdstat & 0x1 ) == pd_state) && (( *mdstat & 0x1f ) == md_state) )
	{
		GEL_TextOut( "No change needed.\n");
		ret = 1;
		return ret;
	}

	// Wait for GOSTAT to clear
	while( (loop_cnt < PSC_TIMEOUT) && (*((unsigned int*)(MCU_PSC_PTSTAT+address_offset)) & (0x1 << pd_id)) != 0 )
	{
		loop_cnt++;
	}
	
	// Check if we got timeout error while waiting
	if (loop_cnt >= PSC_TIMEOUT)
	{
		GEL_TextOut( "ERROR: Timeout. You are likely attempting to modify the Power Sleep Controller\n");
		GEL_TextOut( "       across a voltage crossing which is currently powered off.\n");
        GEL_TextOut( "       Consult the CBASS connectivity diagram and the PSC IP dictionary for more\n");
        GEL_TextOut( "       information.\n");      
        ret = 0;
		return ret;
	}
	
	// Set PDCTL NEXT to new state
	*pdctl = ((*pdctl) & ~(0x1)) | pd_state;	

	// Set MDCTL NEXT to new state
	*mdctl = ((*mdctl) & ~(0x1f)) | md_state;
	
	// Start power transition by setting PTCMD GO to 1
	(*(unsigned int*)(MCU_PSC_PTCMD + address_offset)) = (*(unsigned int*)(MCU_PSC_PTCMD + address_offset)) | (0x1<<pd_id);
	
	loop_cnt = 0;

	// Wait for PTSTAT GOSTAT to clear
	while( (loop_cnt < PSC_TIMEOUT) && (*((unsigned int*)(MCU_PSC_PTSTAT+address_offset)) & (0x1 << pd_id)) != 0 )
	{
		loop_cnt++;
	}			

	// Check if we got timeout error while waiting
	if (loop_cnt >= PSC_TIMEOUT)
	{
		GEL_TextOut( "Timeout Error. State not changed.\n");
		ret = 0;
		return ret;		
	}

	// Verify power domain and module domain state got changed
	if ( (( *pdstat & 0x1 ) == pd_state) && (( *mdstat & 0x1f ) == md_state) )
	{
		GEL_TextOut( "Power domain and module state changed successfully.\n");
		ret = 1;
	}
	if (( *pdstat & 0x1 ) != pd_state)
	{
		GEL_TextOut( "ERROR: PSC power domain state NOT changed!\n");
		ret = 0;
	}
	if (( *mdstat & 0x1f ) != md_state)
	{
		GEL_TextOut( "ERROR: module state NOT changed!\n");
		ret = 0;
	}
	
	return ret;
}

 Get_MAIN_PSC_State( unsigned int pd_id, unsigned int md_id )
{
	unsigned int* mdctl;
	unsigned int* mdstat;
	unsigned int* pdstat;	

	unsigned int pt_state;			
	unsigned int pd_state;
	unsigned int md_state;
    
	unsigned int address_offset = AddrOffset();
    
	mdstat = (unsigned int*)(MAIN_PSC_MDSTAT_BASE + ( 4 * md_id ) + address_offset);
	pdstat = (unsigned int*)(MAIN_PSC_PDSTAT_BASE + ( 4 * pd_id ) + address_offset);	
	
	pt_state = *(unsigned int*)(MAIN_PSC_PTSTAT+address_offset) & (0x1 << pd_id);	
	pd_state = *pdstat & 0x1;	
	md_state = *mdstat & 0x1f;
    
    if (pd_state == PSC_PD_OFF)
    {
        GEL_TextOut( "Power Domain: Off\n ");
    }
    else if (pd_state == PSC_PD_ON)
    {
        GEL_TextOut( "Power Domain: On\n ");
    }
    else
    {
        GEL_TextOut( "Power Domain: ERR\n ");
    }
    
    if (md_state == PSC_SYNCRESETDISABLE)
    {
        GEL_TextOut( "Module State: SyncResetDisable\n ");
    }
    else if (md_state == PSC_SYNCRESET)
    {   
        GEL_TextOut( "Module State: SyncReset\n ");
    }
    else if (md_state == PSC_DISABLE)
    {
        GEL_TextOut( "Module State: Disable\n ");
    }
    else if (md_state == PSC_ENABLE)
    {
        GEL_TextOut( "Module State: Enable\n ");
    }
    else
    {
        GEL_TextOut( "Module State: Error\n ");
    }
    
    return 1;
}

 Get_MCU_PSC_State( unsigned int pd_id, unsigned int md_id )
{
	unsigned int* mdctl;
	unsigned int* mdstat;
	unsigned int* pdstat;	

	unsigned int pt_state;			
	unsigned int pd_state;
	unsigned int md_state;
    
	unsigned int address_offset = AddrOffset();
    	
	mdstat = (unsigned int*)(MCU_PSC_MDSTAT_BASE + ( 4 * md_id ) + address_offset);
	pdstat = (unsigned int*)(MCU_PSC_PDSTAT_BASE + ( 4 * pd_id ) + address_offset);	
	
	pt_state = *((unsigned int*)(MCU_PSC_PTSTAT+address_offset)) & (0x1 << pd_id);	
	pd_state = *pdstat & 0x1;	
	md_state = *mdstat & 0x1f;

	    if (pd_state == PSC_PD_OFF)
    {
        GEL_TextOut( "Power Domain: Off\n");
    }
    else if (pd_state == PSC_PD_ON)
    {
        GEL_TextOut( "Power Domain: On\n");
    }
    else
    {
        GEL_TextOut( "Power Domain: ERR\n");
    }
    
    if (md_state == PSC_SYNCRESETDISABLE)
    {
        GEL_TextOut( "Module State: SyncResetDisable\n ");
    }
    else if (md_state == PSC_SYNCRESET)
    {   
        GEL_TextOut( "Module State: SyncReset\n ");
    }
    else if (md_state == PSC_DISABLE)
    {
        GEL_TextOut( "Module State: Disable\n ");
    }
    else if (md_state == PSC_ENABLE)
    {
        GEL_TextOut( "Module State: Enable\n ");
    }
    else
    {
        GEL_TextOut( "Module State: Error\n ");
    }
    
    return 1;
}

change_MCU_M4_LRST(int enable) {
    unsigned int* mdctl;

    unsigned int loop_cnt = 0;
    unsigned int ret = 1;

    unsigned int address_offset = AddrOffset();

    mdctl  = (unsigned int*)(MCU_PSC_MDCTL_BASE + ( 4 * LPSC_MCU_M4F ) + address_offset);

    if(enable==1) {
        *mdctl = ((*mdctl) & ~(0x100));
    } else {
        *mdctl = ((*mdctl) | (0x100));
    }
}

change_HSM_M4_LRST(int enable) {
    unsigned int* mdctl;

    unsigned int loop_cnt = 0;
    unsigned int ret = 1;
    
    unsigned int* mdstat;
    unsigned int mdstat_lrstz=0;

    unsigned int address_offset = AddrOffset();

    //LPSC_HSM
    mdctl  = (unsigned int*)(MAIN_PSC_MDCTL_BASE + ( 4 * LPSC_HSM ) + address_offset);

    if(enable==1) {
        *mdctl = ((*mdctl) & ~(0x100));
    } else {
        *mdctl = ((*mdctl) | (0x100));
    }
    
    mdstat = (unsigned int*)(MAIN_PSC_MDSTAT_BASE + ( 4 * LPSC_HSM )+ address_offset);
    mdstat_lrstz = (*mdstat >> 8) & 0x1;
            
    if(mdstat_lrstz == 1)
        GEL_TextOut( "LPSC_HSM: Local Reset Released\n");
    else
        GEL_TextOut( "LPSC_HSM: Local Reset Asserted\n");
}


menuitem "Power Sleep Controller/PSC Version: 2019-10-31";
hotmenu PSC_Get_Version()
{
    int status = 1;    GEL_TextOut( "This version of the PSC gel file generated on: 2019-10-31");
    return status;
}

// Common PSC Power Controls

menuitem "Power Sleep Controller/Common PSC Power Controls";

hotmenu Set_PSC_All_On()
{
    int status = 1;    GEL_TextOut( "Powering up all PSC power domains in progress...\n");
    status = MAIN_PSC_Peripheral_PowerUp();
    status = MCU_PSC_Peripheral_PowerUp();    
    GEL_TextOut( "Powering up all PSC power domains done!\n");   
    return status;
}


hotmenu Get_PSC_All_States()
{
    int status = 1;    GEL_TextOut( "Getting all PSC power states in progress... \n");
	status = Get_MAIN_PSC_Peripheral_States();
	status = Get_MCU_PSC_Peripheral_States();
    GEL_TextOut( "Getting all PSC power states done. \n");
    return status;
}

menuitem "Power Sleep Controller/MAIN PSC Power Controls";

hotmenu MAIN_PSC_Peripheral_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up MAIN domain peripherals...\n");
	status = GP_CORE_CTL_PowerUp();
	status = PD_ICSSM_PowerUp();
	status = PD_CPSW_PowerUp();
	status = PD_A53_CLUSTER_0_PowerUp();
	status = PD_A53_0_PowerUp();
	status = PD_A53_1_PowerUp();
	status = PD_A53_2_PowerUp();
	status = PD_A53_3_PowerUp();
	status = PD_GPU_PowerUp();
	status = PD_DSS_PowerUp();
    GEL_TextOut( "Powering up all MAIN domain peripherals done. \n");
    return status;
}



hotmenu Get_MAIN_PSC_Peripheral_States()
{
    int status = 1;    GEL_TextOut( "Getting all MAIN PSC peripheral states in progress......\n");
    GEL_TextOut( "State of LPSC_MAIN_ALWAYSON\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_ALWAYSON);
    GEL_TextOut( "State of LPSC_MAIN_DM\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_DM);
    GEL_TextOut( "State of LPSC_DM_PBIST\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_DM_PBIST);
    GEL_TextOut( "State of LPSC_MAIN2DM_ISO\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN2DM_ISO);
    GEL_TextOut( "State of LPSC_DM2MAIN_ISO\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_DM2MAIN_ISO);
    GEL_TextOut( "State of LPSC_DM2MAIN_INFRA_ISO\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_DM2MAIN_INFRA_ISO);
    GEL_TextOut( "State of LPSC_DM2CENTRAL_ISO\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_DM2CENTRAL_ISO);
    GEL_TextOut( "State of LPSC_CENTRAL2DM_ISO\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_CENTRAL2DM_ISO);
    GEL_TextOut( "State of LPSC_EMIF_LOCAL\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMIF_LOCAL);
    GEL_TextOut( "State of LPSC_EMIF_CFG_ISO\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMIF_CFG_ISO);
    GEL_TextOut( "State of LPSC_EMIF_DATA_ISO\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMIF_DATA_ISO);
    GEL_TextOut( "State of LPSC_MAIN_USB0_ISO\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_USB0_ISO);
    GEL_TextOut( "State of LPSC_MAIN_USB1_ISO\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_USB1_ISO);
    GEL_TextOut( "State of LPSC_MAIN_TEST\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_TEST);
    GEL_TextOut( "State of LPSC_GPMC\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_GPMC);
    GEL_TextOut( "State of LPSC_MAIN_MCASP_0\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_MCASP_0);
    GEL_TextOut( "State of LPSC_MAIN_MCASP_1\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_MCASP_1);
    GEL_TextOut( "State of LPSC_MAIN_MCASP_2\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_MCASP_2);
    GEL_TextOut( "State of LPSC_EMMC_8B\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMMC_8B);
    GEL_TextOut( "State of LPSC_EMMC_4B_0\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMMC_4B_0);
    GEL_TextOut( "State of LPSC_EMMC_4B_1\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMMC_4B_1);
    GEL_TextOut( "State of LPSC_USB_0\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_USB_0);
    GEL_TextOut( "State of LPSC_USB_1\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_USB_1);
    GEL_TextOut( "State of LPSC_CSI_RX_0\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_CSI_RX_0);
    GEL_TextOut( "State of LPSC_DPHY_0\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_DPHY_0);
    GEL_TextOut( "State of LPSC_SMS_COMMON\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_SMS_COMMON);
    GEL_TextOut( "State of LPSC_FSS_OSPI\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_FSS_OSPI);
    GEL_TextOut( "State of LPSC_TIFS\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_TIFS);
    GEL_TextOut( "State of LPSC_HSM\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_HSM);
    GEL_TextOut( "State of LPSC_SA3UL\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_SA3UL);
    GEL_TextOut( "State of LPSC_HSM_ISO\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_HSM_ISO);
    GEL_TextOut( "State of LPSC_DEBUGSS\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_DEBUGSS);
    GEL_TextOut( "State of LPSC_MAIN_IP\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_IP);
    GEL_TextOut( "State of LPSC_MAIN_MCANSS_0\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_MCANSS_0);
    GEL_TextOut( "State of LPSC_GIC\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_GIC);
    GEL_TextOut( "State of LPSC_HSM\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_HSM);
    GEL_TextOut( "State of LPSC_MAIN_PBIST\n");
    status &= Get_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_PBIST);
    GEL_TextOut( "State of LPSC_ICSSM\n");
    status &= Get_MAIN_PSC_State( PD_ICSSM, LPSC_ICSSM);
    GEL_TextOut( "State of LPSC_CPSW3G\n");
    status &= Get_MAIN_PSC_State( PD_CPSW, LPSC_CPSW3G);
    GEL_TextOut( "State of LPSC_A53_CLUSTER_0\n");
    status &= Get_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0);
    GEL_TextOut( "State of LPSC_A53_CLUSTER_0_PBIST_0\n");
    status &= Get_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST_0);
    GEL_TextOut( "State of LPSC_A53_CLUSTER_0_PBIST_1\n");
    status &= Get_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST_1);
    GEL_TextOut( "State of LPSC_A53_0\n");
    status &= Get_MAIN_PSC_State( PD_A53_0, LPSC_A53_0);
    GEL_TextOut( "State of LPSC_A53_1\n");
    status &= Get_MAIN_PSC_State( PD_A53_1, LPSC_A53_1);
    GEL_TextOut( "State of LPSC_A53_2\n");
    status &= Get_MAIN_PSC_State( PD_A53_2, LPSC_A53_2);
    GEL_TextOut( "State of LPSC_A53_3\n");
    status &= Get_MAIN_PSC_State( PD_A53_3, LPSC_A53_3);
    GEL_TextOut( "State of LPSC_GPU\n");
    status &= Get_MAIN_PSC_State( PD_GPU, LPSC_GPU);
    GEL_TextOut( "State of LPSC_GPU_PBIST\n");
    status &= Get_MAIN_PSC_State( PD_GPU, LPSC_GPU_PBIST);
    GEL_TextOut( "State of LPSC_DSS\n");
    status &= Get_MAIN_PSC_State( PD_DSS, LPSC_DSS);
    GEL_TextOut( "Getting the state of all MAIN peripherals done. \n");
    return status;
}

menuitem "Power Sleep Controller/MCU PSC Power Controls";

hotmenu MCU_PSC_Peripheral_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up MCU Domain peripherals. \n");
	status = GP_Core_CTL_MCU_PowerUp();
	status = PD_MCU_M4F_PowerUp();
    GEL_TextOut( "Powering up MCU Domain peripherals done. \n");
    return status;
}

hotmenu Get_MCU_PSC_Peripheral_States()
{
    int status = 1;    GEL_TextOut( "Getting all MCU peripheral states in progress......\n");
    GEL_TextOut( "State of LPSC_MCU_ALWAYSON\n");
    status &= Get_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MCU_ALWAYSON);
    GEL_TextOut( "State of LPSC_MAIN2MCU_ISO\n");
    status &= Get_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MAIN2MCU_ISO);
    GEL_TextOut( "State of LPSC_MCU2MAIN_ISO\n");
    status &= Get_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MCU2MAIN_ISO);
    GEL_TextOut( "State of LPSC_DM2SAFE_ISO\n");
    status &= Get_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_DM2SAFE_ISO);
        GEL_TextOut( "State of LPSC_MCU2DM_ISO\n");
    status &= Get_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MCU2DM_ISO);
    GEL_TextOut( "State of LPSC_MCU_TEST\n");
    status &= Get_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MCU_TEST);
    GEL_TextOut( "State of LPSC_MCU_M4F\n");
    status &= Get_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_M4F);
        GEL_TextOut( "State of LPSC_MCU_MCANSS_0\n");
    status &= Get_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_MCANSS_0);
        GEL_TextOut( "State of LPSC_MCU_MCANSS_1\n");
    status &= Get_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_MCANSS_1);
        GEL_TextOut( "State of LPSC_MCU_COMMON\n");
    status &= Get_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_COMMON);
    GEL_TextOut( "Getting the state of all MCU peripherals done. \n");
    return status;
}

menuitem "Power Sleep Controller/Power Up by Power Domain Controls";

hotmenu GP_CORE_CTL_PowerUp()
{
	int status = 1;    GEL_TextOut( "Powering up GP_CORE_CTL. \n");
    
    GEL_TextOut( "Powering up LPSC_MAIN_DM\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_DM, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_DM2MAIN_ISO\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_DM2MAIN_ISO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN_IP\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_IP, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_EMIF_LOCAL\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMIF_LOCAL, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_GPMC\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_GPMC, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN_MCASP_0\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_MCASP_0, PSC_PD_ON, PSC_ENABLE);
	GEL_TextOut( "Powering up LPSC_MAIN_MCASP_1\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_MCASP_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN_MCASP_2\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_MCASP_2, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_EMMC_8B\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMMC_8B, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_EMMC_4B_0\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMMC_4B_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_EMMC_4B_1\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMMC_4B_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_USB_0\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_USB_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_USB_1\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_USB_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_DPHY_0\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_DPHY_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_CSI_RX_0\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_CSI_RX_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_FSS_OSPI\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_FSS_OSPI, PSC_PD_ON, PSC_ENABLE);
    //GEL_TextOut( "Powering up LPSC_DEBUGSS\n");
    //status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_DEBUGSS, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN_MCANSS_0\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_MCANSS_0, PSC_PD_ON, PSC_ENABLE);
	//GEL_TextOut( "Powering up LPSC_GIC\n");
    //status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_GIC, PSC_PD_ON, PSC_ENABLE);
    //GEL_TextOut( "Powering up LPSC_MAIN_PBIST\n");
    //status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_PBIST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_SMS_COMMON\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_SMS_COMMON, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_TIFS\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_TIFS, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_HSM\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_HSM, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_SA3UL\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_SA3UL, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_HSM_ISO\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_HSM_ISO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_EMIF_CFG_ISO\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMIF_CFG_ISO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_EMIF_DATA_ISO\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMIF_DATA_ISO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN_USB0_ISO\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_USB0_ISO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN_USB1_ISO\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_USB1_ISO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_DM2MAIN_INFRA_ISO\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_DM2MAIN_INFRA_ISO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN2DM_ISO\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN2DM_ISO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_DM2CENTRAL_ISO\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_DM2CENTRAL_ISO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_CENTRAL2DM_ISO\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_CENTRAL2DM_ISO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_DM_PBIST\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_DM_PBIST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN_TEST\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_MAIN_TEST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up GP_CORE_CTL done. \n");
    return status;
}

hotmenu PD_ICSSM_PowerUp()
{
	int status = 1;		GEL_TextOut( "Powering up PD_ICSSM\n");
	GEL_TextOut( "Powering up LPSC_ICSSM\n");
    status &= Set_MAIN_PSC_State( PD_ICSSM, LPSC_ICSSM, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_ICSSM done. \n");
}

hotmenu PD_CPSW_PowerUp()
{
	int status = 1;		GEL_TextOut( "Powering up PD_CPSW\n");
	GEL_TextOut( "Powering up LPSC_CPSW3G\n");
    status &= Set_MAIN_PSC_State( PD_CPSW, LPSC_CPSW3G, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_CPSW done. \n");
}

hotmenu PD_A53_CLUSTER_0_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_A53_CLUSTER_0. \n");
    GEL_TextOut( "Powering up LPSC_A53_CLUSTER_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_A53_CLUSTER_0_PBIST\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_A53_CLUSTER_1_PBIST\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_A53_CLUSTER_0 done. \n");
    return status;
}

hotmenu PD_A53_0_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_A53_0. \n");
    GEL_TextOut( "Powering up LPSC_A53_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_0, LPSC_A53_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_A53_0 done. \n");
    return status;
}

hotmenu PD_A53_1_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_A53_1. \n");
    GEL_TextOut( "Powering up LPSC_A53_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_1, LPSC_A53_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_A53_1 done. \n");
    return status;
}

hotmenu PD_A53_2_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_A53_2. \n");
    GEL_TextOut( "Powering up LPSC_A53_2\n");
    status &= Set_MAIN_PSC_State( PD_A53_2, LPSC_A53_2, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_A53_2 done. \n");
    return status;
}

hotmenu PD_A53_3_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_A53_3. \n");
    GEL_TextOut( "Powering up LPSC_A53_3\n");
    status &= Set_MAIN_PSC_State( PD_A53_3, LPSC_A53_3, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_A53_3 done. \n");
    return status;
}

hotmenu PD_GPU_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_GPU. \n");
    GEL_TextOut( "Powering up LPSC_GPU\n");
    status &= Set_MAIN_PSC_State( PD_GPU,LPSC_GPU, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_GPU_PBIST\n");
    status &= Set_MAIN_PSC_State( PD_GPU,LPSC_GPU_PBIST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_GPU done. \n");
    return status;
}

hotmenu PD_DSS_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_DSS. \n");
    GEL_TextOut( "Powering up LPSC_DSS\n");
    status &= Set_MAIN_PSC_State( PD_DSS, LPSC_DSS, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_DSS done. \n");
    return status;
}

hotmenu GP_Core_CTL_MCU_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up GP_CORE_CTL_MCU. \n");
    GEL_TextOut( "Powering up LPSC_MCU2MAIN_ISO\n");
    status &= Set_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MCU2MAIN_ISO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_DM2SAFE_ISO\n");
    status &= Set_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_DM2SAFE_ISO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU2DM_ISO\n");
    status &= Set_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MCU2DM_ISO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_TEST\n");
    status &= Set_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MCU_TEST, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MAIN2MCU_ISO\n");
    status &= Set_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MAIN2MCU_ISO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up GP_CORE_CTL_MCU done. \n");
    return status;
}

hotmenu PD_MCU_M4F_PowerUp()
{
    int status = 1;    GEL_TextOut( "Powering up PD_MCU_M4F. \n");
    GEL_TextOut( "Powering up LPSC_MCU_COMMON\n");
    status &= Set_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_COMMON, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_M4F\n");
    status &= Set_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_M4F, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_MCANSS_0\n");
    status &= Set_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_MCANSS_0, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_MCU_MCANSS_1\n");
    status &= Set_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_MCANSS_1, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up PD_MCU_M4F done. \n");
    return status;
}

menuitem "Power Sleep Controller/Clock Gate by Power Domain Controls";

/* Clock Gating the A53s can only be done if the cores are in WFI */
hotmenu PD_A53_0_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock Gating PD_A53_0. \n");
    GEL_TextOut( "Clock Gating LPSC_A53_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_0, LPSC_A53_0, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_A53_0 done. \n");
    return status;
}

hotmenu PD_A53_1_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock Gating PD_A53_1. \n");
    GEL_TextOut( "Clock Gating LPSC_A53_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_1, LPSC_A53_1, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_A53_1 done. \n");
    return status;
}

hotmenu PD_A53_2_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock Gating PD_A53_2. \n");
    GEL_TextOut( "Clock Gating LPSC_A53_2\n");
    status &= Set_MAIN_PSC_State( PD_A53_2, LPSC_A53_2, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_A53_2 done. \n");
    return status;
}

hotmenu PD_A53_3_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock Gating PD_A53_3. \n");
    GEL_TextOut( "Clock Gating LPSC_A53_3\n");
    status &= Set_MAIN_PSC_State( PD_A53_3, LPSC_A53_3, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_A53_3 done. \n");
    return status;
}

hotmenu PD_ICSSM_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock Gating PD_ICSSM. \n");
    GEL_TextOut( "Clock Gating LPSC_ICSSM\n");
    status &= Set_MAIN_PSC_State( PD_ICSSM, LPSC_ICSSM, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_ICSSM done. \n");
    return status;
}

hotmenu PD_CPSW_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock Gating PD_CPSW. \n");
    GEL_TextOut( "Clock Gating LPSC_CPSW3G\n");
    status &= Set_MAIN_PSC_State( PD_CPSW, LPSC_CPSW3G, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_CPSW done. \n");
    return status;
}

hotmenu PD_GPU_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock Gating PD_GPU. \n");
    GEL_TextOut( "Clock Gating LPSC_GPU\n");
    status &= Set_MAIN_PSC_State( PD_GPU, LPSC_GPU, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_GPU\n");
    status &= Set_MAIN_PSC_State( PD_GPU, LPSC_GPU_PBIST, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_GPU done. \n");
    return status;
}

hotmenu PD_DSS_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock Gating PD_DSS. \n");
    GEL_TextOut( "Clock Gating LPSC_DSS\n");
    status &= Set_MAIN_PSC_State( PD_DSS, LPSC_DSS, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_DSS done. \n");
    return status;
}

hotmenu GP_Core_CTL_MCU_ClockGate()                 
{
    int status = 1;    GEL_TextOut( "Clock Gating GP_CORE_CTL_MCU. \n");
    GEL_TextOut( "Clock Gating LPSC_MCU_TEST\n");
    status &= Set_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MCU_TEST, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MAIN2MCU_ISO\n");
    status &= Set_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MAIN2MCU_ISO, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MCU2MAIN_ISO\n");
    status &= Set_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MCU2MAIN_ISO, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating LPSC_MCU2DM_ISO\n");
    status &= Set_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MCU2DM_ISO, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating GP_CORE_CTL_MCU done. \n");
    return status;
}

/* Note: Clokc gating MCU M4F can only be done if the cores is in WFI */
hotmenu PD_MCU_M4F_ClockGate()
{
    int status = 1;    GEL_TextOut( "Clock Gating PD_MCU_M4F. \n");
    GEL_TextOut( "Clock Gating LPSC_MCU_M4F\n");
    status &= Set_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_M4F, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Powering up LPSC_MCU_MCANSS_0\n");
    status &= Set_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_MCANSS_0, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Powering up LPSC_MCU_MCANSS_1\n");
    status &= Set_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_MCANSS_1, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Powering up LPSC_MCU_COMMON\n");
    status &= Set_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_COMMON, PSC_PD_ON, PSC_DISABLE);
    GEL_TextOut( "Clock Gating PD_MCU_M4F done. \n");
    return status;
}

menuitem "Power Sleep Controller/Reset by Power Domain Controls";

/* Resetting the A53s can only be done if the cores are in WFI */            
hotmenu PD_A53_0_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_A53_0. \n");
    GEL_TextOut( "Resetting LPSC_A53_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_0, LPSC_A53_0, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_A53_0 done. \n");
    return status;
}

hotmenu PD_A53_1_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_A53_1. \n");
    GEL_TextOut( "Resetting LPSC_A53_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_1, LPSC_A53_1, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_A53_1 done. \n");
    return status;
}

hotmenu PD_A53_2_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_A53_2. \n");
    GEL_TextOut( "Resetting LPSC_A53_2\n");
    status &= Set_MAIN_PSC_State( PD_A53_2, LPSC_A53_2, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_A53_2 done. \n");
    return status;
}

hotmenu PD_A53_3_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_A53_3. \n");
    GEL_TextOut( "Resetting LPSC_A53_3\n");
    status &= Set_MAIN_PSC_State( PD_A53_3, LPSC_A53_3, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_A53_3 done. \n");
    return status;
}

hotmenu PD_ICSSM_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_ICSSM. \n");
    GEL_TextOut( "Resetting LPSC_ICSSM\n");
    status &= Set_MAIN_PSC_State( PD_ICSSM, LPSC_ICSSM, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_ICSSM done. \n");
    return status;
}

hotmenu PD_CPSW_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_CPSW. \n");
    GEL_TextOut( "Resetting LPSC_CPSW3G\n");
    status &= Set_MAIN_PSC_State( PD_CPSW, LPSC_CPSW3G, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_CPSW done. \n");
    return status;
}

hotmenu PD_GPU_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_GPU. \n");
    GEL_TextOut( "Resetting LPSC_GPU\n");
    status &= Set_MAIN_PSC_State( PD_GPU, LPSC_GPU, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_GPU\n");
    status &= Set_MAIN_PSC_State( PD_GPU, LPSC_GPU_PBIST, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_GPU done. \n");
    return status;
}

hotmenu PD_DSS_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_DSS. \n");
    GEL_TextOut( "Resetting LPSC_DSS\n");
    status &= Set_MAIN_PSC_State( PD_DSS, LPSC_DSS, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_DSS done. \n");
    return status;
}

hotmenu GP_Core_CTL_MCU_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting GP_CORE_CTL_MCU. \n");
    GEL_TextOut( "Resetting LPSC_MCU_TEST\n");
    status &= Set_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MCU_TEST, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MAIN2MCU_ISO\n");
    status &= Set_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MAIN2MCU_ISO, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MCU2MAIN_ISO\n");
    status &= Set_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MCU2MAIN_ISO, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MCU2DM_ISO\n");
    status &= Set_MCU_PSC_State( GP_CORE_CTL_MCU, LPSC_MCU2DM_ISO, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting GP_CORE_CTL_MCU done. \n");
    return status;
}

/* Note: Resetting the MCU M4F can only be done if the cores is in WFI */
hotmenu PD_MCU_M4F_Reset()
{
    int status = 1;    GEL_TextOut( "Resetting PD_MCU_M4F. \n");
    GEL_TextOut( "Resetting LPSC_MCU_M4F\n");
    status &= Set_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_M4F, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MCU_MCANSS_0\n");
    status &= Set_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_MCANSS_0, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MCU_MCANSS_1\n");
    status &= Set_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_MCANSS_1, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting LPSC_MCU_COMMON\n");
    status &= Set_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_COMMON, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Resetting PD_MCU_M4F done. \n");
    return status;
}

hotmenu PD_DDRSS_Reset()
{
    int status = 1;    
	GEL_TextOut( "Resetting DDRSS. \n");

    GEL_TextOut( "Resetting LPSC_EMIF_DATA_ISO\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMIF_DATA_ISO, PSC_PD_ON, PSC_SYNCRESET);
	GEL_TextOut( "Resetting LPSC_EMIF_CFG_ISO\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMIF_CFG_ISO, PSC_PD_ON, PSC_SYNCRESET);
	GEL_TextOut( "Resetting LPSC_EMIF_LOCAL\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMIF_LOCAL, PSC_PD_ON, PSC_SYNCRESET);
    
    GEL_TextOut( "DDRSS is in reset. \n");

	GEL_TextOut( "Powering up LPSC_EMIF_LOCAL\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMIF_LOCAL, PSC_PD_ON, PSC_ENABLE);
	GEL_TextOut( "Powering up LPSC_EMIF_CFG\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMIF_CFG_ISO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut( "Powering up LPSC_EMIF_DATA\n");
    status &= Set_MAIN_PSC_State( GP_CORE_CTL, LPSC_EMIF_DATA_ISO, PSC_PD_ON, PSC_ENABLE);
    GEL_TextOut("DDRSS is out of reset\n");
    return status;
}

menuitem "Power Sleep Controller/Power Down by Power Domain Controls";

/* Note: Powering down the A53s can only be done if the cores are in WFI */

hotmenu PD_A53_0_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_A53_0. \n");
    GEL_TextOut( "Powering Down LPSC_A53_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_0, LPSC_A53_0, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_A53_0 done. \n");
    return status;
}

hotmenu PD_A53_1_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_A53_1. \n");
    GEL_TextOut( "Powering Down LPSC_A53_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_1, LPSC_A53_1, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_A53_1 done. \n");
    return status;
}

hotmenu PD_A53_2_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_A53_2. \n");
    GEL_TextOut( "Powering Down LPSC_A53_2\n");
    status &= Set_MAIN_PSC_State( PD_A53_2, LPSC_A53_2, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_A53_2 done. \n");
    return status;
}

hotmenu PD_A53_3_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_A53_3. \n");
    GEL_TextOut( "Powering Down LPSC_A53_3\n");
    status &= Set_MAIN_PSC_State( PD_A53_3, LPSC_A53_3, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_A53_3 done. \n");
    return status;
}

hotmenu PD_A53_CLUSTER_0_PowerDown()
{
    unsigned int val = 0;
    int status = 1;    
    
    //L2 Flush Sequence
    //Disable cache and snoop interface
    *(MAIN_SEC_MMR0_CFG0_BASE+PM_CONFIG_OFFSET) = *(MAIN_SEC_MMR0_CFG0_BASE+PM_CONFIG_OFFSET) | 0x3;

    //Set L2FLUSHREQ
    *(MAIN_SEC_MMR0_CFG0_BASE+PM_CONFIG_OFFSET) = *(MAIN_SEC_MMR0_CFG0_BASE+PM_CONFIG_OFFSET) | (0x1<<5);

    //Poll for L2_HW_FLUSH_DONE
    val = *(MAIN_SEC_MMR0_CFG0_BASE+PM_STATUS_OFFSET);
    while ((val & 0x00001000) != 0x00001000);
    GEL_TextOut( "L2_HW_FLUSH_DONE\n");

    //Deassert L2FLUSHREQ
    *(MAIN_SEC_MMR0_CFG0_BASE+PM_CONFIG_OFFSET) = *(MAIN_SEC_MMR0_CFG0_BASE+PM_CONFIG_OFFSET) & ~(0x1<<5);
    
    GEL_TextOut( "Powering Down PD_A53_CLUSTER_0. \n");
    GEL_TextOut( "Powering Down LPSC_A53_CLUSTER_0_PBIST_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_A53_CLUSTER_0_PBIST_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_A53_CLUSTER_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_A53_CLUSTER_0 done. \n");
    return status;
}

hotmenu PD_A53_CLUSTER_0_FullPowerDown()
{
	unsigned int val = 0;
    int status = 1;    GEL_TextOut( "Powering Down PD_A53_CLUSTER_0. \n");
    GEL_TextOut( "Powering Down LPSC_A53_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_0, LPSC_A53_0, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_A53_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_1, LPSC_A53_1, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_A53_2\n");
    status &= Set_MAIN_PSC_State( PD_A53_2, LPSC_A53_2, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_A53_3\n");
    status &= Set_MAIN_PSC_State( PD_A53_3, LPSC_A53_3, PSC_PD_OFF, PSC_SYNCRESETDISABLE);

	//L2 Flush Sequence

	//Disable cache and snoop interface
	*(MAIN_SEC_MMR0_CFG0_BASE+PM_CONFIG_OFFSET) = *(MAIN_SEC_MMR0_CFG0_BASE+PM_CONFIG_OFFSET) | 0x3;

	//Set L2FLUSHREQ
	*(MAIN_SEC_MMR0_CFG0_BASE+PM_CONFIG_OFFSET) = *(MAIN_SEC_MMR0_CFG0_BASE+PM_CONFIG_OFFSET) | (0x1<<5);

	//Poll for L2_HW_FLUSH_DONE
	val = *(MAIN_SEC_MMR0_CFG0_BASE+PM_STATUS_OFFSET);
	while ((val & 0x00001000) != 0x00001000);
	GEL_TextOut( "L2_HW_FLUSH_DONE\n");

	//Deassert L2FLUSHREQ
	*(MAIN_SEC_MMR0_CFG0_BASE+PM_CONFIG_OFFSET) = *(MAIN_SEC_MMR0_CFG0_BASE+PM_CONFIG_OFFSET) & ~(0x1<<5);

    GEL_TextOut( "Powering Down LPSC_A53_CLUSTER_0_PBIST_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_A53_CLUSTER_0_PBIST_1\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0_PBIST_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down LPSC_A53_CLUSTER_0\n");
    status &= Set_MAIN_PSC_State( PD_A53_CLUSTER_0, LPSC_A53_CLUSTER_0, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_A53_CLUSTER_0 done. \n");
    return status;
}

hotmenu PD_ICSSM_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_ICSSM. \n");
    GEL_TextOut( "Powering Down LPSC_ICSSM\n");
    status &= Set_MAIN_PSC_State( PD_ICSSM, LPSC_ICSSM, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_ICSSM done. \n");
    return status;
}

hotmenu PD_CPSW_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_CPSW. \n");
    GEL_TextOut( "Powering Down LPSC_CPSW3G\n");
    status &= Set_MAIN_PSC_State( PD_CPSW, LPSC_CPSW3G, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_CPSW done. \n");
    return status;
}

hotmenu PD_GPU_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_GPU. \n");
    GEL_TextOut( "Powering Down LPSC_GPU\n");
    status &= Set_MAIN_PSC_State( PD_GPU, LPSC_GPU, PSC_PD_ON, PSC_SYNCRESET);
    GEL_TextOut( "Powering Down LPSC_GPU_PBIST\n");
    status &= Set_MAIN_PSC_State( PD_GPU, LPSC_GPU_PBIST, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_GPU done. \n");
    return status;
}

hotmenu PD_DSS_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_DSS. \n");
    GEL_TextOut( "Powering Down LPSC_DSS\n");
    status &= Set_MAIN_PSC_State( PD_DSS, LPSC_DSS, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_DSS done. \n");
    return status;
}

/* Note: Powering down the MCU M4F can only be done if the cores is in WFI */
hotmenu PD_MCU_M4F_PowerDown()
{
    int status = 1;    GEL_TextOut( "Powering Down PD_MCU_M4F. \n");
    GEL_TextOut( "Powering Down LPSC_MCU_M4F\n");
    status &= Set_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_M4F, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering up LPSC_MCU_MCANSS_0\n");
    status &= Set_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_MCANSS_0, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering up LPSC_MCU_MCANSS_1\n");
    status &= Set_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_MCANSS_1, PSC_PD_ON, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering up LPSC_MCU_COMMON\n");
    status &= Set_MCU_PSC_State( PD_MCU_M4F, LPSC_MCU_COMMON, PSC_PD_OFF, PSC_SYNCRESETDISABLE);
    GEL_TextOut( "Powering Down PD_MCU_M4F done. \n");
    return status;
}
