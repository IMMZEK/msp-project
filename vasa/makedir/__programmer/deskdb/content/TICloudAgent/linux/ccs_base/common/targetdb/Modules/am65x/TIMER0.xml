<module name="TIMER0" acronym="" XML_version="1.0" HW_revision="n/a" description="">
  <register id="TIMER_TIDR" acronym="TIMER_TIDR" offset="0x0" width="32" description="This read-only register contains the revision number of the module. A write to this register has no effect. This register is used by software to track features, bugs, and compatibility.">
    <bitfield id="REVISION" width="32" begin="31" end="0" resetval="0x5000 3100" description="IP Revision" range="" rwaccess="R"/>
  </register>
  <register id="TIMER_TIOCP_CFG" acronym="TIMER_TIOCP_CFG" offset="0x10" width="32" description="This register controls the various parameters of the CBASS0/MCU_CBASS0 interface. Some of the timers features described in this section may not be supported on this family of devices. For more information, see , Timers Not Supported Features.">
    <bitfield id="RESERVED" width="28" begin="31" end="4" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="IDLEMODE" width="2" begin="3" end="2" resetval="0x2" description="Power management, req/ack control 0h = Force-idle mode: local target idle state follows (acknowledges) the system clock stop requests unconditionally, that is, regardless of the IP module internal requirements. Back-up mode, for debug only. 1h = No-idle mode: local target never enters idle state. Back-up mode, for debug only. 2h = Smart-idle mode: local target idle state eventually follows (acknowledges) the system clock stop requests, depending on the IP module internal requirements. IP module should not generate (IRQ-request-related) wake-up events. 3h = Smart-idle wake-up-capable mode: local target idle state eventually follows (acknowledges) the system clock stop requests, depending on the IP module internal requirements. IP module may generate (IRQ-request-related) wake-up events when in IDLE state. Mode is relevant only if the appropriate IP modules wake-up output(s) is (are) implemented." range="" rwaccess="RW"/>
    <bitfield id="EMUFREE" width="1" begin="1" end="1" resetval="0x0" description="Emulation mode 0h = The timer is frozen in emulation mode (PINSUSPENDN signal active). 1h = The timer runs free, regardless of PINSUSPENDN value." range="" rwaccess="RW"/>
    <bitfield id="SOFTRESET" width="1" begin="0" end="0" resetval="0x0" description="Software reset Read 0h = Reset done, no pending action" range="" rwaccess="RW"/>
  </register>
  <register id="TIMER_IRQ_EOI" acronym="TIMER_IRQ_EOI" offset="0x20" width="32" description="Software End-Of-Interrupt: Allows the generation of further pulses on the interrupt line, if a new interrupt event is pending, when using the pulsed output. Unused when using the level interrupt line (depending on module integration). The EOI register is used to re-trigger the pulse interrupt signal to ensure that any nested interrupt events are serviced. The software interrupt handler must write to the EOI register at the end of the current interrupt processing routine, so that new events can re-trigger the pulse interrupt signal again. For level interrupt signals the EOI register is not functional and must not be used.">
    <bitfield id="RESERVED" width="31" begin="31" end="1" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="LINE_NUMBER" width="1" begin="0" end="0" resetval="0x0" description="Write the number of the interrupt line to apply a SW EOI to it. Note that there is only a single line (that is number 0)." range="" rwaccess="RW"/>
  </register>
  <register id="TIMER_IRQSTATUS_RAW" acronym="TIMER_IRQSTATUS_RAW" offset="0x24" width="32" description="Component interrupt-request status. Check the corresponding secondary status register. Raw status is set even if event is not enabled. Write 1 to set the (raw) status, mostly for debug.">
    <bitfield id="RESERVED" width="29" begin="31" end="3" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="TCAR_IT_FLAG" width="1" begin="2" end="2" resetval="0x0" description="IRQ status for capture" range="" rwaccess="RW"/>
    <bitfield id="OVF_IT_FLAG" width="1" begin="1" end="1" resetval="0x0" description="IRQ status for overflow" range="" rwaccess="RW"/>
    <bitfield id="MAT_IT_FLAG" width="1" begin="0" end="0" resetval="0x0" description="IRQ status for match" range="" rwaccess="RW"/>
  </register>
  <register id="TIMER_IRQSTATUS" acronym="TIMER_IRQSTATUS" offset="0x28" width="32" description="Component interrupt-request status. Check the corresponding secondary status register. Enabled status is not set unless event is enabled. Write 1 to clear the status after interrupt has been serviced (raw status gets cleared, that is, even if not enabled).">
    <bitfield id="RESERVED" width="29" begin="31" end="3" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="TCAR_IT_FLAG" width="1" begin="2" end="2" resetval="0x0" description="IRQ status for capture" range="" rwaccess="RW"/>
    <bitfield id="OVF_IT_FLAG" width="1" begin="1" end="1" resetval="0x0" description="IRQ status for overflow" range="" rwaccess="RW"/>
    <bitfield id="MAT_IT_FLAG" width="1" begin="0" end="0" resetval="0x0" description="IRQ status for match" range="" rwaccess="RW"/>
  </register>
  <register id="TIMER_IRQSTATUS_SET" acronym="TIMER_IRQSTATUS_SET" offset="0x2C" width="32" description="Component interrupt-request enable. Write 1 to set (enable interrupt). Readout equal to corresponding *_CLR register.">
    <bitfield id="RESERVED" width="29" begin="31" end="3" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="TCAR_EN_FLAG" width="1" begin="2" end="2" resetval="0x0" description="IRQ enable for compare" range="" rwaccess="RW"/>
    <bitfield id="OVF_EN_FLAG" width="1" begin="1" end="1" resetval="0x0" description="IRQ enable for overflow" range="" rwaccess="RW"/>
    <bitfield id="MAT_EN_FLAG" width="1" begin="0" end="0" resetval="0x0" description="IRQ enable for match" range="" rwaccess="RW"/>
  </register>
  <register id="TIMER_IRQSTATUS_CLR" acronym="TIMER_IRQSTATUS_CLR" offset="0x30" width="32" description="Component interrupt-request enable. Write 1 to clear (disable interrupt). Readout equal to corresponding *_SET register.">
    <bitfield id="RESERVED" width="29" begin="31" end="3" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="TCAR_EN_FLAG" width="1" begin="2" end="2" resetval="0x0" description="IRQ enable for compare" range="" rwaccess="RW"/>
    <bitfield id="OVF_EN_FLAG" width="1" begin="1" end="1" resetval="0x0" description="IRQ enable for overflow" range="" rwaccess="RW"/>
    <bitfield id="MAT_EN_FLAG" width="1" begin="0" end="0" resetval="0x0" description="IRQ enable for match" range="" rwaccess="RW"/>
  </register>
  <register id="TIMER_IRQWAKEEN" acronym="TIMER_IRQWAKEEN" offset="0x34" width="32" description="Wake-up-enabled events taking place when module is idle should generate an asynchronous wake-up.">
    <bitfield id="RESERVED" width="29" begin="31" end="3" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="TCAR_WUP_ENA" width="1" begin="2" end="2" resetval="0x0" description="Wake-up generation for compare 0h = Wake-up disabled 1h = Wake-up enabled." range="" rwaccess="RW"/>
    <bitfield id="OVF_WUP_ENA" width="1" begin="1" end="1" resetval="0x0" description="Wake-up generation for overflow 0h = Wake-up disabled 1h = Wake-up enabled." range="" rwaccess="RW"/>
    <bitfield id="MAT_WUP_ENA" width="1" begin="0" end="0" resetval="0x0" description="Wake-up generation for match 0h = Wake-up disabled 1h = Wake-up enabled." range="" rwaccess="RW"/>
  </register>
  <register id="TIMER_TCLR" acronym="TIMER_TCLR" offset="0x38" width="32" description="This register controls optional features specific to the timer functionality.">
    <bitfield id="RESERVED" width="17" begin="31" end="15" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="GPO_CFG" width="1" begin="14" end="14" resetval="0x0" description="General-purpose output - this bit is used to as an output enable for the TIMER IO pin. 0h = TIMER IO pin functions as PWM output. 1h = TIMER IO pin functions as TRIGGER input." range="" rwaccess="RW"/>
    <bitfield id="CAPT_MODE" width="1" begin="13" end="13" resetval="0x0" description="Capture mode select bit (first/second) 0h = Single capture: Capture the first enabled capture event in 1h = Capture on second event: Capture the second enabled capture event in" range="" rwaccess="RW"/>
    <bitfield id="PT" width="1" begin="12" end="12" resetval="0x0" description="Pulse or toggle mode on POTIMERPWM output pin 0h = Pulse modulation 1h = Toggle modulation." range="" rwaccess="RW"/>
    <bitfield id="TRG" width="2" begin="11" end="10" resetval="0x0" description="Trigger output mode on POTIMERPWM output pin 0h = No trigger 1h = Trigger on overflow. 2h = Trigger on overflow and match 3h = Reserved." range="" rwaccess="RW"/>
    <bitfield id="TCM" width="2" begin="9" end="8" resetval="0x0" description="Transition capture mode on EVENT_CAPTURE input pin (When the TCM field passed from (00) to any other combination, the TCAR_IT_FLAG and the edge detection logic are cleared.) 0h = No capture 1h = Capture on rising edges of EVENT_CAPTURE pin 2h = Capture on falling edges of EVENT_CAPTURE pin 3h = Capture on both edges of EVENT_CAPTURE pin." range="" rwaccess="RW"/>
    <bitfield id="SCPWM" width="1" begin="7" end="7" resetval="0x0" description="Pulse width modulation output pin default setting 0h = Clear the POTIMERPWM output pin and select positive pulse for pulse mode. 1h = Set the POTIMERPWM output pin and select negative pulse for pulse mode." range="" rwaccess="RW"/>
    <bitfield id="CE" width="1" begin="6" end="6" resetval="0x0" description="Compare enable 0h = Compare mode is disable. 1h = Compare mode is enable." range="" rwaccess="RW"/>
    <bitfield id="PRE" width="1" begin="5" end="5" resetval="0x0" description="Prescaler enable 0h = The timer clock input pin clocks the counter. 1h = The divided input pin clocks the counter." range="" rwaccess="RW"/>
    <bitfield id="PTV" width="3" begin="4" end="2" resetval="0x0" description="Prescale clock timer value" range="" rwaccess="RW"/>
    <bitfield id="AR" width="1" begin="1" end="1" resetval="0x0" description="Autoreload mode 0h = One shot timer 1h = Autoreload timer" range="" rwaccess="RW"/>
    <bitfield id="ST" width="1" begin="0" end="0" resetval="0x0" description="Start/stop timer control 0h = Stop timer: Only the counter is frozen. If one-shot mode selected (AR = 0), this bit is automatically reset by internal logic when the counter is overflowed. 1h = Start timer." range="" rwaccess="RW"/>
  </register>
  <register id="TIMER_TCRR" acronym="TIMER_TCRR" offset="0x3C" width="32" description="This register holds the value of the internal counter.">
    <bitfield id="TIMER_COUNTER" width="32" begin="31" end="0" resetval="0x0" description="Value of timer counter" range="" rwaccess="RW"/>
  </register>
  <register id="TIMER_TLDR" acronym="TIMER_TLDR" offset="0x40" width="32" description="This register holds the timer load value.">
    <bitfield id="LOAD_VALUE" width="32" begin="31" end="0" resetval="0x0" description="Timer counter value loaded on overflow in autoreload mode or on" range="" rwaccess="RW"/>
  </register>
  <register id="TIMER_TTGR" acronym="TIMER_TTGR" offset="0x44" width="32" description="This register triggers a counter reload of timer by writing any value in it. The read value of this register is always FFFF FFFFh.">
    <bitfield id="TTGR_VALUE" width="32" begin="31" end="0" resetval="0xF" description="Writing to the" range="" rwaccess="RW"/>
  </register>
  <register id="TIMER_TWPS" acronym="TIMER_TWPS" offset="0x48" width="32" description="This register contains the write posting bits for all writable functional registers.">
    <bitfield id="RESERVED" width="22" begin="31" end="10" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="W_PEND_TOWR" width="1" begin="9" end="9" resetval="0x0" description="Write pending for the Read 0h = No write pending Read 1h = Write pending." range="" rwaccess="R"/>
    <bitfield id="W_PEND_TOCR" width="1" begin="8" end="8" resetval="0x0" description="Write pending for the Read 0h = No write pending Read 1h = Write pending." range="" rwaccess="R"/>
    <bitfield id="W_PEND_TCVR" width="1" begin="7" end="7" resetval="0x0" description="Write pending for the Read 0h = No write pending Read 1h = Write pending." range="" rwaccess="R"/>
    <bitfield id="W_PEND_TNIR" width="1" begin="6" end="6" resetval="0x0" description="Write pending for the Read 0h = No negative increment register write pending Read 1h = Negative increment register write pending." range="" rwaccess="R"/>
    <bitfield id="W_PEND_TPIR" width="1" begin="5" end="5" resetval="0x0" description="Write pending for the Read 0h = No positive increment register write pending Read 1h = Positive increment register write pending." range="" rwaccess="R"/>
    <bitfield id="W_PEND_TMAR" width="1" begin="4" end="4" resetval="0x0" description="Write pending for theRead 0h = No write pending Read 1h = Write pending." range="" rwaccess="R"/>
    <bitfield id="W_PEND_TTGR" width="1" begin="3" end="3" resetval="0x0" description="Write pending for theRead 0h = No write pending Read 1h = Write pending." range="" rwaccess="R"/>
    <bitfield id="W_PEND_TLDR" width="1" begin="2" end="2" resetval="0x0" description="Write pending for theRead 0h = No write pending Read 1h = Write pending." range="" rwaccess="R"/>
    <bitfield id="W_PEND_TCRR" width="1" begin="1" end="1" resetval="0x0" description="Write pending for theRead 0h = No write pending Read 1h = Write pending." range="" rwaccess="R"/>
    <bitfield id="W_PEND_TCLR" width="1" begin="0" end="0" resetval="0x0" description="Write pending for theRead 0h = No write pending Read 1h = Write pending." range="" rwaccess="R"/>
  </register>
  <register id="TIMER_TMAR" acronym="TIMER_TMAR" offset="0x4C" width="32" description="The register holds the match value to be compared with the counter's value.">
    <bitfield id="COMPARE_VALUE" width="32" begin="31" end="0" resetval="0x0" description="Value to be compared to the timer counter" range="" rwaccess="RW"/>
  </register>
  <register id="TIMER_TCAR1" acronym="TIMER_TCAR1" offset="0x50" width="32" description="This register holds the first captured value of the counter register.">
    <bitfield id="CAPTURE_VALUE1" width="32" begin="31" end="0" resetval="0x0" description="First timer counter value captured on an external event trigger" range="" rwaccess="R"/>
  </register>
  <register id="TIMER_TSICR" acronym="TIMER_TSICR" offset="0x54" width="32" description="Timer synchronous interface control register">
    <bitfield id="RESERVED" width="27" begin="31" end="5" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
    <bitfield id="READ_AFTER_IDLE" width="1" begin="4" end="4" resetval="0x0" description="Select if the synchronization mechanism used for firstTIMER_TCRR read operation after idle state is active.Field values: 0h = The synchronization mechanism is enabled.1h = The synchronization mechanism is disabled." range="" rwaccess="W"/>
    <bitfield id="READ_MODE" width="1" begin="3" end="3" resetval="0x0" description="Select posted/non-posted mode for read operation: NOTE: When the module is configured in posted mode (POSTED = '1'), this bit is not used. 0h = When the module is configured in non-posted mode (POSTED = '0'), the read operation is executed as read posted. 1h = When the module is configured in non-posted mode (POSTED = '0'), the read operation is executed as read non-posted." range="" rwaccess="W"/>
    <bitfield id="POSTED" width="1" begin="2" end="2" resetval="0x1" description="Posted mode selection. 0h = Posted mode inactive: Delay the command accept output signal. 1h = Posted mode active." range="" rwaccess="RW"/>
    <bitfield id="SFT" width="1" begin="1" end="1" resetval="0x0" description="This bit resets all the functional part of the module. All read accesses return 0. 0h = Software reset is disabled. 1h = Software reset is enabled." range="" rwaccess="RW"/>
    <bitfield id="RESERVED" width="1" begin="0" end="0" resetval="0x0" description="Reserved" range="" rwaccess="R"/>
  </register>
  <register id="TIMER_TCAR2" acronym="TIMER_TCAR2" offset="0x58" width="32" description="This register holds the second captured value of the counter register.">
    <bitfield id="CAPTURE_VALUE2" width="32" begin="31" end="0" resetval="0x0" description="Second timer counter value captured on an external event trigger" range="" rwaccess="R"/>
  </register>
  <register id="TIMER_TPIR" acronym="TIMER_TPIR" offset="0x5C" width="32" description="This register is used for 1-ms tick generation. The register holds the value of the positive increment. The value of this register is added to the value of to determine whether next value loaded in is the subperiod value or the overperiod value.">
    <bitfield id="POSITIVE_INC_VALUE" width="32" begin="31" end="0" resetval="0x0" description="Value of the positive increment" range="" rwaccess="RW"/>
  </register>
  <register id="TIMER_TNIR" acronym="TIMER_TNIR" offset="0x60" width="32" description="This register is used for 1-ms tick generation. The register holds the value of the negative increment. The value of this register is added to the value of the to determine whether next value loaded in is the subperiod value or the overperiod value.">
    <bitfield id="NEGATIVE_INV_VALUE" width="32" begin="31" end="0" resetval="0x0" description="Value of the negative increment" range="" rwaccess="RW"/>
  </register>
  <register id="TIMER_TCVR" acronym="TIMER_TCVR" offset="0x64" width="32" description="This register is used for 1-ms tick generation. The register determines whether next value loaded in is the subperiod value or the overperiod value.">
    <bitfield id="COUNTER_VALUE" width="32" begin="31" end="0" resetval="0x0" description="Value of CVR counter" range="" rwaccess="RW"/>
  </register>
  <register id="TIMER_TOCR" acronym="TIMER_TOCR" offset="0x68" width="32" description="This register is used to mask the tick interrupt for a selected number of ticks.">
    <bitfield id="RESERVED" width="8" begin="31" end="24" resetval="0x0" description="Reads return 0." range="" rwaccess="R"/>
    <bitfield id="OVF_COUNTER_VALUE" width="24" begin="23" end="0" resetval="0x0" description="Number of overflow events" range="" rwaccess="RW"/>
  </register>
  <register id="TIMER_TOWR" acronym="TIMER_TOWR" offset="0x6C" width="32" description="This register holds the number of masked overflow interrupts.">
    <bitfield id="RESERVED" width="8" begin="31" end="24" resetval="0x0" description="Reads return 0." range="" rwaccess="R"/>
    <bitfield id="OVF_WRAPPING_VALUE" width="24" begin="23" end="0" resetval="0x0" description="Number of masked interrupts" range="" rwaccess="RW"/>
  </register>
</module>
