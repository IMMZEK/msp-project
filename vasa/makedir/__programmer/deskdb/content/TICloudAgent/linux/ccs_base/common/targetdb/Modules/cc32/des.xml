<?xml version="1.0" encoding="UTF-8"?>
<module id="des" HW_revision="">
    <register id="KEY3_L" width="32" offset="0x0" description="KEY3 (LSW) for 192-bit key">
    </register>
    <register id="KEY3_H" width="32" offset="0x4" description="KEY3 (MSW) for 192-bit key">
    </register>
    <register id="KEY2_L" width="32" offset="0x8" description="KEY2 (LSW) for 192-bit key">
    </register>
    <register id="KEY2_H" width="32" offset="0xC" description="KEY2 (MSW) for 192-bit key">
    </register>
    <register id="KEY1_L" width="32" offset="0x10" description="KEY1 (LSW) for 128-bit key/192-bit key">
    </register>
    <register id="KEY1_H" width="32" offset="0x14" description="KEY1 (LSW) for 128-bit key/192-bit key">
    </register>
    <register id="IV_L" width="32" offset="0x18" description="Initialization vector LSW">
    </register>
    <register id="IV_H" width="32" offset="0x1C" description="Initialization vector MSW">
    </register>
    <register id="CTRL" width="32" offset="0x20" description="">
        <bitfield id="MODE" description="Select CBC ECB or CFB mode 0x0 ecb mode 0x1 cbc mode 0x2 cfb mode 0x3 reserved" begin="5" end="4" width="2" rwaccess="R/W">
        </bitfield>
    </register>
    <register id="LENGTH" width="32" offset="0x24" description="Indicates the cryptographic data length in bytes for all modes. Once processing is started with this context this length decrements to zero. Data lengths up to (2^32  1) bytes are allowed. A write to this register triggers the engine to start using this context. For a Host read operation these registers return all-zeroes.">
    </register>
    <register id="DATA_L" width="32" offset="0x28" description="Data register(LSW) to read/write encrypted/decrypted data.">
    </register>
    <register id="DATA_H" width="32" offset="0x2C" description="Data register(MSW) to read/write encrypted/decrypted data.">
    </register>
    <register id="REVISION" width="32" offset="0x30" description="">
        <bitfield id="SCHEME" description="" begin="31" end="30" width="2" rwaccess="R/W">
        </bitfield>
        <bitfield id="FUNC" description="Function indicates a software compatible module family. If there is no level of software compatibility a new Func number (and hence REVISION) should be assigned." begin="27" end="16" width="12" rwaccess="R/W">
        </bitfield>
        <bitfield id="R_RTL" description="RTL Version (R) maintained by IP design owner. RTL follows a numbering such as X.Y.R.Z which are explained in this table. R changes ONLY when: (1) PDS uploads occur which may have been due to spec changes (2) Bug fixes occur (3) Resets to '0' when X or Y changes. Design team has an internal 'Z' (customer invisible) number which increments on every drop that happens due to DV and RTL updates. Z resets to 0 when R increments." begin="15" end="11" width="5" rwaccess="R/W">
        </bitfield>
        <bitfield id="X_MAJOR" description="Major Revision (X) maintained by IP specification owner. X changes ONLY when: (1) There is a major feature addition. An example would be adding Master Mode to Utopia Level2. The Func field (or Class/Type in old PID format) will remain the same. X does NOT change due to: (1) Bug fixes (2) Change in feature parameters." begin="10" end="8" width="3" rwaccess="R/W">
        </bitfield>
        <bitfield id="CUSTOM" description="" begin="7" end="6" width="2" rwaccess="R/W">
        </bitfield>
        <bitfield id="Y_MINOR" description="Minor Revision (Y) maintained by IP specification owner. Y changes ONLY when: (1) Features are scaled (up or down). Flexibility exists in that this feature scalability may either be represented in the Y change or a specific register in the IP that indicates which features are exactly available. (2) When feature creeps from Is-Not list to Is list. But this may not be the case once it sees silicon; in which case X will change. Y does NOT change due to: (1) Bug fixes (2) Typos or clarifications (3) major functional/feature change/addition/deletion. Instead these changes may be reflected via R S X as applicable. Spec owner maintains a customer-invisible number 'S' which changes due to: (1) Typos/clarifications (2) Bug documentation. Note that this bug is not due to a spec change but due to implementation. Nevertheless the spec tracks the IP bugs. An RTL release (say for silicon PG1.1) that occurs due to bug fix should document the corresponding spec number (X.Y.S) in its release notes." begin="5" end="0" width="6" rwaccess="R/W">
        </bitfield>
    </register>
    <register id="SYSCONFIG" width="32" offset="0x34" description="">
    </register>
    <register id="SYSSTATUS" width="32" offset="0x38" description="">
    </register>
    <register id="IRQSTATUS" width="32" offset="0x3C" description="This register indicates the interrupt status. If one of the interrupt bits is set the interrupt output will be asserted">
    </register>
    <register id="IRQENABLE" width="32" offset="0x40" description="This register contains an enable bit for each unique interrupt generated by the module. It matches the layout of DES_IRQSTATUS register. An interrupt is enabled when the bit in this register is set to 1 ****************************************************************************">
    </register>
</module>
