<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="GPIO" id="GPIO">
  
  
  <register acronym="GPIO_REVISION" description="The GPIO revision register is a read only register containing the revision number of the GPIO module. A write to this register has no effect, the same as the reset." id="GPIO_REVISION" offset="0x0" width="32">
    
  <bitfield begin="31" description=" Used to distinguish between old Scheme and current. [[br]]" end="30" id="SCHEME" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="29" description=" Reads return 0x1" end="28" id="RESERVED_1" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="27" description=" Indicates a software compatible module family" end="16" id="FUNC" rwaccess="R" width="12"></bitfield>
    
  <bitfield begin="15" description=" RTL version" end="11" id="RTL" rwaccess="R" width="5"></bitfield>
    
  <bitfield begin="10" description=" Major Revision" end="8" id="MAJOR" rwaccess="R" width="3"></bitfield>
    
  <bitfield begin="7" description=" Indicates a special version for a particular device. [[br]]" end="6" id="CUSTOM" rwaccess="R" width="2"></bitfield>
    
  <bitfield begin="5" description=" Minor Revision" end="0" id="MINOR" rwaccess="R" width="6"></bitfield>
  </register>
  
  
  <register acronym="GPIO_SYSCONFIG" description="The GPIO_SYSCONFIG register controls the various parameters of the L4 interconnect. When the AUTOIDLE bit is set, the GPIO_DATAIN read command has a 3 OCP cycle latency due to the data in sample gating mechanism. When the AUTOIDLE bit is not set, the GPIO_DATAIN read command has a 2 OCP cycle latency." id="GPIO_SYSCONFIG" offset="0x10" width="32">
    
  <bitfield begin="31" description=" Reserved" end="5" id="RESERVED_1" rwaccess="R" width="27"></bitfield>
    
  <bitfield begin="4" description=" Power Management, Req/Ack control." end="3" id="IDLEMODE" rwaccess="RW" width="2">
    <bitenum description="Smart Idle Wakeup (GPIO0 only)" id="en_4_0x3" token="en_4_0x3" value="0x3"></bitenum>
    <bitenum description="Smart-idle. Acknowledgment to an idle request is given based on the internal activity of the module" id="en_3_0x2" token="en_3_0x2" value="0x2"></bitenum>
    <bitenum description="No-idle. An idle request is never acknowledged" id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Force-idle. An idle request is acknowledged unconditionally." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="2" description=" Wakeup control." end="2" id="ENAWAKEUP" rwaccess="RW" width="1">
    <bitenum description="Wakeup capability is enabled upon expected transition on input GPIO pin" id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Wakeup generation is disabled." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="1" description=" Software Reset. [[br]]Set this bit to 1 to trigger a module reset. [[br]]The bit is automatically reset by the hardware. [[br]]During reads, it always returns 0. " end="1" id="SOFTRESET" rwaccess="RW" width="1">
    <bitenum description="The module is reset." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Normal Mode" id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="0" description=" Internal interface clock gating strategy" end="0" id="AUTOIDLE" rwaccess="RW" width="1">
    <bitenum description="Automatic internal OCP clock gating, based on the OCP interface activity" id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Internal Interface OCP clock is free-running" id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_EOI" description="This module supports DMA events with its interrupt signal. This register must be written to after the DMA completes in order for subsequent DMA events to be triggered from this module." id="GPIO_EOI" offset="0x20" width="32">
    
  <bitfield begin="31" description=" Reserved" end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" Write 0 to acknowledge DMA event has been completed. [[br]]Module will be able to generate another DMA event only when the previous one has been acknowledged using this register. [[br]]Reads always returns 0. " end="0" id="DMAEVT_ACK" rwaccess="W" width="1">
    <bitenum description="EOI for interrupt line number 1. Read returns 0." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="EOI for interrupt line number 0. Read returns 0." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_IRQSTS_RAW_0" description="The GPIO_IRQSTS_RAW_0 register provides core status information for the interrupt handling, showing all active events (enabled and not enabled). The fields are read-write. Writing a 1 to a bit sets it to 1, that is, triggers the IRQ (mostly for debug). Writing a 0 has no effect, that is, the register value is not be modified. Only enabled, active events trigger an actual interrupt request on the IRQ output line." id="GPIO_IRQSTS_RAW_0" offset="0x24" width="32">
    
  <bitfield begin="31" description=" Interrupt n status." end="0" id="INTLINE_N" rwaccess="RW" width="32">
    <bitenum description="IRQ is triggered." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="No effect." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_IRQSTS_RAW_1" description="The GPIO_IRQSTS_RAW_1 register provides core status information for the interrupt handling, showing all active events (enabled and not enabled). The fields are read-write. Writing a 1 to a bit sets it to 1, that is, triggers the IRQ (mostly for debug). Writing a 0 has no effect, that is, the register value is not be modified. Only enabled, active events trigger an actual interrupt request on the IRQ output line." id="GPIO_IRQSTS_RAW_1" offset="0x28" width="32">
    
  <bitfield begin="31" description=" Interrupt n status." end="0" id="INTLINE_N" rwaccess="RW" width="32">
    <bitenum description="IRQ is triggered." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="No effect." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_IRQSTS_0" description="The GPIO_IRQSTS_0 register provides core status information for the interrupt handling, showing all active events which have been enabled. The fields are read-write. Writing a 1 to a bit clears the bit to 0, that is, clears the IRQ. Writing a 0 has no effect, that is, the register value is not modified. Only enabled, active events trigger an actual interrupt request on the IRQ output line." id="GPIO_IRQSTS_0" offset="0x2C" width="32">
    
  <bitfield begin="31" description=" Interrupt n status." end="0" id="INTLINE_N" rwaccess="RW" width="32">
    <bitenum description="IRQ is triggered." id="en_4_0x1" token="en_4_0x1" value="0x1"></bitenum>
    <bitenum description="Clears the IRQ." id="en_3_0x1" token="en_3_0x1" value="0x1"></bitenum>
    <bitenum description="No effect." id="en_2_0x0" token="en_2_0x0" value="0x0"></bitenum>
    <bitenum description="IRQ is not triggered." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_IRQSTS_1" description="The GPIO_IRQSTS_1 register provides core status information for the interrupt handling, showing all active events which have been enabled. The fields are read-write. Writing a 1 to a bit clears the bit to 0, that is, clears the IRQ. Writing a 0 has no effect, that is, the register value is not modified. Only enabled, active events trigger an actual interrupt request on the IRQ output line." id="GPIO_IRQSTS_1" offset="0x30" width="32">
    
  <bitfield begin="31" description=" Interrupt n status." end="0" id="INTLINE_N" rwaccess="RW" width="32">
    <bitenum description="IRQ is triggered." id="en_4_0x1" token="en_4_0x1" value="0x1"></bitenum>
    <bitenum description="Clears the IRQ." id="en_3_0x1" token="en_3_0x1" value="0x1"></bitenum>
    <bitenum description="No effect." id="en_2_0x0" token="en_2_0x0" value="0x0"></bitenum>
    <bitenum description="IRQ is not triggered." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_IRQSTS_SET_0" description="All 1-bit fields in the GPIO_IRQSTS_SET_0 register enable a specific interrupt event to trigger an interrupt request. Writing a 1 to a bit enables the interrupt field. Writing a 0 has no effect, that is, the register value is not modified." id="GPIO_IRQSTS_SET_0" offset="0x34" width="32">
    
  <bitfield begin="31" description=" Interrupt n status." end="0" id="INTLINE_N" rwaccess="RW" width="32">
    <bitenum description="Enable IRQ generation." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="No effect." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_IRQSTS_SET_1" description="All 1-bit fields in the GPIO_IRQSTS_SET_1 register enable a specific interrupt event to trigger an interrupt request. Writing a 1 to a bit enables the interrupt field. Writing a 0 has no effect, that is, the register value is not modified." id="GPIO_IRQSTS_SET_1" offset="0x38" width="32">
    
  <bitfield begin="31" description=" Interrupt n status." end="0" id="INTLINE_N" rwaccess="RW" width="32">
    <bitenum description="Enable IRQ generation." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="No effect." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_IRQSTS_CLR_0" description="All 1-bit fields in the GPIO_IRQSTS_CLR_0 register clear a specific interrupt event. Writing a 1 to a bit disables the interrupt field. Writing a 0 has no effect, that is, the register value is not modified." id="GPIO_IRQSTS_CLR_0" offset="0x3C" width="32">
    
  <bitfield begin="31" description=" Interrupt n status." end="0" id="INTLINE_N" rwaccess="RW" width="32">
    <bitenum description="Disable IRQ generation" id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="No effect." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_IRQSTS_CLR_1" description="All 1-bit fields in the GPIO_IRQSTS_CLR_1 register clear a specific interrupt event. Writing a 1 to a bit disables the interrupt field. Writing a 0 has no effect, that is, the register value is not modified." id="GPIO_IRQSTS_CLR_1" offset="0x40" width="32">
    
  <bitfield begin="31" description=" Interrupt n status." end="0" id="INTLINE_N" rwaccess="RW" width="32">
    <bitenum description="Disable IRQ generation." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="No effect." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_IRQWAKEN_0" description="Every 1-bit field in the GPIO_IRQWAKEN_0 register enables a specific (synchronous) IRQ request source to generate an asynchronous wakeup (on the appropriate swakeup line). This register allows the user to mask the expected transition on input GPIO from generating a wakeup request. The GPIO_IRQWAKEN_0 is programmed synchronously with the interface clock before any Idle mode request coming from the host processor. Note: In Force-Idle mode, the module wake-up feature is totally inhibited. The wake-up generation can also be gated at module level using the EnaWakeUp bit from GPIO_SYSCONFIG register." id="GPIO_IRQWAKEN_0" offset="0x44" width="32">
    
  <bitfield begin="31" description=" Wakeup Set for Interrupt Line" end="0" id="INTLINE" rwaccess="RW" width="32">
    <bitenum description="Enable wakeup generation." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Disable wakeup generation." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_IRQWAKEN_1" description="Every 1-bit field in the GPIO_IRQWAKEN_1 register enables a specific (synchronous) IRQ request source to generate an asynchronous wakeup (on the appropriate swakeup line). This register allows the user to mask the expected transition on input GPIO from generating a wakeup request. The GPIO_IRQWAKEN_1 is programmed synchronously with the interface clock before any Idle mode request coming from the host processor. Note: In Force-Idle mode, the module wake-up feature is totally inhibited. The wake-up generation can also be gated at module level using the EnaWakeUp bit from GPIO_SYSCONFIG register." id="GPIO_IRQWAKEN_1" offset="0x48" width="32">
    
  <bitfield begin="31" description=" Wakeup Set for Interrupt Line" end="0" id="INTLINE" rwaccess="RW" width="32">
    <bitenum description="Enable wakeup generation." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Disable wakeup generation." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_SYSSTS" description="The GPIO_SYSSTS register provides the reset status information about the GPIO module. It is a read-only register; a write to this register has no effect." id="GPIO_SYSSTS" offset="0x114" width="32">
    
  <bitfield begin="31" description=" Reserved" end="1" id="RESERVED_1" rwaccess="R" width="31"></bitfield>
    
  <bitfield begin="0" description=" Reset status information." end="0" id="RESETDONE" rwaccess="R" width="1">
    <bitenum description="Reset completed" id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Internal Reset is on-going" id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_CTRL" description="The GPIO_CTRL register controls the clock gating functionality. The DISABLEMODULE bit controls a clock gating feature at the module level. When set, this bit forces the clock gating for all internal clock paths. Module internal activity is suspended. System interface is not affected by this bit. System interface clock gating is controlled with the AUTOIDLE bit in the system configuration register (GPIO_SYSCONFIG). This bit is to be used for power saving when the module is not used because of the multiplexing configuration selected at the chip level. This bit has precedence over all other internal configuration bits." id="GPIO_CTRL" offset="0x130" width="32">
    
  <bitfield begin="31" description=" Reserved" end="3" id="RESERVED_1" rwaccess="R" width="29"></bitfield>
    
  <bitfield begin="2" description=" Gating Ratio. [[br]]Controls the clock gating for the event detection logic. " end="1" id="GATINGRATIO" rwaccess="RW" width="2">
    <bitenum description="Functional clock is interface clock divided by 8." id="en_4_0x3" token="en_4_0x3" value="0x3"></bitenum>
    <bitenum description="Functional clock is interface clock divided by 4." id="en_3_0x2" token="en_3_0x2" value="0x2"></bitenum>
    <bitenum description="Functional clock is interface clock divided by 2." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Functional clock is interface clock." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
    
  <bitfield begin="0" description=" Module Disable" end="0" id="DISABLEMODULE" rwaccess="RW" width="1">
    <bitenum description="Module is disabled, internal clocks are gated" id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Module is enabled, clocks are not gated." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_OE" description="The GPIO_OE register is used to enable the pins output capabilities. At reset, all the GPIO related pins are configured as input and output capabilities are disabled. This register is not used within the module, its only function is to carry the pads configuration. When the application is using a pin as an output and does not want interrupt generation from this pin, the application can/has to properly configure the Interrupt Enable registers." id="GPIO_OE" offset="0x134" width="32">
    
  <bitfield begin="31" description=" Output Data Enable" end="0" id="OUTPUTEN_N" rwaccess="RW" width="32">
    <bitenum description="The corresponding GPIO port is configured as an input." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="The corresponding GPIO port is configured as an output." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_DATAIN" description="The GPIO_DATAIN register is used to register the data that is read from the GPIO pins. The GPIO_DATAIN register is a read-only register. The input data is sampled synchronously with the interface clock and then captured in the GPIO_DATAIN register synchronously with the interface clock. So, after changing, GPIO pin levels are captured into this register after two interface clock cycles (the required cycles to synchronize and to write the data). When the AUTOIDLE bit in the system configuration register (GPIO_SYSCONFIG) is set, the GPIO_DATAIN read command has a 3 OCP cycle latency due to the data in sample gating mechanism. When the AUTOIDLE bit is not set, the GPIO_DATAIN read command has a 2 OCP cycle latency." id="GPIO_DATAIN" offset="0x138" width="32">
    
  <bitfield begin="31" description=" Sampled input data" end="0" id="DATAIN" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="GPIO_DATAOUT" description="The GPIO_DATAOUT register is used for setting the value of the GPIO output pins. Data is written to the GPIO_DATAOUT register synchronously with the interface clock. This register can be accessed with direct read/write operations or using the alternate Set/Clear feature. This feature enables to set or clear specific bits of this register with a single write access to the set data output register (GPIO_SETDATAOUT) or to the clear data output register (GPIO_CLEARDATAOUT) address." id="GPIO_DATAOUT" offset="0x13C" width="32">
    
  <bitfield begin="31" description=" Data to set on output pins" end="0" id="DATAOUT" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="GPIO_LEVELDETECT0" description="The GPIO_LEVELDETECT0 register is used to enable/disable for each input lines the low-level (0) detection to be used for the interrupt request generation. Enabling at the same time high-level detection and low-level detection for one given pin makes a constant interrupt generator." id="GPIO_LEVELDETECT0" offset="0x140" width="32">
    
  <bitfield begin="31" description=" Low Level Interrupt Enable" end="0" id="LEVELDETECT0_N" rwaccess="RW" width="32">
    <bitenum description="Enable the IRQ assertion on low-level detect." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Disable the IRQ assertion on low-level detect." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_LEVELDETECT1" description="The GPIO_LEVELDETECT1 register is used to enable/disable for each input lines the high-level (1) detection to be used for the interrupt request generation. Enabling at the same time high-level detection and low-level detection for one given pin makes a constant interrupt generator." id="GPIO_LEVELDETECT1" offset="0x144" width="32">
    
  <bitfield begin="31" description=" High Level Interrupt Enable" end="0" id="LEVELDETECT1_N" rwaccess="RW" width="32">
    <bitenum description="Enable the IRQ assertion on high-level detect." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Disable the IRQ assertion on high-level detect." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_RISINGDETECT" description="The GPIO_RISINGDETECT register is used to enable/disable for each input lines the rising-edge (transition 0 to 1) detection to be used for the interrupt request generation." id="GPIO_RISINGDETECT" offset="0x148" width="32">
    
  <bitfield begin="31" description=" Rising Edge Interrupt Enable" end="0" id="RISINGDETECT_N" rwaccess="RW" width="32">
    <bitenum description="Enable the IRQ on rising-edge detect." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Disable the IRQ on rising-edge detect." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_FALLINGDETECT" description="The GPIO_FALLINGDETECT register is used to enable/disable for each input lines the falling-edge (transition 1 to 0) detection to be used for the interrupt request generation." id="GPIO_FALLINGDETECT" offset="0x14C" width="32">
    
  <bitfield begin="31" description=" Falling Edge Interrupt Enable" end="0" id="FALLINGDETECT_N" rwaccess="RW" width="32">
    <bitenum description="Enable the IRQ on falling-edge detect." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Disable the IRQ on falling-edge detect." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_DEBOUNCEN" description="The GPIO_DEBOUNCEN register is used to enable/disable the debouncing feature for each input line." id="GPIO_DEBOUNCEN" offset="0x150" width="32">
    
  <bitfield begin="31" description=" Input Debounce Enable" end="0" id="DEBOUNCEEN_N" rwaccess="RW" width="32">
    <bitenum description="Enable debouncing feature on the corresponding input port." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="Disable debouncing feature on the corresponding input port." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_DEBOUNCINGTIME" description="The GPIO_DEBOUNCINGTIME register controls debouncing time (the value is global for all ports). The debouncing cell is running with the debouncing clock (32 kHz), this register represents the number of the clock cycle(s) (31 s long) to be used." id="GPIO_DEBOUNCINGTIME" offset="0x154" width="32">
    
  <bitfield begin="31" description=" Reserved." end="8" id="RESERVED_1" rwaccess="R" width="24"></bitfield>
    
  <bitfield begin="7" description=" Input Debouncing Value in 31 microsecond steps. [[br]]Debouncing Value = (DEBOUNCETIME + 1) * 31 microseconds." end="0" id="DEBOUNCETIME" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="GPIO_CLRDATAOUT" description="Writing a 1 to a bit in the GPIO_CLRDATAOUT register clears to 0 the corresponding bit in the GPIO_DATAOUT register; writing a 0 has no effect. A read of the GPIO_CLRDATAOUT register returns the value of the data output register (GPIO_DATAOUT)." id="GPIO_CLRDATAOUT" offset="0x190" width="32">
    
  <bitfield begin="31" description=" Clear Data Output Register" end="0" id="INTLINE_N" rwaccess="RW" width="32">
    <bitenum description="Clear the corresponding bit in the GPIO_DATAOUT register." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="No effect." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
  
  
  <register acronym="GPIO_SETDATAOUT" description="Writing a 1 to a bit in the GPIO_SETDATAOUT register sets to 1 the corresponding bit in the GPIO_DATAOUT register; writing a 0 has no effect. A read of the GPIO_SETDATAOUT register returns the value of the data output register (GPIO_DATAOUT)." id="GPIO_SETDATAOUT" offset="0x194" width="32">
    
  <bitfield begin="31" description=" Set Data Output Register" end="0" id="INTLINE_N" rwaccess="RW" width="32">
    <bitenum description="Set the corresponding bit in the GPIO_DATAOUT register." id="en_2_0x1" token="en_2_0x1" value="0x1"></bitenum>
    <bitenum description="No effect." id="en_1_0x0" token="en_1_0x0" value="0x0"></bitenum>
  </bitfield>
  </register>
</module>
