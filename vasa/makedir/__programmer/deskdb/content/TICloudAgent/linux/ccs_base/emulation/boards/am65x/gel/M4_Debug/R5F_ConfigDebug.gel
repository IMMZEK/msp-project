/*******************************************************************/ 
/* This GEL file is loaded on R5F core using  Code Composer        */
/* to enable reading back R5F Core configuration registers         */
/*                                                                 */
/*******************************************************************/

menuitem "Read R5F configuration"
 
#define R5F_MAX_MPU_REGIONS 16

hotmenu R5F_all_settings()
{
	R5F_MPU_settings();
	R5F_System_configuration();
	R5F_TCM_configuration();
}

/* 
 * Setup to readback R5F MPU settings
 */
 
hotmenu R5F_MPU_settings()
{
	unsigned int regionNumber = 0;
	long long sizeBytes;
	
	for(regionNumber= 0; regionNumber < R5F_MAX_MPU_REGIONS; regionNumber ++) {
		CP15_MPU_REGION_NUMBER = regionNumber;
		GEL_TextOut("  Region Number   :  %d\n",,,,,CP15_MPU_REGION_NUMBER);
		
		if((CP15_MPU_REGION_SIZE_ENABLE & 0x1) == 0x1)
			GEL_TextOut("  Region Enabled \n");
		else
			GEL_TextOut("  Region Disabled \n");
		
		sizeBytes = ((long long)(0x1)<<(long long)(((CP15_MPU_REGION_SIZE_ENABLE & 0x3E) >> 0x1)+ 0x1));
		GEL_TextOut("  Region Size Enable Register   :  %x \n",,,,,CP15_MPU_REGION_SIZE_ENABLE);
		GEL_TextOut("  Region Size     :  %d Kbytes\n",,,,,(sizeBytes>>0xA));
		GEL_TextOut("  Region Base Addr:  %x\n",,,,,(CP15_MPU_REGION_BASE_ADDRESS&0xFFFFFFE0));
		GEL_TextOut("  Region Access Control Register   :  %x \n",,,,,CP15_MPU_REGION_ACCESS);
		GEL_TextOut("  Region Access Settings : TEX[3:0]= %x ,  S = %x, C = %x, B = %x\n",,,,,((CP15_MPU_REGION_ACCESS & 0x38)>>3), ((CP15_MPU_REGION_ACCESS & 0x4)>>2),((CP15_MPU_REGION_ACCESS & 0x2)>>1),(CP15_MPU_REGION_ACCESS & 0x1));
		GEL_TextOut("  Region Access Permissions : AP[2:0]= %x \n",,,,,((CP15_MPU_REGION_ACCESS & 0x700)>>8));
		if(((CP15_MPU_REGION_ACCESS & 0x1000)>>12) == 0x1)
			GEL_TextOut(" Region Execute Never[XN] : Instruction fetches Enabled \n");
		else
			GEL_TextOut(" Region Execute Never[XN] : Instruction fetches Disabled \n");
		
		GEL_TextOut("\n");
	}
}

/* 
 * Setup to readback R5F System settings
 */
hotmenu R5F_System_configuration()
{
	
	GEL_TextOut("  System Control Register (SCTLR)   :  %x\n",,,,,CP15_SYSTEM_CONTROL);
	if((CP15_SYSTEM_CONTROL & 0x1) == 0x1)
			GEL_TextOut("  MPU Enabled \n");
	else
			GEL_TextOut("  MPU Disabled \n");
			
	if(((CP15_SYSTEM_CONTROL & 0x4)>> 2) == 0x1)
			GEL_TextOut("  Data Cache Enabled \n");
	else
			GEL_TextOut("  Data cache Disabled \n");
			
	if(((CP15_SYSTEM_CONTROL & 0x1000)>> 12) == 0x1)
			GEL_TextOut("  Instruction Cache Enabled \n");
	else
			GEL_TextOut("  Instruction cache Disabled \n");
	
    if(((CP15_SYSTEM_CONTROL & 0x800)>> 11) == 0x1)
			GEL_TextOut("  Branch Prediction Enabled \n");
	else
			GEL_TextOut("  Branch Prediction Disabled \n");
			
	if(((CP15_SYSTEM_CONTROL & 0x4000)>> 14) == 0x1)
			GEL_TextOut("  Round Robin cache replacement policy Enabled \n");
	else
			GEL_TextOut("  Round Robin cache replacement policy Disabled \n");
			
	GEL_TextOut("\n\n");
	GEL_TextOut("  Auxiliary Control Register (ACTLR)   :  %x\n",,,,,CP15_AUXILIARY_CONTROL);
	if(((CP15_AUXILIARY_CONTROL & 0x18000)>> 15) == 0x00)
			GEL_TextOut("  Normal branch prediction operation \n");
	else
			GEL_TextOut("  Custom branch prediction operation\n");
		
	if(((CP15_AUXILIARY_CONTROL & 0x800)>> 11) == 0x1)
			GEL_TextOut("  Data forwarding for non cached access Enabled \n");
	else
			GEL_TextOut("  Data forwarding for non cached access Disabled \n");
			
	if(((CP15_AUXILIARY_CONTROL & 0x400)>> 10) == 0x1)
			GEL_TextOut("  Force outer read allocate (ORA) for outer write allocate (OWA) regions is Enabled \n");
	else
			GEL_TextOut("  Force outer read allocate (ORA) for outer write allocate (OWA) regions is Disabled \n");

	if(((CP15_AUXILIARY_CONTROL & 0x200)>> 9) == 0x1)
			GEL_TextOut("  Forced write through is enabled \n");
	else
			GEL_TextOut("  Forced write through is disabled \n");
	
}


/* 
 * Setup to readback R5F TCM settings
 */
hotmenu R5F_TCM_configuration()
{
	unsigned int sizeBytes;
		
	GEL_TextOut("\n\n");
	GEL_TextOut("  BTCM Region Register   :  %x\n",,,,,CP15_TCM_BTCM_REGION);
	if(((CP15_TCM_BTCM_REGION & 0x1)) == 0x1)
			GEL_TextOut("  BTCM Region enabled \n");
	else
			GEL_TextOut("  BTCM Region disabled\n");
	
	sizeBytes =	((CP15_TCM_BTCM_REGION & 0x7c)>> 2);
	if( sizeBytes < 0x3)
			GEL_TextOut("  No BTCM \n");
	else
			GEL_TextOut("  BTCM Size is %d Kbytes\n",,,,,(0x1<<(sizeBytes-1)));
			
	GEL_TextOut("  BTCM Base Address is %x\n",,,,,(CP15_TCM_BTCM_REGION & 0xFFFFF000));
			
	GEL_TextOut("  ATCM Region Register   :  %x\n",,,,,CP15_TCM_ATCM_REGION);
	if(((CP15_TCM_ATCM_REGION & 0x1)) == 0x1)
			GEL_TextOut("  ATCM Region enabled \n");
	else
			GEL_TextOut("  ATCM Region disabled\n");
	
	sizeBytes =	((CP15_TCM_ATCM_REGION & 0x7c)>> 2);
	if( sizeBytes < 0x3)
			GEL_TextOut("  No ATCM \n");
	else
			GEL_TextOut("  ATCM Size is %d Kbytes\n",,,,,(0x1<<(sizeBytes-1)));
			
	GEL_TextOut("  ATCM Base Address is %x\n",,,,,(CP15_TCM_ATCM_REGION & 0xFFFFF000));
	
	GEL_TextOut("\n\n");
	GEL_TextOut("  TCM Selection Register  :  %x\n",,,,,CP15_TCM_TCM_SELECTION);
	if((CP15_TCM_TCM_SELECTION & 0x1) == 0x1)
			GEL_TextOut("  Disabled AXI port access to TCM \n");
	else
			GEL_TextOut("  Enabled AXI slave port access to TCM \n");
			
	if(((CP15_TCM_TCM_SELECTION & 0x2)>> 1) == 0x1)
			GEL_TextOut("  Non-privileged and Privileged access to TCM \n");
	else
			GEL_TextOut("  Privileged access to TCM only \n");
	
}