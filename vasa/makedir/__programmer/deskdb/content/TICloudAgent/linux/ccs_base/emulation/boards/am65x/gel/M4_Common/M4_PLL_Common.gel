

//PLL base addrs
#define PLL_MMR0_CFG_BASE           0x40D00000
#define PLL_MMR1_CFG_BASE           0x00680000
#define MCU_PLL_BASE_ADDR           (PLL_MMR0_CFG_BASE + 0x0)
#define MAIN_PLL_BASE_ADDR          (PLL_MMR1_CFG_BASE + 0x0)
#define ARM0_PLL_BASE_ADDR          (PLL_MMR1_CFG_BASE + 0x6000)
#define ARM1_PLL_BASE_ADDR          (PLL_MMR1_CFG_BASE + 0x7000)
#define DDR_PLL_BASE_ADDR           (PLL_MMR1_CFG_BASE + 0x3000)
#define PER0_PLL_BASE_ADDR          (PLL_MMR1_CFG_BASE + 0x1000)
#define PER1_PLL_BASE_ADDR          (PLL_MMR1_CFG_BASE + 0x2000)
#define CPSW_PLL_BASE_ADDR          (PLL_MMR0_CFG_BASE + 0x1000)
#define DSS_PLL_BASE_ADDR           (PLL_MMR1_CFG_BASE + 0x4000)


//PLL register offsets
#define PLL_KICK0_OFFSET            0x0010   
#define PLL_KICK1_OFFSET            0x0014   
#define PLL_FREQ_CTRL0_OFFSET       0x0020   
#define PLL_FREQ_CTRL1_OFFSET       0x0024   
#define PLL_CLKDIV_OFFSET           0x0028   
#define PLL_PROG_OFFSET             0x002C   
#define PLL_CTRL_OFFSET             0x0030   
#define PLL_STAT_OFFSET             0x0034   
#define PLL_HSDIV_CLKDIV_OFFSET     0x0120   
#define PLL_HSDIV_CTRL_OFFSET       0x0124   
#define PLL_HSDIV_STAT_OFFSET       0x0128   

//PLL controller base addrs
#define PLLCTRL0_CFG_BASE           0x42010000
#define PLLCTRL1_CFG_BASE           0x00410000
#define MCU_WKUP_CTRL_BASE_ADDR     (PLLCTRL0_CFG_BASE + 0x0)
#define MAIN_CTRL_BASE_ADDR         (PLLCTRL1_CFG_BASE + 0x0)

//PLL controller register offsets
#define PLL_CTRL_PLLCTL_OFFSET      0x0100 
#define PLL_CTRL_OCSEL_OFFSET       0x0104 
#define PLL_CTRL_PREDIV_OFFSET      0x0114 
#define PLL_CTRL_PLLDIV1_OFFSET     0x0118 
#define PLL_CTRL_PLLDIV2_OFFSET     0x011C 
#define PLL_CTRL_PLLDIV3_OFFSET     0x0120 
#define PLL_CTRL_OSCDIV1_OFFSET     0x0124 
#define PLL_CTRL_POSTDIV_OFFSET     0x0128 
#define PLL_CTRL_BPDIV_OFFSET       0x012C 
#define PLL_CTRL_PLLCMD_OFFSET      0x0138 
#define PLL_CTRL_PLLSTAT_OFFSET     0x013C 
#define PLL_CTRL_ALNCTL_OFFSET      0x0140 
#define PLL_CTRL_CKEN_OFFSET        0x0148 
#define PLL_CTRL_CKSTAT_OFFSET      0x014C 
#define PLL_CTRL_SYSTAT_OFFSET      0x0150 
#define PLL_CTRL_PLLDIV4_OFFSET     0x0160 
#define PLL_CTRL_PLLDIV5_OFFSET     0x0164 
#define PLL_CTRL_PLLDIV6_OFFSET     0x0168 
#define PLL_CTRL_PLLDIV7_OFFSET     0x016C 
#define PLL_CTRL_PLLDIV8_OFFSET     0x0170 
#define PLL_CTRL_PLLDIV9_OFFSET     0x0174 
#define PLL_CTRL_PLLDIV10_OFFSET    0x0178 
#define PLL_CTRL_PLLDIV11_OFFSET    0x017C 
#define PLL_CTRL_PLLDIV12_OFFSET    0x0180 
#define PLL_CTRL_PLLDIV13_OFFSET    0x0184 
#define PLL_CTRL_PLLDIV14_OFFSET    0x0188 
#define PLL_CTRL_PLLDIV15_OFFSET    0x018C 
#define PLL_CTRL_PLLDIV16_OFFSET    0x0190 

#define KICK0_UNLOCK                0x68EF3490
#define KICK1_UNLOCK                0xD172BC5A
#define KICK_LOCK                   0x00000000


//PLL Index Numbers
#define MCU_PLL_INDEX		  1
#define MAIN_PLL_INDEX		2
#define ARM0_PLL_INDEX		3
#define ARM1_PLL_INDEX		4
#define DDR_PLL_INDEX		  5
#define PER0_PLL_INDEX		6
#define PER1_PLL_INDEX		7
#define CPSW_PLL_INDEX		8
#define DSS_PLL_INDEX		  9


//PLL GEL Utility
#define MCU_PLL0_PLL_INDEX      MCU_PLL_INDEX
#define MCU_PLL1_PLL_INDEX      CPSW_PLL_INDEX 
#define MAIN_PLL0_PLL_INDEX     MAIN_PLL_INDEX
#define MAIN_PLL6_PLL_INDEX     ARM0_PLL_INDEX
#define MAIN_PLL7_PLL_INDEX     ARM1_PLL_INDEX
#define MAIN_PLL3_PLL_INDEX     DDR_PLL_INDEX 
#define MAIN_PLL1_PLL_INDEX     PER0_PLL_INDEX
#define MAIN_PLL2_PLL_INDEX     PER1_PLL_INDEX
#define MAIN_PLL4_PLL_INDEX     DSS_PLL_INDEX 

//PLL Type
#define PLL_TYPEOF_ADPLLM	  1
#define PLL_TYPEOF_ADPLLLJM	0

/************************MAIN PLL START************************/
//MAIN PLL (MAIN_PLL0) ADPLLLJM
#define MAIN_TYPE			    PLL_TYPEOF_ADPLLLJM
#define MAIN_HSDIV_EXIST	1
#define MAIN_CTRL_EXIST		1
//Set to 100 MHz
#define	MAIN_M_FRAC_MULT  	0
#define	MAIN_SD_DIV  		    10
#define	MAIN_M_INT_MULT 	  1000
#define	MAIN_N_DIV 			    10-1
#define	MAIN_M1_DIV			    1-1
#define	MAIN_M2_DIV 		    25
#define	MAIN_HSDIV4 		    25-1
#define	MAIN_HSDIV3 		    10-1
#define	MAIN_HSDIV2 		    50-1
#define	MAIN_HSDIV1 		    5-1
//Controller
#define MAIN_CTRL_BPDIV  	0 //AUXCLK=BPCLK=REFCLK for controller
#define MAIN_CTRL_OD1 		0 //OBSCLK=REFCLK for controller
#define MAIN_CTRL_DIV1 		1-1 //500MHZ SYSCLK1 from HSDIV_CLKOUT1

#define MAIN_CLKINP        25.0
/************************MAIN PLL END**************************/

/************************ARM0 PLL START************************/
//ARM0 PLL (MAIN_PLL6) ADPLLM
#define ARM0_TYPE			    PLL_TYPEOF_ADPLLM
#define ARM0_HSDIV_EXIST	0
#define ARM0_CTRL_EXIST		0
//Set to 800 MHz
#define ARM0_M_FRAC_MULT  	0
#define ARM0_M_INT_MULT  	  32
#define ARM0_N_DIV  		    1-1
#define ARM0_M1_DIV  		    1-1
#define ARM0_M2_DIV  		    1
#define ARM0_M3_DIV  		    1

#define ARM0_CLKINP         25.0
/************************ARM0 PLL END**************************/

/************************ARM1 PLL START************************/
//ARM1 PLL (MAIN_PLL7) ADPLLM
#define ARM1_TYPE			    PLL_TYPEOF_ADPLLM
#define ARM1_HSDIV_EXIST	0
#define ARM1_CTRL_EXIST		0
//Set to 800 MHz
#define ARM1_M_FRAC_MULT  0	
#define ARM1_M_INT_MULT  	32
#define ARM1_N_DIV  		  1-1  
#define ARM1_M1_DIV  		  1-1  
#define ARM1_M2_DIV  		  1  
#define ARM1_M3_DIV  		  1  

#define ARM1_CLKINP       25.0
/************************ARM1 PLL END**************************/

/************************DDR PLL START*************************/
//DDR PLL (MAIN_PLL3) ADPLLLJM
#define DDR_TYPE			PLL_TYPEOF_ADPLLLJM
#define DDR_HSDIV_EXIST		0
#define DDR_CTRL_EXIST		0
//Set to 400 MHz
#define DDR_M_FRAC_MULT		0    

//2133MT/s (1066.5MHZ (1066.5 MHz DDR)
//#define DDR_M_INT_MULT      2133
//#define DDR_N_DIV               25-1 
//#define DDR_SD_DIV            9   
//#define DDR_M2_DIV            4 

//1866MT/s (933MHz DDR)
//#define DDR_M_INT_MULT      933
//#define DDR_N_DIV               25-1 
//#define DDR_SD_DIV            4   
//#define DDR_M2_DIV            2 

//1800MT/s (900MHz DDR)
//#define DDR_M_INT_MULT		360
//#define DDR_N_DIV               10-1 
//#define DDR_SD_DIV            4   
//#define DDR_M2_DIV            2 

//1700MT/s (850MHz DDR)
//#define DDR_M_INT_MULT		340
//#define DDR_N_DIV               10-1 
//#define DDR_SD_DIV            4   
//#define DDR_M2_DIV            2 

//1600MT/s (800MHz DDR)
#define DDR_M_INT_MULT		480
#define DDR_N_DIV               10-1 
#define DDR_SD_DIV            5   
#define DDR_M2_DIV            3 


//1500MT/s (750MHz DDR)
//#define DDR_M_INT_MULT		300
//#define DDR_N_DIV               10-1 
//#define DDR_SD_DIV            3   
//#define DDR_M2_DIV            2 

//1400MT/s (700MHz DDR)
//#define DDR_M_INT_MULT		280
//#define DDR_N_DIV               10-1 
//#define DDR_SD_DIV            3   
//#define DDR_M2_DIV            2 

//1333MT/s (666MHz DDR)
//#define DDR_M_INT_MULT        400
//#define DDR_N_DIV              10-1 
//#define DDR_M2_DIV            3 
//#define DDR_SD_DIV            4   


#define DDR_M1_DIV			  1-1 

#define DDR_CLKINP        25.0
/************************DDR PLL END***************************/

/************************PER0 PLL START************************/
//PER0 PLL (MAIN_PLL1) ADPLLLJM
#define PER0_TYPE			PLL_TYPEOF_ADPLLLJM
#define PER0_HSDIV_EXIST	0
#define PER0_CTRL_EXIST		0
//Set to 960 MHz
#define PER0_M_FRAC_MULT 	0
#define PER0_SD_DIV 		  8
#define PER0_M_INT_MULT 	768
#define PER0_N_DIV 			  10-1
#define PER0_M1_DIV 		  1-1
#define PER0_M2_DIV 		  2

#define PER0_CLKINP       25.0
/************************PER0 PLL END**************************/

/************************PER1 PLL Start************************/
//PER1 PLL (MAIN_PLL2) ADPLLLJM
#define PER1_TYPE			    PLL_TYPEOF_ADPLLLJM
#define PER1_HSDIV_EXIST	1
#define PER1_CTRL_EXIST		0
//Set to 300 MHz
#define PER1_M_FRAC_MULT	 0
#define PER1_SD_DIV  		   8
#define PER1_M_INT_MULT 	 720
#define PER1_N_DIV  		   10-1
#define PER1_M1_DIV			   1-1
#define PER1_M2_DIV			   6
#define PER1_HSDIV4			   4-1
#define PER1_HSDIV3			   9-1
#define PER1_HSDIV2			   18-1
#define PER1_HSDIV1			   8-1

#define PER1_CLKINP        25.0
/************************PER1 PLL END**************************/

/************************MCU PLL START************************/
//MCU PLL (MCU_PLL0) ADPLLM
#define MCU_TYPE          PLL_TYPEOF_ADPLLM
#define MCU_HSDIV_EXIST   1
#define MCU_CTRL_EXIST    1
//Set to 400 MHz
#define MCU_M_FRAC_MULT 0
#define MCU_INT_MULT    48
#define MCU_N_DIV       1-1
#define MCU_M1_DIV      1-1
#define MCU_M2_DIV      3
#define MCU_M3_DIV      1
#define MCU_HSDIV4      18-1
#define MCU_HSDIV3      25-1
#define MCU_HSDIV2      30-1
#define MCU_HSDIV1      40-1
//Controller
#define MCU_CTRL_BPDIV  0 //AUXCLK=BPCLK=REFCLK for controller
#define MCU_CTRL_OD1    0 //OBSCLK=REFCLK for controller
#define MCU_CTRL_DIV1   1-1 //400MHZ SYSCLK1 from MCU PLL CLKOUT

#define MCU_CLKINP      25.0
/************************MCU PLL END**************************/

/************************CPSW PLL START************************/
//CPSW PLL (MCU_PLL1) ADPLLM
#define CPSW_TYPE			    PLL_TYPEOF_ADPLLM
#define CPSW_HSDIV_EXIST	1
#define CPSW_CTRL_EXIST		0
//Set to 250 MHz
#define CPSW_M_FRAC_MULT 	0
#define CPSW_M_INT_MULT 	40
#define CPSW_N_DIV 			  1-1
#define CPSW_M1_DIV 		  1-1
#define CPSW_M2_DIV 		  4
#define CPSW_M3_DIV 		  1
#define CPSW_HSDIV4 		  12-1 //support 166MHz to DMTIMER
#define CPSW_HSDIV3 		  15-1
#define CPSW_HSDIV2 		  10-1
#define CPSW_HSDIV1 		  10-1

#define CPSW_CLKINP       25.0
/************************CPSW PLL END**************************/

/************************DSS PLL START*************************/
//DSS PLL (MAIN_PLL4) ADPLLLJM
#define DSS_TYPE			    PLL_TYPEOF_ADPLLLJM
#define DSS_HSDIV_EXIST		0
#define DSS_CTRL_EXIST		0
//Set to 1155 MHz
#define DSS_M_FRAC_MULT   0
#define DSS_SD_DIV     		10
#define DSS_M_INT_MULT    924
#define DSS_N_DIV     		10-1
#define DSS_M1_DIV     		1-1
#define DSS_M2_DIV     		2

#define DSS_CLKINP       25.0
/************************DSS PLL END*************************/

//For 1039.5 MHz output for DPI (MODE 2)
/************************DSS PLL START*************************/
//DSS PLL (MAIN_PLL4) ADPLLLJM
#define MODE2_DSS_TYPE          PLL_TYPEOF_ADPLLLJM
#define MODE2_DSS_HSDIV_EXIST   0
#define MODE2_DSS_CTRL_EXIST    0
//Set to 1039.5 MHz
#define MODE2_DSS_M_FRAC_MULT   0
#define MODE2_DSS_SD_DIV        9
#define MODE2_DSS_M_INT_MULT    2079
#define MODE2_DSS_N_DIV         25-1
#define MODE2_DSS_M1_DIV        1-1
#define MODE2_DSS_M2_DIV        2

#define MODE2_DSS_CLKINP          25.0
/************************DSS PLL END*************************/

//For 497.5 MHz output for OLDI (MODE 3)
/************************DSS PLL START*************************/
//DSS PLL (MAIN_PLL4) ADPLLLJM
#define MODE3_DSS_TYPE          PLL_TYPEOF_ADPLLLJM
#define MODE3_DSS_HSDIV_EXIST   0
#define MODE3_DSS_CTRL_EXIST    0
//Set to 497.5 MHz
#define MODE3_DSS_M_FRAC_MULT   0 
#define MODE3_DSS_SD_DIV        4
#define MODE3_DSS_M_INT_MULT    995
#define MODE3_DSS_N_DIV         25-1
#define MODE3_DSS_M1_DIV        1-1
#define MODE3_DSS_M2_DIV        2

#define MODE3_DSS_CLKINP          25.0
/************************DSS PLL END*************************/


GET_PLL(unsigned int PLL_BASE_ADDR, unsigned int PLL_TYPE_ADPLLM, unsigned int HSDIV_EXIST, unsigned int index, unsigned int debug_info)
{
  //declare variables
  unsigned int M_INT_MULT_val;
  unsigned int N_DIV_val;
  unsigned int M2_DIV_val;
  unsigned int PLLHSDIV4_val;
  unsigned int PLLHSDIV3_val;
  unsigned int PLLHSDIV2_val;
  unsigned int PLLHSDIV1_val;
  float CLKIN_val;
  float dcoclkldo;
  float clkout;
  
  CLKIN_val = Get_CLKIN();    //get input clock
  GEL_TextOut ("CLKIN = %f\n",,,,,CLKIN_val);
 
  if(PLL_TYPE_ADPLLM)
  {
    GEL_TextOut("MULT = %x (%d)\n",,,,,M_INT_MULT_val = READ_BITS(PLL_BASE_ADDR, PLL_FREQ_CTRL0_OFFSET,11, 8),M_INT_MULT_val); //bits 18:8 (M_INT_MULT) of PLL_FREQ_CTRL0
    GEL_TextOut("DIV = %x (%d)\n",,,,,N_DIV_val = READ_BITS(PLL_BASE_ADDR, PLL_FREQ_CTRL0_OFFSET, 7, 0),N_DIV_val); //bits 6:0 (N_DIV) of PLL_FREQ_CTRL0
    GEL_TextOut("M2_DIV = %x (%d)\n",,,,,M2_DIV_val = READ_BITS(PLL_BASE_ADDR, PLL_CLKDIV_OFFSET, 5, 8),M2_DIV_val); //bits 12:8 (M2_DIV) of PLL_CLKDIV
    dcoclkldo = ((float) CLKIN_val*2*(M_INT_MULT_val))/(N_DIV_val+1);
	clkout = dcoclkldo/(2*M2_DIV_val);
  }
  else//ADPLLLJM
  {
	GEL_TextOut("SD_DIV = %x\n",,,,,READ_BITS(PLL_BASE_ADDR, PLL_FREQ_CTRL0_OFFSET,8, 24)); //bits 31:24 (SD_DIV) of PLL_FREQ_CTRL0
    GEL_TextOut("MULT = %x (%d)\n",,,,,M_INT_MULT_val = READ_BITS(PLL_BASE_ADDR, PLL_FREQ_CTRL0_OFFSET,12, 8),M_INT_MULT_val); //bits 19:8 (M_INT_MULT) of PLL_FREQ_CTRL0
    GEL_TextOut("DIV = %x (%d)\n",,,,,N_DIV_val = READ_BITS(PLL_BASE_ADDR, PLL_FREQ_CTRL0_OFFSET, 8, 0),N_DIV_val); //bits 7:0 (N_DIV) of PLL_FREQ_CTRL0
    GEL_TextOut("SEL_FREQ_DCO = %x\n",,,,,READ_BITS(PLL_BASE_ADDR, PLL_FREQ_CTRL1_OFFSET, 3, 24)); //bits 26:24 (SEL_FREQ_DCO) of PLL_FREQ_CTRL1
    GEL_TextOut("M2_DIV = %x (%d)\n",,,,,M2_DIV_val = READ_BITS(PLL_BASE_ADDR, PLL_CLKDIV_OFFSET, 7, 8),M2_DIV_val); //bits 14:8 (M2_DIV) of PLL_CLKDIV
    dcoclkldo = ((float) CLKIN_val*(M_INT_MULT_val))/(N_DIV_val+1);
	clkout = dcoclkldo/M2_DIV_val;
  }
  GEL_TextOut("BYPASS_ACK = %x\n",,,,,READ_BITS(PLL_BASE_ADDR, PLL_STAT_OFFSET,1, 7)); //bit 7 (BYPASS_ACK) of PLL_STAT
  GEL_TextOut("DCOCLKLDO FREQ: %f MHz\n",,,,,dcoclkldo);
  GEL_TextOut("CLKOUT FREQ: %f MHz\n",,,,,clkout);
  if(HSDIV_EXIST) 
  {
	GEL_TextOut("HSDIV1 = %x (%d)\n",,,,,PLLHSDIV1_val = READ_BITS(PLL_BASE_ADDR,PLL_HSDIV_CLKDIV_OFFSET,6,0),PLLHSDIV1_val); //bits 5-0 (HSDIV1) of PLL_HSDIV
	GEL_TextOut("HSDIV2 = %x (%d)\n",,,,,PLLHSDIV2_val = READ_BITS(PLL_BASE_ADDR,PLL_HSDIV_CLKDIV_OFFSET,6,8),PLLHSDIV2_val); //bits 13-8 (HSDIV2) of PLL_HSDIV
	GEL_TextOut("HSDIV3 = %x (%d)\n",,,,,PLLHSDIV3_val = READ_BITS(PLL_BASE_ADDR,PLL_HSDIV_CLKDIV_OFFSET,6,16),PLLHSDIV3_val); //bits 21-16 (HSDIV3) of PLL_HSDIV
	GEL_TextOut("HSDIV4 = %x (%d)\n",,,,,PLLHSDIV4_val = READ_BITS(PLL_BASE_ADDR,PLL_HSDIV_CLKDIV_OFFSET,6,24),PLLHSDIV4_val); //bits 29-24 (HSDIV4) of PLL_HSDIV
	GEL_TextOut("HSDIV_CLKOUT1 = %f MHz\n",,,,,dcoclkldo/(PLLHSDIV1_val+1));
	GEL_TextOut("HSDIV_CLKOUT2 = %f MHz\n",,,,,dcoclkldo/(PLLHSDIV2_val+1));
	GEL_TextOut("HSDIV_CLKOUT3 = %f MHz\n",,,,,dcoclkldo/(PLLHSDIV3_val+1));
	GEL_TextOut("HSDIV_CLKOUT4 = %f MHz\n",,,,,dcoclkldo/(PLLHSDIV4_val+1));
  } 

  //initiate locking sequence
  SET_BITS(PLL_BASE_ADDR, PLL_PROG_OFFSET, 0x3, 2, 0); //bits 1:0 (PROG_SM) of PLL_PROG set to 11
  SET_BITS(PLL_BASE_ADDR, PLL_CTRL_OFFSET, 0, 1, 7); //bit 7 (IDLE) of PLL_CTRL set to 0

}



Get_PLL(unsigned int index)
{
  //declare variables
  unsigned int read_pid = 0;
  unsigned int debug_info;
  unsigned int PLL_BASE_ADDR;
  unsigned int CTRL_BASE_ADDR;
  unsigned int PLL_TYPE_ADPLLM;
  unsigned int HSDIV_EXIST;
  unsigned int CTRL_EXIST;

  //initialize variables
  debug_info = DEBUG; //determine wheather or not to display debug messages
 
  if(index==MCU_PLL_INDEX) 
  {
    PLL_BASE_ADDR = MCU_PLL_BASE_ADDR;
    CTRL_BASE_ADDR = MCU_WKUP_CTRL_BASE_ADDR;
    PLL_TYPE_ADPLLM = MCU_TYPE;
    HSDIV_EXIST = MCU_HSDIV_EXIST;
    CTRL_EXIST = MCU_CTRL_EXIST;
    if(debug_info)
    {
      GEL_TextOut("Selected MCU PLL\n",,,,,);
    }

  }else if(index==MAIN_PLL_INDEX) 
  {
    PLL_BASE_ADDR = MAIN_PLL_BASE_ADDR;
    CTRL_BASE_ADDR = MAIN_CTRL_BASE_ADDR;
    PLL_TYPE_ADPLLM = MAIN_TYPE;
    HSDIV_EXIST = MAIN_HSDIV_EXIST;
    CTRL_EXIST = MAIN_CTRL_EXIST;
    if(debug_info)
    {
      GEL_TextOut("Selected Main PLL\n",,,,,);
    }

  }else if(index==ARM0_PLL_INDEX) 
  {
    PLL_BASE_ADDR = ARM0_PLL_BASE_ADDR;
    CTRL_BASE_ADDR = 0x0;
    PLL_TYPE_ADPLLM = ARM0_TYPE;
    HSDIV_EXIST = ARM0_HSDIV_EXIST;
    CTRL_EXIST = ARM0_CTRL_EXIST;
    if(debug_info)
    {
      GEL_TextOut("Selected ARM0 PLL\n",,,,,);
    }

  }else if(index==ARM1_PLL_INDEX) 
  {
    PLL_BASE_ADDR = ARM1_PLL_BASE_ADDR;
    CTRL_BASE_ADDR = 0x0;
    PLL_TYPE_ADPLLM = ARM1_TYPE;
    HSDIV_EXIST = ARM1_HSDIV_EXIST;
    CTRL_EXIST = ARM1_CTRL_EXIST;
    if(debug_info)
    {
      GEL_TextOut("Selected ARM1 PLL\n",,,,,);
    }

  }else if(index==DDR_PLL_INDEX) 
  {
    PLL_BASE_ADDR = DDR_PLL_BASE_ADDR;
    CTRL_BASE_ADDR = 0x0;
    PLL_TYPE_ADPLLM = DDR_TYPE;
    HSDIV_EXIST = DDR_HSDIV_EXIST;
    CTRL_EXIST = DDR_CTRL_EXIST;
    if(debug_info)
    {
      GEL_TextOut("Selected DDR PLL\n",,,,,);
    }

  }else if(index==PER0_PLL_INDEX) 
  {
    PLL_BASE_ADDR = PER0_PLL_BASE_ADDR;
    CTRL_BASE_ADDR = 0x0;
    PLL_TYPE_ADPLLM = PER0_TYPE;
    HSDIV_EXIST = PER0_HSDIV_EXIST;
    CTRL_EXIST = PER0_CTRL_EXIST;
    if(debug_info)
    {
      GEL_TextOut("Selected PER0 PLL\n",,,,,);
    }

  }else if(index==PER1_PLL_INDEX) 
  {
    PLL_BASE_ADDR = PER1_PLL_BASE_ADDR;
    CTRL_BASE_ADDR = 0x0;
    PLL_TYPE_ADPLLM = PER1_TYPE;
    HSDIV_EXIST = PER1_HSDIV_EXIST;
    CTRL_EXIST = PER1_CTRL_EXIST;
    if(debug_info)
    {
      GEL_TextOut("Selected PER1 PLL\n",,,,,);
    }

  }else if(index==CPSW_PLL_INDEX) 
  {
    PLL_BASE_ADDR = CPSW_PLL_BASE_ADDR;
    CTRL_BASE_ADDR = 0x0;
    PLL_TYPE_ADPLLM = CPSW_TYPE;
    HSDIV_EXIST = CPSW_HSDIV_EXIST;
    CTRL_EXIST = CPSW_CTRL_EXIST;
    if(debug_info)
    {
      GEL_TextOut("Selected CPSW PLL\n",,,,,);
    }

  }else if(index==DSS_PLL_INDEX) 
  {
    PLL_BASE_ADDR = DSS_PLL_BASE_ADDR;
    CTRL_BASE_ADDR = 0x0;
    PLL_TYPE_ADPLLM = DSS_TYPE;
    HSDIV_EXIST = DSS_HSDIV_EXIST;
    CTRL_EXIST = DSS_CTRL_EXIST;
    if(debug_info)
    {
      GEL_TextOut("Selected DSS PLL\n",,,,,);
    }

  }else
  {
    GEL_TextOut("ERROR: NO SUCH INDEX. PLL NOT SELECTED. BASE ADDRS AND PLL PROPERTIES NOT SET.\n",,,,,);
    return 0;
  }
  if(debug_info)
  {
    GEL_TextOut("Base Addr and PLL Property Variables Initialized\n",,,,,);
  }

  
  //Check for running from M3
  read_pid = *((unsigned int *)MAIN_PSC_BASE); 
  if (read_pid != PSC_PID)
  {
    if(debug_info)
    {
      GEL_TextOut("Running from M3\n",,,,,);
    }
        if((index == 1) || (index == 8))
        {
          //Change base addresses for M3 access to MCU PLL MMR
          PLL_BASE_ADDR += M3_MCU_OFFSET;
            CTRL_BASE_ADDR += M3_MCU_OFFSET;
        }else{
          //Change base addresses for M3 access to MAIN PLL MMR
          PLL_BASE_ADDR += M3_MAIN_OFFSET;
            CTRL_BASE_ADDR += M3_MAIN_OFFSET;
        }
  }
  //-------------------------------------------------------------------------//

  //unlock registers
  SET_BITS(PLL_BASE_ADDR, PLL_KICK0_OFFSET, KICK0_UNLOCK, 32, 0);
  SET_BITS(PLL_BASE_ADDR, PLL_KICK1_OFFSET, KICK1_UNLOCK, 32, 0);
  if(debug_info)
  {
    GEL_TextOut("KICK registers unlocked\n",,,,,);
  }

  GET_PLL(PLL_BASE_ADDR, PLL_TYPE_ADPLLM, HSDIV_EXIST, index, debug_info);

  //relock kick registers
  SET_BITS(PLL_BASE_ADDR, PLL_KICK0_OFFSET, KICK_LOCK, 32, 0);
  SET_BITS(PLL_BASE_ADDR, PLL_KICK1_OFFSET, KICK_LOCK, 32, 0);
  if(debug_info)
  {
    GEL_TextOut("KICK registers relocked\n",,,,,);
  }
}

menuitem "Get PLL Configuration"
hotmenu Get_MCU_PLL0_MCU()
{
	GEL_TextOut("*****\n");
	GEL_TextOut("Getting MCU PLL in progress...\n",,,,,);
	Get_PLL(MCU_PLL0_PLL_INDEX);
	GEL_TextOut("Getting MCU PLL done!\n",,,,,);
}
hotmenu Get_MCU_PLL1_CPSW()
{
	GEL_TextOut("*****\n");
	GEL_TextOut("Getting CPSW PLL in progress...\n",,,,,);
	Get_PLL(MCU_PLL1_PLL_INDEX);
	GEL_TextOut("Getting CPSW PLL done!\n",,,,,);
}
hotmenu Get_MAIN_PLL0()
{
	GEL_TextOut("*****\n");
	GEL_TextOut("Getting MAIN PLL in progress...\n",,,,,);
	Get_PLL(MAIN_PLL0_PLL_INDEX);
	GEL_TextOut("Getting MAIN PLL done!\n",,,,);
}
hotmenu Get_MAIN_PLL1_PER0()
{
	GEL_TextOut("*****\n");
	GEL_TextOut("Getting PER0 PLL in progress...\n",,,,,);
	Get_PLL(MAIN_PLL1_PLL_INDEX);
	GEL_TextOut("Getting PER0 PLL done!\n",,,,,);
}
hotmenu Get_MAIN_PLL2_PER1()
{
	GEL_TextOut("*****\n");
	GEL_TextOut("Getting PER1 PLL in progress...\n",,,,,);
	Get_PLL(MAIN_PLL2_PLL_INDEX);
	GEL_TextOut("Getting PER1 PLL done!\n",,,,,);
}
hotmenu Get_MAIN_PLL3_DDR()
{
	GEL_TextOut("*****\n");
	GEL_TextOut("Getting DDR PLL in progress...\n",,,,,);
	Get_PLL(MAIN_PLL3_PLL_INDEX);
	GEL_TextOut("Getting DDR PLL done!\n",,,,,);
}
hotmenu Get_MAIN_PLL4_DSS() 
{
	GEL_TextOut("*****\n");
	GEL_TextOut("Getting DSS PLL in progress...\n",,,,,);
	Get_PLL(MAIN_PLL4_PLL_INDEX);
	GEL_TextOut("Getting DSS PLL done!\n",,,,,);
}
hotmenu Get_MAIN_PLL6_ARM0()
{
	GEL_TextOut("*****\n");
	GEL_TextOut("Getting ARM0 PLL in progress...\n",,,,,);
	Get_PLL(MAIN_PLL6_PLL_INDEX);
	GEL_TextOut("Getting ARM0 PLL done!\n",,,,,);
}
hotmenu Get_MAIN_PLL7_ARM1()
{
	GEL_TextOut("*****\n");
	GEL_TextOut("Getting ARM1 PLL in progress...\n",,,,,);
	Get_PLL(MAIN_PLL7_PLL_INDEX);
	GEL_TextOut("Getting ARM1 PLL done!\n",,,,,);
}
hotmenu Get_All_PLL()
{
  GEL_TextOut("Getting all PLLs in progress. This may take some time.\n",,,,,);
  Get_MCU_PLL0_MCU(); //MCU
  Get_MCU_PLL1_CPSW(); //CPSW
  Get_MAIN_PLL0(); //MAIN
  Get_MAIN_PLL1_PER0(); //PER0
  Get_MAIN_PLL2_PER1(); //PER1
  Get_MAIN_PLL3_DDR(); //DDR
  Get_MAIN_PLL4_DSS() ; //DSS
  Get_MAIN_PLL6_ARM0(); //ARM0
  Get_MAIN_PLL7_ARM1(); //ARM1
  GEL_TextOut("Getting all PLLs done!\n",,,,,);
}

hotmenu PLL_Unlock_All()
{
    int unlock_flag;
    unsigned int debug_info = DEBUG;
    unsigned int base;
    unsigned int read_pid;
        
    base = AdjustBaseAddr(MCU_PLL_BASE_ADDR);
    Write_MMR(base+PLL_KICK0_OFFSET, KICK0_UNLOCK);
    Write_MMR(base+PLL_KICK1_OFFSET, KICK1_UNLOCK);
    unlock_flag = Read_MMR(base+PLL_KICK0_OFFSET) & 0x1;
    if(unlock_flag == 1)
        GEL_TextOut("MCU PLL0 configuration registers successfully unlocked!\n");
    else
        GEL_TextOut("Error: MCU PLL0 configuration registers did not unlock!\n");
    
    base = AdjustBaseAddr(CPSW_PLL_BASE_ADDR);
    Write_MMR(base+PLL_KICK0_OFFSET, KICK0_UNLOCK);
    Write_MMR(base+PLL_KICK1_OFFSET, KICK1_UNLOCK);
    unlock_flag = Read_MMR(base+PLL_KICK0_OFFSET) & 0x1;
    if(unlock_flag == 1)
        GEL_TextOut("MCU PLL1 (CPSW) configuration registers successfully unlocked!\n");
    else
        GEL_TextOut("Error: MCU PLL1 (CPSW) configuration registers did not unlock!\n");
    
    base = AdjustBaseAddr(MAIN_PLL_BASE_ADDR);
    Write_MMR(base+PLL_KICK0_OFFSET, KICK0_UNLOCK);
    Write_MMR(base+PLL_KICK1_OFFSET, KICK1_UNLOCK);
    unlock_flag = Read_MMR(base+PLL_KICK0_OFFSET) & 0x1;
    if(unlock_flag == 1)
        GEL_TextOut("MAIN PLL configuration registers successfully unlocked!\n");
    else
        GEL_TextOut("Error: MAIN PLL configuration registers did not unlock!\n");
    
    base = AdjustBaseAddr(PER0_PLL_BASE_ADDR);
    Write_MMR(base+PLL_KICK0_OFFSET, KICK0_UNLOCK);
    Write_MMR(base+PLL_KICK1_OFFSET, KICK1_UNLOCK);
    unlock_flag = Read_MMR(base+PLL_KICK0_OFFSET) & 0x1;
    if(unlock_flag == 1)
        GEL_TextOut("PER0 PLL configuration registers successfully unlocked!\n");
    else
        GEL_TextOut("Error: PER0 PLL configuration registers did not unlock!\n");
       
    base = AdjustBaseAddr(PER1_PLL_BASE_ADDR);
    Write_MMR(base+PLL_KICK0_OFFSET, KICK0_UNLOCK);
    Write_MMR(base+PLL_KICK1_OFFSET, KICK1_UNLOCK);
    unlock_flag = Read_MMR(base+PLL_KICK0_OFFSET) & 0x1;
    if(unlock_flag == 1)
        GEL_TextOut("PER1 PLL configuration registers successfully unlocked!\n");
    else
        GEL_TextOut("Error: PER1 PLL configuration registers did not unlock!\n");
           
    base = AdjustBaseAddr(DDR_PLL_BASE_ADDR);
    Write_MMR(base+PLL_KICK0_OFFSET, KICK0_UNLOCK);
    Write_MMR(base+PLL_KICK1_OFFSET, KICK1_UNLOCK);
    unlock_flag = Read_MMR(base+PLL_KICK0_OFFSET) & 0x1;
    if(unlock_flag == 1)
        GEL_TextOut("DDR PLL configuration registers successfully unlocked!\n");
    else
        GEL_TextOut("Error: DDR PLL configuration registers did not unlock!\n");
               
    base = AdjustBaseAddr(DSS_PLL_BASE_ADDR);
    Write_MMR(base+PLL_KICK0_OFFSET, KICK0_UNLOCK);
    Write_MMR(base+PLL_KICK1_OFFSET, KICK1_UNLOCK);
    unlock_flag = Read_MMR(base+PLL_KICK0_OFFSET) & 0x1;
    if(unlock_flag == 1)
        GEL_TextOut("DSS PLL configuration registers successfully unlocked!\n");
    else
        GEL_TextOut("Error: DSS PLL configuration registers did not unlock!\n");
               
    base = AdjustBaseAddr(ARM0_PLL_BASE_ADDR);
    Write_MMR(base+PLL_KICK0_OFFSET, KICK0_UNLOCK);
    Write_MMR(base+PLL_KICK1_OFFSET, KICK1_UNLOCK);
    unlock_flag = Read_MMR(base+PLL_KICK0_OFFSET) & 0x1;
    if(unlock_flag == 1)
        GEL_TextOut("ARM0 PLL configuration registers successfully unlocked!\n");
    else
        GEL_TextOut("Error: ARM0 PLL configuration registers did not unlock!\n");
               
    base = AdjustBaseAddr(ARM1_PLL_BASE_ADDR);
    Write_MMR(base+PLL_KICK0_OFFSET, KICK0_UNLOCK);
    Write_MMR(base+PLL_KICK1_OFFSET, KICK1_UNLOCK);
    unlock_flag = Read_MMR(base+PLL_KICK0_OFFSET) & 0x1;
    if(unlock_flag == 1)
        GEL_TextOut("ARM1 PLL configuration registers successfully unlocked!\n");
    else
        GEL_TextOut("Error: ARM1 PLL configuration registers did not unlock!\n");
    
}