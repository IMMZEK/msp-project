<?xml version="1.0" encoding="UTF-8" standalone="yes"?>


<module description="MSS_RCM" id="MSS_RCM">
  
  
  <register acronym="SOFTRST1" id="SOFTRST1" offset="0x4" width="32">
    
  <bitfield begin="7" description="Write 0xAD to assert a MSS CR4 only reset.Self clearing  By design reset will happen either lower 4 bit is 0XD or Upper four bit is 0xA." end="0" id="CR4SYSRST" rwaccess="" width="8"></bitfield>
  </register>
  
  
  <register acronym="SOFTRST2" id="SOFTRST2" offset="0x8" width="32">
    
  <bitfield begin="31" description="Write 0xAD to assert a VIM only reset.  By design reset will happen either lower 4 bit is 0XD or Upper four bit is 0xA." end="24" id="VIMRST" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="SOFTRST3" id="SOFTRST3" offset="0xC" width="32">
    
  <bitfield begin="7" description="Write 0xAD to assert a WDT (RTI used for watch dog) only reset.  By design reset will happen either lower 4 bit is 0XD or Upper four bit is 0xA." end="0" id="WDTRST" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="CLKDIVCTL0" id="CLKDIVCTL0" offset="0x18" width="32">
    
  <bitfield begin="31" description="Divide value for FDCAN source clock selected by field FDCANCLKSRCSEL in register CLKSRCSEL0 0000_0000 => div1 0000_0001 => div2 | | 1111_1111 => div256" end="24" id="FDCANCLKDIV" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="Divide value for DCAN source clock selected by field DCANCLKSRCSEL in register CLKSRCSEL0 0000_0000 => div1 0000_0001 => div2 | | 1111_1111 => div256" end="16" id="DCANCLKDIV" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Divide value for MSS subsystem source clock selected by field VCLKCLKSRCSEL in register CLKSRCSEL1 0000_0000 => div1 0000_0001 => div2 | | 1111_1111 => div256" end="8" id="VCLKCLKDIV" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="CLKSRCSEL0" id="CLKSRCSEL0" offset="0x1C" width="32">
    
  <bitfield begin="19" description="Select clock source for QSPI baud clock 000 => VCLK 001 => RCCLK (10Mhz) 010 => 600Mhz PLL divided clock 011 => 240Mhz PLL divided clock 100 => CPUCLK 101 => RCCLK 110 => REFCLK from ANA (40Mhz or 50 Mhz or 80Mh or 100Mh)  111 => RCCLK" end="16" id="QSPICLKSRCSEL" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="11" description="Select clock source for FDCANCLKSRCSEL 000 => VCLK 001 => RCCLK (10Mhz) 010 => 600Mhz PLL divided clock 011 => 240Mhz PLL divided clock 100 => CPUCLK 101 => RCCLK 110 => REFCLK from ANA 111 => RCCLK " end="8" id="FDCANCLKSRCSEL" rwaccess="RW" width="4"></bitfield>
    
  <bitfield begin="3" description="Select clock source for DCAN 000 => VCLK 001 => RCCLK (10Mhz) 010 => 600Mhz PLL divided clock 011 => 240Mhz PLL divided clock 100 => CPUCLK 101 => RCCLK 110 => REFCLK from ANA (40Mhz or 50 Mhz or 80Mh or 100Mh)  111 => RCCLK" end="0" id="DCANCLKSRCSEL" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="CR4CTL" id="CR4CTL" offset="0x20" width="32">
    
  <bitfield begin="23" description="When CR4MEMSWAP is 0xAD : Write 0xAD to this field enable the CR4MEMSWAP only after a CR4 reset â€“ either by writing to CR4SYSRST or by writing to PRCR register in CR4 debug space." end="16" id="MEMSWAPWAIT" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Write 0xAD will map the MSS CR4 0x0000_0000 to MSS CR4 TCMA RAM start address." end="8" id="CR4MEMSWAP" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="CLKGATE" id="CLKGATE" offset="0x3C" width="32">
    
  <bitfield begin="5" description="Pre clock divider gate for FDCAN clock. Gates the clock before divider. Gates the clock before divider. 1: Gate the clock. 0: Ungate the clock." end="5" id="FDCANCLKGATE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="4" description="Pre clock divider gate for DCAN  clock. Gates the clock before divider. Gates the clock before divider. 1: Gate the clock. 0: Ungate the clock." end="4" id="DCANCLKGATE" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="3" description="Pre clock divider gate for QSPI  clock. Gates the clock before divider. Gates the clock before divider. 1: Gate the clock. 0: Ungate the clock." end="3" id="QSPICLKGATE" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CLKSRCSEL1" id="CLKSRCSEL1" offset="0x44" width="32">
    
  <bitfield begin="3" description="Select clock source for MSS subsystem VCLK 000 =>CPUCLK  from ANA(XTAL 40Mhz or 50 Mhz or 80Mh or 100Mhz/ RCCLK in WU limp mode) 001 => RCCLK (10Mhz) 010 => 600Mhz PLL divided clock 011 => 240Mhz PLL divided clock 100 => RCCLK (10Mhz) 101 => RCCLK (10Mhz) 110 => REFCLK from ANA (40Mhz or 50 Mhz or 80Mh or 100Mh)  111 => RCCLK(10Mhz)" end="0" id="VCLKCLKSRCSEL" rwaccess="RW" width="4"></bitfield>
  </register>
  
  
  <register acronym="CURRCLKDIV0" id="CURRCLKDIV0" offset="0x54" width="32">
    
  <bitfield begin="31" description="Returns Current divide value of FDCAN baud clock divider." end="24" id="FDCANCURRCLKDIV" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="23" description="Returns Current divide value of DCAN baud clock divider." end="16" id="DCANCURRCLKDIV" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="15" description="Returns Current divide value of VCLK divider." end="8" id="VCLKCURRCLKDIV" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="MEMINITSTART" id="MEMINITSTART" offset="0x5C" width="32">
    
  <bitfield begin="31" description="Memory hardware initialization global enable key. Write 0XAD to enable MEMINIT." end="24" id="MEMINITKEY" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="17" description="Writing '1' will trigger DSS- BSS mailbox initialization.Self clearing" end="17" id="BSSMBOX4GEMMEM" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="16" description="Writing '1' will trigger DSS- MSS mailbox initialization.Self clearing" end="16" id="MSSMBOX4GEMMEM" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="15" description="Writing '1' will trigger DSS- MSS mailbox initialization.Self clearing" end="15" id="GEMMBOX4MSSMEM" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="14" description="Writing '1' will trigger DSS- BSS mailbox initialization.Self clearing" end="14" id="GEMMBOX4BSSMEM" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="9" description="Writing '1' will trigger DMA2 memory initialization.Self clearing" end="9" id="DMA2MEM" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="8" description="Writing '1' will trigger MSS- BSS mailbox initialization.Self clearing" end="8" id="BSSMBOX4MSSMEM" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="7" description="Writing '1' will trigger MSS- BSS mailbox initialization.Self clearing" end="7" id="MSSMBOX4BSSMEM" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="6" description="Writing '1' will trigger DCAN memory initialization.Self clearing" end="6" id="DCANMEM" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="5" description="Writing '1' will trigger SPIB memory initialization.Self clearing" end="5" id="SPIBMEM" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="4" description="Writing '1' will trigger SPIA memory initialization.Self clearing" end="4" id="SPIAMEM" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="3" description="Writing '1' will trigger VIM memory initialization.Self clearing" end="3" id="VIMMEM" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="2" description="Writing '1' will trigger DMA memory initialization.Self clearing" end="2" id="DMAMEM" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="1" description="Writing '1' will trigger MSS TCMB memory initialization.Self clearing" end="1" id="CR4TCMBMEM" rwaccess="" width="1"></bitfield>
    
  <bitfield begin="0" description="Writing '1' will trigger MSS TCMA memory initialization.Self clearing" end="0" id="CR4TCMAMEM" rwaccess="" width="1"></bitfield>
  </register>
  
  
  <register acronym="CURRCLKDIV1" id="CURRCLKDIV1" offset="0x60" width="32">
    
  <bitfield begin="7" description="Returns Current divide value of QSPI_CLK divider." end="0" id="QSPICURRCLKDIV" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="MEMINITDONE" id="MEMINITDONE" offset="0x6C" width="32">
    
  <bitfield begin="17" description="Memory Initialization done status for DSS- BSS mailbox" end="17" id="BSSMBOX4GEMMEM" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="16" description="Memory Initialization done status for DSS- MSS mailbox" end="16" id="MSSMBOX4GEMMEM" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="15" description="Memory Initialization done status for DSS- MSS mailbox" end="15" id="GEMMBOX4MSSMEM" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="14" description="Memory Initialization done status for DSS- BSS mailbox" end="14" id="GEMMBOX4BSSMEM" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="9" description="Memory Initialization done status for MSS DMA2 memory" end="9" id="DMA2MEM" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="8" description="Memory Initialization done status for MSS- BSS mailbox" end="8" id="BSSMBOX4MSSMEM" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="7" description="Memory Initialization done status for MSS- BSS mailbox" end="7" id="MSSMBOX4BSSMEM" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="6" description="Memory Initialization done status for DCAN memory" end="6" id="DCANMEM" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="5" description="Memory Initialization done status for MSS SPIB memory" end="5" id="SPIBMEM" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="4" description="Memory Initialization done status for MSS SPIA memory" end="4" id="SPIAMEM" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="3" description="Memory Initialization done status for MSS VIM memory" end="3" id="VIMMEM" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="2" description="Memory Initialization done status for MSS DMA memory" end="2" id="DMAMEM" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="1" description="Memory Initialization done status for MSS TCMB memory" end="1" id="CR4TCMBMEM" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="Memory Initialization done status for MSS TCMA memory" end="0" id="CR4TCMAMEM" rwaccess="R" width="1"></bitfield>
  </register>
  
  
  <register acronym="ECCENMSSGEM" id="ECCENMSSGEM" offset="0x70" width="32">
    
  <bitfield begin="31" description="7:0  :   Writing 0xAD will enable ECC for MSS- DSS mailbox 15:8:   Writing 0xAD will enable ECC for MSS- DSS mailbox 18:16 : Write 3'b111 to clear the Address captured because of ECC error in MSS mailbox for GEM 21:19:  Write 3'b111 to clear the Address captured because of ECC error. In GEM mailbox for MSS" end="0" id="ECCENMSSGEM" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="ECCCAPTMSSGEM" id="ECCCAPTMSSGEM" offset="0x74" width="32">
    
  <bitfield begin="31" description="7:0 :   mss_mbox4gem_ecc_fault_address 14:8 : mss_mbox4gem_repaired_bit 23:16 :  gem_mbox4mss_ecc_fault_address 30:24 : gem_mbox4mss_repaired_bit" end="0" id="ECCCAPTMSSGEM" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="ECCENBSSGEM" id="ECCENBSSGEM" offset="0x78" width="32">
    
  <bitfield begin="31" description="7:0  :   Writing 0xAD will enable ECC for DSS- BSS mailbox 15:8:   Writing 0xAD will enable ECC for DSS- BSS mailbox 18:16 : Write 3'b111 to clear the Address captured because of ECC error in GEM mailbox for BSS 21:19:  Write 3'b111 to clear the Address captured because of ECC error in BSS mailbox for GEM" end="0" id="ECCENBSSGEM" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="ECCCAPTBSSGEM" id="ECCCAPTBSSGEM" offset="0x7C" width="32">
    
  <bitfield begin="31" description="7:0 :   bss_mbox4gem_ecc_fault_address 14:8 : bss_mbox4gem_repaired_bit 23:16 : gem_mbox4bss_ecc_fault_address 30:24 : gem_mbox4bss_repaired_bit" end="0" id="ECCCAPTBSSGEM" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="USERMODEEN" id="USERMODEEN" offset="0x80" width="32">
    
  <bitfield begin="31" description="Write 0XADADADAD to enable user mode write access to MSS RCM space." end="0" id="USERMODEEN" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="NSYSPERUSERMODEN" id="NSYSPERUSERMODEN" offset="0x84" width="32">
    
  <bitfield begin="31" description="2:0     : Write 3'b111 to enable user mode access to SPIA 5:3     : Write 3'b111 to enable user mode access to SPIB 10:8   : Write 3'b111 to enable user mode access to GIO 13:11 : Write 3'b111 to enable user mode  access to QSPI 18:16 : Write 3'b111 to enable user mode  access to SCIA 21:19 : Write 3'b111 to enable user mode  access to SCIB 26:24 : Write 3'b111 to enable user mode  access to DCAN " end="0" id="NSYSPERUSERMODEN" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SECURERAMMMI" id="SECURERAMMMI" offset="0x88" width="32">
    
  <bitfield begin="16" description="Memory Initialization done status for Secure Key RAM" end="16" id="SECURERAMINITDONE" rwaccess="R" width="1"></bitfield>
    
  <bitfield begin="0" description="Writing '1' will trigger Secure Key RAM memory initialization.Self clearing" end="0" id="SECURERAMINIT" rwaccess="" width="1"></bitfield>
  </register>
  
  
  <register acronym="SECURERAMECC" id="SECURERAMECC" offset="0x8C" width="32">
    
  <bitfield begin="31" description="Secure key RAM repaired bit" end="24" id="SECURERAMBIT" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="23" description="Secure Key RAM_ecc_fault_address" end="16" id="SECURERAMADDR" rwaccess="R" width="8"></bitfield>
    
  <bitfield begin="10" description="10:8 : Write 3'b111 to clear the Address captured because of ECC error" end="8" id="SECURERAMECCCLR" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="7" description="7:0  :   Writing 0xAD will enable ECC for Secure key RAM" end="0" id="SECURERAMECCEN" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="ESMGATE0" id="ESMGATE0" offset="0x90" width="32">
    
  <bitfield begin="31" description="write 4'b111 to Gate  [3:0]   : Gate ESM group2 line 0 [7:4]   : Gate ESM group2 line 1 [11:8]  : Gate ESM group2 line 2 [15:12] : Gate ESM group2 line 3 [19:16] : Gate ESM group2 line 4 [23:20] : Gate ESM group2 line 5 [27:24] : Gate ESM group2 line 6 [31:28] : Gate ESM group2 line 7 Static register setting.Should not be changed on the fly" end="0" id="ESMGATE0" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="ESMGATE1" id="ESMGATE1" offset="0x94" width="32">
    
  <bitfield begin="31" description="write 4'b111 to Gate  [3:0]   : Gate ESM group2 line 8 [7:4]   : Gate ESM group2 line 9 [11:8]  : Gate ESM group2 line 10 [15:12] : Gate ESM group2 line 11 [19:16] : Gate ESM group2 line 12 [23:20] : Gate ESM group2 line 13 [27:24] : Gate ESM group2 line 14 [31:28] : Gate ESM group2 line 15 Static register setting.Should not be changed on the fly" end="0" id="ESMGATE1" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="ESMGATE2" id="ESMGATE2" offset="0x98" width="32">
    
  <bitfield begin="31" description="write 4'b111 to Gate  [3:0]   : Gate ESM group2 line 16 [7:4]   : Gate ESM group2 line 17 [11:8]  : Gate ESM group2 line 18 [15:12] : Gate ESM group2 line 19 [19:16] : Gate ESM group2 line 20 [23:20] : Gate ESM group2 line 21 [27:24] : Gate ESM group2 line 22 [31:28] : Gate ESM group2 line 23 Static register setting.Should not be changed on the fly" end="0" id="ESMGATE2" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="ESMGATE3" id="ESMGATE3" offset="0x9C" width="32">
    
  <bitfield begin="31" description="write 4'b111 to Gate  [3:0]   : Gate ESM group2 line 16 [7:4]   : Gate ESM group2 line 17 [11:8]  : Gate ESM group2 line 18 [15:12] : Gate ESM group2 line 19 [19:16] : Gate ESM group2 line 20 [23:20] : Gate ESM group2 line 21 [27:24] : Gate ESM group2 line 22 [31:28] : Gate ESM group2 line 23 Static register setting.Should not be changed on the fly" end="0" id="ESMGATE3" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="ESMGATE4" id="ESMGATE4" offset="0xA0" width="32">
    
  <bitfield begin="31" description="write 4'b111 to Gate  [3:0]   : Gate ESM group3 line 0 [7:4]   : Gate ESM group3 line 1 [11:8]  : Gate ESM group3 line 2 [15:12] : Gate ESM group3 line 3 [19:16] : Gate ESM group3 line 4 [23:20] : Gate ESM group3 line 5 [27:24] : Gate ESM group3 line 6 [31:28] : Gate ESM group3 line 7 Static register setting.Should not be changed on the fly" end="0" id="ESMGATE4" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="KEY" id="KEY" offset="0xAC" width="32">
    
  <bitfield begin="31" description="Kicker Register. The value 83E7_83E7h must be written as part of the process to unlock the CPU write access to the MSS RCM registers" end="0" id="KEY" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="SWIRQA" id="SWIRQA" offset="0xB8" width="32">
    
  <bitfield begin="31" description="Write 0XAD to trigger interrupt." end="24" id="SWIRQ1" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="Not Used.Reserved" end="16" id="SWIRQ1DAT" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Write 0XAD to trigger interrupt." end="8" id="SWIRQ0" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Not Used.Reserved" end="0" id="SWIRQ0DAT" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="SWIRQB" id="SWIRQB" offset="0xBC" width="32">
    
  <bitfield begin="31" description="Write 0XAD to trigger interrupt." end="24" id="SWIRQ3" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="Not Used.Reserved" end="16" id="SWIRQ3DAT" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Write 0XAD to trigger interrupt." end="8" id="SWIRQ2" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Not Used.Reserved" end="0" id="SWIRQ2DAT" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="MISCCTL0" id="MISCCTL0" offset="0xC0" width="32">
    
  <bitfield begin="24" description="Write 111 to make TCMB1 EZ to '1' regardless of Functional value." end="22" id="TCMB1EZDIS" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="21" description="Write 111 to make TCMB0 EZ to '1' regardless of Functional value." end="19" id="TCMB0EZDIS" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="18" description="Write 111 to make TCMA EZ to '1' regardless of Functional value." end="16" id="TCMAEZDIS" rwaccess="RW" width="3"></bitfield>
  </register>
  
  
  <register acronym="ATCMERRCAPTCTL" id="ATCMERRCAPTCTL" offset="0xC4" width="32">
    
  <bitfield begin="27" description="TCM address for which parity error happened" end="8" id="ERRATCADDR" rwaccess="R" width="20"></bitfield>
    
  <bitfield begin="5" description="Write 111 to force error in TCM address control parity check logic." end="3" id="ATCFORCEERR" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="2" description="When parity error happens on TCM address control path, Latch that captures the address for which error happened is disabled. Write 111 to re-enable the latching.Self clearing" end="0" id="ERRATCADDRCLR" rwaccess="" width="3"></bitfield>
  </register>
  
  
  <register acronym="B0TCMERRCAPTCTL" id="B0TCMERRCAPTCTL" offset="0xC8" width="32">
    
  <bitfield begin="27" description="TCM address for which parity error happened" end="8" id="ERRB0TCADDR" rwaccess="R" width="20"></bitfield>
    
  <bitfield begin="5" description="Write 111 to force error in TCM address control parity check logic." end="3" id="B0TCFORCEERR" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="2" description="When parity error happens on TCM address control path, Latch that captures the address for which error happened is disabled. Write 111 to re-enable the latching.Self clearing" end="0" id="ERRB0TCADDRCLR" rwaccess="" width="3"></bitfield>
  </register>
  
  
  <register acronym="B1TCMERRCAPTCTL" id="B1TCMERRCAPTCTL" offset="0xCC" width="32">
    
  <bitfield begin="27" description="TCM address for which parity error happened" end="8" id="ERRB1TCADDR" rwaccess="R" width="20"></bitfield>
    
  <bitfield begin="5" description="Write 111 to force error in TCM address control parity check logic." end="3" id="B1TCFORCEERR" rwaccess="RW" width="3"></bitfield>
    
  <bitfield begin="2" description="When parity error happens on TCM address control path, Latch that captures the address for which error happened is disabled. Write 111 to re-enable the latching.Self clearing" end="0" id="ERRB1TCADDRCLR" rwaccess="" width="3"></bitfield>
  </register>
  
  
  <register acronym="SOFTCORERST" id="SOFTCORERST" offset="0xD0" width="32">
    
  <bitfield begin="31" description="0xAD : When CR4SYSRST is set, Before asserting the reset to CR4 wait for CR4 to enter WFI. 0X0: Dont wait for WFI" end="24" id="RST_WFICHECKEN" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Wait for programmed number of clock cycle before reset is asserted to CR4." end="8" id="RSTTOASSRTDLY" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="RSTCAUSE" id="RSTCAUSE" offset="0xD8" width="32">
    
  <bitfield begin="7" description="Gives cause of MSS reset 0000_1001 :  System out of NRESET  0000_1000 :  Warm Reset 0000_0010  : MSS only Wdog Reset. 0000_0100 : MSS subsystem reset because of  Software trigger. 0010_0000 : CR4 reset because of  Software trigger. 0001_0000 : STC reset 0100_0000 : CR4 reset because of writing to PRCR register in CR4 debug space. 1000_0000 : CR4 only Wdog reset" end="0" id="RSTCAUSE" rwaccess="R" width="8"></bitfield>
  </register>
  
  
  <register acronym="RSTCAUSECLR" id="RSTCAUSECLR" offset="0xDC" width="32">
    
  <bitfield begin="7" description="Write 0xAD to clear RSTCAUSE.Self clearing" end="0" id="RSTCAUSECLR" rwaccess="" width="8"></bitfield>
  </register>
  
  
  <register acronym="SPITRIGSRC" id="SPITRIGSRC" offset="0xE0" width="32">
    
  <bitfield begin="26" description="[20:16] --> Trigger sources for MIBSPIB" end="16" id="SPIBTRIG" rwaccess="RW" width="11"></bitfield>
    
  <bitfield begin="8" description="1st bit ofTRG_SRC input of SPIA." end="8" id="SPIATRIG1" rwaccess="RW" width="1"></bitfield>
    
  <bitfield begin="0" description="0th bit ofTRG_SRC input of SPIA." end="0" id="SPIATRIG0" rwaccess="RW" width="1"></bitfield>
  </register>
  
  
  <register acronym="CLKINUSE" id="CLKINUSE" offset="0xE4" width="32">
    
  <bitfield begin="15" description="Current Clock Source Select Mux value for QSPI CLK 000 => VCLK 001 => RCCLK (10Mhz) 010 => 600Mhz PLL divided clock 011 => 240Mhz PLL divided clock 100 => CPUCLK 101 => RCCLK 110 => REFCLK 111 => RCCLK (10Mhz)" end="12" id="QSPICLKINUSE" rwaccess="R" width="4"></bitfield>
    
  <bitfield begin="11" description="Current Clock Source Select Mux value for DCAN CLK 000 => VCLK 001 => RCCLK (10Mhz) 010 => 600Mhz PLL divided clock 011 => 240Mhz PLL divided clock 100 => CPUCLK 101 => RCCLK 110 => REFCLK 111 => RCCLK (10Mhz)" end="8" id="DCANCLKINUSE" rwaccess="R" width="4"></bitfield>
    
  <bitfield begin="7" description="Current Clock Source Select Mux value for FDCAN CLK 000 => VCLK 001 => RCCLK (10Mhz) 010 => 600Mhz PLL divided clock 011 => 240Mhz PLL divided clock 100 => CPUCLK 101 => RCCLK 110 => REFCLK 111 => RCCLK (10Mhz) " end="4" id="FDCANCLKINUSE" rwaccess="R" width="4"></bitfield>
    
  <bitfield begin="3" description="Current Clock Source Select Mux value for VCLK 000 => CPUCLK (40Mhz or 50 Mhz or 80Mh or 100Mh) 001 => RCCLK (10Mhz) 010 => 600Mhz PLL divided clock 011 => 240Mhz PLL divided clock 101 => RCCLK (10Mhz) 110 => REFCLK 111 => RCCLK (10Mhz)" end="0" id="VCLKINUSE" rwaccess="R" width="4"></bitfield>
  </register>
  
  
  <register acronym="ECCENMSSBSS" id="ECCENMSSBSS" offset="0xE8" width="32">
    
  <bitfield begin="31" description="7:0  :   Writing 0xAD will enable ECC for MSS â€“ BSS mailbox 15:8:   Writing 0xAD will enable ECC for MSS â€“ BSS mailbox 18:16 : Write 3'b111 to clear the Address captured because of ECC error in MSS mailbox for BSS 21:19:  Write 3'b111 to clear the Address captured because of ECC error. In BSS mailbox for MSS" end="0" id="ECCENMSSBSS" rwaccess="RW" width="32"></bitfield>
  </register>
  
  
  <register acronym="ECCCAPTMSSBSS" id="ECCCAPTMSSBSS" offset="0xEC" width="32">
    
  <bitfield begin="31" description="7:0 :   mss_mbox4bss_ecc_fault_address 14:8 : mss_mbox4bss_repaired_bit 23:16 :  bss_mbox4mss_ecc_fault_address 30:24 : bss_mbox4mss_repaired_bit" end="0" id="ECCCAPTMSSBSS" rwaccess="R" width="32"></bitfield>
  </register>
  
  
  <register acronym="CLKDIVCTL2" id="CLKDIVCTL2" offset="0xF0" width="32">
    
  <bitfield begin="7" description="Divide value for QSPI  baud clock selected by field QSPICLKSRCSEL in register CLKSRCSEL0 0000_0000 => div1 0000_0001 => div2 | | 1111_1111 => div256" end="0" id="QSPICLKDIV" rwaccess="RW" width="8"></bitfield>
  </register>
  
  
  <register acronym="SWIRQC" id="SWIRQC" offset="0xFC" width="32">
    
  <bitfield begin="31" description="Write 0XAD to trigger interrupt." end="24" id="SWIRQ5" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="23" description="Not Used.Reserved" end="16" id="SWIRQ5DAT" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="15" description="Write 0XAD to trigger interrupt." end="8" id="SWIRQ4" rwaccess="RW" width="8"></bitfield>
    
  <bitfield begin="7" description="Not Used.Reserved" end="0" id="SWIRQ4DAT" rwaccess="RW" width="8"></bitfield>
  </register>
</module>
