// Copyright (c) 2024 Texas Instruments
// DO NOT EDIT THIS FILE!!!!
// This file was autogenerated using tsInterfaceDef.xdt
// from ds/code/cc_app_studio/Modules/JSONInterface/../AsyncInterface/include/AsyncInterface/Scripting/TaskObjects/Breakpoints.h

import { Address, BreakpointProperty } from "../common";

export interface Breakpoints {

	/**
	 * Adds a breakpoint at the specified location.
	 * The location can be an address, a symbolic expression, or a source file and line number
	 *
	 * @param locationExprOrSrcFile - Either an expression that evaluates to the location or a
	 * source file. The source file can be specified as the full path to the file at compilation
	 * time, or as just the file name. In the latter case, the breakpoint will be set in the first
	 * source file with a matching name.
	 * @param line - The line number. If provided, the first argument must be a source file.
	 * @returns An index identifying the breakpoint created
	 *
	 * @remarks
	 * Will throw if breakpoint location cannot be resolved.
	 *
	 * @example
	 * ```
	 * // Adds a breakpoint at 0x2400
	 * let id = session.breakpoints.add(0x2400n);
	 *
	 * // Adds a breakpoint at symbol 'main'
	 * let id = session.breakpoints.add("main");
	 *
	 * // Adds a breakpoint at an offset from symbol 'main'
	 * let id = session.breakpoints.add("main + 0x8");
	 *
	 * // Adds a breakpoint at line 24 of main.c
	 * let id = session.breakpoints.add("C:/my_project/source/main.c", 24);
	 * // or if we know there is only one main.c
	 * let id = session.breakpoints.add("main.c", 24);
	 * ```
	 */
	add(
		locationExprOrSrcFile: Address | string,
		line?: number,
	): number;

	/**
	 * Add a breakpoint based on properties that have been set in advance.
	 * A set of breakpoint properties can be created using {@link createProperties}
	 *
	 * @param id - The index identifying the set of breakpoint properties
	 * @returns An index identifying the breakpoint created
	 *
	 * @example
	 * ```
	 * const propsId = session.breakpoints.createProperties();
	 * //
	 * // Configure properties...
	 * //
	 * let id = session.breakpoint.addWithProperties( propsId );
	 * ```
	 */
	addWithProperties(id: number): number;

	/**
	 * Removes a breakpoint
	 *
	 * @remarks
	 * Will throw if the breakpoint does not exist
	 *
	 * @param id - The index identifying the breakpoint to be removed
	 *
	 * @example
	 * ```
	 * // Adds and then removes a breakpoint
	 * let id = session.breakpoints.add(0x2400n);
	 * session.breakpoints.remove(id);
	 * ```
	 */
	remove(id: number): void;

	/**
	 * Removes all user created breakpoints
	 *
	 * @example
	 * ```
	 * session.breakpoint.removeAll();
	 * ```
	 */
	removeAll(): void;

	/**
	 * Creates a new set of breakpoint properties. A breakpoint can later be created from this
	 * set of properties using {@link addWithProperties}. Only one breakpoint can be added with
	 * each set of properties. Properties must be configured before calling {@link addWithProperties}.
	 *
	 * @remarks
	 * Will throw if the breakpoint type is not valid
	 *
	 * @param type - The type of breakpoint to create properties for. 0 for a software breakpoint,
	 * 1 for a hardware breakpoint (if supported). Defaults to a software breakpoint.
	 * @returns An index identifying the set of properties
	 *
	 * @example
	 * ```
	 * let id = session.breakpoints.createProperties();
	 * ```
	 *
	 */
	createProperties(type?: number): number;

	/**
	 * Get the value of a specific breakpoint property
	 *
	 * @remarks
	 * Will throw if the property does not exist
	 *
	 * @param id - The index identifying the set of breakpoint properties. This index is obtained from {@link createProperties}.
	 * @param propertyId - The identifier for the desired property
	 * @returns The value of the property
	 *
	 * @example
	 * ```
	 * // Get the value of the Skip Count property. This is an integral value
	 * let skipCount = session.breakpoints.getProperty(id, "Debugger Response.Skip Count");
	 *
	 * // Get the breakpoint's location
	 * let location = session.breakpoints.getProperty(id, "Hardware Configuration.Location");
	 * // location might be an integral value (e.g. 0x1000n)
	 * // it might also be a string if the location is a symbolic expression (e.g. "main + 0x8") or
	 * // a source-based location (e.g. "C:/my_project/Debug/my_project.out@C:/my_project/main.c, line 12")
	 * ```
	 */
	getProperty(
		id: number,
		propertyId: string,
	): boolean | bigint | string;

	/**
	 * Set the value of a specific breakpoint property. You can only configure properties before they
	 * are used to add a breakpoint.
	 *
	 * @param id - The index identifying the set of breakpoint properties. This index is obtained from {@link createProperties}.
	 * @param propertyId - The identifier for the desired property
	 * @param value - The new value of the property
	 *
	 * @remarks
	 * Will throw if the property does not exist, the provided value cannot be set on the property, or if a breakpoint
	 * has already been added with this set of properties.
	 *
	 * @example
	 * ```
	 * // Set the Skip Count property to 5
	 * session.breakpoints.setProperty(id, "Debugger Response.Skip Count", 5);
	 *
	 * // Set the location to a symbolic expression
	 * session.breakpoints.setProperty(id, "Hardware Configuration.Location", "main + 0x8");
	 * ```
	 */
	setProperty(
		id: number,
		propertyId: string,
		value: boolean | bigint | number | string | string,
	): void;

	/**
	 * Set the value of a location property to a source file and line number
	 *
	 * @remarks
	 * Will throw if the property does not exist, is not a location property, or if a breakpoint
	 * has already been added with this set of properties.
	 *
	 * @param id - The index identifying the set of breakpoint properties. This index is obtained from {@link createProperties}.
	 * @param filepath - Like for {@link add} this can be either the full path to the file at compilation
	 * time, or as just the file name. In the latter case, the breakpoint will be set in the first
	 * source file with a matching name.
	 * @param line - The line number
	 *
	 * @example
	 * ```
	 * // Set the location property to line 24 of our project's main.c file
	 * session.breakpoints.setPropertySourceLocation(id, "Hardware Configuration.Location", "C:/my_project/source/main.c", 24);
	 * // or if we know there is only one main.c
	 * session.breakpoints.setPropertySourceLocation(id, "Hardware Configuration.Location", "main.c", 24);
	 * ```
	 */
	setPropertySourceLocation(
		id: number,
		propertyId: string,
		filepath: string,
		line: number,
	): void;

	/**
	 * Get a detailed list of all breakpoint properties currently available in the specified
	 * set of properties. Configuring some properties can cause other properties to become
	 * available or become unavailable.
	 *
	 * @param id - The index identifying the set of breakpoint properties. This index is obtained from {@link createProperties}.
	 * @returns A list of objects which detail each breakpoint property
	 *
	 * @example
	 * ```
	 * let id = session.breakpoints.createProperties();
	 * let properties = session.breakpoints.getDetailedProperties(id);
	 *
	 * // print details of properties
	 * for (const prop of properties) {
	 *   console.log(`${prop.id}:`);
	 *   console.log(`  type: ${prop.type}`);
	 *   console.log(`  description: ${prop.description}`);
	 *   console.log(`  value: ${prop.value}`);
	 *   if (prop.allowedValues) {
	 *     console.log(`  allowedValues: ${JSON.stringify(prop.allowedValues)}`);
	 *   }
	 *   if (prop.allowedRange) {
	 *     console.log(`  allowedRange: [${prop.allowedRange.min}, ${prop.allowedRange.max}]`);
	 *   }
	 *   console.log("");
	 * }
	 * ```
	 */
	getDetailedProperties(id: number): BreakpointProperty[];


}