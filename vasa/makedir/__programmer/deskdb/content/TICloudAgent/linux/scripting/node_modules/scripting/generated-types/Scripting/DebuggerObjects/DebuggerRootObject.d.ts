// Copyright (c) 2024 Texas Instruments
// DO NOT EDIT THIS FILE!!!!
// This file was autogenerated using tsInterfaceDef.xdt
// from ds/code/cc_app_studio/Modules/JSONInterface/../AsyncInterface/include/AsyncInterface/Scripting/DebuggerObjects/DebuggerRootObject.h

import { CoreList } from "../common";

export interface DebuggerRootObject {

	/**
	 * Initializes the debugger with the provided ccxml file.
	 * This will not connect to any cores, but will prepare the debugger internally
	 * for debugging the configuration specified in the file.
	 *
	 * @param ccxmlFile - The ccxml file to be used
	 * @returns The same value as {@link DebuggerRootObject.listCores}
	 *
	 * @example
	 * ```
	 * let { cores, nonDebugCores } = ds.configure("my_configuration.ccxml");
	 * ```
	 *
	 * @remarks
	 * Returns once the debugger is done being configured. This can take some time,
	 * especially the first time it is configured for a particular device.
	 *
	 * Throws if the debugger is already initialized with a particular configuration.
	 * {@link DebuggerRootObject.deconfigure} must be called before configuring for a different configuration.
	 *
	 */
	configure(ccxmlFile: string): CoreList;

	/**
	 * Invalidates the current debugger configuration, so that a different configuration
	 * can be used. This will disconnect from all cores and invalidate any active
	 * debug sessions.
	 *
	 * @example
	 * ```
	 * ds.deconfigure();
	 * ```
	 *
	 * @remarks
	 * Returns once the debugger is done being deconfigured.
	 *
	 * Throws if the debugger is not currently configured.
	 */
	deconfigure(): void;

	/**
	 * Get the names of the currently configured debuggable, and non-debuggable cores.
	 *
	 * @returns The device's cores, split into two lists, one for debuggable cores, and the other for non-debuggable cores.
	 *
	 * @example
	 * ```
	 * // Open a debug session to the first debuggable core
	 * let { cores, nonDebugCores } = ds.listCores();
	 * let session = ds.openSession(cores[0]);
	 * ```
	 */
	listCores(): CoreList;


}