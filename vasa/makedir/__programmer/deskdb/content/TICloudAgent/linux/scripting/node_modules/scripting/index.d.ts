import { DebuggerScripting as DebuggerRootObject, TaskScripting } from "./generated-types/Scripting";
export { initScripting, ScriptingOptions, ScriptingTimeoutError } from "./scriptingWrapper";
/**
 * The scripting interface of the Debugger.
 * Encapsulates all debugger operations that do not operate on a target.
 *
 * To debug a given target, the debugger must be configured using {@link DebuggerRootObject.configure}
 * and then scripting sessions to one or more of the cores on the configured target can
 * be opened with {@link DebuggerScripting.openSession}.
 */
export interface DebuggerScripting extends DebuggerRootObject {
    /**
     * Open a debug session to the specified core on the device for which
     * the debugger is configured.
     *
     * @param corePattern - Can be a string or a regular expression. A debug
     * session will be opened to the first core that matches. Defaults to the
     * first core.
     *
     * @remarks
     * The names of the cores of the current configuration can be obtained from
     * {@link DebuggerRootObject.listCores}.
     *
     * Throws if the debugger is not currently configured, or if no matching
     * core is found.
     *
     * @example
     * ```
     * // Specifying an exact name
     * let session = ds.openSession("Texas Instruments XDS110 USB Debug Probe_0/Cortex_M4_0")
     *
     * // The first core with CortexM or CortexR anywhere in the name
     * let session = ds.openSession("Cortex(M|R)")
     * // equivalently
     * let session = ds.openSession(/Cortex(M|R)/)
     *
     * // The first core
     * let session = ds.openSession()
     * ```
     *
     */
    openSession(corePattern?: string | RegExp): DebugSession;
    /**
     * Configure a timeout duration for all future calls to scripting commands.
     *
     * If a command takes longer to resolve than the timeout duration, a {@link ScriptingTimeoutError}
     * will be thrown.
     *
     * By default, the scripting timeout is disabled.
     *
     * @param ms - New timeout duration in milliseconds. Positive values will enable the timeout, others will disable it.
     *
     * @example
     * ```
     * // Set a 1 second timeout duration
     * ds.setScriptingTimeout(1000);
     *
     * // Disable scripting timeout
     * ds.setScriptingTimeout(0);
     * ```
     */
    setScriptingTimeout(ms: number): void;
    /**
     * Shutdown the debugger
     *
     * @remarks
     * This will deconfigures the debugger and closes the connection to the debugger.
     * No further commands will be allowed. This should be called at the end of a script
     * to terminate the debugger and allow the javascript process to end.
     *
     * @example
     * ```
     * ds.shutdown();
     * ```
     */
    shutdown(): void;
    /**
     * Launch an instance of CCS side-by-side with this instance of the debugger.
     * This allows CCS to display the current state of the target while it is
     * controlled by a script, and/or provide a way of interacting with a scripting
     * session.
     *
     * @remarks
     * This will not work with the Eclipse-based version of CCS.
     *
     * @example
     * ```
     * ds.launchCCS();
     * ```
     */
    launchCCS(): void;
}
/**
 * Encapsulates the debugger operations for the a given target.
 * This interface is returned by {@link DebuggerScripting.openSession}.
 *
 * If the debugger is deconfigured, any current Session objects will automatically be
 * invalidated and will refuse any further operations.
 */
export interface DebugSession extends TaskScripting {
}
export type * as Types from "./generated-types/Scripting/common";
export { Breakpoints } from "./generated-types/Scripting/TaskObjects/Breakpoints";
export { Expressions } from "./generated-types/Scripting/TaskObjects/Expressions";
export { Flash } from "./generated-types/Scripting/TaskObjects/Flash";
export { Memory } from "./generated-types/Scripting/TaskObjects/Memory";
export { Registers } from "./generated-types/Scripting/TaskObjects/Registers";
export { Settings } from "./generated-types/Scripting/TaskObjects/Settings";
export { Target } from "./generated-types/Scripting/TaskObjects/Target";
