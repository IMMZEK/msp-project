// Copyright (c) 2024 Texas Instruments
// DO NOT EDIT THIS FILE!!!!
// This file was autogenerated using tsInterfaceDef.xdt
// from ds/code/cc_app_studio/Modules/JSONInterface/../AsyncInterface/include/AsyncInterface/Scripting/TaskObjects/Flash.h

export interface Flash {

	/**
	 * Determines if flash is supported for the current device.
	 *
	 * @returns true if flash is supported on the current device, false otherwise.
	 *
	 * @example
	 * ```
	 * if (session.flash.isFlashSupported()) {
	 *   // perform flash operations...
	 * }
	 * ```
	 */
	isFlashSupported(): boolean;

	/**
	 * Performs the specified flash operation. A list of all available operations for
	 * the current device can be obtained by calling {@link Flash.listSupportedOperations}.
	 *
	 * @remarks Will throw if the operation is not valid or if flash is not supported
	 * for the current device.
	 *
	 * @param operation - The operation to be performed
	 *
	 * @example
	 * ```
	 * // Erases the flash (assuming the operation is supported and named "Erase")
	 * session.flash.performOperation("Erase");
	 * ```
	 */
	performOperation(operation: string): void;

	/**
	 * Queries the list of flash operations supported for the current device.
	 *
	 * @remarks Will throw if flash is not supported for the current device.
	 *
	 * @return A string containing a list of all the supported operations.
	 *
	 * @example
	 * ```
	 * // Print the list of supported operations
	 * console.log(session.flash.listSupportedOperations());
	 * ```
	 */
	listSupportedOperations(): string;

	/**
	 * Should be called to start a multi-load operation. The flash manager will only erase
	 * the flash on the first program load. Once the Flash Manger receives this call, users
	 * will be free to call {@link Memory.loadProgram} and {@link Memory.loadBinaryProgram}
	 * as many times as needed to write to the Flash
	 *
	 * @example
	 * ```
	 * session.flash.multiLoadStart();
	 *
	 * // multiple program loads...
	 *
	 * session.flash.multiLoadEnd();
	 * ```
	 */
	multiLoadStart(): void;

	/**
	 * Called to finish a multi-load operation. The flash manager will return to default mode
	 * (erasing flash based on user settings).
	 *
	 * @example
	 * ```
	 * session.flash.multiLoadStart();
	 *
	 * // multiple program loads...
	 *
	 * session.flash.multiLoadEnd();
	 * ```
	 */
	multiLoadEnd(): void;


}