// Copyright (c) 2024 Texas Instruments
// DO NOT EDIT THIS FILE!!!!
// This file was autogenerated using common.d.ts.xdt
// from ds/code/cc_app_studio/Modules/JSONInterface/../AsyncInterface/include/AsyncInterface/Scripting/Common.h

/**
 * An address on the target.
 *
 * JavaScript numbers are floating point and can only accurately represent up to 53 bit integers accurately. Since we
 * need to support 64 bit addressable targets, we support, and recommend, specifying addresses as strings or BigInts.
 * Standard Javascript numbers are supported as well, for convenience, but their limitations should be kept in mind.
 *
 * It is recommended that you perform pointer arithmetic using BigInts instead of standard javascript numbers, unless you
 * are sure that the addresses are less than 53 bits wide.
 *
 * @remarks
 * The debugger will accept any string that can be decoded to a number (hex or dec).
 *
 * @example
 * ```
 * // Different ways of specifying an address
 * await session.breakpoints.add(0x2400n); // as a BigInt
 * await session.breakpoints.add("0x2400"); // as a string
 * await session.breakpoints.add(0x2400); // as a standard Javascript number
 * ```
 */
export type Address = bigint | string | number;

/**
 * A memory page on the target. Either the zero based index of the page, or the name of it
 *
 * The program page is always index 0.
 */
export type Page = number | string;

/**
 * A memory location on the target. Specifies an address and, optionally, a memory page.
 *
 * Any address is a valid location. To specify a page, the location must be a numeric string representing the address
 * followed by `@<page name>`, `@pa` (physical access), or `@ipa` (intermediate physical access). If no page
 * is specified, then the default memory page is assumed.
 *
 * @example
 * ```
 * // The following are all valid DSLocations (assuming the existence of pages PROGRAM and DATA)
 * 0x2400n
 * 9216n
 * 0x2400
 * 9216
 * "0x2400"
 * "0x2400@PROGRAM"
 * "9216@PROGRAM"
 * "0x2400@DATA"
 * ```
 */
export type DSLocation = Address | string;

export interface CoreList {

	/**
	 * The currently available debuggable cores
	 */
	cores: string[];

	/**
	 * The currently available non-debuggable cores
	 */
	nonDebugCores: string[];
}

export interface NumericRange {

	min: number;

	max: number;
}

export interface BigNumericRange {

	min: bigint;

	max: bigint;
}

export interface BaseSetting {

	/**
	 * The unique identifier of the setting
	 */
	id: string;

	/**
	 * The name of the setting
	 */
	name: string;
}

export type DebugSetting = BoolSetting | NumericSetting | StringSetting;

export interface BoolSetting extends BaseSetting {

	type: "bool";

	/**
	 * The value of the setting
	 */
	value: boolean;
}

export interface NumericSetting extends BaseSetting {

	type: "numeric";

	/**
	 * The value of the setting
	 */
	value: number;

	/**
	 * If present, indicates that the value must not lie outside the range (both ends are in the range)
	 */
	allowedRange?: NumericRange;
}

export interface StringSetting extends BaseSetting {

	type: "string";

	/**
	 * The value of the setting
	 */
	value: string;

	/**
	 * If present, indicates that the setting's value must be one of these values
	 */
	allowedValues?: string[];
}

export type BreakpointProperty = BoolBreakpointProperty | IntegerBreakpointProperty | LocationBreakpointProperty | StringBreakpointProperty;

export interface BaseBreakpointProperty {

	/**
	  * The unique identifier for the property
	  */
	id: string;

	/**
	 * A description of the property
	 */
	description: string;
}

export interface BoolBreakpointProperty extends BaseBreakpointProperty {

	type: "bool";

	/**
	 * The property's value
	 */
	value: boolean;
}

export interface IntegerBreakpointProperty extends BaseBreakpointProperty {

	type: "int";

	/**
	 * The property's value
	 */
	value: bigint;

	/**
	 * If present, indicates that the value must be one of these values
	 */
	allowedValues?: bigint[];

	/**
	 * If present, indicates that the value must not lie outside the range (both ends are in the range)
	 */
	allowedRange?: BigNumericRange;
}

export interface LocationBreakpointProperty extends BaseBreakpointProperty {

	type: "location";

	/**
	 * The value the location is based on
	 */
	value: bigint | string;
}

export interface StringBreakpointProperty extends BaseBreakpointProperty {

	type: "string";

	/**
	 * The property's value
	 */
	value: string;

	/**
	 * If present, indicates that the value must be one of these values
	 */
	allowedValues?: string[];
}
