export interface Module extends ModulePart {
    close(): void;
    getSubModule(name: string): Module;
}
interface ModulePart {
    addListener(event: string, listener: ModuleEventListener): void;
    removeListener(event: string, listener: ModuleEventListener): void;
    [key: string]: ModulePart | ((...args: any[]) => any);
}
type ModuleEventListener = (data: any) => void;
type TimeoutErrorConstructor = new () => Error;
export declare class ModuleTimeoutError extends Error {
    /** @internal */
    constructor();
}
interface EventGenerator<Name extends string, Data> {
    addListener(event: Name, listener: (args: Data) => void): void;
    removeListener(event: Name, listener: (args: Data) => void): void;
}
export declare function setupSynchronousClient(ccsBase: string, inProcess?: boolean, TimeoutError?: TimeoutErrorConstructor): {
    readonly launchCloudAgent: () => number;
    readonly createModule: (port: number, subProtocol?: string, cleanup?: () => void) => Module;
    readonly waitForEvent: <Name extends string, Data>(obj: EventGenerator<Name, Data>, event: Name) => Data;
    readonly setTimeout: (ms: number) => void;
    readonly shutdown: () => void;
};
export {};
