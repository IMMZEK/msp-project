"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initScripting = exports.ScriptingTimeoutError = void 0;
const syncAgent_1 = require("./syncAgent");
const path = require("path");
const fs = require("fs");
const os_1 = require("os");
const child_process_1 = require("child_process");
// Assume we are in ccs/scripting/node_modules/scripting
const defaultCcsRoot = path.join(__dirname, "..", "..", "..");
/**
 * Exception that is thrown when a scripting command times out.
 *
 * The timeout duration can configured with {@link DebuggerScripting.setScriptingTimeout}
 */
class ScriptingTimeoutError extends Error {
    /** @internal */
    constructor() {
        super("Scripting operation timed out");
    }
}
exports.ScriptingTimeoutError = ScriptingTimeoutError;
function initScripting(options) {
    const ccsBase = path.join(options?.ccsRoot || defaultCcsRoot, "ccs_base");
    const inProcess = options?.inProcess || false;
    const initialTimeout = options?.timeout ?? 0;
    let ccsProcess;
    const syncAgent = (0, syncAgent_1.setupSynchronousClient)(ccsBase, inProcess, ScriptingTimeoutError);
    syncAgent.setTimeout(initialTimeout);
    const cloudAgentPort = syncAgent.launchCloudAgent();
    const cloudAgent = syncAgent.createModule(cloudAgentPort);
    const ds = cloudAgent.getSubModule("DS");
    let ccxmlFile;
    const extraRootFns = {
        configure: (ccxml) => {
            const ret = ds.scripting.configure(ccxml);
            ccxmlFile = ccxml;
            return ret;
        },
        deconfigure: () => {
            ccxmlFile = undefined;
            return ds.scripting.deconfigure();
        },
        openSession: (corePatArg) => {
            const corePat = corePatArg || /.*/;
            const re = corePat instanceof RegExp ? corePat : RegExp(corePat);
            const { cores: debugCores, nonDebugCores } = ds.listCores();
            const cores = [...debugCores, ...nonDebugCores];
            // Exact match takes priority over regex match
            const core = cores.find((core) => core === corePatArg) || cores.find((core) => core.match(re));
            if (core === undefined) {
                throw new Error("No matching core found");
            }
            return ds.getSubModule(core).scripting;
        },
        shutdown: () => {
            try {
                ds.scripting.deconfigure();
            }
            catch {
                // swallow, we might not currently be configured
            }
            if (ccsProcess && ccsProcess.exitCode === null) {
                ccsProcess.kill();
            }
            ds.close();
            syncAgent.shutdown();
        },
        setScriptingTimeout: syncAgent.setTimeout,
        launchCCS: (ccstudioArg) => {
            // If CCS was launched previously, exitCode will null if it is still running
            if (ccsProcess && ccsProcess.exitCode === null) {
                throw new Error("CCS is already running");
            }
            const ext = (0, os_1.platform)() === "win32" ? ".exe" : "";
            const ccstudio = ccstudioArg || path.join(ccsBase, "../theia/ccstudio" + ext);
            if (!fs.existsSync(ccstudio)) {
                if (!ccstudioArg &&
                    !fs.existsSync(path.join(ccsBase, "../theia")) &&
                    fs.existsSync(path.join(ccsBase, "../eclipse"))) {
                    // Looks like we are in a CCS Eclipse install
                    throw new Error(`Cannot find ccs executable '${ccstudio}'. launchCCS is not supported in Eclipse-based CCS.`);
                }
                throw new Error(`Cannot find ccs executable '${ccstudio}'.`);
            }
            const args = [`--agent-port=${cloudAgentPort}`];
            if (ccxmlFile) {
                args.push(`--ccxml=${ccxmlFile}`);
            }
            // IDE will signal with an event when it is ready, block until that event
            const eventBroker = cloudAgent.getSubModule("EventBroker");
            ccsProcess = (0, child_process_1.spawn)(ccstudio, args);
            syncAgent.waitForEvent(eventBroker, "attachedToCloudAgent");
            eventBroker.close();
        }
    };
    return { ...ds.scripting, ...extraRootFns };
}
exports.initScripting = initScripting;
