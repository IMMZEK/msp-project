/* eslint no-console: "off" */
'use strict';
const util = require('./util');
const path = require('path');
const DINFRA_PATH_DEFAULT = `../../dinfra-library/lib/dinfra.js`;
const DCONFIG_PATH_DEFAULT = `../../tirex4-handoff-dconfig.json`;
const APPCONFIG_PATH_DEFAULT = `../../tirex4-handoff-sconfig.json`;
//
// Yargs Command config
//
exports.handler = function (argv) {
    const dbImporter = require('../lib/dbImporter/dbImporter');
    argv.dinfra = util.resolvePath(argv.dinfra);
    argv.dconfig = util.resolvePath(argv.dconfig);
    argv.appconfig = util.resolvePath(argv.appconfig);
    dbImporter
        .dbImport(argv)
        .catch((e) => {
        console.error('An error has occurred during DB import');
        console.error(e);
        process.exit(1);
    })
        .then(() => {
        process.exit(0);
    });
};
exports.command = `${path.basename(__filename, '.js')} [options]`;
exports.describe =
    'Import the package metadata and content into the dinfra database. The source of the metadata are the JSON DB files generated by the DB Builder, and the source of the content is the filesystem folder containg the package files. The location of the JSON DB files and the content are taken from the appconfig properties dbPath and contentPath. The dinfra database to import to is specified in the dconfig file.';
exports.builder = {
    dinfra: {
        describe: 'path to dinfra.js (relative or absolute)',
        demandOption: false,
        default: DINFRA_PATH_DEFAULT
    },
    dconfig: {
        describe: 'path to dconfig file (relative or absolute)',
        demandOption: false,
        default: DCONFIG_PATH_DEFAULT
    },
    appconfig: {
        describe: 'path to the app config file (relative or absolute)',
        demandOption: false,
        default: APPCONFIG_PATH_DEFAULT
    },
    verboseLogging: {
        describe: 'false: only warnings and errors will be logged, true: all imported and removed files will be logged too',
        boolean: true,
        default: false
    },
    quiet: {
        describe: 'minimum logging',
        boolean: true,
        default: false
    },
    skipContent: {
        describe: 'only import the package metadata, not the content',
        boolean: true,
        default: false
    },
    skipMetadata: {
        describe: 'only import the package content, not the metadata',
        boolean: true,
        default: false
    },
    switchTablePrefix: {
        describe: 'Do not import anything, just switch the live table prefix tirex0 <-> tirex1. Afterwards restart tirex to start using the new table prefix.',
        boolean: true,
        default: false
    },
    dryRun: {
        describe: 'Outputs the table prefix and list of packages that would be updated in the metadata. Validates the content with strictValidation. No actual import is performed.',
        boolean: true,
        default: false
    },
    // Metadata import only
    dbTablePrefix: {
        describe: 'Metadata Import Only: Override the DB table prefix to use (default is the one set in appconfig or app_default.json)'
    },
    incremental: {
        describe: 'Only import packages that were added or replaced, and delete packages no longer present in the last refresh',
        boolean: true,
        default: false
    },
    noDbCopies: {
        describe: 'Prevents creation of JSON DB mirror copies needed for incremental import. Workaround for REX-3147 to conserve limited disk space on production. This will effectively disable incremental import.',
        boolean: true,
        default: false
    },
    include: {
        describe: 'Metadata Import Only: if not specified all packages will be included; otherwise only the list of specified package UIDs will be included; either specify a JSON file or list packages directly, e.g. --include msp430ware__3.60.00.10 msp430ware__3.80.02.10; any packages specified in --exclude will be removed from the included list.',
        array: true
    },
    exclude: {
        describe: 'Metadata Import Only: list of package UIDs to exclude; either specify a JSON file or list packages directly, e.g. --exclude msp430ware__3.60.00.10 msp430ware__3.80.02.10',
        array: true
    },
    notify_forTestingOnly: {
        describe: 'Metadata Import Only: Send update notification event',
        boolean: true,
        default: false
    },
    // Content import only
    appendOnly: {
        describe: 'Content Import Only: false: resync the content to file system (deleting content that no longer exists), true: only add content',
        boolean: true,
        default: false
    },
    strictValidation: {
        describe: 'Content Import Only: false: symbolic links will be skipped and a warning logged, true: if a symbolic link is detected nothing will be imported',
        boolean: true,
        default: false
    },
    contentConfigFile: {
        describe: 'Content Import Only: path to a file containing a list of folder names under the content path to include in the update, otherwise all folders in the content path will be included'
    }
};
